
nucleo-h753-state-detect.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009070  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004cc  08009310  08009310  0000a310  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080097dc  080097dc  0000a7dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080097e4  080097e4  0000a7e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080097e8  080097e8  0000a7e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001f8  24000000  080097ec  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000390  240001f8  080099e4  0000b1f8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000588  080099e4  0000b588  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000b1f8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00018dd7  00000000  00000000  0000b226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003037  00000000  00000000  00023ffd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000012b8  00000000  00000000  00027038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000e75  00000000  00000000  000282f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000043da  00000000  00000000  00029165  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00018674  00000000  00000000  0002d53f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001687ca  00000000  00000000  00045bb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001ae37d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005c00  00000000  00000000  001ae3c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000074  00000000  00000000  001b3fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001f8 	.word	0x240001f8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080092f8 	.word	0x080092f8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001fc 	.word	0x240001fc
 80002dc:	080092f8 	.word	0x080092f8

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <FlightState_Init>:
static uint16_t consecutiveReadingsLanding = 0;
static float previousAltitude = 0.0f;


/* Init flight state machine */
void FlightState_Init(void) {
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
    currentState = FLIGHT_STATE_GROUND_IDLE;
 80006c0:	4b05      	ldr	r3, [pc, #20]	@ (80006d8 <FlightState_Init+0x1c>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	701a      	strb	r2, [r3, #0]
    groundAltitude = IMU_CalculateGroundAltitude();
 80006c6:	f000 f8ed 	bl	80008a4 <IMU_CalculateGroundAltitude>
 80006ca:	eef0 7a40 	vmov.f32	s15, s0
 80006ce:	4b03      	ldr	r3, [pc, #12]	@ (80006dc <FlightState_Init+0x20>)
 80006d0:	edc3 7a00 	vstr	s15, [r3]

}
 80006d4:	bf00      	nop
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	24000214 	.word	0x24000214
 80006dc:	24000218 	.word	0x24000218

080006e0 <FlightState_Update>:

void FlightState_Update(void) {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b088      	sub	sp, #32
 80006e4:	af00      	add	r7, sp, #0
    IMU_Data_t imuData = IMU_GetLatestData();
 80006e6:	f000 f8e6 	bl	80008b6 <IMU_GetLatestData>
 80006ea:	eeb0 6a40 	vmov.f32	s12, s0
 80006ee:	eef0 6a60 	vmov.f32	s13, s1
 80006f2:	eeb0 7a41 	vmov.f32	s14, s2
 80006f6:	eef0 7a61 	vmov.f32	s15, s3
 80006fa:	ed87 6a03 	vstr	s12, [r7, #12]
 80006fe:	edc7 6a04 	vstr	s13, [r7, #16]
 8000702:	ed87 7a05 	vstr	s14, [r7, #20]
 8000706:	edc7 7a06 	vstr	s15, [r7, #24]

    float altitude = imuData.altitude;
 800070a:	69bb      	ldr	r3, [r7, #24]
 800070c:	61fb      	str	r3, [r7, #28]
    float filteredAltitude, filteredVelocity;

    KalmanFilter_Update(altitude, &filteredAltitude, &filteredVelocity);
 800070e:	1d3a      	adds	r2, r7, #4
 8000710:	f107 0308 	add.w	r3, r7, #8
 8000714:	4611      	mov	r1, r2
 8000716:	4618      	mov	r0, r3
 8000718:	ed97 0a07 	vldr	s0, [r7, #28]
 800071c:	f000 f9d6 	bl	8000acc <KalmanFilter_Update>

    /*Ground Logic*/
    if (currentState == FLIGHT_STATE_GROUND_IDLE) {
 8000720:	4b50      	ldr	r3, [pc, #320]	@ (8000864 <FlightState_Update+0x184>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d120      	bne.n	800076a <FlightState_Update+0x8a>
        if (fabsf(imuData.accelX) > LAUNCH_ACCELERATION_THRESHOLD) {
 8000728:	edd7 7a03 	vldr	s15, [r7, #12]
 800072c:	eef0 7ae7 	vabs.f32	s15, s15
 8000730:	eeb7 7a04 	vmov.f32	s14, #116	@ 0x3fa00000  1.250
 8000734:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800073c:	dd06      	ble.n	800074c <FlightState_Update+0x6c>
            consecutiveReadingsLaunch++;
 800073e:	4b4a      	ldr	r3, [pc, #296]	@ (8000868 <FlightState_Update+0x188>)
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	3301      	adds	r3, #1
 8000744:	b2da      	uxtb	r2, r3
 8000746:	4b48      	ldr	r3, [pc, #288]	@ (8000868 <FlightState_Update+0x188>)
 8000748:	701a      	strb	r2, [r3, #0]
 800074a:	e002      	b.n	8000752 <FlightState_Update+0x72>
        } else {
            consecutiveReadingsLaunch = 0;
 800074c:	4b46      	ldr	r3, [pc, #280]	@ (8000868 <FlightState_Update+0x188>)
 800074e:	2200      	movs	r2, #0
 8000750:	701a      	strb	r2, [r3, #0]
        }

        if (consecutiveReadingsLaunch >= LAUNCH_DETECTION_COUNT) {
 8000752:	4b45      	ldr	r3, [pc, #276]	@ (8000868 <FlightState_Update+0x188>)
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	2b09      	cmp	r3, #9
 8000758:	d907      	bls.n	800076a <FlightState_Update+0x8a>
            currentState = FLIGHT_STATE_POWERED_FLIGHT;
 800075a:	4b42      	ldr	r3, [pc, #264]	@ (8000864 <FlightState_Update+0x184>)
 800075c:	2201      	movs	r2, #1
 800075e:	701a      	strb	r2, [r3, #0]
            launchTime = HAL_GetTick(); // or whatever function polls the RTS on the STM32
 8000760:	f001 fae8 	bl	8001d34 <HAL_GetTick>
 8000764:	4603      	mov	r3, r0
 8000766:	4a41      	ldr	r2, [pc, #260]	@ (800086c <FlightState_Update+0x18c>)
 8000768:	6013      	str	r3, [r2, #0]
            // DataLogger_LogEvent("Launch Detected");
        }
    }

    /*Apogee Detection*/
    if (currentState == FLIGHT_STATE_POWERED_FLIGHT || currentState == FLIGHT_STATE_UNPOWERED_FLIGHT) {
 800076a:	4b3e      	ldr	r3, [pc, #248]	@ (8000864 <FlightState_Update+0x184>)
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	2b01      	cmp	r3, #1
 8000770:	d003      	beq.n	800077a <FlightState_Update+0x9a>
 8000772:	4b3c      	ldr	r3, [pc, #240]	@ (8000864 <FlightState_Update+0x184>)
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	2b02      	cmp	r3, #2
 8000778:	d13d      	bne.n	80007f6 <FlightState_Update+0x116>

        /*State Change from powered to unpowered ascent*/
        if (currentState == FLIGHT_STATE_POWERED_FLIGHT &&
 800077a:	4b3a      	ldr	r3, [pc, #232]	@ (8000864 <FlightState_Update+0x184>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	2b01      	cmp	r3, #1
 8000780:	d10b      	bne.n	800079a <FlightState_Update+0xba>
            (HAL_GetTick() - launchTime) > MOTOR_BURN_TIME_MS)
 8000782:	f001 fad7 	bl	8001d34 <HAL_GetTick>
 8000786:	4602      	mov	r2, r0
 8000788:	4b38      	ldr	r3, [pc, #224]	@ (800086c <FlightState_Update+0x18c>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	1ad3      	subs	r3, r2, r3
        if (currentState == FLIGHT_STATE_POWERED_FLIGHT &&
 800078e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000792:	d902      	bls.n	800079a <FlightState_Update+0xba>
            currentState = FLIGHT_STATE_UNPOWERED_FLIGHT;
 8000794:	4b33      	ldr	r3, [pc, #204]	@ (8000864 <FlightState_Update+0x184>)
 8000796:	2202      	movs	r2, #2
 8000798:	701a      	strb	r2, [r3, #0]
            //DataLogger_LogEvent("Motor Burnout")

        /*Check for Apogee*/
        if (filteredVelocity < 0.0f && altitude > (groundAltitude + MIN_ALTITUDE_FOR_APOGEE)) {
 800079a:	edd7 7a01 	vldr	s15, [r7, #4]
 800079e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80007a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007a6:	d514      	bpl.n	80007d2 <FlightState_Update+0xf2>
 80007a8:	4b31      	ldr	r3, [pc, #196]	@ (8000870 <FlightState_Update+0x190>)
 80007aa:	edd3 7a00 	vldr	s15, [r3]
 80007ae:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8000874 <FlightState_Update+0x194>
 80007b2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80007b6:	ed97 7a07 	vldr	s14, [r7, #28]
 80007ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80007be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007c2:	dd06      	ble.n	80007d2 <FlightState_Update+0xf2>
            consecutiveReadingsApogee++;
 80007c4:	4b2c      	ldr	r3, [pc, #176]	@ (8000878 <FlightState_Update+0x198>)
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	3301      	adds	r3, #1
 80007ca:	b2da      	uxtb	r2, r3
 80007cc:	4b2a      	ldr	r3, [pc, #168]	@ (8000878 <FlightState_Update+0x198>)
 80007ce:	701a      	strb	r2, [r3, #0]
 80007d0:	e002      	b.n	80007d8 <FlightState_Update+0xf8>
        } else {
            consecutiveReadingsApogee = 0;
 80007d2:	4b29      	ldr	r3, [pc, #164]	@ (8000878 <FlightState_Update+0x198>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	701a      	strb	r2, [r3, #0]
        }

        if (consecutiveReadingsApogee >= APOGEE_DETECTION_COUNT) {
 80007d8:	4b27      	ldr	r3, [pc, #156]	@ (8000878 <FlightState_Update+0x198>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	2b31      	cmp	r3, #49	@ 0x31
 80007de:	d90a      	bls.n	80007f6 <FlightState_Update+0x116>
            currentState = FLIGHT_STATE_DESCENT;
 80007e0:	4b20      	ldr	r3, [pc, #128]	@ (8000864 <FlightState_Update+0x184>)
 80007e2:	2203      	movs	r2, #3
 80007e4:	701a      	strb	r2, [r3, #0]
            apogeeTime = HAL_GetTick();
 80007e6:	f001 faa5 	bl	8001d34 <HAL_GetTick>
 80007ea:	4603      	mov	r3, r0
 80007ec:	4a23      	ldr	r2, [pc, #140]	@ (800087c <FlightState_Update+0x19c>)
 80007ee:	6013      	str	r3, [r2, #0]
            //DataLogger_LogEvent("Apogee Detected");
            previousAltitude = altitude;
 80007f0:	4a23      	ldr	r2, [pc, #140]	@ (8000880 <FlightState_Update+0x1a0>)
 80007f2:	69fb      	ldr	r3, [r7, #28]
 80007f4:	6013      	str	r3, [r2, #0]
        }
    }

    /*Landing Detection*/
    if (currentState == FLIGHT_STATE_DESCENT) {
 80007f6:	4b1b      	ldr	r3, [pc, #108]	@ (8000864 <FlightState_Update+0x184>)
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	2b03      	cmp	r3, #3
 80007fc:	d12e      	bne.n	800085c <FlightState_Update+0x17c>
        //     currentState = FLIGHT_STATE_MAIN_DESCENT;
        //     //DataLogger_LogEvent("Main Descent Detected")
        // }

        /*Landed State Condition - No New Altitude in (x) Cycles. Altitude within delta of launch altitude.*/
        if (altitude < previousAltitude && fabsf(altitude - groundAltitude) < LAUNCH_LANDING_ALT_DELTA) {
 80007fe:	4b20      	ldr	r3, [pc, #128]	@ (8000880 <FlightState_Update+0x1a0>)
 8000800:	edd3 7a00 	vldr	s15, [r3]
 8000804:	ed97 7a07 	vldr	s14, [r7, #28]
 8000808:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800080c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000810:	d516      	bpl.n	8000840 <FlightState_Update+0x160>
 8000812:	4b17      	ldr	r3, [pc, #92]	@ (8000870 <FlightState_Update+0x190>)
 8000814:	edd3 7a00 	vldr	s15, [r3]
 8000818:	ed97 7a07 	vldr	s14, [r7, #28]
 800081c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000820:	eef0 7ae7 	vabs.f32	s15, s15
 8000824:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8000884 <FlightState_Update+0x1a4>
 8000828:	eef4 7ac7 	vcmpe.f32	s15, s14
 800082c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000830:	d506      	bpl.n	8000840 <FlightState_Update+0x160>
            previousAltitude = altitude;
 8000832:	4a13      	ldr	r2, [pc, #76]	@ (8000880 <FlightState_Update+0x1a0>)
 8000834:	69fb      	ldr	r3, [r7, #28]
 8000836:	6013      	str	r3, [r2, #0]
            consecutiveReadingsLanding = 0;
 8000838:	4b13      	ldr	r3, [pc, #76]	@ (8000888 <FlightState_Update+0x1a8>)
 800083a:	2200      	movs	r2, #0
 800083c:	801a      	strh	r2, [r3, #0]
 800083e:	e005      	b.n	800084c <FlightState_Update+0x16c>
        } else {
            consecutiveReadingsLanding++;
 8000840:	4b11      	ldr	r3, [pc, #68]	@ (8000888 <FlightState_Update+0x1a8>)
 8000842:	881b      	ldrh	r3, [r3, #0]
 8000844:	3301      	adds	r3, #1
 8000846:	b29a      	uxth	r2, r3
 8000848:	4b0f      	ldr	r3, [pc, #60]	@ (8000888 <FlightState_Update+0x1a8>)
 800084a:	801a      	strh	r2, [r3, #0]
        }

        if (consecutiveReadingsLanding > LANDING_DETECTION_COUNT) {
 800084c:	4b0e      	ldr	r3, [pc, #56]	@ (8000888 <FlightState_Update+0x1a8>)
 800084e:	881b      	ldrh	r3, [r3, #0]
 8000850:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000854:	d902      	bls.n	800085c <FlightState_Update+0x17c>
            currentState = FLIGHT_STATE_LANDED;
 8000856:	4b03      	ldr	r3, [pc, #12]	@ (8000864 <FlightState_Update+0x184>)
 8000858:	2204      	movs	r2, #4
 800085a:	701a      	strb	r2, [r3, #0]
            // PayloadActivate();
        }
    }

//    DataLogger_LogState(currentState, altitude, filteredAltitude, filteredVelocity);
}
 800085c:	bf00      	nop
 800085e:	3720      	adds	r7, #32
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	24000214 	.word	0x24000214
 8000868:	24000224 	.word	0x24000224
 800086c:	2400021c 	.word	0x2400021c
 8000870:	24000218 	.word	0x24000218
 8000874:	42c80000 	.word	0x42c80000
 8000878:	24000225 	.word	0x24000225
 800087c:	24000220 	.word	0x24000220
 8000880:	24000228 	.word	0x24000228
 8000884:	42480000 	.word	0x42480000
 8000888:	24000226 	.word	0x24000226

0800088c <FlightState_GetCurrent>:

/* Get the current flight state */
FlightState_t FlightState_GetCurrent(void) {
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
    return currentState;
 8000890:	4b03      	ldr	r3, [pc, #12]	@ (80008a0 <FlightState_GetCurrent+0x14>)
 8000892:	781b      	ldrb	r3, [r3, #0]
}
 8000894:	4618      	mov	r0, r3
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	24000214 	.word	0x24000214

080008a4 <IMU_CalculateGroundAltitude>:
#include "imu.h"
//#include "imu_real.h"
#include "imu_source.h"

/* Calculate ground altitude */
float IMU_CalculateGroundAltitude(void) {
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
        // Use the simulated ground altitude
//        extern float IMU_Sim_CalculateGroundAltitude(void);
//        return IMU_Sim_CalculateGroundAltitude();
//    }
	extern float IMU_Sim_CalculateGroundAltitude(void);
	return IMU_Sim_CalculateGroundAltitude();
 80008a8:	f000 f8d8 	bl	8000a5c <IMU_Sim_CalculateGroundAltitude>
 80008ac:	eef0 7a40 	vmov.f32	s15, s0
}
 80008b0:	eeb0 0a67 	vmov.f32	s0, s15
 80008b4:	bd80      	pop	{r7, pc}

080008b6 <IMU_GetLatestData>:

/* Get latest IMU data from selected source */
IMU_Data_t IMU_GetLatestData(void) {
 80008b6:	b580      	push	{r7, lr}
 80008b8:	b088      	sub	sp, #32
 80008ba:	af00      	add	r7, sp, #0
//        // Use the simulated data
//        extern IMU_Data_t IMU_Sim_GetLatestData(void);
//        return IMU_Sim_GetLatestData();
//    }
    extern IMU_Data_t IMU_Sim_GetLatestData(void);
	return IMU_Sim_GetLatestData();
 80008bc:	f000 f8e2 	bl	8000a84 <IMU_Sim_GetLatestData>
 80008c0:	eeb0 6a40 	vmov.f32	s12, s0
 80008c4:	eef0 6a60 	vmov.f32	s13, s1
 80008c8:	eeb0 7a41 	vmov.f32	s14, s2
 80008cc:	eef0 7a61 	vmov.f32	s15, s3
 80008d0:	ed87 6a04 	vstr	s12, [r7, #16]
 80008d4:	edc7 6a05 	vstr	s13, [r7, #20]
 80008d8:	ed87 7a06 	vstr	s14, [r7, #24]
 80008dc:	edc7 7a07 	vstr	s15, [r7, #28]
 80008e0:	6938      	ldr	r0, [r7, #16]
 80008e2:	6979      	ldr	r1, [r7, #20]
 80008e4:	69ba      	ldr	r2, [r7, #24]
 80008e6:	69fb      	ldr	r3, [r7, #28]
 80008e8:	ee06 0a10 	vmov	s12, r0
 80008ec:	ee06 1a90 	vmov	s13, r1
 80008f0:	ee07 2a10 	vmov	s14, r2
 80008f4:	ee07 3a90 	vmov	s15, r3
}
 80008f8:	eeb0 0a46 	vmov.f32	s0, s12
 80008fc:	eef0 0a66 	vmov.f32	s1, s13
 8000900:	eeb0 1a47 	vmov.f32	s2, s14
 8000904:	eef0 1a67 	vmov.f32	s3, s15
 8000908:	3720      	adds	r7, #32
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
	...

08000910 <IMU_Sim_Tick_200Hz>:
// simple scripted profile: PAD 2s → POWER 1s → COAST 3s → DESCENT 5s → LANDED
static volatile IMU_Data_t g_latest;
volatile uint32_t t_ms = 0;
static float ground_ft = 0.0f;

void IMU_Sim_Tick_200Hz(void) {
 8000910:	b480      	push	{r7}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0
  t_ms += 5;
 8000916:	4b47      	ldr	r3, [pc, #284]	@ (8000a34 <IMU_Sim_Tick_200Hz+0x124>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	3305      	adds	r3, #5
 800091c:	4a45      	ldr	r2, [pc, #276]	@ (8000a34 <IMU_Sim_Tick_200Hz+0x124>)
 800091e:	6013      	str	r3, [r2, #0]
  float ax_g = 0.0f, alt_ft = ground_ft;
 8000920:	f04f 0300 	mov.w	r3, #0
 8000924:	607b      	str	r3, [r7, #4]
 8000926:	4b44      	ldr	r3, [pc, #272]	@ (8000a38 <IMU_Sim_Tick_200Hz+0x128>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	603b      	str	r3, [r7, #0]

  if (t_ms < 2000) {                // PAD
 800092c:	4b41      	ldr	r3, [pc, #260]	@ (8000a34 <IMU_Sim_Tick_200Hz+0x124>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000934:	d206      	bcs.n	8000944 <IMU_Sim_Tick_200Hz+0x34>
    ax_g = 0.0f;  alt_ft = ground_ft;
 8000936:	f04f 0300 	mov.w	r3, #0
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	4b3e      	ldr	r3, [pc, #248]	@ (8000a38 <IMU_Sim_Tick_200Hz+0x128>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	603b      	str	r3, [r7, #0]
 8000942:	e063      	b.n	8000a0c <IMU_Sim_Tick_200Hz+0xfc>
  } else if (t_ms < 3000) {         // POWERED
 8000944:	4b3b      	ldr	r3, [pc, #236]	@ (8000a34 <IMU_Sim_Tick_200Hz+0x124>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 800094c:	4293      	cmp	r3, r2
 800094e:	d81e      	bhi.n	800098e <IMU_Sim_Tick_200Hz+0x7e>
    ax_g = 2.0f;  alt_ft = ground_ft + 200.0f + 50.0f * ((t_ms-2000)/1000.0f);
 8000950:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000954:	607b      	str	r3, [r7, #4]
 8000956:	4b38      	ldr	r3, [pc, #224]	@ (8000a38 <IMU_Sim_Tick_200Hz+0x128>)
 8000958:	edd3 7a00 	vldr	s15, [r3]
 800095c:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8000a3c <IMU_Sim_Tick_200Hz+0x12c>
 8000960:	ee37 7a87 	vadd.f32	s14, s15, s14
 8000964:	4b33      	ldr	r3, [pc, #204]	@ (8000a34 <IMU_Sim_Tick_200Hz+0x124>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 800096c:	ee07 3a90 	vmov	s15, r3
 8000970:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000974:	ed9f 6a32 	vldr	s12, [pc, #200]	@ 8000a40 <IMU_Sim_Tick_200Hz+0x130>
 8000978:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800097c:	eddf 6a31 	vldr	s13, [pc, #196]	@ 8000a44 <IMU_Sim_Tick_200Hz+0x134>
 8000980:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000984:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000988:	edc7 7a00 	vstr	s15, [r7]
 800098c:	e03e      	b.n	8000a0c <IMU_Sim_Tick_200Hz+0xfc>
  } else if (t_ms < 6000) {         // UNPOWERED/COAST
 800098e:	4b29      	ldr	r3, [pc, #164]	@ (8000a34 <IMU_Sim_Tick_200Hz+0x124>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	f241 726f 	movw	r2, #5999	@ 0x176f
 8000996:	4293      	cmp	r3, r2
 8000998:	d80c      	bhi.n	80009b4 <IMU_Sim_Tick_200Hz+0xa4>
    ax_g = 0.0f;  alt_ft = ground_ft + 300.0f;
 800099a:	f04f 0300 	mov.w	r3, #0
 800099e:	607b      	str	r3, [r7, #4]
 80009a0:	4b25      	ldr	r3, [pc, #148]	@ (8000a38 <IMU_Sim_Tick_200Hz+0x128>)
 80009a2:	edd3 7a00 	vldr	s15, [r3]
 80009a6:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8000a48 <IMU_Sim_Tick_200Hz+0x138>
 80009aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80009ae:	edc7 7a00 	vstr	s15, [r7]
 80009b2:	e02b      	b.n	8000a0c <IMU_Sim_Tick_200Hz+0xfc>
  } else if (t_ms < 11000) {        // DESCENT
 80009b4:	4b1f      	ldr	r3, [pc, #124]	@ (8000a34 <IMU_Sim_Tick_200Hz+0x124>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	f642 22f7 	movw	r2, #10999	@ 0x2af7
 80009bc:	4293      	cmp	r3, r2
 80009be:	d819      	bhi.n	80009f4 <IMU_Sim_Tick_200Hz+0xe4>
    ax_g = -0.2f; alt_ft = ground_ft + 300.0f - 0.05f*(t_ms-6000);
 80009c0:	4b22      	ldr	r3, [pc, #136]	@ (8000a4c <IMU_Sim_Tick_200Hz+0x13c>)
 80009c2:	607b      	str	r3, [r7, #4]
 80009c4:	4b1c      	ldr	r3, [pc, #112]	@ (8000a38 <IMU_Sim_Tick_200Hz+0x128>)
 80009c6:	edd3 7a00 	vldr	s15, [r3]
 80009ca:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8000a48 <IMU_Sim_Tick_200Hz+0x138>
 80009ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80009d2:	4b18      	ldr	r3, [pc, #96]	@ (8000a34 <IMU_Sim_Tick_200Hz+0x124>)
 80009d4:	681a      	ldr	r2, [r3, #0]
 80009d6:	4b1e      	ldr	r3, [pc, #120]	@ (8000a50 <IMU_Sim_Tick_200Hz+0x140>)
 80009d8:	4413      	add	r3, r2
 80009da:	ee07 3a90 	vmov	s15, r3
 80009de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80009e2:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 8000a54 <IMU_Sim_Tick_200Hz+0x144>
 80009e6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80009ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80009ee:	edc7 7a00 	vstr	s15, [r7]
 80009f2:	e00b      	b.n	8000a0c <IMU_Sim_Tick_200Hz+0xfc>
  } else {                          // LANDED
    ax_g = 0.0f;  alt_ft = ground_ft + 5.0f;
 80009f4:	f04f 0300 	mov.w	r3, #0
 80009f8:	607b      	str	r3, [r7, #4]
 80009fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000a38 <IMU_Sim_Tick_200Hz+0x128>)
 80009fc:	edd3 7a00 	vldr	s15, [r3]
 8000a00:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8000a04:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000a08:	edc7 7a00 	vstr	s15, [r7]
  }

  g_latest.accelX = ax_g;           // we only use accelX for launch detection in legacy code
 8000a0c:	4a12      	ldr	r2, [pc, #72]	@ (8000a58 <IMU_Sim_Tick_200Hz+0x148>)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	6013      	str	r3, [r2, #0]
  g_latest.accelY = 0.0f;
 8000a12:	4b11      	ldr	r3, [pc, #68]	@ (8000a58 <IMU_Sim_Tick_200Hz+0x148>)
 8000a14:	f04f 0200 	mov.w	r2, #0
 8000a18:	605a      	str	r2, [r3, #4]
  g_latest.accelZ = 1.0f;           // keep ~1g if you need it later
 8000a1a:	4b0f      	ldr	r3, [pc, #60]	@ (8000a58 <IMU_Sim_Tick_200Hz+0x148>)
 8000a1c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000a20:	609a      	str	r2, [r3, #8]
  g_latest.altitude = alt_ft;
 8000a22:	4a0d      	ldr	r2, [pc, #52]	@ (8000a58 <IMU_Sim_Tick_200Hz+0x148>)
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	60d3      	str	r3, [r2, #12]
}
 8000a28:	bf00      	nop
 8000a2a:	370c      	adds	r7, #12
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr
 8000a34:	2400023c 	.word	0x2400023c
 8000a38:	24000240 	.word	0x24000240
 8000a3c:	43480000 	.word	0x43480000
 8000a40:	447a0000 	.word	0x447a0000
 8000a44:	42480000 	.word	0x42480000
 8000a48:	43960000 	.word	0x43960000
 8000a4c:	be4ccccd 	.word	0xbe4ccccd
 8000a50:	ffffe890 	.word	0xffffe890
 8000a54:	3d4ccccd 	.word	0x3d4ccccd
 8000a58:	2400022c 	.word	0x2400022c

08000a5c <IMU_Sim_CalculateGroundAltitude>:

float IMU_Sim_CalculateGroundAltitude(void) { ground_ft = 500.0f; return ground_ft; }
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
 8000a60:	4b06      	ldr	r3, [pc, #24]	@ (8000a7c <IMU_Sim_CalculateGroundAltitude+0x20>)
 8000a62:	4a07      	ldr	r2, [pc, #28]	@ (8000a80 <IMU_Sim_CalculateGroundAltitude+0x24>)
 8000a64:	601a      	str	r2, [r3, #0]
 8000a66:	4b05      	ldr	r3, [pc, #20]	@ (8000a7c <IMU_Sim_CalculateGroundAltitude+0x20>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	ee07 3a90 	vmov	s15, r3
 8000a6e:	eeb0 0a67 	vmov.f32	s0, s15
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	24000240 	.word	0x24000240
 8000a80:	43fa0000 	.word	0x43fa0000

08000a84 <IMU_Sim_GetLatestData>:
IMU_Data_t IMU_Sim_GetLatestData(void) { return g_latest; }
 8000a84:	b490      	push	{r4, r7}
 8000a86:	b088      	sub	sp, #32
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ac8 <IMU_Sim_GetLatestData+0x44>)
 8000a8c:	f107 0410 	add.w	r4, r7, #16
 8000a90:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a92:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000a96:	6938      	ldr	r0, [r7, #16]
 8000a98:	6979      	ldr	r1, [r7, #20]
 8000a9a:	69ba      	ldr	r2, [r7, #24]
 8000a9c:	69fb      	ldr	r3, [r7, #28]
 8000a9e:	ee06 0a10 	vmov	s12, r0
 8000aa2:	ee06 1a90 	vmov	s13, r1
 8000aa6:	ee07 2a10 	vmov	s14, r2
 8000aaa:	ee07 3a90 	vmov	s15, r3
 8000aae:	eeb0 0a46 	vmov.f32	s0, s12
 8000ab2:	eef0 0a66 	vmov.f32	s1, s13
 8000ab6:	eeb0 1a47 	vmov.f32	s2, s14
 8000aba:	eef0 1a67 	vmov.f32	s3, s15
 8000abe:	3720      	adds	r7, #32
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bc90      	pop	{r4, r7}
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	2400022c 	.word	0x2400022c

08000acc <KalmanFilter_Update>:
 */


#include "kalman.h"
static float prev_alt = 0.0f;
void KalmanFilter_Update(float z, float* zf, float* vf) {
 8000acc:	b480      	push	{r7}
 8000ace:	b085      	sub	sp, #20
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	ed87 0a03 	vstr	s0, [r7, #12]
 8000ad6:	60b8      	str	r0, [r7, #8]
 8000ad8:	6079      	str	r1, [r7, #4]
  static int first = 1;
  if (first) { prev_alt = z; first = 0; }
 8000ada:	4b19      	ldr	r3, [pc, #100]	@ (8000b40 <KalmanFilter_Update+0x74>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d005      	beq.n	8000aee <KalmanFilter_Update+0x22>
 8000ae2:	4a18      	ldr	r2, [pc, #96]	@ (8000b44 <KalmanFilter_Update+0x78>)
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	6013      	str	r3, [r2, #0]
 8000ae8:	4b15      	ldr	r3, [pc, #84]	@ (8000b40 <KalmanFilter_Update+0x74>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	601a      	str	r2, [r3, #0]
  *zf = 0.8f*prev_alt + 0.2f*z;      // light LPF
 8000aee:	4b15      	ldr	r3, [pc, #84]	@ (8000b44 <KalmanFilter_Update+0x78>)
 8000af0:	edd3 7a00 	vldr	s15, [r3]
 8000af4:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8000b48 <KalmanFilter_Update+0x7c>
 8000af8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000afc:	edd7 7a03 	vldr	s15, [r7, #12]
 8000b00:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8000b4c <KalmanFilter_Update+0x80>
 8000b04:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000b08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	edc3 7a00 	vstr	s15, [r3]
  *vf = (z - prev_alt) * 6.5617f;     // fake “ft/s” from delta(ft)/0.05s (≈ *20), scaled a bit calmer
 8000b12:	4b0c      	ldr	r3, [pc, #48]	@ (8000b44 <KalmanFilter_Update+0x78>)
 8000b14:	edd3 7a00 	vldr	s15, [r3]
 8000b18:	ed97 7a03 	vldr	s14, [r7, #12]
 8000b1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b20:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8000b50 <KalmanFilter_Update+0x84>
 8000b24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	edc3 7a00 	vstr	s15, [r3]
  prev_alt = z;
 8000b2e:	4a05      	ldr	r2, [pc, #20]	@ (8000b44 <KalmanFilter_Update+0x78>)
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	6013      	str	r3, [r2, #0]
}
 8000b34:	bf00      	nop
 8000b36:	3714      	adds	r7, #20
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr
 8000b40:	24000000 	.word	0x24000000
 8000b44:	24000244 	.word	0x24000244
 8000b48:	3f4ccccd 	.word	0x3f4ccccd
 8000b4c:	3e4ccccd 	.word	0x3e4ccccd
 8000b50:	40d1f972 	.word	0x40d1f972

08000b54 <PrintState>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// UART print of state transitions using printf routed to COM1 by BSP
static char* PrintState(FlightState_t s) {
 8000b54:	b480      	push	{r7}
 8000b56:	b085      	sub	sp, #20
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	71fb      	strb	r3, [r7, #7]
	char *name = "UNK";
 8000b5e:	4b15      	ldr	r3, [pc, #84]	@ (8000bb4 <PrintState+0x60>)
 8000b60:	60fb      	str	r3, [r7, #12]
	switch (s) {
 8000b62:	79fb      	ldrb	r3, [r7, #7]
 8000b64:	2b04      	cmp	r3, #4
 8000b66:	d81c      	bhi.n	8000ba2 <PrintState+0x4e>
 8000b68:	a201      	add	r2, pc, #4	@ (adr r2, 8000b70 <PrintState+0x1c>)
 8000b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b6e:	bf00      	nop
 8000b70:	08000b85 	.word	0x08000b85
 8000b74:	08000b8b 	.word	0x08000b8b
 8000b78:	08000b91 	.word	0x08000b91
 8000b7c:	08000b97 	.word	0x08000b97
 8000b80:	08000b9d 	.word	0x08000b9d
	case FLIGHT_STATE_GROUND_IDLE:
		name = "GROUND";
 8000b84:	4b0c      	ldr	r3, [pc, #48]	@ (8000bb8 <PrintState+0x64>)
 8000b86:	60fb      	str	r3, [r7, #12]
		break;
 8000b88:	e00c      	b.n	8000ba4 <PrintState+0x50>
	case FLIGHT_STATE_POWERED_FLIGHT:
		name = "POWERED";
 8000b8a:	4b0c      	ldr	r3, [pc, #48]	@ (8000bbc <PrintState+0x68>)
 8000b8c:	60fb      	str	r3, [r7, #12]
		break;
 8000b8e:	e009      	b.n	8000ba4 <PrintState+0x50>
	case FLIGHT_STATE_UNPOWERED_FLIGHT:
		name = "UNPOWERED";
 8000b90:	4b0b      	ldr	r3, [pc, #44]	@ (8000bc0 <PrintState+0x6c>)
 8000b92:	60fb      	str	r3, [r7, #12]
		break;
 8000b94:	e006      	b.n	8000ba4 <PrintState+0x50>
	case FLIGHT_STATE_DESCENT:
		name = "DESCENT";
 8000b96:	4b0b      	ldr	r3, [pc, #44]	@ (8000bc4 <PrintState+0x70>)
 8000b98:	60fb      	str	r3, [r7, #12]
		break;
 8000b9a:	e003      	b.n	8000ba4 <PrintState+0x50>
	case FLIGHT_STATE_LANDED:
		name = "LANDED";
 8000b9c:	4b0a      	ldr	r3, [pc, #40]	@ (8000bc8 <PrintState+0x74>)
 8000b9e:	60fb      	str	r3, [r7, #12]
		break;
 8000ba0:	e000      	b.n	8000ba4 <PrintState+0x50>
	default:
		break;
 8000ba2:	bf00      	nop
	}
//	printf("STATE CHANGE -> %s\r\n", name);
	return name;
 8000ba4:	68fb      	ldr	r3, [r7, #12]
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	3714      	adds	r7, #20
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	08009310 	.word	0x08009310
 8000bb8:	08009314 	.word	0x08009314
 8000bbc:	0800931c 	.word	0x0800931c
 8000bc0:	08009324 	.word	0x08009324
 8000bc4:	08009330 	.word	0x08009330
 8000bc8:	08009338 	.word	0x08009338

08000bcc <PrintIMUData>:

// Printing IMU data
static void PrintIMUData(IMU_Data_t data, char* state) {
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b08c      	sub	sp, #48	@ 0x30
 8000bd0:	af06      	add	r7, sp, #24
 8000bd2:	eeb0 6a40 	vmov.f32	s12, s0
 8000bd6:	eef0 6a60 	vmov.f32	s13, s1
 8000bda:	eeb0 7a41 	vmov.f32	s14, s2
 8000bde:	eef0 7a61 	vmov.f32	s15, s3
 8000be2:	6078      	str	r0, [r7, #4]
 8000be4:	ed87 6a02 	vstr	s12, [r7, #8]
 8000be8:	edc7 6a03 	vstr	s13, [r7, #12]
 8000bec:	ed87 7a04 	vstr	s14, [r7, #16]
 8000bf0:	edc7 7a05 	vstr	s15, [r7, #20]
	printf("[%s] IMU: accel=%.2f,%.2f,%.2f g alt=%.1f ft\r\n", state, data.accelX,
 8000bf4:	edd7 7a02 	vldr	s15, [r7, #8]
 8000bf8:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
			data.accelY, data.accelZ, data.altitude);
 8000bfc:	edd7 7a03 	vldr	s15, [r7, #12]
	printf("[%s] IMU: accel=%.2f,%.2f,%.2f g alt=%.1f ft\r\n", state, data.accelX,
 8000c00:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
			data.accelY, data.accelZ, data.altitude);
 8000c04:	edd7 6a04 	vldr	s13, [r7, #16]
	printf("[%s] IMU: accel=%.2f,%.2f,%.2f g alt=%.1f ft\r\n", state, data.accelX,
 8000c08:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
			data.accelY, data.accelZ, data.altitude);
 8000c0c:	edd7 5a05 	vldr	s11, [r7, #20]
	printf("[%s] IMU: accel=%.2f,%.2f,%.2f g alt=%.1f ft\r\n", state, data.accelX,
 8000c10:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 8000c14:	ed8d 5b04 	vstr	d5, [sp, #16]
 8000c18:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000c1c:	ed8d 7b00 	vstr	d7, [sp]
 8000c20:	ec53 2b14 	vmov	r2, r3, d4
 8000c24:	6879      	ldr	r1, [r7, #4]
 8000c26:	4803      	ldr	r0, [pc, #12]	@ (8000c34 <PrintIMUData+0x68>)
 8000c28:	f006 fbfe 	bl	8007428 <iprintf>
}
 8000c2c:	bf00      	nop
 8000c2e:	3718      	adds	r7, #24
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	08009340 	.word	0x08009340

08000c38 <DriveStateLED>:

// Simple visual LED mapping per state (uses Nucleo BSP LEDs)
static void DriveStateLED(FlightState_t s) {
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	4603      	mov	r3, r0
 8000c40:	71fb      	strb	r3, [r7, #7]
	static uint32_t last_toggle_ms = 0;
	uint32_t now = HAL_GetTick();
 8000c42:	f001 f877 	bl	8001d34 <HAL_GetTick>
 8000c46:	60f8      	str	r0, [r7, #12]

	// Example mapping:
	// GREEN for “active flight”, BLUE for descent modes, RED for LANDED solid
	switch (s) {
 8000c48:	79fb      	ldrb	r3, [r7, #7]
 8000c4a:	2b04      	cmp	r3, #4
 8000c4c:	d851      	bhi.n	8000cf2 <DriveStateLED+0xba>
 8000c4e:	a201      	add	r2, pc, #4	@ (adr r2, 8000c54 <DriveStateLED+0x1c>)
 8000c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c54:	08000c69 	.word	0x08000c69
 8000c58:	08000c7d 	.word	0x08000c7d
 8000c5c:	08000ca3 	.word	0x08000ca3
 8000c60:	08000cb7 	.word	0x08000cb7
 8000c64:	08000cdf 	.word	0x08000cdf
	case FLIGHT_STATE_GROUND_IDLE:
		BSP_LED_Off(LED_GREEN);
 8000c68:	2000      	movs	r0, #0
 8000c6a:	f000 fe5d 	bl	8001928 <BSP_LED_Off>
		BSP_LED_Off(LED_BLUE);
 8000c6e:	2001      	movs	r0, #1
 8000c70:	f000 fe5a 	bl	8001928 <BSP_LED_Off>
		BSP_LED_Off(LED_RED);
 8000c74:	2002      	movs	r0, #2
 8000c76:	f000 fe57 	bl	8001928 <BSP_LED_Off>
		break;
 8000c7a:	e03a      	b.n	8000cf2 <DriveStateLED+0xba>

	case FLIGHT_STATE_POWERED_FLIGHT:
		if (now - last_toggle_ms > 100) {
 8000c7c:	4b1f      	ldr	r3, [pc, #124]	@ (8000cfc <DriveStateLED+0xc4>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	68fa      	ldr	r2, [r7, #12]
 8000c82:	1ad3      	subs	r3, r2, r3
 8000c84:	2b64      	cmp	r3, #100	@ 0x64
 8000c86:	d905      	bls.n	8000c94 <DriveStateLED+0x5c>
			BSP_LED_Toggle(LED_GREEN);
 8000c88:	2000      	movs	r0, #0
 8000c8a:	f000 fe77 	bl	800197c <BSP_LED_Toggle>
			last_toggle_ms = now;
 8000c8e:	4a1b      	ldr	r2, [pc, #108]	@ (8000cfc <DriveStateLED+0xc4>)
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	6013      	str	r3, [r2, #0]
		}
		BSP_LED_Off(LED_BLUE);
 8000c94:	2001      	movs	r0, #1
 8000c96:	f000 fe47 	bl	8001928 <BSP_LED_Off>
		BSP_LED_Off(LED_RED);
 8000c9a:	2002      	movs	r0, #2
 8000c9c:	f000 fe44 	bl	8001928 <BSP_LED_Off>
		break;
 8000ca0:	e027      	b.n	8000cf2 <DriveStateLED+0xba>

	case FLIGHT_STATE_UNPOWERED_FLIGHT:
		BSP_LED_On(LED_GREEN);
 8000ca2:	2000      	movs	r0, #0
 8000ca4:	f000 fe16 	bl	80018d4 <BSP_LED_On>
		BSP_LED_Off(LED_BLUE);
 8000ca8:	2001      	movs	r0, #1
 8000caa:	f000 fe3d 	bl	8001928 <BSP_LED_Off>
		BSP_LED_Off(LED_RED);
 8000cae:	2002      	movs	r0, #2
 8000cb0:	f000 fe3a 	bl	8001928 <BSP_LED_Off>
		break;
 8000cb4:	e01d      	b.n	8000cf2 <DriveStateLED+0xba>

	case FLIGHT_STATE_DESCENT:
		if (now - last_toggle_ms > 600) {
 8000cb6:	4b11      	ldr	r3, [pc, #68]	@ (8000cfc <DriveStateLED+0xc4>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	68fa      	ldr	r2, [r7, #12]
 8000cbc:	1ad3      	subs	r3, r2, r3
 8000cbe:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8000cc2:	d905      	bls.n	8000cd0 <DriveStateLED+0x98>
			BSP_LED_Toggle(LED_BLUE);
 8000cc4:	2001      	movs	r0, #1
 8000cc6:	f000 fe59 	bl	800197c <BSP_LED_Toggle>
			last_toggle_ms = now;
 8000cca:	4a0c      	ldr	r2, [pc, #48]	@ (8000cfc <DriveStateLED+0xc4>)
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	6013      	str	r3, [r2, #0]
		}
		BSP_LED_Off(LED_GREEN);
 8000cd0:	2000      	movs	r0, #0
 8000cd2:	f000 fe29 	bl	8001928 <BSP_LED_Off>
		BSP_LED_Off(LED_RED);
 8000cd6:	2002      	movs	r0, #2
 8000cd8:	f000 fe26 	bl	8001928 <BSP_LED_Off>
		break;
 8000cdc:	e009      	b.n	8000cf2 <DriveStateLED+0xba>

	case FLIGHT_STATE_LANDED:
		BSP_LED_Off(LED_GREEN);
 8000cde:	2000      	movs	r0, #0
 8000ce0:	f000 fe22 	bl	8001928 <BSP_LED_Off>
		BSP_LED_Off(LED_BLUE);
 8000ce4:	2001      	movs	r0, #1
 8000ce6:	f000 fe1f 	bl	8001928 <BSP_LED_Off>
		BSP_LED_On(LED_RED);
 8000cea:	2002      	movs	r0, #2
 8000cec:	f000 fdf2 	bl	80018d4 <BSP_LED_On>
		break;
 8000cf0:	bf00      	nop
	}
}
 8000cf2:	bf00      	nop
 8000cf4:	3710      	adds	r7, #16
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	24000344 	.word	0x24000344

08000d00 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b086      	sub	sp, #24
 8000d04:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000d06:	f000 ffc5 	bl	8001c94 <HAL_Init>
	/* USER CODE BEGIN Init */
	// (nothing needed here)
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000d0a:	f000 f8f7 	bl	8000efc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */
	// (nothing needed here)
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000d0e:	f000 f9ed 	bl	80010ec <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000d12:	f000 f99f 	bl	8001054 <MX_USART2_UART_Init>
	MX_TIM7_Init();
 8000d16:	f000 f95b 	bl	8000fd0 <MX_TIM7_Init>
	/* USER CODE BEGIN 2 */

	// Initialize legacy flight state machine; it will call IMU_CalculateGroundAltitude()
	FlightState_Init();
 8000d1a:	f7ff fccf 	bl	80006bc <FlightState_Init>
	// Record initial state for transition prints
	g_last_state = FlightState_GetCurrent();
 8000d1e:	f7ff fdb5 	bl	800088c <FlightState_GetCurrent>
 8000d22:	4603      	mov	r3, r0
 8000d24:	461a      	mov	r2, r3
 8000d26:	4b68      	ldr	r3, [pc, #416]	@ (8000ec8 <main+0x1c8>)
 8000d28:	701a      	strb	r2, [r3, #0]
	PrintState(g_last_state);
 8000d2a:	4b67      	ldr	r3, [pc, #412]	@ (8000ec8 <main+0x1c8>)
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f7ff ff10 	bl	8000b54 <PrintState>
	/* USER CODE END 2 */

	/* USER CODE BEGIN BSP */

	/* Initialize leds */
	BSP_LED_Init(LED_GREEN);
 8000d34:	2000      	movs	r0, #0
 8000d36:	f000 fd57 	bl	80017e8 <BSP_LED_Init>
	BSP_LED_Init(LED_BLUE);
 8000d3a:	2001      	movs	r0, #1
 8000d3c:	f000 fd54 	bl	80017e8 <BSP_LED_Init>
	BSP_LED_Init(LED_RED);
 8000d40:	2002      	movs	r0, #2
 8000d42:	f000 fd51 	bl	80017e8 <BSP_LED_Init>

	/* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
	BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000d46:	2101      	movs	r1, #1
 8000d48:	2000      	movs	r0, #0
 8000d4a:	f000 fe41 	bl	80019d0 <BSP_PB_Init>

	/* Initialize COM1 port so that it can be used with PuTTy (115200, 8 bits (7-bit data + 1 stop bit), no parity */
	BspCOMInit.BaudRate = 115200;
 8000d4e:	4b5f      	ldr	r3, [pc, #380]	@ (8000ecc <main+0x1cc>)
 8000d50:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d54:	601a      	str	r2, [r3, #0]
	BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000d56:	4b5d      	ldr	r3, [pc, #372]	@ (8000ecc <main+0x1cc>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	605a      	str	r2, [r3, #4]
	BspCOMInit.StopBits = COM_STOPBITS_1;
 8000d5c:	4b5b      	ldr	r3, [pc, #364]	@ (8000ecc <main+0x1cc>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	811a      	strh	r2, [r3, #8]
	BspCOMInit.Parity = COM_PARITY_NONE;
 8000d62:	4b5a      	ldr	r3, [pc, #360]	@ (8000ecc <main+0x1cc>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	815a      	strh	r2, [r3, #10]
	BspCOMInit.HwFlowCtl = COM_HWCONTROL_NONE;
 8000d68:	4b58      	ldr	r3, [pc, #352]	@ (8000ecc <main+0x1cc>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	819a      	strh	r2, [r3, #12]
	if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE) {
 8000d6e:	4957      	ldr	r1, [pc, #348]	@ (8000ecc <main+0x1cc>)
 8000d70:	2000      	movs	r0, #0
 8000d72:	f000 feb1 	bl	8001ad8 <BSP_COM_Init>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <main+0x80>
		Error_Handler();
 8000d7c:	f000 fa22 	bl	80011c4 <Error_Handler>
	}

	/* -- Sample board code to send message over COM1 port ---- */
	printf("\r\n\r\n*** IMU Simulator & Flight State Demo ***\r\n");
 8000d80:	4853      	ldr	r0, [pc, #332]	@ (8000ed0 <main+0x1d0>)
 8000d82:	f006 fbb9 	bl	80074f8 <puts>
	printf("Press USER button to start/stop simulation\r\n");
 8000d86:	4853      	ldr	r0, [pc, #332]	@ (8000ed4 <main+0x1d4>)
 8000d88:	f006 fbb6 	bl	80074f8 <puts>

	/* -- Sample board code to switch on leds ---- */
	BSP_LED_On(LED_GREEN);
 8000d8c:	2000      	movs	r0, #0
 8000d8e:	f000 fda1 	bl	80018d4 <BSP_LED_On>
	BSP_LED_On(LED_BLUE);
 8000d92:	2001      	movs	r0, #1
 8000d94:	f000 fd9e 	bl	80018d4 <BSP_LED_On>
	BSP_LED_On(LED_RED);
 8000d98:	2002      	movs	r0, #2
 8000d9a:	f000 fd9b 	bl	80018d4 <BSP_LED_On>

	/* USER CODE END BSP */

	HAL_TIM_Base_Start_IT(&htim7);
 8000d9e:	484e      	ldr	r0, [pc, #312]	@ (8000ed8 <main+0x1d8>)
 8000da0:	f004 f9ee 	bl	8005180 <HAL_TIM_Base_Start_IT>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		/* -- Sample board code for User push-button in interrupt mode ---- */
		if (BspButtonState == BUTTON_PRESSED) {
 8000da4:	4b4d      	ldr	r3, [pc, #308]	@ (8000edc <main+0x1dc>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d132      	bne.n	8000e12 <main+0x112>
			/* Update button state */
			BspButtonState = BUTTON_RELEASED;
 8000dac:	4b4b      	ldr	r3, [pc, #300]	@ (8000edc <main+0x1dc>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	601a      	str	r2, [r3, #0]

			/* Toggle Simulated IMU */
			simulation_active = !simulation_active;
 8000db2:	4b4b      	ldr	r3, [pc, #300]	@ (8000ee0 <main+0x1e0>)
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	bf0c      	ite	eq
 8000dbc:	2301      	moveq	r3, #1
 8000dbe:	2300      	movne	r3, #0
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	4b46      	ldr	r3, [pc, #280]	@ (8000ee0 <main+0x1e0>)
 8000dc6:	701a      	strb	r2, [r3, #0]

			if (simulation_active) {
 8000dc8:	4b45      	ldr	r3, [pc, #276]	@ (8000ee0 <main+0x1e0>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d013      	beq.n	8000dfa <main+0xfa>
				printf("\r\n *** SIMULATION STARTED ***\r\n");
 8000dd2:	4844      	ldr	r0, [pc, #272]	@ (8000ee4 <main+0x1e4>)
 8000dd4:	f006 fb90 	bl	80074f8 <puts>
				extern volatile uint32_t t_ms;
				t_ms = 0;
 8000dd8:	4b43      	ldr	r3, [pc, #268]	@ (8000ee8 <main+0x1e8>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	601a      	str	r2, [r3, #0]
				/* Reset flight state */
				FlightState_Init();
 8000dde:	f7ff fc6d 	bl	80006bc <FlightState_Init>
				g_last_state = FlightState_GetCurrent();
 8000de2:	f7ff fd53 	bl	800088c <FlightState_GetCurrent>
 8000de6:	4603      	mov	r3, r0
 8000de8:	461a      	mov	r2, r3
 8000dea:	4b37      	ldr	r3, [pc, #220]	@ (8000ec8 <main+0x1c8>)
 8000dec:	701a      	strb	r2, [r3, #0]
				PrintState(g_last_state);
 8000dee:	4b36      	ldr	r3, [pc, #216]	@ (8000ec8 <main+0x1c8>)
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	4618      	mov	r0, r3
 8000df4:	f7ff feae 	bl	8000b54 <PrintState>
 8000df8:	e00b      	b.n	8000e12 <main+0x112>
			} else {
				printf("\r\n*** SIMULATION STOPPED ***\r\n");
 8000dfa:	483c      	ldr	r0, [pc, #240]	@ (8000eec <main+0x1ec>)
 8000dfc:	f006 fb7c 	bl	80074f8 <puts>
				/* Turn off all LEDs when simulation stops */
				BSP_LED_Off(LED_GREEN);
 8000e00:	2000      	movs	r0, #0
 8000e02:	f000 fd91 	bl	8001928 <BSP_LED_Off>
				BSP_LED_Off(LED_BLUE);
 8000e06:	2001      	movs	r0, #1
 8000e08:	f000 fd8e 	bl	8001928 <BSP_LED_Off>
				BSP_LED_Off(LED_RED);
 8000e0c:	2002      	movs	r0, #2
 8000e0e:	f000 fd8b 	bl	8001928 <BSP_LED_Off>
			}
		}

		/* USER CODE BEGIN 3 */
		// ---- SUPERLOOP: run legacy state update at 200 Hz when the TIM7 flag is set ----
		if (g_state_tick && simulation_active) {
 8000e12:	4b37      	ldr	r3, [pc, #220]	@ (8000ef0 <main+0x1f0>)
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d0c3      	beq.n	8000da4 <main+0xa4>
 8000e1c:	4b30      	ldr	r3, [pc, #192]	@ (8000ee0 <main+0x1e0>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d0be      	beq.n	8000da4 <main+0xa4>
			g_state_tick = 0;
 8000e26:	4b32      	ldr	r3, [pc, #200]	@ (8000ef0 <main+0x1f0>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	701a      	strb	r2, [r3, #0]

			// Run your legacy state machine once per tick.
			FlightState_Update();
 8000e2c:	f7ff fc58 	bl	80006e0 <FlightState_Update>

			// If state changed, print and update LED pattern
			FlightState_t now = FlightState_GetCurrent();
 8000e30:	f7ff fd2c 	bl	800088c <FlightState_GetCurrent>
 8000e34:	4603      	mov	r3, r0
 8000e36:	75fb      	strb	r3, [r7, #23]
			char* curState = PrintState(now);
 8000e38:	7dfb      	ldrb	r3, [r7, #23]
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f7ff fe8a 	bl	8000b54 <PrintState>
 8000e40:	6138      	str	r0, [r7, #16]

			if (now != g_last_state) {
 8000e42:	4b21      	ldr	r3, [pc, #132]	@ (8000ec8 <main+0x1c8>)
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	7dfa      	ldrb	r2, [r7, #23]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d006      	beq.n	8000e5a <main+0x15a>

				printf("STATE CHANGE -> %s\r\n", curState);
 8000e4c:	6939      	ldr	r1, [r7, #16]
 8000e4e:	4829      	ldr	r0, [pc, #164]	@ (8000ef4 <main+0x1f4>)
 8000e50:	f006 faea 	bl	8007428 <iprintf>
				g_last_state = now;
 8000e54:	4a1c      	ldr	r2, [pc, #112]	@ (8000ec8 <main+0x1c8>)
 8000e56:	7dfb      	ldrb	r3, [r7, #23]
 8000e58:	7013      	strb	r3, [r2, #0]
			}
			DriveStateLED(now);
 8000e5a:	7dfb      	ldrb	r3, [r7, #23]
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f7ff feeb 	bl	8000c38 <DriveStateLED>

			print_counter++;
 8000e62:	4b25      	ldr	r3, [pc, #148]	@ (8000ef8 <main+0x1f8>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	3301      	adds	r3, #1
 8000e68:	4a23      	ldr	r2, [pc, #140]	@ (8000ef8 <main+0x1f8>)
 8000e6a:	6013      	str	r3, [r2, #0]
			if (print_counter >= 20) {
 8000e6c:	4b22      	ldr	r3, [pc, #136]	@ (8000ef8 <main+0x1f8>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	2b13      	cmp	r3, #19
 8000e72:	d997      	bls.n	8000da4 <main+0xa4>
				IMU_Data_t imu_data = IMU_GetLatestData();
 8000e74:	f7ff fd1f 	bl	80008b6 <IMU_GetLatestData>
 8000e78:	eeb0 6a40 	vmov.f32	s12, s0
 8000e7c:	eef0 6a60 	vmov.f32	s13, s1
 8000e80:	eeb0 7a41 	vmov.f32	s14, s2
 8000e84:	eef0 7a61 	vmov.f32	s15, s3
 8000e88:	ed87 6a00 	vstr	s12, [r7]
 8000e8c:	edc7 6a01 	vstr	s13, [r7, #4]
 8000e90:	ed87 7a02 	vstr	s14, [r7, #8]
 8000e94:	edc7 7a03 	vstr	s15, [r7, #12]
				PrintIMUData(imu_data, curState);
 8000e98:	ed97 6a00 	vldr	s12, [r7]
 8000e9c:	edd7 6a01 	vldr	s13, [r7, #4]
 8000ea0:	ed97 7a02 	vldr	s14, [r7, #8]
 8000ea4:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ea8:	6938      	ldr	r0, [r7, #16]
 8000eaa:	eeb0 0a46 	vmov.f32	s0, s12
 8000eae:	eef0 0a66 	vmov.f32	s1, s13
 8000eb2:	eeb0 1a47 	vmov.f32	s2, s14
 8000eb6:	eef0 1a67 	vmov.f32	s3, s15
 8000eba:	f7ff fe87 	bl	8000bcc <PrintIMUData>
				print_counter = 0;
 8000ebe:	4b0e      	ldr	r3, [pc, #56]	@ (8000ef8 <main+0x1f8>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
		if (BspButtonState == BUTTON_PRESSED) {
 8000ec4:	e76e      	b.n	8000da4 <main+0xa4>
 8000ec6:	bf00      	nop
 8000ec8:	2400033d 	.word	0x2400033d
 8000ecc:	24000248 	.word	0x24000248
 8000ed0:	08009370 	.word	0x08009370
 8000ed4:	080093a0 	.word	0x080093a0
 8000ed8:	2400025c 	.word	0x2400025c
 8000edc:	24000258 	.word	0x24000258
 8000ee0:	2400033e 	.word	0x2400033e
 8000ee4:	080093cc 	.word	0x080093cc
 8000ee8:	2400023c 	.word	0x2400023c
 8000eec:	080093ec 	.word	0x080093ec
 8000ef0:	2400033c 	.word	0x2400033c
 8000ef4:	0800940c 	.word	0x0800940c
 8000ef8:	24000340 	.word	0x24000340

08000efc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b09c      	sub	sp, #112	@ 0x70
 8000f00:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000f02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f06:	224c      	movs	r2, #76	@ 0x4c
 8000f08:	2100      	movs	r1, #0
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f006 fbd4 	bl	80076b8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000f10:	1d3b      	adds	r3, r7, #4
 8000f12:	2220      	movs	r2, #32
 8000f14:	2100      	movs	r1, #0
 8000f16:	4618      	mov	r0, r3
 8000f18:	f006 fbce 	bl	80076b8 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000f1c:	2002      	movs	r0, #2
 8000f1e:	f001 fa49 	bl	80023b4 <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f22:	2300      	movs	r3, #0
 8000f24:	603b      	str	r3, [r7, #0]
 8000f26:	4b28      	ldr	r3, [pc, #160]	@ (8000fc8 <SystemClock_Config+0xcc>)
 8000f28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f2a:	4a27      	ldr	r2, [pc, #156]	@ (8000fc8 <SystemClock_Config+0xcc>)
 8000f2c:	f023 0301 	bic.w	r3, r3, #1
 8000f30:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000f32:	4b25      	ldr	r3, [pc, #148]	@ (8000fc8 <SystemClock_Config+0xcc>)
 8000f34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f36:	f003 0301 	and.w	r3, r3, #1
 8000f3a:	603b      	str	r3, [r7, #0]
 8000f3c:	4b23      	ldr	r3, [pc, #140]	@ (8000fcc <SystemClock_Config+0xd0>)
 8000f3e:	699b      	ldr	r3, [r3, #24]
 8000f40:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000f44:	4a21      	ldr	r2, [pc, #132]	@ (8000fcc <SystemClock_Config+0xd0>)
 8000f46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000f4a:	6193      	str	r3, [r2, #24]
 8000f4c:	4b1f      	ldr	r3, [pc, #124]	@ (8000fcc <SystemClock_Config+0xd0>)
 8000f4e:	699b      	ldr	r3, [r3, #24]
 8000f50:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f54:	603b      	str	r3, [r7, #0]
 8000f56:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 8000f58:	bf00      	nop
 8000f5a:	4b1c      	ldr	r3, [pc, #112]	@ (8000fcc <SystemClock_Config+0xd0>)
 8000f5c:	699b      	ldr	r3, [r3, #24]
 8000f5e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000f66:	d1f8      	bne.n	8000f5a <SystemClock_Config+0x5e>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f70:	2340      	movs	r3, #64	@ 0x40
 8000f72:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f74:	2300      	movs	r3, #0
 8000f76:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000f78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f001 fa53 	bl	8002428 <HAL_RCC_OscConfig>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <SystemClock_Config+0x90>
		Error_Handler();
 8000f88:	f000 f91c 	bl	80011c4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000f8c:	233f      	movs	r3, #63	@ 0x3f
 8000f8e:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f90:	2300      	movs	r3, #0
 8000f92:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000f94:	2300      	movs	r3, #0
 8000f96:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8000fac:	1d3b      	adds	r3, r7, #4
 8000fae:	2101      	movs	r1, #1
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f001 fe93 	bl	8002cdc <HAL_RCC_ClockConfig>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <SystemClock_Config+0xc4>
		Error_Handler();
 8000fbc:	f000 f902 	bl	80011c4 <Error_Handler>
	}
}
 8000fc0:	bf00      	nop
 8000fc2:	3770      	adds	r7, #112	@ 0x70
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	58000400 	.word	0x58000400
 8000fcc:	58024800 	.word	0x58024800

08000fd0 <MX_TIM7_Init>:
/**
 * @brief TIM7 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM7_Init(void) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM7_Init 0 */

	/* USER CODE END TIM7_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000fd6:	1d3b      	adds	r3, r7, #4
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	605a      	str	r2, [r3, #4]
 8000fde:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM7_Init 1 */

	/* USER CODE END TIM7_Init 1 */
	htim7.Instance = TIM7;
 8000fe0:	4b18      	ldr	r3, [pc, #96]	@ (8001044 <MX_TIM7_Init+0x74>)
 8000fe2:	4a19      	ldr	r2, [pc, #100]	@ (8001048 <MX_TIM7_Init+0x78>)
 8000fe4:	601a      	str	r2, [r3, #0]
	htim7.Init.Prescaler = (uint32_t)((SystemCoreClock / 2) / 200000) - 1; // Adjust for 200Hz;
 8000fe6:	4b19      	ldr	r3, [pc, #100]	@ (800104c <MX_TIM7_Init+0x7c>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	09db      	lsrs	r3, r3, #7
 8000fec:	4a18      	ldr	r2, [pc, #96]	@ (8001050 <MX_TIM7_Init+0x80>)
 8000fee:	fba2 2303 	umull	r2, r3, r2, r3
 8000ff2:	091b      	lsrs	r3, r3, #4
 8000ff4:	3b01      	subs	r3, #1
 8000ff6:	4a13      	ldr	r2, [pc, #76]	@ (8001044 <MX_TIM7_Init+0x74>)
 8000ff8:	6053      	str	r3, [r2, #4]
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ffa:	4b12      	ldr	r3, [pc, #72]	@ (8001044 <MX_TIM7_Init+0x74>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	609a      	str	r2, [r3, #8]
	htim7.Init.Period = 999;
 8001000:	4b10      	ldr	r3, [pc, #64]	@ (8001044 <MX_TIM7_Init+0x74>)
 8001002:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001006:	60da      	str	r2, [r3, #12]
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001008:	4b0e      	ldr	r3, [pc, #56]	@ (8001044 <MX_TIM7_Init+0x74>)
 800100a:	2200      	movs	r2, #0
 800100c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK) {
 800100e:	480d      	ldr	r0, [pc, #52]	@ (8001044 <MX_TIM7_Init+0x74>)
 8001010:	f004 f85e 	bl	80050d0 <HAL_TIM_Base_Init>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <MX_TIM7_Init+0x4e>
		Error_Handler();
 800101a:	f000 f8d3 	bl	80011c4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800101e:	2300      	movs	r3, #0
 8001020:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001022:	2300      	movs	r3, #0
 8001024:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig)
 8001026:	1d3b      	adds	r3, r7, #4
 8001028:	4619      	mov	r1, r3
 800102a:	4806      	ldr	r0, [pc, #24]	@ (8001044 <MX_TIM7_Init+0x74>)
 800102c:	f004 faf0 	bl	8005610 <HAL_TIMEx_MasterConfigSynchronization>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_TIM7_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 8001036:	f000 f8c5 	bl	80011c4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM7_Init 2 */

	/* USER CODE END TIM7_Init 2 */

}
 800103a:	bf00      	nop
 800103c:	3710      	adds	r7, #16
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	2400025c 	.word	0x2400025c
 8001048:	40001400 	.word	0x40001400
 800104c:	24000004 	.word	0x24000004
 8001050:	014f8b59 	.word	0x014f8b59

08001054 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001058:	4b22      	ldr	r3, [pc, #136]	@ (80010e4 <MX_USART2_UART_Init+0x90>)
 800105a:	4a23      	ldr	r2, [pc, #140]	@ (80010e8 <MX_USART2_UART_Init+0x94>)
 800105c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800105e:	4b21      	ldr	r3, [pc, #132]	@ (80010e4 <MX_USART2_UART_Init+0x90>)
 8001060:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001064:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001066:	4b1f      	ldr	r3, [pc, #124]	@ (80010e4 <MX_USART2_UART_Init+0x90>)
 8001068:	2200      	movs	r2, #0
 800106a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800106c:	4b1d      	ldr	r3, [pc, #116]	@ (80010e4 <MX_USART2_UART_Init+0x90>)
 800106e:	2200      	movs	r2, #0
 8001070:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001072:	4b1c      	ldr	r3, [pc, #112]	@ (80010e4 <MX_USART2_UART_Init+0x90>)
 8001074:	2200      	movs	r2, #0
 8001076:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001078:	4b1a      	ldr	r3, [pc, #104]	@ (80010e4 <MX_USART2_UART_Init+0x90>)
 800107a:	220c      	movs	r2, #12
 800107c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800107e:	4b19      	ldr	r3, [pc, #100]	@ (80010e4 <MX_USART2_UART_Init+0x90>)
 8001080:	2200      	movs	r2, #0
 8001082:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001084:	4b17      	ldr	r3, [pc, #92]	@ (80010e4 <MX_USART2_UART_Init+0x90>)
 8001086:	2200      	movs	r2, #0
 8001088:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800108a:	4b16      	ldr	r3, [pc, #88]	@ (80010e4 <MX_USART2_UART_Init+0x90>)
 800108c:	2200      	movs	r2, #0
 800108e:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001090:	4b14      	ldr	r3, [pc, #80]	@ (80010e4 <MX_USART2_UART_Init+0x90>)
 8001092:	2200      	movs	r2, #0
 8001094:	625a      	str	r2, [r3, #36]	@ 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001096:	4b13      	ldr	r3, [pc, #76]	@ (80010e4 <MX_USART2_UART_Init+0x90>)
 8001098:	2200      	movs	r2, #0
 800109a:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800109c:	4811      	ldr	r0, [pc, #68]	@ (80010e4 <MX_USART2_UART_Init+0x90>)
 800109e:	f004 fb63 	bl	8005768 <HAL_UART_Init>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <MX_USART2_UART_Init+0x58>
		Error_Handler();
 80010a8:	f000 f88c 	bl	80011c4 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8)
 80010ac:	2100      	movs	r1, #0
 80010ae:	480d      	ldr	r0, [pc, #52]	@ (80010e4 <MX_USART2_UART_Init+0x90>)
 80010b0:	f005 fbf9 	bl	80068a6 <HAL_UARTEx_SetTxFifoThreshold>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_USART2_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 80010ba:	f000 f883 	bl	80011c4 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8)
 80010be:	2100      	movs	r1, #0
 80010c0:	4808      	ldr	r0, [pc, #32]	@ (80010e4 <MX_USART2_UART_Init+0x90>)
 80010c2:	f005 fc2e 	bl	8006922 <HAL_UARTEx_SetRxFifoThreshold>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_USART2_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 80010cc:	f000 f87a 	bl	80011c4 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK) {
 80010d0:	4804      	ldr	r0, [pc, #16]	@ (80010e4 <MX_USART2_UART_Init+0x90>)
 80010d2:	f005 fbaf 	bl	8006834 <HAL_UARTEx_DisableFifoMode>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_USART2_UART_Init+0x8c>
		Error_Handler();
 80010dc:	f000 f872 	bl	80011c4 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80010e0:	bf00      	nop
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	240002a8 	.word	0x240002a8
 80010e8:	40004400 	.word	0x40004400

080010ec <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80010ec:	b480      	push	{r7}
 80010ee:	b085      	sub	sp, #20
 80010f0:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	// (CubeMX will generate GPIO inits for LEDs if you checked them; BSP can also handle LEDs)
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80010f2:	4b19      	ldr	r3, [pc, #100]	@ (8001158 <MX_GPIO_Init+0x6c>)
 80010f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010f8:	4a17      	ldr	r2, [pc, #92]	@ (8001158 <MX_GPIO_Init+0x6c>)
 80010fa:	f043 0304 	orr.w	r3, r3, #4
 80010fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001102:	4b15      	ldr	r3, [pc, #84]	@ (8001158 <MX_GPIO_Init+0x6c>)
 8001104:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001108:	f003 0304 	and.w	r3, r3, #4
 800110c:	60fb      	str	r3, [r7, #12]
 800110e:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001110:	4b11      	ldr	r3, [pc, #68]	@ (8001158 <MX_GPIO_Init+0x6c>)
 8001112:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001116:	4a10      	ldr	r2, [pc, #64]	@ (8001158 <MX_GPIO_Init+0x6c>)
 8001118:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800111c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001120:	4b0d      	ldr	r3, [pc, #52]	@ (8001158 <MX_GPIO_Init+0x6c>)
 8001122:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001126:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800112a:	60bb      	str	r3, [r7, #8]
 800112c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800112e:	4b0a      	ldr	r3, [pc, #40]	@ (8001158 <MX_GPIO_Init+0x6c>)
 8001130:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001134:	4a08      	ldr	r2, [pc, #32]	@ (8001158 <MX_GPIO_Init+0x6c>)
 8001136:	f043 0301 	orr.w	r3, r3, #1
 800113a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800113e:	4b06      	ldr	r3, [pc, #24]	@ (8001158 <MX_GPIO_Init+0x6c>)
 8001140:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001144:	f003 0301 	and.w	r3, r3, #1
 8001148:	607b      	str	r3, [r7, #4]
 800114a:	687b      	ldr	r3, [r7, #4]

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	// (no manual GPIO here; using BSP LEDs)
	/* USER CODE END MX_GPIO_Init_2 */
}
 800114c:	bf00      	nop
 800114e:	3714      	adds	r7, #20
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	58024400 	.word	0x58024400

0800115c <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	// also htim->Instance == TIM7 works for this
	// htim == &htim7
	if (htim->Instance == TIM7) {
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a09      	ldr	r2, [pc, #36]	@ (8001190 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d10b      	bne.n	8001186 <HAL_TIM_PeriodElapsedCallback+0x2a>
		if (simulation_active) {
 800116e:	4b09      	ldr	r3, [pc, #36]	@ (8001194 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	b2db      	uxtb	r3, r3
 8001174:	2b00      	cmp	r3, #0
 8001176:	d004      	beq.n	8001182 <HAL_TIM_PeriodElapsedCallback+0x26>
			IMU_Sim_Tick_200Hz();   // synthesize IMU data at 200 Hz
 8001178:	f7ff fbca 	bl	8000910 <IMU_Sim_Tick_200Hz>
			g_state_tick = 1;  // ask main loop to run FlightState_Update() once
 800117c:	4b06      	ldr	r3, [pc, #24]	@ (8001198 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800117e:	2201      	movs	r2, #1
 8001180:	701a      	strb	r2, [r3, #0]
		}
		HAL_IncTick();
 8001182:	f000 fdc3 	bl	8001d0c <HAL_IncTick>
	}
}
 8001186:	bf00      	nop
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40001400 	.word	0x40001400
 8001194:	2400033e 	.word	0x2400033e
 8001198:	2400033c 	.word	0x2400033c

0800119c <BSP_PB_Callback>:
/**
 * @brief BSP Push Button callback
 * @param Button Specifies the pressed button
 * @retval None
 */
void BSP_PB_Callback(Button_TypeDef Button) {
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4603      	mov	r3, r0
 80011a4:	71fb      	strb	r3, [r7, #7]
	if (Button == BUTTON_USER) {
 80011a6:	79fb      	ldrb	r3, [r7, #7]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d102      	bne.n	80011b2 <BSP_PB_Callback+0x16>
		BspButtonState = BUTTON_PRESSED;
 80011ac:	4b04      	ldr	r3, [pc, #16]	@ (80011c0 <BSP_PB_Callback+0x24>)
 80011ae:	2201      	movs	r2, #1
 80011b0:	601a      	str	r2, [r3, #0]
	}
}
 80011b2:	bf00      	nop
 80011b4:	370c      	adds	r7, #12
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	24000258 	.word	0x24000258

080011c4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011c8:	b672      	cpsid	i
}
 80011ca:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80011cc:	bf00      	nop
 80011ce:	e7fd      	b.n	80011cc <Error_Handler+0x8>

080011d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001200 <HAL_MspInit+0x30>)
 80011d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80011dc:	4a08      	ldr	r2, [pc, #32]	@ (8001200 <HAL_MspInit+0x30>)
 80011de:	f043 0302 	orr.w	r3, r3, #2
 80011e2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80011e6:	4b06      	ldr	r3, [pc, #24]	@ (8001200 <HAL_MspInit+0x30>)
 80011e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80011ec:	f003 0302 	and.w	r3, r3, #2
 80011f0:	607b      	str	r3, [r7, #4]
 80011f2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011f4:	bf00      	nop
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr
 8001200:	58024400 	.word	0x58024400

08001204 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a0e      	ldr	r2, [pc, #56]	@ (800124c <HAL_TIM_Base_MspInit+0x48>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d116      	bne.n	8001244 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM7_MspInit 0 */

    /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001216:	4b0e      	ldr	r3, [pc, #56]	@ (8001250 <HAL_TIM_Base_MspInit+0x4c>)
 8001218:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800121c:	4a0c      	ldr	r2, [pc, #48]	@ (8001250 <HAL_TIM_Base_MspInit+0x4c>)
 800121e:	f043 0320 	orr.w	r3, r3, #32
 8001222:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001226:	4b0a      	ldr	r3, [pc, #40]	@ (8001250 <HAL_TIM_Base_MspInit+0x4c>)
 8001228:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800122c:	f003 0320 	and.w	r3, r3, #32
 8001230:	60fb      	str	r3, [r7, #12]
 8001232:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001234:	2200      	movs	r2, #0
 8001236:	2100      	movs	r1, #0
 8001238:	2037      	movs	r0, #55	@ 0x37
 800123a:	f000 fe4b 	bl	8001ed4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800123e:	2037      	movs	r0, #55	@ 0x37
 8001240:	f000 fe62 	bl	8001f08 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM7_MspInit 1 */

  }

}
 8001244:	bf00      	nop
 8001246:	3710      	adds	r7, #16
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	40001400 	.word	0x40001400
 8001250:	58024400 	.word	0x58024400

08001254 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b0ba      	sub	sp, #232	@ 0xe8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800125c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	605a      	str	r2, [r3, #4]
 8001266:	609a      	str	r2, [r3, #8]
 8001268:	60da      	str	r2, [r3, #12]
 800126a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800126c:	f107 0310 	add.w	r3, r7, #16
 8001270:	22c0      	movs	r2, #192	@ 0xc0
 8001272:	2100      	movs	r1, #0
 8001274:	4618      	mov	r0, r3
 8001276:	f006 fa1f 	bl	80076b8 <memset>
  if(huart->Instance==USART2)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a26      	ldr	r2, [pc, #152]	@ (8001318 <HAL_UART_MspInit+0xc4>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d145      	bne.n	8001310 <HAL_UART_MspInit+0xbc>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001284:	f04f 0202 	mov.w	r2, #2
 8001288:	f04f 0300 	mov.w	r3, #0
 800128c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001290:	2300      	movs	r3, #0
 8001292:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001296:	f107 0310 	add.w	r3, r7, #16
 800129a:	4618      	mov	r0, r3
 800129c:	f002 f8ec 	bl	8003478 <HAL_RCCEx_PeriphCLKConfig>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80012a6:	f7ff ff8d 	bl	80011c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012aa:	4b1c      	ldr	r3, [pc, #112]	@ (800131c <HAL_UART_MspInit+0xc8>)
 80012ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80012b0:	4a1a      	ldr	r2, [pc, #104]	@ (800131c <HAL_UART_MspInit+0xc8>)
 80012b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012b6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80012ba:	4b18      	ldr	r3, [pc, #96]	@ (800131c <HAL_UART_MspInit+0xc8>)
 80012bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80012c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012c4:	60fb      	str	r3, [r7, #12]
 80012c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c8:	4b14      	ldr	r3, [pc, #80]	@ (800131c <HAL_UART_MspInit+0xc8>)
 80012ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012ce:	4a13      	ldr	r2, [pc, #76]	@ (800131c <HAL_UART_MspInit+0xc8>)
 80012d0:	f043 0301 	orr.w	r3, r3, #1
 80012d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012d8:	4b10      	ldr	r3, [pc, #64]	@ (800131c <HAL_UART_MspInit+0xc8>)
 80012da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	60bb      	str	r3, [r7, #8]
 80012e4:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80012e6:	230c      	movs	r3, #12
 80012e8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ec:	2302      	movs	r3, #2
 80012ee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f8:	2300      	movs	r3, #0
 80012fa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012fe:	2307      	movs	r3, #7
 8001300:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001304:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001308:	4619      	mov	r1, r3
 800130a:	4805      	ldr	r0, [pc, #20]	@ (8001320 <HAL_UART_MspInit+0xcc>)
 800130c:	f000 fe6e 	bl	8001fec <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001310:	bf00      	nop
 8001312:	37e8      	adds	r7, #232	@ 0xe8
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	40004400 	.word	0x40004400
 800131c:	58024400 	.word	0x58024400
 8001320:	58020000 	.word	0x58020000

08001324 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b090      	sub	sp, #64	@ 0x40
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2b0f      	cmp	r3, #15
 8001330:	d827      	bhi.n	8001382 <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001332:	2200      	movs	r2, #0
 8001334:	6879      	ldr	r1, [r7, #4]
 8001336:	2036      	movs	r0, #54	@ 0x36
 8001338:	f000 fdcc 	bl	8001ed4 <HAL_NVIC_SetPriority>

     /* Enable the TIM6 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800133c:	2036      	movs	r0, #54	@ 0x36
 800133e:	f000 fde3 	bl	8001f08 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8001342:	4a29      	ldr	r2, [pc, #164]	@ (80013e8 <HAL_InitTick+0xc4>)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001348:	4b28      	ldr	r3, [pc, #160]	@ (80013ec <HAL_InitTick+0xc8>)
 800134a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800134e:	4a27      	ldr	r2, [pc, #156]	@ (80013ec <HAL_InitTick+0xc8>)
 8001350:	f043 0310 	orr.w	r3, r3, #16
 8001354:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001358:	4b24      	ldr	r3, [pc, #144]	@ (80013ec <HAL_InitTick+0xc8>)
 800135a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800135e:	f003 0310 	and.w	r3, r3, #16
 8001362:	60fb      	str	r3, [r7, #12]
 8001364:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001366:	f107 0210 	add.w	r2, r7, #16
 800136a:	f107 0314 	add.w	r3, r7, #20
 800136e:	4611      	mov	r1, r2
 8001370:	4618      	mov	r0, r3
 8001372:	f002 f83f 	bl	80033f4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001378:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800137a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800137c:	2b00      	cmp	r3, #0
 800137e:	d106      	bne.n	800138e <HAL_InitTick+0x6a>
 8001380:	e001      	b.n	8001386 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	e02b      	b.n	80013de <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001386:	f002 f809 	bl	800339c <HAL_RCC_GetPCLK1Freq>
 800138a:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800138c:	e004      	b.n	8001398 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800138e:	f002 f805 	bl	800339c <HAL_RCC_GetPCLK1Freq>
 8001392:	4603      	mov	r3, r0
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001398:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800139a:	4a15      	ldr	r2, [pc, #84]	@ (80013f0 <HAL_InitTick+0xcc>)
 800139c:	fba2 2303 	umull	r2, r3, r2, r3
 80013a0:	0c9b      	lsrs	r3, r3, #18
 80013a2:	3b01      	subs	r3, #1
 80013a4:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80013a6:	4b13      	ldr	r3, [pc, #76]	@ (80013f4 <HAL_InitTick+0xd0>)
 80013a8:	4a13      	ldr	r2, [pc, #76]	@ (80013f8 <HAL_InitTick+0xd4>)
 80013aa:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80013ac:	4b11      	ldr	r3, [pc, #68]	@ (80013f4 <HAL_InitTick+0xd0>)
 80013ae:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80013b2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80013b4:	4a0f      	ldr	r2, [pc, #60]	@ (80013f4 <HAL_InitTick+0xd0>)
 80013b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80013b8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80013ba:	4b0e      	ldr	r3, [pc, #56]	@ (80013f4 <HAL_InitTick+0xd0>)
 80013bc:	2200      	movs	r2, #0
 80013be:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013c0:	4b0c      	ldr	r3, [pc, #48]	@ (80013f4 <HAL_InitTick+0xd0>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80013c6:	480b      	ldr	r0, [pc, #44]	@ (80013f4 <HAL_InitTick+0xd0>)
 80013c8:	f003 fe82 	bl	80050d0 <HAL_TIM_Base_Init>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d104      	bne.n	80013dc <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80013d2:	4808      	ldr	r0, [pc, #32]	@ (80013f4 <HAL_InitTick+0xd0>)
 80013d4:	f003 fed4 	bl	8005180 <HAL_TIM_Base_Start_IT>
 80013d8:	4603      	mov	r3, r0
 80013da:	e000      	b.n	80013de <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80013dc:	2301      	movs	r3, #1
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3740      	adds	r7, #64	@ 0x40
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	24000028 	.word	0x24000028
 80013ec:	58024400 	.word	0x58024400
 80013f0:	431bde83 	.word	0x431bde83
 80013f4:	24000348 	.word	0x24000348
 80013f8:	40001000 	.word	0x40001000

080013fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001400:	bf00      	nop
 8001402:	e7fd      	b.n	8001400 <NMI_Handler+0x4>

08001404 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001408:	bf00      	nop
 800140a:	e7fd      	b.n	8001408 <HardFault_Handler+0x4>

0800140c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001410:	bf00      	nop
 8001412:	e7fd      	b.n	8001410 <MemManage_Handler+0x4>

08001414 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001418:	bf00      	nop
 800141a:	e7fd      	b.n	8001418 <BusFault_Handler+0x4>

0800141c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001420:	bf00      	nop
 8001422:	e7fd      	b.n	8001420 <UsageFault_Handler+0x4>

08001424 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001428:	bf00      	nop
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr

08001432 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001432:	b480      	push	{r7}
 8001434:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001436:	bf00      	nop
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001444:	bf00      	nop
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr

0800144e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800144e:	b480      	push	{r7}
 8001450:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001452:	bf00      	nop
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8001460:	2000      	movs	r0, #0
 8001462:	f000 fb27 	bl	8001ab4 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001466:	bf00      	nop
 8001468:	bd80      	pop	{r7, pc}
	...

0800146c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001470:	4802      	ldr	r0, [pc, #8]	@ (800147c <TIM6_DAC_IRQHandler+0x10>)
 8001472:	f003 fefd 	bl	8005270 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001476:	bf00      	nop
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	24000348 	.word	0x24000348

08001480 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001484:	4802      	ldr	r0, [pc, #8]	@ (8001490 <TIM7_IRQHandler+0x10>)
 8001486:	f003 fef3 	bl	8005270 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800148a:	bf00      	nop
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	2400025c 	.word	0x2400025c

08001494 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  return 1;
 8001498:	2301      	movs	r3, #1
}
 800149a:	4618      	mov	r0, r3
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <_kill>:

int _kill(int pid, int sig)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80014ae:	f006 f955 	bl	800775c <__errno>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2216      	movs	r2, #22
 80014b6:	601a      	str	r2, [r3, #0]
  return -1;
 80014b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3708      	adds	r7, #8
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <_exit>:

void _exit (int status)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80014cc:	f04f 31ff 	mov.w	r1, #4294967295
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	f7ff ffe7 	bl	80014a4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80014d6:	bf00      	nop
 80014d8:	e7fd      	b.n	80014d6 <_exit+0x12>

080014da <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	b086      	sub	sp, #24
 80014de:	af00      	add	r7, sp, #0
 80014e0:	60f8      	str	r0, [r7, #12]
 80014e2:	60b9      	str	r1, [r7, #8]
 80014e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014e6:	2300      	movs	r3, #0
 80014e8:	617b      	str	r3, [r7, #20]
 80014ea:	e00a      	b.n	8001502 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014ec:	f3af 8000 	nop.w
 80014f0:	4601      	mov	r1, r0
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	1c5a      	adds	r2, r3, #1
 80014f6:	60ba      	str	r2, [r7, #8]
 80014f8:	b2ca      	uxtb	r2, r1
 80014fa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	3301      	adds	r3, #1
 8001500:	617b      	str	r3, [r7, #20]
 8001502:	697a      	ldr	r2, [r7, #20]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	429a      	cmp	r2, r3
 8001508:	dbf0      	blt.n	80014ec <_read+0x12>
  }

  return len;
 800150a:	687b      	ldr	r3, [r7, #4]
}
 800150c:	4618      	mov	r0, r3
 800150e:	3718      	adds	r7, #24
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}

08001514 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b086      	sub	sp, #24
 8001518:	af00      	add	r7, sp, #0
 800151a:	60f8      	str	r0, [r7, #12]
 800151c:	60b9      	str	r1, [r7, #8]
 800151e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001520:	2300      	movs	r3, #0
 8001522:	617b      	str	r3, [r7, #20]
 8001524:	e009      	b.n	800153a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	1c5a      	adds	r2, r3, #1
 800152a:	60ba      	str	r2, [r7, #8]
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	4618      	mov	r0, r3
 8001530:	f000 fb34 	bl	8001b9c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	3301      	adds	r3, #1
 8001538:	617b      	str	r3, [r7, #20]
 800153a:	697a      	ldr	r2, [r7, #20]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	429a      	cmp	r2, r3
 8001540:	dbf1      	blt.n	8001526 <_write+0x12>
  }
  return len;
 8001542:	687b      	ldr	r3, [r7, #4]
}
 8001544:	4618      	mov	r0, r3
 8001546:	3718      	adds	r7, #24
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}

0800154c <_close>:

int _close(int file)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001554:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001558:	4618      	mov	r0, r3
 800155a:	370c      	adds	r7, #12
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr

08001564 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001574:	605a      	str	r2, [r3, #4]
  return 0;
 8001576:	2300      	movs	r3, #0
}
 8001578:	4618      	mov	r0, r3
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr

08001584 <_isatty>:

int _isatty(int file)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800158c:	2301      	movs	r3, #1
}
 800158e:	4618      	mov	r0, r3
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr

0800159a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800159a:	b480      	push	{r7}
 800159c:	b085      	sub	sp, #20
 800159e:	af00      	add	r7, sp, #0
 80015a0:	60f8      	str	r0, [r7, #12]
 80015a2:	60b9      	str	r1, [r7, #8]
 80015a4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015a6:	2300      	movs	r3, #0
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3714      	adds	r7, #20
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b086      	sub	sp, #24
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015bc:	4a14      	ldr	r2, [pc, #80]	@ (8001610 <_sbrk+0x5c>)
 80015be:	4b15      	ldr	r3, [pc, #84]	@ (8001614 <_sbrk+0x60>)
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015c8:	4b13      	ldr	r3, [pc, #76]	@ (8001618 <_sbrk+0x64>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d102      	bne.n	80015d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015d0:	4b11      	ldr	r3, [pc, #68]	@ (8001618 <_sbrk+0x64>)
 80015d2:	4a12      	ldr	r2, [pc, #72]	@ (800161c <_sbrk+0x68>)
 80015d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015d6:	4b10      	ldr	r3, [pc, #64]	@ (8001618 <_sbrk+0x64>)
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4413      	add	r3, r2
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d207      	bcs.n	80015f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015e4:	f006 f8ba 	bl	800775c <__errno>
 80015e8:	4603      	mov	r3, r0
 80015ea:	220c      	movs	r2, #12
 80015ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015ee:	f04f 33ff 	mov.w	r3, #4294967295
 80015f2:	e009      	b.n	8001608 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015f4:	4b08      	ldr	r3, [pc, #32]	@ (8001618 <_sbrk+0x64>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015fa:	4b07      	ldr	r3, [pc, #28]	@ (8001618 <_sbrk+0x64>)
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4413      	add	r3, r2
 8001602:	4a05      	ldr	r2, [pc, #20]	@ (8001618 <_sbrk+0x64>)
 8001604:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001606:	68fb      	ldr	r3, [r7, #12]
}
 8001608:	4618      	mov	r0, r3
 800160a:	3718      	adds	r7, #24
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	24080000 	.word	0x24080000
 8001614:	00000400 	.word	0x00000400
 8001618:	24000394 	.word	0x24000394
 800161c:	24000588 	.word	0x24000588

08001620 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001624:	4b43      	ldr	r3, [pc, #268]	@ (8001734 <SystemInit+0x114>)
 8001626:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800162a:	4a42      	ldr	r2, [pc, #264]	@ (8001734 <SystemInit+0x114>)
 800162c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001630:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001634:	4b40      	ldr	r3, [pc, #256]	@ (8001738 <SystemInit+0x118>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 030f 	and.w	r3, r3, #15
 800163c:	2b06      	cmp	r3, #6
 800163e:	d807      	bhi.n	8001650 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001640:	4b3d      	ldr	r3, [pc, #244]	@ (8001738 <SystemInit+0x118>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f023 030f 	bic.w	r3, r3, #15
 8001648:	4a3b      	ldr	r2, [pc, #236]	@ (8001738 <SystemInit+0x118>)
 800164a:	f043 0307 	orr.w	r3, r3, #7
 800164e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001650:	4b3a      	ldr	r3, [pc, #232]	@ (800173c <SystemInit+0x11c>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a39      	ldr	r2, [pc, #228]	@ (800173c <SystemInit+0x11c>)
 8001656:	f043 0301 	orr.w	r3, r3, #1
 800165a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800165c:	4b37      	ldr	r3, [pc, #220]	@ (800173c <SystemInit+0x11c>)
 800165e:	2200      	movs	r2, #0
 8001660:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001662:	4b36      	ldr	r3, [pc, #216]	@ (800173c <SystemInit+0x11c>)
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	4935      	ldr	r1, [pc, #212]	@ (800173c <SystemInit+0x11c>)
 8001668:	4b35      	ldr	r3, [pc, #212]	@ (8001740 <SystemInit+0x120>)
 800166a:	4013      	ands	r3, r2
 800166c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800166e:	4b32      	ldr	r3, [pc, #200]	@ (8001738 <SystemInit+0x118>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0308 	and.w	r3, r3, #8
 8001676:	2b00      	cmp	r3, #0
 8001678:	d007      	beq.n	800168a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800167a:	4b2f      	ldr	r3, [pc, #188]	@ (8001738 <SystemInit+0x118>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f023 030f 	bic.w	r3, r3, #15
 8001682:	4a2d      	ldr	r2, [pc, #180]	@ (8001738 <SystemInit+0x118>)
 8001684:	f043 0307 	orr.w	r3, r3, #7
 8001688:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800168a:	4b2c      	ldr	r3, [pc, #176]	@ (800173c <SystemInit+0x11c>)
 800168c:	2200      	movs	r2, #0
 800168e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001690:	4b2a      	ldr	r3, [pc, #168]	@ (800173c <SystemInit+0x11c>)
 8001692:	2200      	movs	r2, #0
 8001694:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001696:	4b29      	ldr	r3, [pc, #164]	@ (800173c <SystemInit+0x11c>)
 8001698:	2200      	movs	r2, #0
 800169a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800169c:	4b27      	ldr	r3, [pc, #156]	@ (800173c <SystemInit+0x11c>)
 800169e:	4a29      	ldr	r2, [pc, #164]	@ (8001744 <SystemInit+0x124>)
 80016a0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80016a2:	4b26      	ldr	r3, [pc, #152]	@ (800173c <SystemInit+0x11c>)
 80016a4:	4a28      	ldr	r2, [pc, #160]	@ (8001748 <SystemInit+0x128>)
 80016a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80016a8:	4b24      	ldr	r3, [pc, #144]	@ (800173c <SystemInit+0x11c>)
 80016aa:	4a28      	ldr	r2, [pc, #160]	@ (800174c <SystemInit+0x12c>)
 80016ac:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80016ae:	4b23      	ldr	r3, [pc, #140]	@ (800173c <SystemInit+0x11c>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80016b4:	4b21      	ldr	r3, [pc, #132]	@ (800173c <SystemInit+0x11c>)
 80016b6:	4a25      	ldr	r2, [pc, #148]	@ (800174c <SystemInit+0x12c>)
 80016b8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80016ba:	4b20      	ldr	r3, [pc, #128]	@ (800173c <SystemInit+0x11c>)
 80016bc:	2200      	movs	r2, #0
 80016be:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80016c0:	4b1e      	ldr	r3, [pc, #120]	@ (800173c <SystemInit+0x11c>)
 80016c2:	4a22      	ldr	r2, [pc, #136]	@ (800174c <SystemInit+0x12c>)
 80016c4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80016c6:	4b1d      	ldr	r3, [pc, #116]	@ (800173c <SystemInit+0x11c>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80016cc:	4b1b      	ldr	r3, [pc, #108]	@ (800173c <SystemInit+0x11c>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a1a      	ldr	r2, [pc, #104]	@ (800173c <SystemInit+0x11c>)
 80016d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016d6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80016d8:	4b18      	ldr	r3, [pc, #96]	@ (800173c <SystemInit+0x11c>)
 80016da:	2200      	movs	r2, #0
 80016dc:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80016de:	4b1c      	ldr	r3, [pc, #112]	@ (8001750 <SystemInit+0x130>)
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001754 <SystemInit+0x134>)
 80016e4:	4013      	ands	r3, r2
 80016e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80016ea:	d202      	bcs.n	80016f2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80016ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001758 <SystemInit+0x138>)
 80016ee:	2201      	movs	r2, #1
 80016f0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80016f2:	4b12      	ldr	r3, [pc, #72]	@ (800173c <SystemInit+0x11c>)
 80016f4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80016f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d113      	bne.n	8001728 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001700:	4b0e      	ldr	r3, [pc, #56]	@ (800173c <SystemInit+0x11c>)
 8001702:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001706:	4a0d      	ldr	r2, [pc, #52]	@ (800173c <SystemInit+0x11c>)
 8001708:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800170c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001710:	4b12      	ldr	r3, [pc, #72]	@ (800175c <SystemInit+0x13c>)
 8001712:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001716:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001718:	4b08      	ldr	r3, [pc, #32]	@ (800173c <SystemInit+0x11c>)
 800171a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800171e:	4a07      	ldr	r2, [pc, #28]	@ (800173c <SystemInit+0x11c>)
 8001720:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001724:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001728:	bf00      	nop
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	e000ed00 	.word	0xe000ed00
 8001738:	52002000 	.word	0x52002000
 800173c:	58024400 	.word	0x58024400
 8001740:	eaf6ed7f 	.word	0xeaf6ed7f
 8001744:	02020200 	.word	0x02020200
 8001748:	01ff0000 	.word	0x01ff0000
 800174c:	01010280 	.word	0x01010280
 8001750:	5c001000 	.word	0x5c001000
 8001754:	ffff0000 	.word	0xffff0000
 8001758:	51008108 	.word	0x51008108
 800175c:	52004000 	.word	0x52004000

08001760 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8001764:	4b09      	ldr	r3, [pc, #36]	@ (800178c <ExitRun0Mode+0x2c>)
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	4a08      	ldr	r2, [pc, #32]	@ (800178c <ExitRun0Mode+0x2c>)
 800176a:	f043 0302 	orr.w	r3, r3, #2
 800176e:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001770:	bf00      	nop
 8001772:	4b06      	ldr	r3, [pc, #24]	@ (800178c <ExitRun0Mode+0x2c>)
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d0f9      	beq.n	8001772 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800177e:	bf00      	nop
 8001780:	bf00      	nop
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	58024800 	.word	0x58024800

08001790 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001790:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80017cc <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001794:	f7ff ffe4 	bl	8001760 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001798:	f7ff ff42 	bl	8001620 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800179c:	480c      	ldr	r0, [pc, #48]	@ (80017d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800179e:	490d      	ldr	r1, [pc, #52]	@ (80017d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017a0:	4a0d      	ldr	r2, [pc, #52]	@ (80017d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017a4:	e002      	b.n	80017ac <LoopCopyDataInit>

080017a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017aa:	3304      	adds	r3, #4

080017ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017b0:	d3f9      	bcc.n	80017a6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017b2:	4a0a      	ldr	r2, [pc, #40]	@ (80017dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017b4:	4c0a      	ldr	r4, [pc, #40]	@ (80017e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017b8:	e001      	b.n	80017be <LoopFillZerobss>

080017ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017bc:	3204      	adds	r2, #4

080017be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017c0:	d3fb      	bcc.n	80017ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017c2:	f005 ffd1 	bl	8007768 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017c6:	f7ff fa9b 	bl	8000d00 <main>
  bx  lr
 80017ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017cc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80017d0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80017d4:	240001f8 	.word	0x240001f8
  ldr r2, =_sidata
 80017d8:	080097ec 	.word	0x080097ec
  ldr r2, =_sbss
 80017dc:	240001f8 	.word	0x240001f8
  ldr r4, =_ebss
 80017e0:	24000588 	.word	0x24000588

080017e4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017e4:	e7fe      	b.n	80017e4 <ADC3_IRQHandler>
	...

080017e8 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b08c      	sub	sp, #48	@ 0x30
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	4603      	mov	r3, r0
 80017f0:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80017f2:	2300      	movs	r3, #0
 80017f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80017f6:	79fb      	ldrb	r3, [r7, #7]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d009      	beq.n	8001810 <BSP_LED_Init+0x28>
 80017fc:	79fb      	ldrb	r3, [r7, #7]
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d006      	beq.n	8001810 <BSP_LED_Init+0x28>
 8001802:	79fb      	ldrb	r3, [r7, #7]
 8001804:	2b02      	cmp	r3, #2
 8001806:	d003      	beq.n	8001810 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001808:	f06f 0301 	mvn.w	r3, #1
 800180c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800180e:	e055      	b.n	80018bc <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8001810:	79fb      	ldrb	r3, [r7, #7]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d10f      	bne.n	8001836 <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 8001816:	4b2c      	ldr	r3, [pc, #176]	@ (80018c8 <BSP_LED_Init+0xe0>)
 8001818:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800181c:	4a2a      	ldr	r2, [pc, #168]	@ (80018c8 <BSP_LED_Init+0xe0>)
 800181e:	f043 0302 	orr.w	r3, r3, #2
 8001822:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001826:	4b28      	ldr	r3, [pc, #160]	@ (80018c8 <BSP_LED_Init+0xe0>)
 8001828:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800182c:	f003 0302 	and.w	r3, r3, #2
 8001830:	617b      	str	r3, [r7, #20]
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	e021      	b.n	800187a <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 8001836:	79fb      	ldrb	r3, [r7, #7]
 8001838:	2b01      	cmp	r3, #1
 800183a:	d10f      	bne.n	800185c <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 800183c:	4b22      	ldr	r3, [pc, #136]	@ (80018c8 <BSP_LED_Init+0xe0>)
 800183e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001842:	4a21      	ldr	r2, [pc, #132]	@ (80018c8 <BSP_LED_Init+0xe0>)
 8001844:	f043 0302 	orr.w	r3, r3, #2
 8001848:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800184c:	4b1e      	ldr	r3, [pc, #120]	@ (80018c8 <BSP_LED_Init+0xe0>)
 800184e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001852:	f003 0302 	and.w	r3, r3, #2
 8001856:	613b      	str	r3, [r7, #16]
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	e00e      	b.n	800187a <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 800185c:	4b1a      	ldr	r3, [pc, #104]	@ (80018c8 <BSP_LED_Init+0xe0>)
 800185e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001862:	4a19      	ldr	r2, [pc, #100]	@ (80018c8 <BSP_LED_Init+0xe0>)
 8001864:	f043 0302 	orr.w	r3, r3, #2
 8001868:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800186c:	4b16      	ldr	r3, [pc, #88]	@ (80018c8 <BSP_LED_Init+0xe0>)
 800186e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001872:	f003 0302 	and.w	r3, r3, #2
 8001876:	60fb      	str	r3, [r7, #12]
 8001878:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 800187a:	79fb      	ldrb	r3, [r7, #7]
 800187c:	4a13      	ldr	r2, [pc, #76]	@ (80018cc <BSP_LED_Init+0xe4>)
 800187e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001882:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001884:	2301      	movs	r3, #1
 8001886:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8001888:	2300      	movs	r3, #0
 800188a:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800188c:	2303      	movs	r3, #3
 800188e:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001890:	79fb      	ldrb	r3, [r7, #7]
 8001892:	4a0f      	ldr	r2, [pc, #60]	@ (80018d0 <BSP_LED_Init+0xe8>)
 8001894:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001898:	f107 0218 	add.w	r2, r7, #24
 800189c:	4611      	mov	r1, r2
 800189e:	4618      	mov	r0, r3
 80018a0:	f000 fba4 	bl	8001fec <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80018a4:	79fb      	ldrb	r3, [r7, #7]
 80018a6:	4a0a      	ldr	r2, [pc, #40]	@ (80018d0 <BSP_LED_Init+0xe8>)
 80018a8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80018ac:	79fb      	ldrb	r3, [r7, #7]
 80018ae:	4a07      	ldr	r2, [pc, #28]	@ (80018cc <BSP_LED_Init+0xe4>)
 80018b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80018b4:	2200      	movs	r2, #0
 80018b6:	4619      	mov	r1, r3
 80018b8:	f000 fd48 	bl	800234c <HAL_GPIO_WritePin>
  }

  return ret;
 80018bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3730      	adds	r7, #48	@ 0x30
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	58024400 	.word	0x58024400
 80018cc:	08009434 	.word	0x08009434
 80018d0:	24000010 	.word	0x24000010

080018d4 <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4603      	mov	r3, r0
 80018dc:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80018de:	2300      	movs	r3, #0
 80018e0:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80018e2:	79fb      	ldrb	r3, [r7, #7]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d009      	beq.n	80018fc <BSP_LED_On+0x28>
 80018e8:	79fb      	ldrb	r3, [r7, #7]
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d006      	beq.n	80018fc <BSP_LED_On+0x28>
 80018ee:	79fb      	ldrb	r3, [r7, #7]
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d003      	beq.n	80018fc <BSP_LED_On+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80018f4:	f06f 0301 	mvn.w	r3, #1
 80018f8:	60fb      	str	r3, [r7, #12]
 80018fa:	e00b      	b.n	8001914 <BSP_LED_On+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 80018fc:	79fb      	ldrb	r3, [r7, #7]
 80018fe:	4a08      	ldr	r2, [pc, #32]	@ (8001920 <BSP_LED_On+0x4c>)
 8001900:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001904:	79fb      	ldrb	r3, [r7, #7]
 8001906:	4a07      	ldr	r2, [pc, #28]	@ (8001924 <BSP_LED_On+0x50>)
 8001908:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800190c:	2201      	movs	r2, #1
 800190e:	4619      	mov	r1, r3
 8001910:	f000 fd1c 	bl	800234c <HAL_GPIO_WritePin>
  }

  return ret;
 8001914:	68fb      	ldr	r3, [r7, #12]
}
 8001916:	4618      	mov	r0, r3
 8001918:	3710      	adds	r7, #16
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	24000010 	.word	0x24000010
 8001924:	08009434 	.word	0x08009434

08001928 <BSP_LED_Off>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	4603      	mov	r3, r0
 8001930:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001932:	2300      	movs	r3, #0
 8001934:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001936:	79fb      	ldrb	r3, [r7, #7]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d009      	beq.n	8001950 <BSP_LED_Off+0x28>
 800193c:	79fb      	ldrb	r3, [r7, #7]
 800193e:	2b01      	cmp	r3, #1
 8001940:	d006      	beq.n	8001950 <BSP_LED_Off+0x28>
 8001942:	79fb      	ldrb	r3, [r7, #7]
 8001944:	2b02      	cmp	r3, #2
 8001946:	d003      	beq.n	8001950 <BSP_LED_Off+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001948:	f06f 0301 	mvn.w	r3, #1
 800194c:	60fb      	str	r3, [r7, #12]
 800194e:	e00b      	b.n	8001968 <BSP_LED_Off+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001950:	79fb      	ldrb	r3, [r7, #7]
 8001952:	4a08      	ldr	r2, [pc, #32]	@ (8001974 <BSP_LED_Off+0x4c>)
 8001954:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001958:	79fb      	ldrb	r3, [r7, #7]
 800195a:	4a07      	ldr	r2, [pc, #28]	@ (8001978 <BSP_LED_Off+0x50>)
 800195c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001960:	2200      	movs	r2, #0
 8001962:	4619      	mov	r1, r3
 8001964:	f000 fcf2 	bl	800234c <HAL_GPIO_WritePin>
  }

  return ret;
 8001968:	68fb      	ldr	r3, [r7, #12]
}
 800196a:	4618      	mov	r0, r3
 800196c:	3710      	adds	r7, #16
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	24000010 	.word	0x24000010
 8001978:	08009434 	.word	0x08009434

0800197c <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0
 8001982:	4603      	mov	r3, r0
 8001984:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001986:	2300      	movs	r3, #0
 8001988:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 800198a:	79fb      	ldrb	r3, [r7, #7]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d009      	beq.n	80019a4 <BSP_LED_Toggle+0x28>
 8001990:	79fb      	ldrb	r3, [r7, #7]
 8001992:	2b01      	cmp	r3, #1
 8001994:	d006      	beq.n	80019a4 <BSP_LED_Toggle+0x28>
 8001996:	79fb      	ldrb	r3, [r7, #7]
 8001998:	2b02      	cmp	r3, #2
 800199a:	d003      	beq.n	80019a4 <BSP_LED_Toggle+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800199c:	f06f 0301 	mvn.w	r3, #1
 80019a0:	60fb      	str	r3, [r7, #12]
 80019a2:	e00b      	b.n	80019bc <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 80019a4:	79fb      	ldrb	r3, [r7, #7]
 80019a6:	4a08      	ldr	r2, [pc, #32]	@ (80019c8 <BSP_LED_Toggle+0x4c>)
 80019a8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80019ac:	79fb      	ldrb	r3, [r7, #7]
 80019ae:	4907      	ldr	r1, [pc, #28]	@ (80019cc <BSP_LED_Toggle+0x50>)
 80019b0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80019b4:	4619      	mov	r1, r3
 80019b6:	4610      	mov	r0, r2
 80019b8:	f000 fce1 	bl	800237e <HAL_GPIO_TogglePin>
  }

  return ret;
 80019bc:	68fb      	ldr	r3, [r7, #12]
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3710      	adds	r7, #16
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	24000010 	.word	0x24000010
 80019cc:	08009434 	.word	0x08009434

080019d0 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b088      	sub	sp, #32
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	4603      	mov	r3, r0
 80019d8:	460a      	mov	r2, r1
 80019da:	71fb      	strb	r3, [r7, #7]
 80019dc:	4613      	mov	r3, r2
 80019de:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 80019e0:	4b2e      	ldr	r3, [pc, #184]	@ (8001a9c <BSP_PB_Init+0xcc>)
 80019e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019e6:	4a2d      	ldr	r2, [pc, #180]	@ (8001a9c <BSP_PB_Init+0xcc>)
 80019e8:	f043 0304 	orr.w	r3, r3, #4
 80019ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80019f0:	4b2a      	ldr	r3, [pc, #168]	@ (8001a9c <BSP_PB_Init+0xcc>)
 80019f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019f6:	f003 0304 	and.w	r3, r3, #4
 80019fa:	60bb      	str	r3, [r7, #8]
 80019fc:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 80019fe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a02:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8001a04:	2302      	movs	r3, #2
 8001a06:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a08:	2302      	movs	r3, #2
 8001a0a:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8001a0c:	79bb      	ldrb	r3, [r7, #6]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d10c      	bne.n	8001a2c <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8001a12:	2300      	movs	r3, #0
 8001a14:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8001a16:	79fb      	ldrb	r3, [r7, #7]
 8001a18:	4a21      	ldr	r2, [pc, #132]	@ (8001aa0 <BSP_PB_Init+0xd0>)
 8001a1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a1e:	f107 020c 	add.w	r2, r7, #12
 8001a22:	4611      	mov	r1, r2
 8001a24:	4618      	mov	r0, r3
 8001a26:	f000 fae1 	bl	8001fec <HAL_GPIO_Init>
 8001a2a:	e031      	b.n	8001a90 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8001a2c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001a30:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001a32:	79fb      	ldrb	r3, [r7, #7]
 8001a34:	4a1a      	ldr	r2, [pc, #104]	@ (8001aa0 <BSP_PB_Init+0xd0>)
 8001a36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a3a:	f107 020c 	add.w	r2, r7, #12
 8001a3e:	4611      	mov	r1, r2
 8001a40:	4618      	mov	r0, r3
 8001a42:	f000 fad3 	bl	8001fec <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8001a46:	79fb      	ldrb	r3, [r7, #7]
 8001a48:	00db      	lsls	r3, r3, #3
 8001a4a:	4a16      	ldr	r2, [pc, #88]	@ (8001aa4 <BSP_PB_Init+0xd4>)
 8001a4c:	441a      	add	r2, r3
 8001a4e:	79fb      	ldrb	r3, [r7, #7]
 8001a50:	4915      	ldr	r1, [pc, #84]	@ (8001aa8 <BSP_PB_Init+0xd8>)
 8001a52:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001a56:	4619      	mov	r1, r3
 8001a58:	4610      	mov	r0, r2
 8001a5a:	f000 fa82 	bl	8001f62 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8001a5e:	79fb      	ldrb	r3, [r7, #7]
 8001a60:	00db      	lsls	r3, r3, #3
 8001a62:	4a10      	ldr	r2, [pc, #64]	@ (8001aa4 <BSP_PB_Init+0xd4>)
 8001a64:	1898      	adds	r0, r3, r2
 8001a66:	79fb      	ldrb	r3, [r7, #7]
 8001a68:	4a10      	ldr	r2, [pc, #64]	@ (8001aac <BSP_PB_Init+0xdc>)
 8001a6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a6e:	461a      	mov	r2, r3
 8001a70:	2100      	movs	r1, #0
 8001a72:	f000 fa57 	bl	8001f24 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001a76:	2028      	movs	r0, #40	@ 0x28
 8001a78:	79fb      	ldrb	r3, [r7, #7]
 8001a7a:	4a0d      	ldr	r2, [pc, #52]	@ (8001ab0 <BSP_PB_Init+0xe0>)
 8001a7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a80:	2200      	movs	r2, #0
 8001a82:	4619      	mov	r1, r3
 8001a84:	f000 fa26 	bl	8001ed4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001a88:	2328      	movs	r3, #40	@ 0x28
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f000 fa3c 	bl	8001f08 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3720      	adds	r7, #32
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	58024400 	.word	0x58024400
 8001aa0:	2400001c 	.word	0x2400001c
 8001aa4:	24000398 	.word	0x24000398
 8001aa8:	0800943c 	.word	0x0800943c
 8001aac:	24000020 	.word	0x24000020
 8001ab0:	24000024 	.word	0x24000024

08001ab4 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	4603      	mov	r3, r0
 8001abc:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8001abe:	79fb      	ldrb	r3, [r7, #7]
 8001ac0:	00db      	lsls	r3, r3, #3
 8001ac2:	4a04      	ldr	r2, [pc, #16]	@ (8001ad4 <BSP_PB_IRQHandler+0x20>)
 8001ac4:	4413      	add	r3, r2
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f000 fa60 	bl	8001f8c <HAL_EXTI_IRQHandler>
}
 8001acc:	bf00      	nop
 8001ace:	3708      	adds	r7, #8
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	24000398 	.word	0x24000398

08001ad8 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	4603      	mov	r3, r0
 8001ae0:	6039      	str	r1, [r7, #0]
 8001ae2:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 8001ae8:	79fb      	ldrb	r3, [r7, #7]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d003      	beq.n	8001af6 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001aee:	f06f 0301 	mvn.w	r3, #1
 8001af2:	60fb      	str	r3, [r7, #12]
 8001af4:	e018      	b.n	8001b28 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8001af6:	79fb      	ldrb	r3, [r7, #7]
 8001af8:	2294      	movs	r2, #148	@ 0x94
 8001afa:	fb02 f303 	mul.w	r3, r2, r3
 8001afe:	4a0d      	ldr	r2, [pc, #52]	@ (8001b34 <BSP_COM_Init+0x5c>)
 8001b00:	4413      	add	r3, r2
 8001b02:	4618      	mov	r0, r3
 8001b04:	f000 f86e 	bl	8001be4 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8001b08:	79fb      	ldrb	r3, [r7, #7]
 8001b0a:	2294      	movs	r2, #148	@ 0x94
 8001b0c:	fb02 f303 	mul.w	r3, r2, r3
 8001b10:	4a08      	ldr	r2, [pc, #32]	@ (8001b34 <BSP_COM_Init+0x5c>)
 8001b12:	4413      	add	r3, r2
 8001b14:	6839      	ldr	r1, [r7, #0]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f000 f80e 	bl	8001b38 <MX_USART3_Init>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d002      	beq.n	8001b28 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001b22:	f06f 0303 	mvn.w	r3, #3
 8001b26:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001b28:	68fb      	ldr	r3, [r7, #12]
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3710      	adds	r7, #16
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	240003a0 	.word	0x240003a0

08001b38 <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8001b42:	4b15      	ldr	r3, [pc, #84]	@ (8001b98 <MX_USART3_Init+0x60>)
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	220c      	movs	r2, #12
 8001b56:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	895b      	ldrh	r3, [r3, #10]
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685a      	ldr	r2, [r3, #4]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	891b      	ldrh	r3, [r3, #8]
 8001b6e:	461a      	mov	r2, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	899b      	ldrh	r3, [r3, #12]
 8001b78:	461a      	mov	r2, r3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001b84:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f003 fdee 	bl	8005768 <HAL_UART_Init>
 8001b8c:	4603      	mov	r3, r0
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	2400000c 	.word	0x2400000c

08001b9c <__io_putchar>:
 #ifdef __GNUC__
 int __io_putchar (int ch)
 #else
 int fputc (int ch, FILE *f)
 #endif /* __GNUC__ */
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit (&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8001ba4:	4b09      	ldr	r3, [pc, #36]	@ (8001bcc <__io_putchar+0x30>)
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	461a      	mov	r2, r3
 8001baa:	2394      	movs	r3, #148	@ 0x94
 8001bac:	fb02 f303 	mul.w	r3, r2, r3
 8001bb0:	4a07      	ldr	r2, [pc, #28]	@ (8001bd0 <__io_putchar+0x34>)
 8001bb2:	1898      	adds	r0, r3, r2
 8001bb4:	1d39      	adds	r1, r7, #4
 8001bb6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bba:	2201      	movs	r2, #1
 8001bbc:	f003 fe24 	bl	8005808 <HAL_UART_Transmit>
  return ch;
 8001bc0:	687b      	ldr	r3, [r7, #4]
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	24000434 	.word	0x24000434
 8001bd0:	240003a0 	.word	0x240003a0

08001bd4 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001bd8:	2000      	movs	r0, #0
 8001bda:	f7ff fadf 	bl	800119c <BSP_PB_Callback>
}
 8001bde:	bf00      	nop
 8001be0:	bd80      	pop	{r7, pc}
	...

08001be4 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b08a      	sub	sp, #40	@ 0x28
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001bec:	4b27      	ldr	r3, [pc, #156]	@ (8001c8c <COM1_MspInit+0xa8>)
 8001bee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bf2:	4a26      	ldr	r2, [pc, #152]	@ (8001c8c <COM1_MspInit+0xa8>)
 8001bf4:	f043 0308 	orr.w	r3, r3, #8
 8001bf8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001bfc:	4b23      	ldr	r3, [pc, #140]	@ (8001c8c <COM1_MspInit+0xa8>)
 8001bfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c02:	f003 0308 	and.w	r3, r3, #8
 8001c06:	613b      	str	r3, [r7, #16]
 8001c08:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8001c0a:	4b20      	ldr	r3, [pc, #128]	@ (8001c8c <COM1_MspInit+0xa8>)
 8001c0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c10:	4a1e      	ldr	r2, [pc, #120]	@ (8001c8c <COM1_MspInit+0xa8>)
 8001c12:	f043 0308 	orr.w	r3, r3, #8
 8001c16:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c1a:	4b1c      	ldr	r3, [pc, #112]	@ (8001c8c <COM1_MspInit+0xa8>)
 8001c1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c20:	f003 0308 	and.w	r3, r3, #8
 8001c24:	60fb      	str	r3, [r7, #12]
 8001c26:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001c28:	4b18      	ldr	r3, [pc, #96]	@ (8001c8c <COM1_MspInit+0xa8>)
 8001c2a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c2e:	4a17      	ldr	r2, [pc, #92]	@ (8001c8c <COM1_MspInit+0xa8>)
 8001c30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c34:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001c38:	4b14      	ldr	r3, [pc, #80]	@ (8001c8c <COM1_MspInit+0xa8>)
 8001c3a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c3e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c42:	60bb      	str	r3, [r7, #8]
 8001c44:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 8001c46:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c4a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c50:	2302      	movs	r3, #2
 8001c52:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001c54:	2301      	movs	r3, #1
 8001c56:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001c58:	2307      	movs	r3, #7
 8001c5a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001c5c:	f107 0314 	add.w	r3, r7, #20
 8001c60:	4619      	mov	r1, r3
 8001c62:	480b      	ldr	r0, [pc, #44]	@ (8001c90 <COM1_MspInit+0xac>)
 8001c64:	f000 f9c2 	bl	8001fec <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8001c68:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001c6c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001c6e:	2302      	movs	r3, #2
 8001c70:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8001c72:	2307      	movs	r3, #7
 8001c74:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8001c76:	f107 0314 	add.w	r3, r7, #20
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4804      	ldr	r0, [pc, #16]	@ (8001c90 <COM1_MspInit+0xac>)
 8001c7e:	f000 f9b5 	bl	8001fec <HAL_GPIO_Init>
}
 8001c82:	bf00      	nop
 8001c84:	3728      	adds	r7, #40	@ 0x28
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	58024400 	.word	0x58024400
 8001c90:	58020c00 	.word	0x58020c00

08001c94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c9a:	2003      	movs	r0, #3
 8001c9c:	f000 f90f 	bl	8001ebe <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001ca0:	f001 f9d2 	bl	8003048 <HAL_RCC_GetSysClockFreq>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	4b15      	ldr	r3, [pc, #84]	@ (8001cfc <HAL_Init+0x68>)
 8001ca8:	699b      	ldr	r3, [r3, #24]
 8001caa:	0a1b      	lsrs	r3, r3, #8
 8001cac:	f003 030f 	and.w	r3, r3, #15
 8001cb0:	4913      	ldr	r1, [pc, #76]	@ (8001d00 <HAL_Init+0x6c>)
 8001cb2:	5ccb      	ldrb	r3, [r1, r3]
 8001cb4:	f003 031f 	and.w	r3, r3, #31
 8001cb8:	fa22 f303 	lsr.w	r3, r2, r3
 8001cbc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001cbe:	4b0f      	ldr	r3, [pc, #60]	@ (8001cfc <HAL_Init+0x68>)
 8001cc0:	699b      	ldr	r3, [r3, #24]
 8001cc2:	f003 030f 	and.w	r3, r3, #15
 8001cc6:	4a0e      	ldr	r2, [pc, #56]	@ (8001d00 <HAL_Init+0x6c>)
 8001cc8:	5cd3      	ldrb	r3, [r2, r3]
 8001cca:	f003 031f 	and.w	r3, r3, #31
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	fa22 f303 	lsr.w	r3, r2, r3
 8001cd4:	4a0b      	ldr	r2, [pc, #44]	@ (8001d04 <HAL_Init+0x70>)
 8001cd6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001cd8:	4a0b      	ldr	r2, [pc, #44]	@ (8001d08 <HAL_Init+0x74>)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001cde:	200f      	movs	r0, #15
 8001ce0:	f7ff fb20 	bl	8001324 <HAL_InitTick>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e002      	b.n	8001cf4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001cee:	f7ff fa6f 	bl	80011d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cf2:	2300      	movs	r3, #0
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3708      	adds	r7, #8
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	58024400 	.word	0x58024400
 8001d00:	08009424 	.word	0x08009424
 8001d04:	24000008 	.word	0x24000008
 8001d08:	24000004 	.word	0x24000004

08001d0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d10:	4b06      	ldr	r3, [pc, #24]	@ (8001d2c <HAL_IncTick+0x20>)
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	461a      	mov	r2, r3
 8001d16:	4b06      	ldr	r3, [pc, #24]	@ (8001d30 <HAL_IncTick+0x24>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4413      	add	r3, r2
 8001d1c:	4a04      	ldr	r2, [pc, #16]	@ (8001d30 <HAL_IncTick+0x24>)
 8001d1e:	6013      	str	r3, [r2, #0]
}
 8001d20:	bf00      	nop
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	2400002c 	.word	0x2400002c
 8001d30:	24000438 	.word	0x24000438

08001d34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  return uwTick;
 8001d38:	4b03      	ldr	r3, [pc, #12]	@ (8001d48 <HAL_GetTick+0x14>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	24000438 	.word	0x24000438

08001d4c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001d50:	4b03      	ldr	r3, [pc, #12]	@ (8001d60 <HAL_GetREVID+0x14>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	0c1b      	lsrs	r3, r3, #16
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr
 8001d60:	5c001000 	.word	0x5c001000

08001d64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b085      	sub	sp, #20
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	f003 0307 	and.w	r3, r3, #7
 8001d72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d74:	4b0b      	ldr	r3, [pc, #44]	@ (8001da4 <__NVIC_SetPriorityGrouping+0x40>)
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d7a:	68ba      	ldr	r2, [r7, #8]
 8001d7c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d80:	4013      	ands	r3, r2
 8001d82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001d8c:	4b06      	ldr	r3, [pc, #24]	@ (8001da8 <__NVIC_SetPriorityGrouping+0x44>)
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d92:	4a04      	ldr	r2, [pc, #16]	@ (8001da4 <__NVIC_SetPriorityGrouping+0x40>)
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	60d3      	str	r3, [r2, #12]
}
 8001d98:	bf00      	nop
 8001d9a:	3714      	adds	r7, #20
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr
 8001da4:	e000ed00 	.word	0xe000ed00
 8001da8:	05fa0000 	.word	0x05fa0000

08001dac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001db0:	4b04      	ldr	r3, [pc, #16]	@ (8001dc4 <__NVIC_GetPriorityGrouping+0x18>)
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	0a1b      	lsrs	r3, r3, #8
 8001db6:	f003 0307 	and.w	r3, r3, #7
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr
 8001dc4:	e000ed00 	.word	0xe000ed00

08001dc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	4603      	mov	r3, r0
 8001dd0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001dd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	db0b      	blt.n	8001df2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dda:	88fb      	ldrh	r3, [r7, #6]
 8001ddc:	f003 021f 	and.w	r2, r3, #31
 8001de0:	4907      	ldr	r1, [pc, #28]	@ (8001e00 <__NVIC_EnableIRQ+0x38>)
 8001de2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001de6:	095b      	lsrs	r3, r3, #5
 8001de8:	2001      	movs	r0, #1
 8001dea:	fa00 f202 	lsl.w	r2, r0, r2
 8001dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001df2:	bf00      	nop
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	e000e100 	.word	0xe000e100

08001e04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	6039      	str	r1, [r7, #0]
 8001e0e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001e10:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	db0a      	blt.n	8001e2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	b2da      	uxtb	r2, r3
 8001e1c:	490c      	ldr	r1, [pc, #48]	@ (8001e50 <__NVIC_SetPriority+0x4c>)
 8001e1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e22:	0112      	lsls	r2, r2, #4
 8001e24:	b2d2      	uxtb	r2, r2
 8001e26:	440b      	add	r3, r1
 8001e28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e2c:	e00a      	b.n	8001e44 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	b2da      	uxtb	r2, r3
 8001e32:	4908      	ldr	r1, [pc, #32]	@ (8001e54 <__NVIC_SetPriority+0x50>)
 8001e34:	88fb      	ldrh	r3, [r7, #6]
 8001e36:	f003 030f 	and.w	r3, r3, #15
 8001e3a:	3b04      	subs	r3, #4
 8001e3c:	0112      	lsls	r2, r2, #4
 8001e3e:	b2d2      	uxtb	r2, r2
 8001e40:	440b      	add	r3, r1
 8001e42:	761a      	strb	r2, [r3, #24]
}
 8001e44:	bf00      	nop
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr
 8001e50:	e000e100 	.word	0xe000e100
 8001e54:	e000ed00 	.word	0xe000ed00

08001e58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b089      	sub	sp, #36	@ 0x24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	60f8      	str	r0, [r7, #12]
 8001e60:	60b9      	str	r1, [r7, #8]
 8001e62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	f003 0307 	and.w	r3, r3, #7
 8001e6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	f1c3 0307 	rsb	r3, r3, #7
 8001e72:	2b04      	cmp	r3, #4
 8001e74:	bf28      	it	cs
 8001e76:	2304      	movcs	r3, #4
 8001e78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	3304      	adds	r3, #4
 8001e7e:	2b06      	cmp	r3, #6
 8001e80:	d902      	bls.n	8001e88 <NVIC_EncodePriority+0x30>
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	3b03      	subs	r3, #3
 8001e86:	e000      	b.n	8001e8a <NVIC_EncodePriority+0x32>
 8001e88:	2300      	movs	r3, #0
 8001e8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	fa02 f303 	lsl.w	r3, r2, r3
 8001e96:	43da      	mvns	r2, r3
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	401a      	ands	r2, r3
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ea0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eaa:	43d9      	mvns	r1, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eb0:	4313      	orrs	r3, r2
         );
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3724      	adds	r7, #36	@ 0x24
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr

08001ebe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b082      	sub	sp, #8
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f7ff ff4c 	bl	8001d64 <__NVIC_SetPriorityGrouping>
}
 8001ecc:	bf00      	nop
 8001ece:	3708      	adds	r7, #8
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b086      	sub	sp, #24
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	4603      	mov	r3, r0
 8001edc:	60b9      	str	r1, [r7, #8]
 8001ede:	607a      	str	r2, [r7, #4]
 8001ee0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ee2:	f7ff ff63 	bl	8001dac <__NVIC_GetPriorityGrouping>
 8001ee6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	68b9      	ldr	r1, [r7, #8]
 8001eec:	6978      	ldr	r0, [r7, #20]
 8001eee:	f7ff ffb3 	bl	8001e58 <NVIC_EncodePriority>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ef8:	4611      	mov	r1, r2
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7ff ff82 	bl	8001e04 <__NVIC_SetPriority>
}
 8001f00:	bf00      	nop
 8001f02:	3718      	adds	r7, #24
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	4603      	mov	r3, r0
 8001f10:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7ff ff56 	bl	8001dc8 <__NVIC_EnableIRQ>
}
 8001f1c:	bf00      	nop
 8001f1e:	3708      	adds	r7, #8
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8001f24:	b480      	push	{r7}
 8001f26:	b087      	sub	sp, #28
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	460b      	mov	r3, r1
 8001f2e:	607a      	str	r2, [r7, #4]
 8001f30:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8001f32:	2300      	movs	r3, #0
 8001f34:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d101      	bne.n	8001f40 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e00a      	b.n	8001f56 <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8001f40:	7afb      	ldrb	r3, [r7, #11]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d103      	bne.n	8001f4e <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	605a      	str	r2, [r3, #4]
      break;
 8001f4c:	e002      	b.n	8001f54 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	75fb      	strb	r3, [r7, #23]
      break;
 8001f52:	bf00      	nop
  }

  return status;
 8001f54:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	371c      	adds	r7, #28
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr

08001f62 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8001f62:	b480      	push	{r7}
 8001f64:	b083      	sub	sp, #12
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]
 8001f6a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d101      	bne.n	8001f76 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e003      	b.n	8001f7e <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	683a      	ldr	r2, [r7, #0]
 8001f7a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001f7c:	2300      	movs	r3, #0
  }
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	370c      	adds	r7, #12
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
	...

08001f8c <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b086      	sub	sp, #24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	0c1b      	lsrs	r3, r3, #16
 8001f9a:	f003 0303 	and.w	r3, r3, #3
 8001f9e:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 031f 	and.w	r3, r3, #31
 8001fa8:	2201      	movs	r2, #1
 8001faa:	fa02 f303 	lsl.w	r3, r2, r3
 8001fae:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	011a      	lsls	r2, r3, #4
 8001fb4:	4b0c      	ldr	r3, [pc, #48]	@ (8001fe8 <HAL_EXTI_IRQHandler+0x5c>)
 8001fb6:	4413      	add	r3, r2
 8001fb8:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	693a      	ldr	r2, [r7, #16]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d009      	beq.n	8001fde <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	693a      	ldr	r2, [r7, #16]
 8001fce:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d002      	beq.n	8001fde <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	4798      	blx	r3
    }
  }
}
 8001fde:	bf00      	nop
 8001fe0:	3718      	adds	r7, #24
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	58000088 	.word	0x58000088

08001fec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b089      	sub	sp, #36	@ 0x24
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001ffa:	4b89      	ldr	r3, [pc, #548]	@ (8002220 <HAL_GPIO_Init+0x234>)
 8001ffc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001ffe:	e194      	b.n	800232a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	2101      	movs	r1, #1
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	fa01 f303 	lsl.w	r3, r1, r3
 800200c:	4013      	ands	r3, r2
 800200e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	2b00      	cmp	r3, #0
 8002014:	f000 8186 	beq.w	8002324 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f003 0303 	and.w	r3, r3, #3
 8002020:	2b01      	cmp	r3, #1
 8002022:	d005      	beq.n	8002030 <HAL_GPIO_Init+0x44>
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f003 0303 	and.w	r3, r3, #3
 800202c:	2b02      	cmp	r3, #2
 800202e:	d130      	bne.n	8002092 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	2203      	movs	r2, #3
 800203c:	fa02 f303 	lsl.w	r3, r2, r3
 8002040:	43db      	mvns	r3, r3
 8002042:	69ba      	ldr	r2, [r7, #24]
 8002044:	4013      	ands	r3, r2
 8002046:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	68da      	ldr	r2, [r3, #12]
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	005b      	lsls	r3, r3, #1
 8002050:	fa02 f303 	lsl.w	r3, r2, r3
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	4313      	orrs	r3, r2
 8002058:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002066:	2201      	movs	r2, #1
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	fa02 f303 	lsl.w	r3, r2, r3
 800206e:	43db      	mvns	r3, r3
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	4013      	ands	r3, r2
 8002074:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	091b      	lsrs	r3, r3, #4
 800207c:	f003 0201 	and.w	r2, r3, #1
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	fa02 f303 	lsl.w	r3, r2, r3
 8002086:	69ba      	ldr	r2, [r7, #24]
 8002088:	4313      	orrs	r3, r2
 800208a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	69ba      	ldr	r2, [r7, #24]
 8002090:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	f003 0303 	and.w	r3, r3, #3
 800209a:	2b03      	cmp	r3, #3
 800209c:	d017      	beq.n	80020ce <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	005b      	lsls	r3, r3, #1
 80020a8:	2203      	movs	r2, #3
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	43db      	mvns	r3, r3
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	4013      	ands	r3, r2
 80020b4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	689a      	ldr	r2, [r3, #8]
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	005b      	lsls	r3, r3, #1
 80020be:	fa02 f303 	lsl.w	r3, r2, r3
 80020c2:	69ba      	ldr	r2, [r7, #24]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f003 0303 	and.w	r3, r3, #3
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d123      	bne.n	8002122 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	08da      	lsrs	r2, r3, #3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	3208      	adds	r2, #8
 80020e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	f003 0307 	and.w	r3, r3, #7
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	220f      	movs	r2, #15
 80020f2:	fa02 f303 	lsl.w	r3, r2, r3
 80020f6:	43db      	mvns	r3, r3
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	4013      	ands	r3, r2
 80020fc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	691a      	ldr	r2, [r3, #16]
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	f003 0307 	and.w	r3, r3, #7
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	fa02 f303 	lsl.w	r3, r2, r3
 800210e:	69ba      	ldr	r2, [r7, #24]
 8002110:	4313      	orrs	r3, r2
 8002112:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	08da      	lsrs	r2, r3, #3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	3208      	adds	r2, #8
 800211c:	69b9      	ldr	r1, [r7, #24]
 800211e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	2203      	movs	r2, #3
 800212e:	fa02 f303 	lsl.w	r3, r2, r3
 8002132:	43db      	mvns	r3, r3
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	4013      	ands	r3, r2
 8002138:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f003 0203 	and.w	r2, r3, #3
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	fa02 f303 	lsl.w	r3, r2, r3
 800214a:	69ba      	ldr	r2, [r7, #24]
 800214c:	4313      	orrs	r3, r2
 800214e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	69ba      	ldr	r2, [r7, #24]
 8002154:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800215e:	2b00      	cmp	r3, #0
 8002160:	f000 80e0 	beq.w	8002324 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002164:	4b2f      	ldr	r3, [pc, #188]	@ (8002224 <HAL_GPIO_Init+0x238>)
 8002166:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800216a:	4a2e      	ldr	r2, [pc, #184]	@ (8002224 <HAL_GPIO_Init+0x238>)
 800216c:	f043 0302 	orr.w	r3, r3, #2
 8002170:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002174:	4b2b      	ldr	r3, [pc, #172]	@ (8002224 <HAL_GPIO_Init+0x238>)
 8002176:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800217a:	f003 0302 	and.w	r3, r3, #2
 800217e:	60fb      	str	r3, [r7, #12]
 8002180:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002182:	4a29      	ldr	r2, [pc, #164]	@ (8002228 <HAL_GPIO_Init+0x23c>)
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	089b      	lsrs	r3, r3, #2
 8002188:	3302      	adds	r3, #2
 800218a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800218e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	f003 0303 	and.w	r3, r3, #3
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	220f      	movs	r2, #15
 800219a:	fa02 f303 	lsl.w	r3, r2, r3
 800219e:	43db      	mvns	r3, r3
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	4013      	ands	r3, r2
 80021a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a20      	ldr	r2, [pc, #128]	@ (800222c <HAL_GPIO_Init+0x240>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d052      	beq.n	8002254 <HAL_GPIO_Init+0x268>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a1f      	ldr	r2, [pc, #124]	@ (8002230 <HAL_GPIO_Init+0x244>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d031      	beq.n	800221a <HAL_GPIO_Init+0x22e>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a1e      	ldr	r2, [pc, #120]	@ (8002234 <HAL_GPIO_Init+0x248>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d02b      	beq.n	8002216 <HAL_GPIO_Init+0x22a>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a1d      	ldr	r2, [pc, #116]	@ (8002238 <HAL_GPIO_Init+0x24c>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d025      	beq.n	8002212 <HAL_GPIO_Init+0x226>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a1c      	ldr	r2, [pc, #112]	@ (800223c <HAL_GPIO_Init+0x250>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d01f      	beq.n	800220e <HAL_GPIO_Init+0x222>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a1b      	ldr	r2, [pc, #108]	@ (8002240 <HAL_GPIO_Init+0x254>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d019      	beq.n	800220a <HAL_GPIO_Init+0x21e>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a1a      	ldr	r2, [pc, #104]	@ (8002244 <HAL_GPIO_Init+0x258>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d013      	beq.n	8002206 <HAL_GPIO_Init+0x21a>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a19      	ldr	r2, [pc, #100]	@ (8002248 <HAL_GPIO_Init+0x25c>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d00d      	beq.n	8002202 <HAL_GPIO_Init+0x216>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a18      	ldr	r2, [pc, #96]	@ (800224c <HAL_GPIO_Init+0x260>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d007      	beq.n	80021fe <HAL_GPIO_Init+0x212>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a17      	ldr	r2, [pc, #92]	@ (8002250 <HAL_GPIO_Init+0x264>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d101      	bne.n	80021fa <HAL_GPIO_Init+0x20e>
 80021f6:	2309      	movs	r3, #9
 80021f8:	e02d      	b.n	8002256 <HAL_GPIO_Init+0x26a>
 80021fa:	230a      	movs	r3, #10
 80021fc:	e02b      	b.n	8002256 <HAL_GPIO_Init+0x26a>
 80021fe:	2308      	movs	r3, #8
 8002200:	e029      	b.n	8002256 <HAL_GPIO_Init+0x26a>
 8002202:	2307      	movs	r3, #7
 8002204:	e027      	b.n	8002256 <HAL_GPIO_Init+0x26a>
 8002206:	2306      	movs	r3, #6
 8002208:	e025      	b.n	8002256 <HAL_GPIO_Init+0x26a>
 800220a:	2305      	movs	r3, #5
 800220c:	e023      	b.n	8002256 <HAL_GPIO_Init+0x26a>
 800220e:	2304      	movs	r3, #4
 8002210:	e021      	b.n	8002256 <HAL_GPIO_Init+0x26a>
 8002212:	2303      	movs	r3, #3
 8002214:	e01f      	b.n	8002256 <HAL_GPIO_Init+0x26a>
 8002216:	2302      	movs	r3, #2
 8002218:	e01d      	b.n	8002256 <HAL_GPIO_Init+0x26a>
 800221a:	2301      	movs	r3, #1
 800221c:	e01b      	b.n	8002256 <HAL_GPIO_Init+0x26a>
 800221e:	bf00      	nop
 8002220:	58000080 	.word	0x58000080
 8002224:	58024400 	.word	0x58024400
 8002228:	58000400 	.word	0x58000400
 800222c:	58020000 	.word	0x58020000
 8002230:	58020400 	.word	0x58020400
 8002234:	58020800 	.word	0x58020800
 8002238:	58020c00 	.word	0x58020c00
 800223c:	58021000 	.word	0x58021000
 8002240:	58021400 	.word	0x58021400
 8002244:	58021800 	.word	0x58021800
 8002248:	58021c00 	.word	0x58021c00
 800224c:	58022000 	.word	0x58022000
 8002250:	58022400 	.word	0x58022400
 8002254:	2300      	movs	r3, #0
 8002256:	69fa      	ldr	r2, [r7, #28]
 8002258:	f002 0203 	and.w	r2, r2, #3
 800225c:	0092      	lsls	r2, r2, #2
 800225e:	4093      	lsls	r3, r2
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	4313      	orrs	r3, r2
 8002264:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002266:	4938      	ldr	r1, [pc, #224]	@ (8002348 <HAL_GPIO_Init+0x35c>)
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	089b      	lsrs	r3, r3, #2
 800226c:	3302      	adds	r3, #2
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002274:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	43db      	mvns	r3, r3
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	4013      	ands	r3, r2
 8002284:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d003      	beq.n	800229a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002292:	69ba      	ldr	r2, [r7, #24]
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	4313      	orrs	r3, r2
 8002298:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800229a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800229e:	69bb      	ldr	r3, [r7, #24]
 80022a0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80022a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	43db      	mvns	r3, r3
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	4013      	ands	r3, r2
 80022b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d003      	beq.n	80022c8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80022c8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	43db      	mvns	r3, r3
 80022da:	69ba      	ldr	r2, [r7, #24]
 80022dc:	4013      	ands	r3, r2
 80022de:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d003      	beq.n	80022f4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80022ec:	69ba      	ldr	r2, [r7, #24]
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	43db      	mvns	r3, r3
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	4013      	ands	r3, r2
 8002308:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d003      	beq.n	800231e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002316:	69ba      	ldr	r2, [r7, #24]
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	4313      	orrs	r3, r2
 800231c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	69ba      	ldr	r2, [r7, #24]
 8002322:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	3301      	adds	r3, #1
 8002328:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	fa22 f303 	lsr.w	r3, r2, r3
 8002334:	2b00      	cmp	r3, #0
 8002336:	f47f ae63 	bne.w	8002000 <HAL_GPIO_Init+0x14>
  }
}
 800233a:	bf00      	nop
 800233c:	bf00      	nop
 800233e:	3724      	adds	r7, #36	@ 0x24
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr
 8002348:	58000400 	.word	0x58000400

0800234c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	460b      	mov	r3, r1
 8002356:	807b      	strh	r3, [r7, #2]
 8002358:	4613      	mov	r3, r2
 800235a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800235c:	787b      	ldrb	r3, [r7, #1]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d003      	beq.n	800236a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002362:	887a      	ldrh	r2, [r7, #2]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002368:	e003      	b.n	8002372 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800236a:	887b      	ldrh	r3, [r7, #2]
 800236c:	041a      	lsls	r2, r3, #16
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	619a      	str	r2, [r3, #24]
}
 8002372:	bf00      	nop
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr

0800237e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800237e:	b480      	push	{r7}
 8002380:	b085      	sub	sp, #20
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
 8002386:	460b      	mov	r3, r1
 8002388:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	695b      	ldr	r3, [r3, #20]
 800238e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002390:	887a      	ldrh	r2, [r7, #2]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	4013      	ands	r3, r2
 8002396:	041a      	lsls	r2, r3, #16
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	43d9      	mvns	r1, r3
 800239c:	887b      	ldrh	r3, [r7, #2]
 800239e:	400b      	ands	r3, r1
 80023a0:	431a      	orrs	r2, r3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	619a      	str	r2, [r3, #24]
}
 80023a6:	bf00      	nop
 80023a8:	3714      	adds	r7, #20
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
	...

080023b4 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80023bc:	4b19      	ldr	r3, [pc, #100]	@ (8002424 <HAL_PWREx_ConfigSupply+0x70>)
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	f003 0304 	and.w	r3, r3, #4
 80023c4:	2b04      	cmp	r3, #4
 80023c6:	d00a      	beq.n	80023de <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80023c8:	4b16      	ldr	r3, [pc, #88]	@ (8002424 <HAL_PWREx_ConfigSupply+0x70>)
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	f003 0307 	and.w	r3, r3, #7
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d001      	beq.n	80023da <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e01f      	b.n	800241a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80023da:	2300      	movs	r3, #0
 80023dc:	e01d      	b.n	800241a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80023de:	4b11      	ldr	r3, [pc, #68]	@ (8002424 <HAL_PWREx_ConfigSupply+0x70>)
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	f023 0207 	bic.w	r2, r3, #7
 80023e6:	490f      	ldr	r1, [pc, #60]	@ (8002424 <HAL_PWREx_ConfigSupply+0x70>)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80023ee:	f7ff fca1 	bl	8001d34 <HAL_GetTick>
 80023f2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80023f4:	e009      	b.n	800240a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80023f6:	f7ff fc9d 	bl	8001d34 <HAL_GetTick>
 80023fa:	4602      	mov	r2, r0
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002404:	d901      	bls.n	800240a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e007      	b.n	800241a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800240a:	4b06      	ldr	r3, [pc, #24]	@ (8002424 <HAL_PWREx_ConfigSupply+0x70>)
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002412:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002416:	d1ee      	bne.n	80023f6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	3710      	adds	r7, #16
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	58024800 	.word	0x58024800

08002428 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b08c      	sub	sp, #48	@ 0x30
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d102      	bne.n	800243c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	f000 bc48 	b.w	8002ccc <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0301 	and.w	r3, r3, #1
 8002444:	2b00      	cmp	r3, #0
 8002446:	f000 8088 	beq.w	800255a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800244a:	4b99      	ldr	r3, [pc, #612]	@ (80026b0 <HAL_RCC_OscConfig+0x288>)
 800244c:	691b      	ldr	r3, [r3, #16]
 800244e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002452:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002454:	4b96      	ldr	r3, [pc, #600]	@ (80026b0 <HAL_RCC_OscConfig+0x288>)
 8002456:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002458:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800245a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800245c:	2b10      	cmp	r3, #16
 800245e:	d007      	beq.n	8002470 <HAL_RCC_OscConfig+0x48>
 8002460:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002462:	2b18      	cmp	r3, #24
 8002464:	d111      	bne.n	800248a <HAL_RCC_OscConfig+0x62>
 8002466:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002468:	f003 0303 	and.w	r3, r3, #3
 800246c:	2b02      	cmp	r3, #2
 800246e:	d10c      	bne.n	800248a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002470:	4b8f      	ldr	r3, [pc, #572]	@ (80026b0 <HAL_RCC_OscConfig+0x288>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d06d      	beq.n	8002558 <HAL_RCC_OscConfig+0x130>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d169      	bne.n	8002558 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	f000 bc21 	b.w	8002ccc <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002492:	d106      	bne.n	80024a2 <HAL_RCC_OscConfig+0x7a>
 8002494:	4b86      	ldr	r3, [pc, #536]	@ (80026b0 <HAL_RCC_OscConfig+0x288>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a85      	ldr	r2, [pc, #532]	@ (80026b0 <HAL_RCC_OscConfig+0x288>)
 800249a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800249e:	6013      	str	r3, [r2, #0]
 80024a0:	e02e      	b.n	8002500 <HAL_RCC_OscConfig+0xd8>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d10c      	bne.n	80024c4 <HAL_RCC_OscConfig+0x9c>
 80024aa:	4b81      	ldr	r3, [pc, #516]	@ (80026b0 <HAL_RCC_OscConfig+0x288>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a80      	ldr	r2, [pc, #512]	@ (80026b0 <HAL_RCC_OscConfig+0x288>)
 80024b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024b4:	6013      	str	r3, [r2, #0]
 80024b6:	4b7e      	ldr	r3, [pc, #504]	@ (80026b0 <HAL_RCC_OscConfig+0x288>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a7d      	ldr	r2, [pc, #500]	@ (80026b0 <HAL_RCC_OscConfig+0x288>)
 80024bc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024c0:	6013      	str	r3, [r2, #0]
 80024c2:	e01d      	b.n	8002500 <HAL_RCC_OscConfig+0xd8>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80024cc:	d10c      	bne.n	80024e8 <HAL_RCC_OscConfig+0xc0>
 80024ce:	4b78      	ldr	r3, [pc, #480]	@ (80026b0 <HAL_RCC_OscConfig+0x288>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a77      	ldr	r2, [pc, #476]	@ (80026b0 <HAL_RCC_OscConfig+0x288>)
 80024d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024d8:	6013      	str	r3, [r2, #0]
 80024da:	4b75      	ldr	r3, [pc, #468]	@ (80026b0 <HAL_RCC_OscConfig+0x288>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a74      	ldr	r2, [pc, #464]	@ (80026b0 <HAL_RCC_OscConfig+0x288>)
 80024e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024e4:	6013      	str	r3, [r2, #0]
 80024e6:	e00b      	b.n	8002500 <HAL_RCC_OscConfig+0xd8>
 80024e8:	4b71      	ldr	r3, [pc, #452]	@ (80026b0 <HAL_RCC_OscConfig+0x288>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a70      	ldr	r2, [pc, #448]	@ (80026b0 <HAL_RCC_OscConfig+0x288>)
 80024ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024f2:	6013      	str	r3, [r2, #0]
 80024f4:	4b6e      	ldr	r3, [pc, #440]	@ (80026b0 <HAL_RCC_OscConfig+0x288>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a6d      	ldr	r2, [pc, #436]	@ (80026b0 <HAL_RCC_OscConfig+0x288>)
 80024fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d013      	beq.n	8002530 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002508:	f7ff fc14 	bl	8001d34 <HAL_GetTick>
 800250c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800250e:	e008      	b.n	8002522 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002510:	f7ff fc10 	bl	8001d34 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	2b64      	cmp	r3, #100	@ 0x64
 800251c:	d901      	bls.n	8002522 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e3d4      	b.n	8002ccc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002522:	4b63      	ldr	r3, [pc, #396]	@ (80026b0 <HAL_RCC_OscConfig+0x288>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d0f0      	beq.n	8002510 <HAL_RCC_OscConfig+0xe8>
 800252e:	e014      	b.n	800255a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002530:	f7ff fc00 	bl	8001d34 <HAL_GetTick>
 8002534:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002536:	e008      	b.n	800254a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002538:	f7ff fbfc 	bl	8001d34 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b64      	cmp	r3, #100	@ 0x64
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e3c0      	b.n	8002ccc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800254a:	4b59      	ldr	r3, [pc, #356]	@ (80026b0 <HAL_RCC_OscConfig+0x288>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d1f0      	bne.n	8002538 <HAL_RCC_OscConfig+0x110>
 8002556:	e000      	b.n	800255a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002558:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0302 	and.w	r3, r3, #2
 8002562:	2b00      	cmp	r3, #0
 8002564:	f000 80ca 	beq.w	80026fc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002568:	4b51      	ldr	r3, [pc, #324]	@ (80026b0 <HAL_RCC_OscConfig+0x288>)
 800256a:	691b      	ldr	r3, [r3, #16]
 800256c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002570:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002572:	4b4f      	ldr	r3, [pc, #316]	@ (80026b0 <HAL_RCC_OscConfig+0x288>)
 8002574:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002576:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002578:	6a3b      	ldr	r3, [r7, #32]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d007      	beq.n	800258e <HAL_RCC_OscConfig+0x166>
 800257e:	6a3b      	ldr	r3, [r7, #32]
 8002580:	2b18      	cmp	r3, #24
 8002582:	d156      	bne.n	8002632 <HAL_RCC_OscConfig+0x20a>
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	f003 0303 	and.w	r3, r3, #3
 800258a:	2b00      	cmp	r3, #0
 800258c:	d151      	bne.n	8002632 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800258e:	4b48      	ldr	r3, [pc, #288]	@ (80026b0 <HAL_RCC_OscConfig+0x288>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0304 	and.w	r3, r3, #4
 8002596:	2b00      	cmp	r3, #0
 8002598:	d005      	beq.n	80025a6 <HAL_RCC_OscConfig+0x17e>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d101      	bne.n	80025a6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e392      	b.n	8002ccc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80025a6:	4b42      	ldr	r3, [pc, #264]	@ (80026b0 <HAL_RCC_OscConfig+0x288>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f023 0219 	bic.w	r2, r3, #25
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	493f      	ldr	r1, [pc, #252]	@ (80026b0 <HAL_RCC_OscConfig+0x288>)
 80025b4:	4313      	orrs	r3, r2
 80025b6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b8:	f7ff fbbc 	bl	8001d34 <HAL_GetTick>
 80025bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80025be:	e008      	b.n	80025d2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025c0:	f7ff fbb8 	bl	8001d34 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e37c      	b.n	8002ccc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80025d2:	4b37      	ldr	r3, [pc, #220]	@ (80026b0 <HAL_RCC_OscConfig+0x288>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0304 	and.w	r3, r3, #4
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d0f0      	beq.n	80025c0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025de:	f7ff fbb5 	bl	8001d4c <HAL_GetREVID>
 80025e2:	4603      	mov	r3, r0
 80025e4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d817      	bhi.n	800261c <HAL_RCC_OscConfig+0x1f4>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	691b      	ldr	r3, [r3, #16]
 80025f0:	2b40      	cmp	r3, #64	@ 0x40
 80025f2:	d108      	bne.n	8002606 <HAL_RCC_OscConfig+0x1de>
 80025f4:	4b2e      	ldr	r3, [pc, #184]	@ (80026b0 <HAL_RCC_OscConfig+0x288>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80025fc:	4a2c      	ldr	r2, [pc, #176]	@ (80026b0 <HAL_RCC_OscConfig+0x288>)
 80025fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002602:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002604:	e07a      	b.n	80026fc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002606:	4b2a      	ldr	r3, [pc, #168]	@ (80026b0 <HAL_RCC_OscConfig+0x288>)
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	691b      	ldr	r3, [r3, #16]
 8002612:	031b      	lsls	r3, r3, #12
 8002614:	4926      	ldr	r1, [pc, #152]	@ (80026b0 <HAL_RCC_OscConfig+0x288>)
 8002616:	4313      	orrs	r3, r2
 8002618:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800261a:	e06f      	b.n	80026fc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800261c:	4b24      	ldr	r3, [pc, #144]	@ (80026b0 <HAL_RCC_OscConfig+0x288>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	691b      	ldr	r3, [r3, #16]
 8002628:	061b      	lsls	r3, r3, #24
 800262a:	4921      	ldr	r1, [pc, #132]	@ (80026b0 <HAL_RCC_OscConfig+0x288>)
 800262c:	4313      	orrs	r3, r2
 800262e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002630:	e064      	b.n	80026fc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d047      	beq.n	80026ca <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800263a:	4b1d      	ldr	r3, [pc, #116]	@ (80026b0 <HAL_RCC_OscConfig+0x288>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f023 0219 	bic.w	r2, r3, #25
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	491a      	ldr	r1, [pc, #104]	@ (80026b0 <HAL_RCC_OscConfig+0x288>)
 8002648:	4313      	orrs	r3, r2
 800264a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800264c:	f7ff fb72 	bl	8001d34 <HAL_GetTick>
 8002650:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002652:	e008      	b.n	8002666 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002654:	f7ff fb6e 	bl	8001d34 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	2b02      	cmp	r3, #2
 8002660:	d901      	bls.n	8002666 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e332      	b.n	8002ccc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002666:	4b12      	ldr	r3, [pc, #72]	@ (80026b0 <HAL_RCC_OscConfig+0x288>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0304 	and.w	r3, r3, #4
 800266e:	2b00      	cmp	r3, #0
 8002670:	d0f0      	beq.n	8002654 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002672:	f7ff fb6b 	bl	8001d4c <HAL_GetREVID>
 8002676:	4603      	mov	r3, r0
 8002678:	f241 0203 	movw	r2, #4099	@ 0x1003
 800267c:	4293      	cmp	r3, r2
 800267e:	d819      	bhi.n	80026b4 <HAL_RCC_OscConfig+0x28c>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	691b      	ldr	r3, [r3, #16]
 8002684:	2b40      	cmp	r3, #64	@ 0x40
 8002686:	d108      	bne.n	800269a <HAL_RCC_OscConfig+0x272>
 8002688:	4b09      	ldr	r3, [pc, #36]	@ (80026b0 <HAL_RCC_OscConfig+0x288>)
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002690:	4a07      	ldr	r2, [pc, #28]	@ (80026b0 <HAL_RCC_OscConfig+0x288>)
 8002692:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002696:	6053      	str	r3, [r2, #4]
 8002698:	e030      	b.n	80026fc <HAL_RCC_OscConfig+0x2d4>
 800269a:	4b05      	ldr	r3, [pc, #20]	@ (80026b0 <HAL_RCC_OscConfig+0x288>)
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	691b      	ldr	r3, [r3, #16]
 80026a6:	031b      	lsls	r3, r3, #12
 80026a8:	4901      	ldr	r1, [pc, #4]	@ (80026b0 <HAL_RCC_OscConfig+0x288>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	604b      	str	r3, [r1, #4]
 80026ae:	e025      	b.n	80026fc <HAL_RCC_OscConfig+0x2d4>
 80026b0:	58024400 	.word	0x58024400
 80026b4:	4b9a      	ldr	r3, [pc, #616]	@ (8002920 <HAL_RCC_OscConfig+0x4f8>)
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	691b      	ldr	r3, [r3, #16]
 80026c0:	061b      	lsls	r3, r3, #24
 80026c2:	4997      	ldr	r1, [pc, #604]	@ (8002920 <HAL_RCC_OscConfig+0x4f8>)
 80026c4:	4313      	orrs	r3, r2
 80026c6:	604b      	str	r3, [r1, #4]
 80026c8:	e018      	b.n	80026fc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026ca:	4b95      	ldr	r3, [pc, #596]	@ (8002920 <HAL_RCC_OscConfig+0x4f8>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a94      	ldr	r2, [pc, #592]	@ (8002920 <HAL_RCC_OscConfig+0x4f8>)
 80026d0:	f023 0301 	bic.w	r3, r3, #1
 80026d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d6:	f7ff fb2d 	bl	8001d34 <HAL_GetTick>
 80026da:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80026dc:	e008      	b.n	80026f0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026de:	f7ff fb29 	bl	8001d34 <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d901      	bls.n	80026f0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80026ec:	2303      	movs	r3, #3
 80026ee:	e2ed      	b.n	8002ccc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80026f0:	4b8b      	ldr	r3, [pc, #556]	@ (8002920 <HAL_RCC_OscConfig+0x4f8>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0304 	and.w	r3, r3, #4
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d1f0      	bne.n	80026de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0310 	and.w	r3, r3, #16
 8002704:	2b00      	cmp	r3, #0
 8002706:	f000 80a9 	beq.w	800285c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800270a:	4b85      	ldr	r3, [pc, #532]	@ (8002920 <HAL_RCC_OscConfig+0x4f8>)
 800270c:	691b      	ldr	r3, [r3, #16]
 800270e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002712:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002714:	4b82      	ldr	r3, [pc, #520]	@ (8002920 <HAL_RCC_OscConfig+0x4f8>)
 8002716:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002718:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	2b08      	cmp	r3, #8
 800271e:	d007      	beq.n	8002730 <HAL_RCC_OscConfig+0x308>
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	2b18      	cmp	r3, #24
 8002724:	d13a      	bne.n	800279c <HAL_RCC_OscConfig+0x374>
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	f003 0303 	and.w	r3, r3, #3
 800272c:	2b01      	cmp	r3, #1
 800272e:	d135      	bne.n	800279c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002730:	4b7b      	ldr	r3, [pc, #492]	@ (8002920 <HAL_RCC_OscConfig+0x4f8>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002738:	2b00      	cmp	r3, #0
 800273a:	d005      	beq.n	8002748 <HAL_RCC_OscConfig+0x320>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	69db      	ldr	r3, [r3, #28]
 8002740:	2b80      	cmp	r3, #128	@ 0x80
 8002742:	d001      	beq.n	8002748 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e2c1      	b.n	8002ccc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002748:	f7ff fb00 	bl	8001d4c <HAL_GetREVID>
 800274c:	4603      	mov	r3, r0
 800274e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002752:	4293      	cmp	r3, r2
 8002754:	d817      	bhi.n	8002786 <HAL_RCC_OscConfig+0x35e>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a1b      	ldr	r3, [r3, #32]
 800275a:	2b20      	cmp	r3, #32
 800275c:	d108      	bne.n	8002770 <HAL_RCC_OscConfig+0x348>
 800275e:	4b70      	ldr	r3, [pc, #448]	@ (8002920 <HAL_RCC_OscConfig+0x4f8>)
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002766:	4a6e      	ldr	r2, [pc, #440]	@ (8002920 <HAL_RCC_OscConfig+0x4f8>)
 8002768:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800276c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800276e:	e075      	b.n	800285c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002770:	4b6b      	ldr	r3, [pc, #428]	@ (8002920 <HAL_RCC_OscConfig+0x4f8>)
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6a1b      	ldr	r3, [r3, #32]
 800277c:	069b      	lsls	r3, r3, #26
 800277e:	4968      	ldr	r1, [pc, #416]	@ (8002920 <HAL_RCC_OscConfig+0x4f8>)
 8002780:	4313      	orrs	r3, r2
 8002782:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002784:	e06a      	b.n	800285c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002786:	4b66      	ldr	r3, [pc, #408]	@ (8002920 <HAL_RCC_OscConfig+0x4f8>)
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6a1b      	ldr	r3, [r3, #32]
 8002792:	061b      	lsls	r3, r3, #24
 8002794:	4962      	ldr	r1, [pc, #392]	@ (8002920 <HAL_RCC_OscConfig+0x4f8>)
 8002796:	4313      	orrs	r3, r2
 8002798:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800279a:	e05f      	b.n	800285c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	69db      	ldr	r3, [r3, #28]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d042      	beq.n	800282a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80027a4:	4b5e      	ldr	r3, [pc, #376]	@ (8002920 <HAL_RCC_OscConfig+0x4f8>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a5d      	ldr	r2, [pc, #372]	@ (8002920 <HAL_RCC_OscConfig+0x4f8>)
 80027aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80027ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b0:	f7ff fac0 	bl	8001d34 <HAL_GetTick>
 80027b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80027b6:	e008      	b.n	80027ca <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80027b8:	f7ff fabc 	bl	8001d34 <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e280      	b.n	8002ccc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80027ca:	4b55      	ldr	r3, [pc, #340]	@ (8002920 <HAL_RCC_OscConfig+0x4f8>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d0f0      	beq.n	80027b8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80027d6:	f7ff fab9 	bl	8001d4c <HAL_GetREVID>
 80027da:	4603      	mov	r3, r0
 80027dc:	f241 0203 	movw	r2, #4099	@ 0x1003
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d817      	bhi.n	8002814 <HAL_RCC_OscConfig+0x3ec>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a1b      	ldr	r3, [r3, #32]
 80027e8:	2b20      	cmp	r3, #32
 80027ea:	d108      	bne.n	80027fe <HAL_RCC_OscConfig+0x3d6>
 80027ec:	4b4c      	ldr	r3, [pc, #304]	@ (8002920 <HAL_RCC_OscConfig+0x4f8>)
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80027f4:	4a4a      	ldr	r2, [pc, #296]	@ (8002920 <HAL_RCC_OscConfig+0x4f8>)
 80027f6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80027fa:	6053      	str	r3, [r2, #4]
 80027fc:	e02e      	b.n	800285c <HAL_RCC_OscConfig+0x434>
 80027fe:	4b48      	ldr	r3, [pc, #288]	@ (8002920 <HAL_RCC_OscConfig+0x4f8>)
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6a1b      	ldr	r3, [r3, #32]
 800280a:	069b      	lsls	r3, r3, #26
 800280c:	4944      	ldr	r1, [pc, #272]	@ (8002920 <HAL_RCC_OscConfig+0x4f8>)
 800280e:	4313      	orrs	r3, r2
 8002810:	604b      	str	r3, [r1, #4]
 8002812:	e023      	b.n	800285c <HAL_RCC_OscConfig+0x434>
 8002814:	4b42      	ldr	r3, [pc, #264]	@ (8002920 <HAL_RCC_OscConfig+0x4f8>)
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6a1b      	ldr	r3, [r3, #32]
 8002820:	061b      	lsls	r3, r3, #24
 8002822:	493f      	ldr	r1, [pc, #252]	@ (8002920 <HAL_RCC_OscConfig+0x4f8>)
 8002824:	4313      	orrs	r3, r2
 8002826:	60cb      	str	r3, [r1, #12]
 8002828:	e018      	b.n	800285c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800282a:	4b3d      	ldr	r3, [pc, #244]	@ (8002920 <HAL_RCC_OscConfig+0x4f8>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a3c      	ldr	r2, [pc, #240]	@ (8002920 <HAL_RCC_OscConfig+0x4f8>)
 8002830:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002834:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002836:	f7ff fa7d 	bl	8001d34 <HAL_GetTick>
 800283a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800283c:	e008      	b.n	8002850 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800283e:	f7ff fa79 	bl	8001d34 <HAL_GetTick>
 8002842:	4602      	mov	r2, r0
 8002844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	2b02      	cmp	r3, #2
 800284a:	d901      	bls.n	8002850 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	e23d      	b.n	8002ccc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002850:	4b33      	ldr	r3, [pc, #204]	@ (8002920 <HAL_RCC_OscConfig+0x4f8>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002858:	2b00      	cmp	r3, #0
 800285a:	d1f0      	bne.n	800283e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0308 	and.w	r3, r3, #8
 8002864:	2b00      	cmp	r3, #0
 8002866:	d036      	beq.n	80028d6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	695b      	ldr	r3, [r3, #20]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d019      	beq.n	80028a4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002870:	4b2b      	ldr	r3, [pc, #172]	@ (8002920 <HAL_RCC_OscConfig+0x4f8>)
 8002872:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002874:	4a2a      	ldr	r2, [pc, #168]	@ (8002920 <HAL_RCC_OscConfig+0x4f8>)
 8002876:	f043 0301 	orr.w	r3, r3, #1
 800287a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800287c:	f7ff fa5a 	bl	8001d34 <HAL_GetTick>
 8002880:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002882:	e008      	b.n	8002896 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002884:	f7ff fa56 	bl	8001d34 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	2b02      	cmp	r3, #2
 8002890:	d901      	bls.n	8002896 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e21a      	b.n	8002ccc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002896:	4b22      	ldr	r3, [pc, #136]	@ (8002920 <HAL_RCC_OscConfig+0x4f8>)
 8002898:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d0f0      	beq.n	8002884 <HAL_RCC_OscConfig+0x45c>
 80028a2:	e018      	b.n	80028d6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028a4:	4b1e      	ldr	r3, [pc, #120]	@ (8002920 <HAL_RCC_OscConfig+0x4f8>)
 80028a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028a8:	4a1d      	ldr	r2, [pc, #116]	@ (8002920 <HAL_RCC_OscConfig+0x4f8>)
 80028aa:	f023 0301 	bic.w	r3, r3, #1
 80028ae:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028b0:	f7ff fa40 	bl	8001d34 <HAL_GetTick>
 80028b4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80028b6:	e008      	b.n	80028ca <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028b8:	f7ff fa3c 	bl	8001d34 <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e200      	b.n	8002ccc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80028ca:	4b15      	ldr	r3, [pc, #84]	@ (8002920 <HAL_RCC_OscConfig+0x4f8>)
 80028cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028ce:	f003 0302 	and.w	r3, r3, #2
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d1f0      	bne.n	80028b8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0320 	and.w	r3, r3, #32
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d039      	beq.n	8002956 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	699b      	ldr	r3, [r3, #24]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d01c      	beq.n	8002924 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80028ea:	4b0d      	ldr	r3, [pc, #52]	@ (8002920 <HAL_RCC_OscConfig+0x4f8>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a0c      	ldr	r2, [pc, #48]	@ (8002920 <HAL_RCC_OscConfig+0x4f8>)
 80028f0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80028f4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80028f6:	f7ff fa1d 	bl	8001d34 <HAL_GetTick>
 80028fa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80028fc:	e008      	b.n	8002910 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028fe:	f7ff fa19 	bl	8001d34 <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	2b02      	cmp	r3, #2
 800290a:	d901      	bls.n	8002910 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800290c:	2303      	movs	r3, #3
 800290e:	e1dd      	b.n	8002ccc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002910:	4b03      	ldr	r3, [pc, #12]	@ (8002920 <HAL_RCC_OscConfig+0x4f8>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d0f0      	beq.n	80028fe <HAL_RCC_OscConfig+0x4d6>
 800291c:	e01b      	b.n	8002956 <HAL_RCC_OscConfig+0x52e>
 800291e:	bf00      	nop
 8002920:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002924:	4b9b      	ldr	r3, [pc, #620]	@ (8002b94 <HAL_RCC_OscConfig+0x76c>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a9a      	ldr	r2, [pc, #616]	@ (8002b94 <HAL_RCC_OscConfig+0x76c>)
 800292a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800292e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002930:	f7ff fa00 	bl	8001d34 <HAL_GetTick>
 8002934:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002936:	e008      	b.n	800294a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002938:	f7ff f9fc 	bl	8001d34 <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	2b02      	cmp	r3, #2
 8002944:	d901      	bls.n	800294a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e1c0      	b.n	8002ccc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800294a:	4b92      	ldr	r3, [pc, #584]	@ (8002b94 <HAL_RCC_OscConfig+0x76c>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d1f0      	bne.n	8002938 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0304 	and.w	r3, r3, #4
 800295e:	2b00      	cmp	r3, #0
 8002960:	f000 8081 	beq.w	8002a66 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002964:	4b8c      	ldr	r3, [pc, #560]	@ (8002b98 <HAL_RCC_OscConfig+0x770>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a8b      	ldr	r2, [pc, #556]	@ (8002b98 <HAL_RCC_OscConfig+0x770>)
 800296a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800296e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002970:	f7ff f9e0 	bl	8001d34 <HAL_GetTick>
 8002974:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002976:	e008      	b.n	800298a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002978:	f7ff f9dc 	bl	8001d34 <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	2b64      	cmp	r3, #100	@ 0x64
 8002984:	d901      	bls.n	800298a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e1a0      	b.n	8002ccc <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800298a:	4b83      	ldr	r3, [pc, #524]	@ (8002b98 <HAL_RCC_OscConfig+0x770>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002992:	2b00      	cmp	r3, #0
 8002994:	d0f0      	beq.n	8002978 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	2b01      	cmp	r3, #1
 800299c:	d106      	bne.n	80029ac <HAL_RCC_OscConfig+0x584>
 800299e:	4b7d      	ldr	r3, [pc, #500]	@ (8002b94 <HAL_RCC_OscConfig+0x76c>)
 80029a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029a2:	4a7c      	ldr	r2, [pc, #496]	@ (8002b94 <HAL_RCC_OscConfig+0x76c>)
 80029a4:	f043 0301 	orr.w	r3, r3, #1
 80029a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80029aa:	e02d      	b.n	8002a08 <HAL_RCC_OscConfig+0x5e0>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d10c      	bne.n	80029ce <HAL_RCC_OscConfig+0x5a6>
 80029b4:	4b77      	ldr	r3, [pc, #476]	@ (8002b94 <HAL_RCC_OscConfig+0x76c>)
 80029b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029b8:	4a76      	ldr	r2, [pc, #472]	@ (8002b94 <HAL_RCC_OscConfig+0x76c>)
 80029ba:	f023 0301 	bic.w	r3, r3, #1
 80029be:	6713      	str	r3, [r2, #112]	@ 0x70
 80029c0:	4b74      	ldr	r3, [pc, #464]	@ (8002b94 <HAL_RCC_OscConfig+0x76c>)
 80029c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029c4:	4a73      	ldr	r2, [pc, #460]	@ (8002b94 <HAL_RCC_OscConfig+0x76c>)
 80029c6:	f023 0304 	bic.w	r3, r3, #4
 80029ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80029cc:	e01c      	b.n	8002a08 <HAL_RCC_OscConfig+0x5e0>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	2b05      	cmp	r3, #5
 80029d4:	d10c      	bne.n	80029f0 <HAL_RCC_OscConfig+0x5c8>
 80029d6:	4b6f      	ldr	r3, [pc, #444]	@ (8002b94 <HAL_RCC_OscConfig+0x76c>)
 80029d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029da:	4a6e      	ldr	r2, [pc, #440]	@ (8002b94 <HAL_RCC_OscConfig+0x76c>)
 80029dc:	f043 0304 	orr.w	r3, r3, #4
 80029e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80029e2:	4b6c      	ldr	r3, [pc, #432]	@ (8002b94 <HAL_RCC_OscConfig+0x76c>)
 80029e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029e6:	4a6b      	ldr	r2, [pc, #428]	@ (8002b94 <HAL_RCC_OscConfig+0x76c>)
 80029e8:	f043 0301 	orr.w	r3, r3, #1
 80029ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80029ee:	e00b      	b.n	8002a08 <HAL_RCC_OscConfig+0x5e0>
 80029f0:	4b68      	ldr	r3, [pc, #416]	@ (8002b94 <HAL_RCC_OscConfig+0x76c>)
 80029f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029f4:	4a67      	ldr	r2, [pc, #412]	@ (8002b94 <HAL_RCC_OscConfig+0x76c>)
 80029f6:	f023 0301 	bic.w	r3, r3, #1
 80029fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80029fc:	4b65      	ldr	r3, [pc, #404]	@ (8002b94 <HAL_RCC_OscConfig+0x76c>)
 80029fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a00:	4a64      	ldr	r2, [pc, #400]	@ (8002b94 <HAL_RCC_OscConfig+0x76c>)
 8002a02:	f023 0304 	bic.w	r3, r3, #4
 8002a06:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d015      	beq.n	8002a3c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a10:	f7ff f990 	bl	8001d34 <HAL_GetTick>
 8002a14:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a16:	e00a      	b.n	8002a2e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a18:	f7ff f98c 	bl	8001d34 <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e14e      	b.n	8002ccc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a2e:	4b59      	ldr	r3, [pc, #356]	@ (8002b94 <HAL_RCC_OscConfig+0x76c>)
 8002a30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a32:	f003 0302 	and.w	r3, r3, #2
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d0ee      	beq.n	8002a18 <HAL_RCC_OscConfig+0x5f0>
 8002a3a:	e014      	b.n	8002a66 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a3c:	f7ff f97a 	bl	8001d34 <HAL_GetTick>
 8002a40:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002a42:	e00a      	b.n	8002a5a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a44:	f7ff f976 	bl	8001d34 <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d901      	bls.n	8002a5a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e138      	b.n	8002ccc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002a5a:	4b4e      	ldr	r3, [pc, #312]	@ (8002b94 <HAL_RCC_OscConfig+0x76c>)
 8002a5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a5e:	f003 0302 	and.w	r3, r3, #2
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d1ee      	bne.n	8002a44 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	f000 812d 	beq.w	8002cca <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002a70:	4b48      	ldr	r3, [pc, #288]	@ (8002b94 <HAL_RCC_OscConfig+0x76c>)
 8002a72:	691b      	ldr	r3, [r3, #16]
 8002a74:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002a78:	2b18      	cmp	r3, #24
 8002a7a:	f000 80bd 	beq.w	8002bf8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	f040 809e 	bne.w	8002bc4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a88:	4b42      	ldr	r3, [pc, #264]	@ (8002b94 <HAL_RCC_OscConfig+0x76c>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a41      	ldr	r2, [pc, #260]	@ (8002b94 <HAL_RCC_OscConfig+0x76c>)
 8002a8e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a94:	f7ff f94e 	bl	8001d34 <HAL_GetTick>
 8002a98:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a9a:	e008      	b.n	8002aae <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a9c:	f7ff f94a 	bl	8001d34 <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d901      	bls.n	8002aae <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e10e      	b.n	8002ccc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002aae:	4b39      	ldr	r3, [pc, #228]	@ (8002b94 <HAL_RCC_OscConfig+0x76c>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d1f0      	bne.n	8002a9c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002aba:	4b36      	ldr	r3, [pc, #216]	@ (8002b94 <HAL_RCC_OscConfig+0x76c>)
 8002abc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002abe:	4b37      	ldr	r3, [pc, #220]	@ (8002b9c <HAL_RCC_OscConfig+0x774>)
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002aca:	0112      	lsls	r2, r2, #4
 8002acc:	430a      	orrs	r2, r1
 8002ace:	4931      	ldr	r1, [pc, #196]	@ (8002b94 <HAL_RCC_OscConfig+0x76c>)
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	628b      	str	r3, [r1, #40]	@ 0x28
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ad8:	3b01      	subs	r3, #1
 8002ada:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ae2:	3b01      	subs	r3, #1
 8002ae4:	025b      	lsls	r3, r3, #9
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	431a      	orrs	r2, r3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002aee:	3b01      	subs	r3, #1
 8002af0:	041b      	lsls	r3, r3, #16
 8002af2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002af6:	431a      	orrs	r2, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002afc:	3b01      	subs	r3, #1
 8002afe:	061b      	lsls	r3, r3, #24
 8002b00:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002b04:	4923      	ldr	r1, [pc, #140]	@ (8002b94 <HAL_RCC_OscConfig+0x76c>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002b0a:	4b22      	ldr	r3, [pc, #136]	@ (8002b94 <HAL_RCC_OscConfig+0x76c>)
 8002b0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b0e:	4a21      	ldr	r2, [pc, #132]	@ (8002b94 <HAL_RCC_OscConfig+0x76c>)
 8002b10:	f023 0301 	bic.w	r3, r3, #1
 8002b14:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002b16:	4b1f      	ldr	r3, [pc, #124]	@ (8002b94 <HAL_RCC_OscConfig+0x76c>)
 8002b18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b1a:	4b21      	ldr	r3, [pc, #132]	@ (8002ba0 <HAL_RCC_OscConfig+0x778>)
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002b22:	00d2      	lsls	r2, r2, #3
 8002b24:	491b      	ldr	r1, [pc, #108]	@ (8002b94 <HAL_RCC_OscConfig+0x76c>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002b2a:	4b1a      	ldr	r3, [pc, #104]	@ (8002b94 <HAL_RCC_OscConfig+0x76c>)
 8002b2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b2e:	f023 020c 	bic.w	r2, r3, #12
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b36:	4917      	ldr	r1, [pc, #92]	@ (8002b94 <HAL_RCC_OscConfig+0x76c>)
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002b3c:	4b15      	ldr	r3, [pc, #84]	@ (8002b94 <HAL_RCC_OscConfig+0x76c>)
 8002b3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b40:	f023 0202 	bic.w	r2, r3, #2
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b48:	4912      	ldr	r1, [pc, #72]	@ (8002b94 <HAL_RCC_OscConfig+0x76c>)
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002b4e:	4b11      	ldr	r3, [pc, #68]	@ (8002b94 <HAL_RCC_OscConfig+0x76c>)
 8002b50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b52:	4a10      	ldr	r2, [pc, #64]	@ (8002b94 <HAL_RCC_OscConfig+0x76c>)
 8002b54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b58:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b5a:	4b0e      	ldr	r3, [pc, #56]	@ (8002b94 <HAL_RCC_OscConfig+0x76c>)
 8002b5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b5e:	4a0d      	ldr	r2, [pc, #52]	@ (8002b94 <HAL_RCC_OscConfig+0x76c>)
 8002b60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b64:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002b66:	4b0b      	ldr	r3, [pc, #44]	@ (8002b94 <HAL_RCC_OscConfig+0x76c>)
 8002b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b6a:	4a0a      	ldr	r2, [pc, #40]	@ (8002b94 <HAL_RCC_OscConfig+0x76c>)
 8002b6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b70:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002b72:	4b08      	ldr	r3, [pc, #32]	@ (8002b94 <HAL_RCC_OscConfig+0x76c>)
 8002b74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b76:	4a07      	ldr	r2, [pc, #28]	@ (8002b94 <HAL_RCC_OscConfig+0x76c>)
 8002b78:	f043 0301 	orr.w	r3, r3, #1
 8002b7c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b7e:	4b05      	ldr	r3, [pc, #20]	@ (8002b94 <HAL_RCC_OscConfig+0x76c>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a04      	ldr	r2, [pc, #16]	@ (8002b94 <HAL_RCC_OscConfig+0x76c>)
 8002b84:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b8a:	f7ff f8d3 	bl	8001d34 <HAL_GetTick>
 8002b8e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b90:	e011      	b.n	8002bb6 <HAL_RCC_OscConfig+0x78e>
 8002b92:	bf00      	nop
 8002b94:	58024400 	.word	0x58024400
 8002b98:	58024800 	.word	0x58024800
 8002b9c:	fffffc0c 	.word	0xfffffc0c
 8002ba0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ba4:	f7ff f8c6 	bl	8001d34 <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d901      	bls.n	8002bb6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e08a      	b.n	8002ccc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002bb6:	4b47      	ldr	r3, [pc, #284]	@ (8002cd4 <HAL_RCC_OscConfig+0x8ac>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d0f0      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x77c>
 8002bc2:	e082      	b.n	8002cca <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bc4:	4b43      	ldr	r3, [pc, #268]	@ (8002cd4 <HAL_RCC_OscConfig+0x8ac>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a42      	ldr	r2, [pc, #264]	@ (8002cd4 <HAL_RCC_OscConfig+0x8ac>)
 8002bca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002bce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bd0:	f7ff f8b0 	bl	8001d34 <HAL_GetTick>
 8002bd4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002bd6:	e008      	b.n	8002bea <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bd8:	f7ff f8ac 	bl	8001d34 <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d901      	bls.n	8002bea <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e070      	b.n	8002ccc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002bea:	4b3a      	ldr	r3, [pc, #232]	@ (8002cd4 <HAL_RCC_OscConfig+0x8ac>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d1f0      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x7b0>
 8002bf6:	e068      	b.n	8002cca <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002bf8:	4b36      	ldr	r3, [pc, #216]	@ (8002cd4 <HAL_RCC_OscConfig+0x8ac>)
 8002bfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bfc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002bfe:	4b35      	ldr	r3, [pc, #212]	@ (8002cd4 <HAL_RCC_OscConfig+0x8ac>)
 8002c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c02:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d031      	beq.n	8002c70 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	f003 0203 	and.w	r2, r3, #3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d12a      	bne.n	8002c70 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	091b      	lsrs	r3, r3, #4
 8002c1e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d122      	bne.n	8002c70 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c34:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d11a      	bne.n	8002c70 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	0a5b      	lsrs	r3, r3, #9
 8002c3e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c46:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d111      	bne.n	8002c70 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	0c1b      	lsrs	r3, r3, #16
 8002c50:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c58:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d108      	bne.n	8002c70 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	0e1b      	lsrs	r3, r3, #24
 8002c62:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c6a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d001      	beq.n	8002c74 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e02b      	b.n	8002ccc <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002c74:	4b17      	ldr	r3, [pc, #92]	@ (8002cd4 <HAL_RCC_OscConfig+0x8ac>)
 8002c76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c78:	08db      	lsrs	r3, r3, #3
 8002c7a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002c7e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c84:	693a      	ldr	r2, [r7, #16]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d01f      	beq.n	8002cca <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002c8a:	4b12      	ldr	r3, [pc, #72]	@ (8002cd4 <HAL_RCC_OscConfig+0x8ac>)
 8002c8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c8e:	4a11      	ldr	r2, [pc, #68]	@ (8002cd4 <HAL_RCC_OscConfig+0x8ac>)
 8002c90:	f023 0301 	bic.w	r3, r3, #1
 8002c94:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c96:	f7ff f84d 	bl	8001d34 <HAL_GetTick>
 8002c9a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002c9c:	bf00      	nop
 8002c9e:	f7ff f849 	bl	8001d34 <HAL_GetTick>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d0f9      	beq.n	8002c9e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002caa:	4b0a      	ldr	r3, [pc, #40]	@ (8002cd4 <HAL_RCC_OscConfig+0x8ac>)
 8002cac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002cae:	4b0a      	ldr	r3, [pc, #40]	@ (8002cd8 <HAL_RCC_OscConfig+0x8b0>)
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002cb6:	00d2      	lsls	r2, r2, #3
 8002cb8:	4906      	ldr	r1, [pc, #24]	@ (8002cd4 <HAL_RCC_OscConfig+0x8ac>)
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002cbe:	4b05      	ldr	r3, [pc, #20]	@ (8002cd4 <HAL_RCC_OscConfig+0x8ac>)
 8002cc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cc2:	4a04      	ldr	r2, [pc, #16]	@ (8002cd4 <HAL_RCC_OscConfig+0x8ac>)
 8002cc4:	f043 0301 	orr.w	r3, r3, #1
 8002cc8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002cca:	2300      	movs	r3, #0
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3730      	adds	r7, #48	@ 0x30
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	58024400 	.word	0x58024400
 8002cd8:	ffff0007 	.word	0xffff0007

08002cdc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b086      	sub	sp, #24
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d101      	bne.n	8002cf0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e19c      	b.n	800302a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cf0:	4b8a      	ldr	r3, [pc, #552]	@ (8002f1c <HAL_RCC_ClockConfig+0x240>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 030f 	and.w	r3, r3, #15
 8002cf8:	683a      	ldr	r2, [r7, #0]
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d910      	bls.n	8002d20 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cfe:	4b87      	ldr	r3, [pc, #540]	@ (8002f1c <HAL_RCC_ClockConfig+0x240>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f023 020f 	bic.w	r2, r3, #15
 8002d06:	4985      	ldr	r1, [pc, #532]	@ (8002f1c <HAL_RCC_ClockConfig+0x240>)
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d0e:	4b83      	ldr	r3, [pc, #524]	@ (8002f1c <HAL_RCC_ClockConfig+0x240>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 030f 	and.w	r3, r3, #15
 8002d16:	683a      	ldr	r2, [r7, #0]
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d001      	beq.n	8002d20 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e184      	b.n	800302a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0304 	and.w	r3, r3, #4
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d010      	beq.n	8002d4e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	691a      	ldr	r2, [r3, #16]
 8002d30:	4b7b      	ldr	r3, [pc, #492]	@ (8002f20 <HAL_RCC_ClockConfig+0x244>)
 8002d32:	699b      	ldr	r3, [r3, #24]
 8002d34:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d908      	bls.n	8002d4e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002d3c:	4b78      	ldr	r3, [pc, #480]	@ (8002f20 <HAL_RCC_ClockConfig+0x244>)
 8002d3e:	699b      	ldr	r3, [r3, #24]
 8002d40:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	691b      	ldr	r3, [r3, #16]
 8002d48:	4975      	ldr	r1, [pc, #468]	@ (8002f20 <HAL_RCC_ClockConfig+0x244>)
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0308 	and.w	r3, r3, #8
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d010      	beq.n	8002d7c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	695a      	ldr	r2, [r3, #20]
 8002d5e:	4b70      	ldr	r3, [pc, #448]	@ (8002f20 <HAL_RCC_ClockConfig+0x244>)
 8002d60:	69db      	ldr	r3, [r3, #28]
 8002d62:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d908      	bls.n	8002d7c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002d6a:	4b6d      	ldr	r3, [pc, #436]	@ (8002f20 <HAL_RCC_ClockConfig+0x244>)
 8002d6c:	69db      	ldr	r3, [r3, #28]
 8002d6e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	695b      	ldr	r3, [r3, #20]
 8002d76:	496a      	ldr	r1, [pc, #424]	@ (8002f20 <HAL_RCC_ClockConfig+0x244>)
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0310 	and.w	r3, r3, #16
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d010      	beq.n	8002daa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	699a      	ldr	r2, [r3, #24]
 8002d8c:	4b64      	ldr	r3, [pc, #400]	@ (8002f20 <HAL_RCC_ClockConfig+0x244>)
 8002d8e:	69db      	ldr	r3, [r3, #28]
 8002d90:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d908      	bls.n	8002daa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002d98:	4b61      	ldr	r3, [pc, #388]	@ (8002f20 <HAL_RCC_ClockConfig+0x244>)
 8002d9a:	69db      	ldr	r3, [r3, #28]
 8002d9c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	699b      	ldr	r3, [r3, #24]
 8002da4:	495e      	ldr	r1, [pc, #376]	@ (8002f20 <HAL_RCC_ClockConfig+0x244>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0320 	and.w	r3, r3, #32
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d010      	beq.n	8002dd8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	69da      	ldr	r2, [r3, #28]
 8002dba:	4b59      	ldr	r3, [pc, #356]	@ (8002f20 <HAL_RCC_ClockConfig+0x244>)
 8002dbc:	6a1b      	ldr	r3, [r3, #32]
 8002dbe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d908      	bls.n	8002dd8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002dc6:	4b56      	ldr	r3, [pc, #344]	@ (8002f20 <HAL_RCC_ClockConfig+0x244>)
 8002dc8:	6a1b      	ldr	r3, [r3, #32]
 8002dca:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	69db      	ldr	r3, [r3, #28]
 8002dd2:	4953      	ldr	r1, [pc, #332]	@ (8002f20 <HAL_RCC_ClockConfig+0x244>)
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0302 	and.w	r3, r3, #2
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d010      	beq.n	8002e06 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	68da      	ldr	r2, [r3, #12]
 8002de8:	4b4d      	ldr	r3, [pc, #308]	@ (8002f20 <HAL_RCC_ClockConfig+0x244>)
 8002dea:	699b      	ldr	r3, [r3, #24]
 8002dec:	f003 030f 	and.w	r3, r3, #15
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d908      	bls.n	8002e06 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002df4:	4b4a      	ldr	r3, [pc, #296]	@ (8002f20 <HAL_RCC_ClockConfig+0x244>)
 8002df6:	699b      	ldr	r3, [r3, #24]
 8002df8:	f023 020f 	bic.w	r2, r3, #15
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	4947      	ldr	r1, [pc, #284]	@ (8002f20 <HAL_RCC_ClockConfig+0x244>)
 8002e02:	4313      	orrs	r3, r2
 8002e04:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0301 	and.w	r3, r3, #1
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d055      	beq.n	8002ebe <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002e12:	4b43      	ldr	r3, [pc, #268]	@ (8002f20 <HAL_RCC_ClockConfig+0x244>)
 8002e14:	699b      	ldr	r3, [r3, #24]
 8002e16:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	4940      	ldr	r1, [pc, #256]	@ (8002f20 <HAL_RCC_ClockConfig+0x244>)
 8002e20:	4313      	orrs	r3, r2
 8002e22:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d107      	bne.n	8002e3c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e2c:	4b3c      	ldr	r3, [pc, #240]	@ (8002f20 <HAL_RCC_ClockConfig+0x244>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d121      	bne.n	8002e7c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e0f6      	b.n	800302a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	2b03      	cmp	r3, #3
 8002e42:	d107      	bne.n	8002e54 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e44:	4b36      	ldr	r3, [pc, #216]	@ (8002f20 <HAL_RCC_ClockConfig+0x244>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d115      	bne.n	8002e7c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e0ea      	b.n	800302a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d107      	bne.n	8002e6c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002e5c:	4b30      	ldr	r3, [pc, #192]	@ (8002f20 <HAL_RCC_ClockConfig+0x244>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d109      	bne.n	8002e7c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e0de      	b.n	800302a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e6c:	4b2c      	ldr	r3, [pc, #176]	@ (8002f20 <HAL_RCC_ClockConfig+0x244>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0304 	and.w	r3, r3, #4
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d101      	bne.n	8002e7c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e0d6      	b.n	800302a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e7c:	4b28      	ldr	r3, [pc, #160]	@ (8002f20 <HAL_RCC_ClockConfig+0x244>)
 8002e7e:	691b      	ldr	r3, [r3, #16]
 8002e80:	f023 0207 	bic.w	r2, r3, #7
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	4925      	ldr	r1, [pc, #148]	@ (8002f20 <HAL_RCC_ClockConfig+0x244>)
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e8e:	f7fe ff51 	bl	8001d34 <HAL_GetTick>
 8002e92:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e94:	e00a      	b.n	8002eac <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e96:	f7fe ff4d 	bl	8001d34 <HAL_GetTick>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d901      	bls.n	8002eac <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	e0be      	b.n	800302a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eac:	4b1c      	ldr	r3, [pc, #112]	@ (8002f20 <HAL_RCC_ClockConfig+0x244>)
 8002eae:	691b      	ldr	r3, [r3, #16]
 8002eb0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	00db      	lsls	r3, r3, #3
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d1eb      	bne.n	8002e96 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0302 	and.w	r3, r3, #2
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d010      	beq.n	8002eec <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	68da      	ldr	r2, [r3, #12]
 8002ece:	4b14      	ldr	r3, [pc, #80]	@ (8002f20 <HAL_RCC_ClockConfig+0x244>)
 8002ed0:	699b      	ldr	r3, [r3, #24]
 8002ed2:	f003 030f 	and.w	r3, r3, #15
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d208      	bcs.n	8002eec <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002eda:	4b11      	ldr	r3, [pc, #68]	@ (8002f20 <HAL_RCC_ClockConfig+0x244>)
 8002edc:	699b      	ldr	r3, [r3, #24]
 8002ede:	f023 020f 	bic.w	r2, r3, #15
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	490e      	ldr	r1, [pc, #56]	@ (8002f20 <HAL_RCC_ClockConfig+0x244>)
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002eec:	4b0b      	ldr	r3, [pc, #44]	@ (8002f1c <HAL_RCC_ClockConfig+0x240>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 030f 	and.w	r3, r3, #15
 8002ef4:	683a      	ldr	r2, [r7, #0]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d214      	bcs.n	8002f24 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002efa:	4b08      	ldr	r3, [pc, #32]	@ (8002f1c <HAL_RCC_ClockConfig+0x240>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f023 020f 	bic.w	r2, r3, #15
 8002f02:	4906      	ldr	r1, [pc, #24]	@ (8002f1c <HAL_RCC_ClockConfig+0x240>)
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f0a:	4b04      	ldr	r3, [pc, #16]	@ (8002f1c <HAL_RCC_ClockConfig+0x240>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 030f 	and.w	r3, r3, #15
 8002f12:	683a      	ldr	r2, [r7, #0]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d005      	beq.n	8002f24 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e086      	b.n	800302a <HAL_RCC_ClockConfig+0x34e>
 8002f1c:	52002000 	.word	0x52002000
 8002f20:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0304 	and.w	r3, r3, #4
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d010      	beq.n	8002f52 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	691a      	ldr	r2, [r3, #16]
 8002f34:	4b3f      	ldr	r3, [pc, #252]	@ (8003034 <HAL_RCC_ClockConfig+0x358>)
 8002f36:	699b      	ldr	r3, [r3, #24]
 8002f38:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d208      	bcs.n	8002f52 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002f40:	4b3c      	ldr	r3, [pc, #240]	@ (8003034 <HAL_RCC_ClockConfig+0x358>)
 8002f42:	699b      	ldr	r3, [r3, #24]
 8002f44:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	691b      	ldr	r3, [r3, #16]
 8002f4c:	4939      	ldr	r1, [pc, #228]	@ (8003034 <HAL_RCC_ClockConfig+0x358>)
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0308 	and.w	r3, r3, #8
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d010      	beq.n	8002f80 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	695a      	ldr	r2, [r3, #20]
 8002f62:	4b34      	ldr	r3, [pc, #208]	@ (8003034 <HAL_RCC_ClockConfig+0x358>)
 8002f64:	69db      	ldr	r3, [r3, #28]
 8002f66:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d208      	bcs.n	8002f80 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002f6e:	4b31      	ldr	r3, [pc, #196]	@ (8003034 <HAL_RCC_ClockConfig+0x358>)
 8002f70:	69db      	ldr	r3, [r3, #28]
 8002f72:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	695b      	ldr	r3, [r3, #20]
 8002f7a:	492e      	ldr	r1, [pc, #184]	@ (8003034 <HAL_RCC_ClockConfig+0x358>)
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0310 	and.w	r3, r3, #16
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d010      	beq.n	8002fae <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	699a      	ldr	r2, [r3, #24]
 8002f90:	4b28      	ldr	r3, [pc, #160]	@ (8003034 <HAL_RCC_ClockConfig+0x358>)
 8002f92:	69db      	ldr	r3, [r3, #28]
 8002f94:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d208      	bcs.n	8002fae <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002f9c:	4b25      	ldr	r3, [pc, #148]	@ (8003034 <HAL_RCC_ClockConfig+0x358>)
 8002f9e:	69db      	ldr	r3, [r3, #28]
 8002fa0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	699b      	ldr	r3, [r3, #24]
 8002fa8:	4922      	ldr	r1, [pc, #136]	@ (8003034 <HAL_RCC_ClockConfig+0x358>)
 8002faa:	4313      	orrs	r3, r2
 8002fac:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0320 	and.w	r3, r3, #32
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d010      	beq.n	8002fdc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	69da      	ldr	r2, [r3, #28]
 8002fbe:	4b1d      	ldr	r3, [pc, #116]	@ (8003034 <HAL_RCC_ClockConfig+0x358>)
 8002fc0:	6a1b      	ldr	r3, [r3, #32]
 8002fc2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d208      	bcs.n	8002fdc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002fca:	4b1a      	ldr	r3, [pc, #104]	@ (8003034 <HAL_RCC_ClockConfig+0x358>)
 8002fcc:	6a1b      	ldr	r3, [r3, #32]
 8002fce:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	69db      	ldr	r3, [r3, #28]
 8002fd6:	4917      	ldr	r1, [pc, #92]	@ (8003034 <HAL_RCC_ClockConfig+0x358>)
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002fdc:	f000 f834 	bl	8003048 <HAL_RCC_GetSysClockFreq>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	4b14      	ldr	r3, [pc, #80]	@ (8003034 <HAL_RCC_ClockConfig+0x358>)
 8002fe4:	699b      	ldr	r3, [r3, #24]
 8002fe6:	0a1b      	lsrs	r3, r3, #8
 8002fe8:	f003 030f 	and.w	r3, r3, #15
 8002fec:	4912      	ldr	r1, [pc, #72]	@ (8003038 <HAL_RCC_ClockConfig+0x35c>)
 8002fee:	5ccb      	ldrb	r3, [r1, r3]
 8002ff0:	f003 031f 	and.w	r3, r3, #31
 8002ff4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ff8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002ffa:	4b0e      	ldr	r3, [pc, #56]	@ (8003034 <HAL_RCC_ClockConfig+0x358>)
 8002ffc:	699b      	ldr	r3, [r3, #24]
 8002ffe:	f003 030f 	and.w	r3, r3, #15
 8003002:	4a0d      	ldr	r2, [pc, #52]	@ (8003038 <HAL_RCC_ClockConfig+0x35c>)
 8003004:	5cd3      	ldrb	r3, [r2, r3]
 8003006:	f003 031f 	and.w	r3, r3, #31
 800300a:	693a      	ldr	r2, [r7, #16]
 800300c:	fa22 f303 	lsr.w	r3, r2, r3
 8003010:	4a0a      	ldr	r2, [pc, #40]	@ (800303c <HAL_RCC_ClockConfig+0x360>)
 8003012:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003014:	4a0a      	ldr	r2, [pc, #40]	@ (8003040 <HAL_RCC_ClockConfig+0x364>)
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800301a:	4b0a      	ldr	r3, [pc, #40]	@ (8003044 <HAL_RCC_ClockConfig+0x368>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4618      	mov	r0, r3
 8003020:	f7fe f980 	bl	8001324 <HAL_InitTick>
 8003024:	4603      	mov	r3, r0
 8003026:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003028:	7bfb      	ldrb	r3, [r7, #15]
}
 800302a:	4618      	mov	r0, r3
 800302c:	3718      	adds	r7, #24
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	58024400 	.word	0x58024400
 8003038:	08009424 	.word	0x08009424
 800303c:	24000008 	.word	0x24000008
 8003040:	24000004 	.word	0x24000004
 8003044:	24000028 	.word	0x24000028

08003048 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003048:	b480      	push	{r7}
 800304a:	b089      	sub	sp, #36	@ 0x24
 800304c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800304e:	4bb3      	ldr	r3, [pc, #716]	@ (800331c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003056:	2b18      	cmp	r3, #24
 8003058:	f200 8155 	bhi.w	8003306 <HAL_RCC_GetSysClockFreq+0x2be>
 800305c:	a201      	add	r2, pc, #4	@ (adr r2, 8003064 <HAL_RCC_GetSysClockFreq+0x1c>)
 800305e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003062:	bf00      	nop
 8003064:	080030c9 	.word	0x080030c9
 8003068:	08003307 	.word	0x08003307
 800306c:	08003307 	.word	0x08003307
 8003070:	08003307 	.word	0x08003307
 8003074:	08003307 	.word	0x08003307
 8003078:	08003307 	.word	0x08003307
 800307c:	08003307 	.word	0x08003307
 8003080:	08003307 	.word	0x08003307
 8003084:	080030ef 	.word	0x080030ef
 8003088:	08003307 	.word	0x08003307
 800308c:	08003307 	.word	0x08003307
 8003090:	08003307 	.word	0x08003307
 8003094:	08003307 	.word	0x08003307
 8003098:	08003307 	.word	0x08003307
 800309c:	08003307 	.word	0x08003307
 80030a0:	08003307 	.word	0x08003307
 80030a4:	080030f5 	.word	0x080030f5
 80030a8:	08003307 	.word	0x08003307
 80030ac:	08003307 	.word	0x08003307
 80030b0:	08003307 	.word	0x08003307
 80030b4:	08003307 	.word	0x08003307
 80030b8:	08003307 	.word	0x08003307
 80030bc:	08003307 	.word	0x08003307
 80030c0:	08003307 	.word	0x08003307
 80030c4:	080030fb 	.word	0x080030fb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80030c8:	4b94      	ldr	r3, [pc, #592]	@ (800331c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0320 	and.w	r3, r3, #32
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d009      	beq.n	80030e8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80030d4:	4b91      	ldr	r3, [pc, #580]	@ (800331c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	08db      	lsrs	r3, r3, #3
 80030da:	f003 0303 	and.w	r3, r3, #3
 80030de:	4a90      	ldr	r2, [pc, #576]	@ (8003320 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80030e0:	fa22 f303 	lsr.w	r3, r2, r3
 80030e4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80030e6:	e111      	b.n	800330c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80030e8:	4b8d      	ldr	r3, [pc, #564]	@ (8003320 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80030ea:	61bb      	str	r3, [r7, #24]
      break;
 80030ec:	e10e      	b.n	800330c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80030ee:	4b8d      	ldr	r3, [pc, #564]	@ (8003324 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80030f0:	61bb      	str	r3, [r7, #24]
      break;
 80030f2:	e10b      	b.n	800330c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80030f4:	4b8c      	ldr	r3, [pc, #560]	@ (8003328 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80030f6:	61bb      	str	r3, [r7, #24]
      break;
 80030f8:	e108      	b.n	800330c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80030fa:	4b88      	ldr	r3, [pc, #544]	@ (800331c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030fe:	f003 0303 	and.w	r3, r3, #3
 8003102:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003104:	4b85      	ldr	r3, [pc, #532]	@ (800331c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003108:	091b      	lsrs	r3, r3, #4
 800310a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800310e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003110:	4b82      	ldr	r3, [pc, #520]	@ (800331c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003112:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003114:	f003 0301 	and.w	r3, r3, #1
 8003118:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800311a:	4b80      	ldr	r3, [pc, #512]	@ (800331c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800311c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800311e:	08db      	lsrs	r3, r3, #3
 8003120:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003124:	68fa      	ldr	r2, [r7, #12]
 8003126:	fb02 f303 	mul.w	r3, r2, r3
 800312a:	ee07 3a90 	vmov	s15, r3
 800312e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003132:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	2b00      	cmp	r3, #0
 800313a:	f000 80e1 	beq.w	8003300 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	2b02      	cmp	r3, #2
 8003142:	f000 8083 	beq.w	800324c <HAL_RCC_GetSysClockFreq+0x204>
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	2b02      	cmp	r3, #2
 800314a:	f200 80a1 	bhi.w	8003290 <HAL_RCC_GetSysClockFreq+0x248>
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d003      	beq.n	800315c <HAL_RCC_GetSysClockFreq+0x114>
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	2b01      	cmp	r3, #1
 8003158:	d056      	beq.n	8003208 <HAL_RCC_GetSysClockFreq+0x1c0>
 800315a:	e099      	b.n	8003290 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800315c:	4b6f      	ldr	r3, [pc, #444]	@ (800331c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0320 	and.w	r3, r3, #32
 8003164:	2b00      	cmp	r3, #0
 8003166:	d02d      	beq.n	80031c4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003168:	4b6c      	ldr	r3, [pc, #432]	@ (800331c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	08db      	lsrs	r3, r3, #3
 800316e:	f003 0303 	and.w	r3, r3, #3
 8003172:	4a6b      	ldr	r2, [pc, #428]	@ (8003320 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003174:	fa22 f303 	lsr.w	r3, r2, r3
 8003178:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	ee07 3a90 	vmov	s15, r3
 8003180:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	ee07 3a90 	vmov	s15, r3
 800318a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800318e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003192:	4b62      	ldr	r3, [pc, #392]	@ (800331c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003196:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800319a:	ee07 3a90 	vmov	s15, r3
 800319e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80031a6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800332c <HAL_RCC_GetSysClockFreq+0x2e4>
 80031aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80031b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031be:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80031c2:	e087      	b.n	80032d4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	ee07 3a90 	vmov	s15, r3
 80031ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031ce:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003330 <HAL_RCC_GetSysClockFreq+0x2e8>
 80031d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031d6:	4b51      	ldr	r3, [pc, #324]	@ (800331c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031de:	ee07 3a90 	vmov	s15, r3
 80031e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80031ea:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800332c <HAL_RCC_GetSysClockFreq+0x2e4>
 80031ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80031fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003202:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003206:	e065      	b.n	80032d4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	ee07 3a90 	vmov	s15, r3
 800320e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003212:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003334 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003216:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800321a:	4b40      	ldr	r3, [pc, #256]	@ (800331c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800321c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800321e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003222:	ee07 3a90 	vmov	s15, r3
 8003226:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800322a:	ed97 6a02 	vldr	s12, [r7, #8]
 800322e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800332c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003232:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003236:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800323a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800323e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003242:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003246:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800324a:	e043      	b.n	80032d4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	ee07 3a90 	vmov	s15, r3
 8003252:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003256:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003338 <HAL_RCC_GetSysClockFreq+0x2f0>
 800325a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800325e:	4b2f      	ldr	r3, [pc, #188]	@ (800331c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003262:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003266:	ee07 3a90 	vmov	s15, r3
 800326a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800326e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003272:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800332c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003276:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800327a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800327e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003282:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003286:	ee67 7a27 	vmul.f32	s15, s14, s15
 800328a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800328e:	e021      	b.n	80032d4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	ee07 3a90 	vmov	s15, r3
 8003296:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800329a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003334 <HAL_RCC_GetSysClockFreq+0x2ec>
 800329e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032a2:	4b1e      	ldr	r3, [pc, #120]	@ (800331c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032aa:	ee07 3a90 	vmov	s15, r3
 80032ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80032b6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800332c <HAL_RCC_GetSysClockFreq+0x2e4>
 80032ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80032c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80032d2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80032d4:	4b11      	ldr	r3, [pc, #68]	@ (800331c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032d8:	0a5b      	lsrs	r3, r3, #9
 80032da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80032de:	3301      	adds	r3, #1
 80032e0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	ee07 3a90 	vmov	s15, r3
 80032e8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80032ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80032f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80032f8:	ee17 3a90 	vmov	r3, s15
 80032fc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80032fe:	e005      	b.n	800330c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003300:	2300      	movs	r3, #0
 8003302:	61bb      	str	r3, [r7, #24]
      break;
 8003304:	e002      	b.n	800330c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003306:	4b07      	ldr	r3, [pc, #28]	@ (8003324 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003308:	61bb      	str	r3, [r7, #24]
      break;
 800330a:	bf00      	nop
  }

  return sysclockfreq;
 800330c:	69bb      	ldr	r3, [r7, #24]
}
 800330e:	4618      	mov	r0, r3
 8003310:	3724      	adds	r7, #36	@ 0x24
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr
 800331a:	bf00      	nop
 800331c:	58024400 	.word	0x58024400
 8003320:	03d09000 	.word	0x03d09000
 8003324:	003d0900 	.word	0x003d0900
 8003328:	007a1200 	.word	0x007a1200
 800332c:	46000000 	.word	0x46000000
 8003330:	4c742400 	.word	0x4c742400
 8003334:	4a742400 	.word	0x4a742400
 8003338:	4af42400 	.word	0x4af42400

0800333c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003342:	f7ff fe81 	bl	8003048 <HAL_RCC_GetSysClockFreq>
 8003346:	4602      	mov	r2, r0
 8003348:	4b10      	ldr	r3, [pc, #64]	@ (800338c <HAL_RCC_GetHCLKFreq+0x50>)
 800334a:	699b      	ldr	r3, [r3, #24]
 800334c:	0a1b      	lsrs	r3, r3, #8
 800334e:	f003 030f 	and.w	r3, r3, #15
 8003352:	490f      	ldr	r1, [pc, #60]	@ (8003390 <HAL_RCC_GetHCLKFreq+0x54>)
 8003354:	5ccb      	ldrb	r3, [r1, r3]
 8003356:	f003 031f 	and.w	r3, r3, #31
 800335a:	fa22 f303 	lsr.w	r3, r2, r3
 800335e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003360:	4b0a      	ldr	r3, [pc, #40]	@ (800338c <HAL_RCC_GetHCLKFreq+0x50>)
 8003362:	699b      	ldr	r3, [r3, #24]
 8003364:	f003 030f 	and.w	r3, r3, #15
 8003368:	4a09      	ldr	r2, [pc, #36]	@ (8003390 <HAL_RCC_GetHCLKFreq+0x54>)
 800336a:	5cd3      	ldrb	r3, [r2, r3]
 800336c:	f003 031f 	and.w	r3, r3, #31
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	fa22 f303 	lsr.w	r3, r2, r3
 8003376:	4a07      	ldr	r2, [pc, #28]	@ (8003394 <HAL_RCC_GetHCLKFreq+0x58>)
 8003378:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800337a:	4a07      	ldr	r2, [pc, #28]	@ (8003398 <HAL_RCC_GetHCLKFreq+0x5c>)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003380:	4b04      	ldr	r3, [pc, #16]	@ (8003394 <HAL_RCC_GetHCLKFreq+0x58>)
 8003382:	681b      	ldr	r3, [r3, #0]
}
 8003384:	4618      	mov	r0, r3
 8003386:	3708      	adds	r7, #8
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}
 800338c:	58024400 	.word	0x58024400
 8003390:	08009424 	.word	0x08009424
 8003394:	24000008 	.word	0x24000008
 8003398:	24000004 	.word	0x24000004

0800339c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80033a0:	f7ff ffcc 	bl	800333c <HAL_RCC_GetHCLKFreq>
 80033a4:	4602      	mov	r2, r0
 80033a6:	4b06      	ldr	r3, [pc, #24]	@ (80033c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033a8:	69db      	ldr	r3, [r3, #28]
 80033aa:	091b      	lsrs	r3, r3, #4
 80033ac:	f003 0307 	and.w	r3, r3, #7
 80033b0:	4904      	ldr	r1, [pc, #16]	@ (80033c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80033b2:	5ccb      	ldrb	r3, [r1, r3]
 80033b4:	f003 031f 	and.w	r3, r3, #31
 80033b8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80033bc:	4618      	mov	r0, r3
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	58024400 	.word	0x58024400
 80033c4:	08009424 	.word	0x08009424

080033c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80033cc:	f7ff ffb6 	bl	800333c <HAL_RCC_GetHCLKFreq>
 80033d0:	4602      	mov	r2, r0
 80033d2:	4b06      	ldr	r3, [pc, #24]	@ (80033ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80033d4:	69db      	ldr	r3, [r3, #28]
 80033d6:	0a1b      	lsrs	r3, r3, #8
 80033d8:	f003 0307 	and.w	r3, r3, #7
 80033dc:	4904      	ldr	r1, [pc, #16]	@ (80033f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80033de:	5ccb      	ldrb	r3, [r1, r3]
 80033e0:	f003 031f 	and.w	r3, r3, #31
 80033e4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	58024400 	.word	0x58024400
 80033f0:	08009424 	.word	0x08009424

080033f4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	223f      	movs	r2, #63	@ 0x3f
 8003402:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003404:	4b1a      	ldr	r3, [pc, #104]	@ (8003470 <HAL_RCC_GetClockConfig+0x7c>)
 8003406:	691b      	ldr	r3, [r3, #16]
 8003408:	f003 0207 	and.w	r2, r3, #7
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8003410:	4b17      	ldr	r3, [pc, #92]	@ (8003470 <HAL_RCC_GetClockConfig+0x7c>)
 8003412:	699b      	ldr	r3, [r3, #24]
 8003414:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800341c:	4b14      	ldr	r3, [pc, #80]	@ (8003470 <HAL_RCC_GetClockConfig+0x7c>)
 800341e:	699b      	ldr	r3, [r3, #24]
 8003420:	f003 020f 	and.w	r2, r3, #15
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8003428:	4b11      	ldr	r3, [pc, #68]	@ (8003470 <HAL_RCC_GetClockConfig+0x7c>)
 800342a:	699b      	ldr	r3, [r3, #24]
 800342c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8003434:	4b0e      	ldr	r3, [pc, #56]	@ (8003470 <HAL_RCC_GetClockConfig+0x7c>)
 8003436:	69db      	ldr	r3, [r3, #28]
 8003438:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8003440:	4b0b      	ldr	r3, [pc, #44]	@ (8003470 <HAL_RCC_GetClockConfig+0x7c>)
 8003442:	69db      	ldr	r3, [r3, #28]
 8003444:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800344c:	4b08      	ldr	r3, [pc, #32]	@ (8003470 <HAL_RCC_GetClockConfig+0x7c>)
 800344e:	6a1b      	ldr	r3, [r3, #32]
 8003450:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003458:	4b06      	ldr	r3, [pc, #24]	@ (8003474 <HAL_RCC_GetClockConfig+0x80>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 020f 	and.w	r2, r3, #15
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	601a      	str	r2, [r3, #0]
}
 8003464:	bf00      	nop
 8003466:	370c      	adds	r7, #12
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr
 8003470:	58024400 	.word	0x58024400
 8003474:	52002000 	.word	0x52002000

08003478 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003478:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800347c:	b0ca      	sub	sp, #296	@ 0x128
 800347e:	af00      	add	r7, sp, #0
 8003480:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003484:	2300      	movs	r3, #0
 8003486:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800348a:	2300      	movs	r3, #0
 800348c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003490:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003498:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800349c:	2500      	movs	r5, #0
 800349e:	ea54 0305 	orrs.w	r3, r4, r5
 80034a2:	d049      	beq.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80034a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034a8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80034aa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80034ae:	d02f      	beq.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80034b0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80034b4:	d828      	bhi.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80034b6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80034ba:	d01a      	beq.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80034bc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80034c0:	d822      	bhi.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d003      	beq.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x56>
 80034c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80034ca:	d007      	beq.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80034cc:	e01c      	b.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034ce:	4bb8      	ldr	r3, [pc, #736]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034d2:	4ab7      	ldr	r2, [pc, #732]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80034da:	e01a      	b.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80034dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034e0:	3308      	adds	r3, #8
 80034e2:	2102      	movs	r1, #2
 80034e4:	4618      	mov	r0, r3
 80034e6:	f001 fc8f 	bl	8004e08 <RCCEx_PLL2_Config>
 80034ea:	4603      	mov	r3, r0
 80034ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80034f0:	e00f      	b.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80034f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034f6:	3328      	adds	r3, #40	@ 0x28
 80034f8:	2102      	movs	r1, #2
 80034fa:	4618      	mov	r0, r3
 80034fc:	f001 fd36 	bl	8004f6c <RCCEx_PLL3_Config>
 8003500:	4603      	mov	r3, r0
 8003502:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003506:	e004      	b.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800350e:	e000      	b.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003510:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003512:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003516:	2b00      	cmp	r3, #0
 8003518:	d10a      	bne.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800351a:	4ba5      	ldr	r3, [pc, #660]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800351c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800351e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003522:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003526:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003528:	4aa1      	ldr	r2, [pc, #644]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800352a:	430b      	orrs	r3, r1
 800352c:	6513      	str	r3, [r2, #80]	@ 0x50
 800352e:	e003      	b.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003530:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003534:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003538:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800353c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003540:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003544:	f04f 0900 	mov.w	r9, #0
 8003548:	ea58 0309 	orrs.w	r3, r8, r9
 800354c:	d047      	beq.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800354e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003552:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003554:	2b04      	cmp	r3, #4
 8003556:	d82a      	bhi.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003558:	a201      	add	r2, pc, #4	@ (adr r2, 8003560 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800355a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800355e:	bf00      	nop
 8003560:	08003575 	.word	0x08003575
 8003564:	08003583 	.word	0x08003583
 8003568:	08003599 	.word	0x08003599
 800356c:	080035b7 	.word	0x080035b7
 8003570:	080035b7 	.word	0x080035b7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003574:	4b8e      	ldr	r3, [pc, #568]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003578:	4a8d      	ldr	r2, [pc, #564]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800357a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800357e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003580:	e01a      	b.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003582:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003586:	3308      	adds	r3, #8
 8003588:	2100      	movs	r1, #0
 800358a:	4618      	mov	r0, r3
 800358c:	f001 fc3c 	bl	8004e08 <RCCEx_PLL2_Config>
 8003590:	4603      	mov	r3, r0
 8003592:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003596:	e00f      	b.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003598:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800359c:	3328      	adds	r3, #40	@ 0x28
 800359e:	2100      	movs	r1, #0
 80035a0:	4618      	mov	r0, r3
 80035a2:	f001 fce3 	bl	8004f6c <RCCEx_PLL3_Config>
 80035a6:	4603      	mov	r3, r0
 80035a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80035ac:	e004      	b.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80035b4:	e000      	b.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80035b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d10a      	bne.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80035c0:	4b7b      	ldr	r3, [pc, #492]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035c4:	f023 0107 	bic.w	r1, r3, #7
 80035c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035ce:	4a78      	ldr	r2, [pc, #480]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035d0:	430b      	orrs	r3, r1
 80035d2:	6513      	str	r3, [r2, #80]	@ 0x50
 80035d4:	e003      	b.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80035de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e6:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80035ea:	f04f 0b00 	mov.w	fp, #0
 80035ee:	ea5a 030b 	orrs.w	r3, sl, fp
 80035f2:	d04c      	beq.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80035f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035fe:	d030      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003600:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003604:	d829      	bhi.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003606:	2bc0      	cmp	r3, #192	@ 0xc0
 8003608:	d02d      	beq.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800360a:	2bc0      	cmp	r3, #192	@ 0xc0
 800360c:	d825      	bhi.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800360e:	2b80      	cmp	r3, #128	@ 0x80
 8003610:	d018      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003612:	2b80      	cmp	r3, #128	@ 0x80
 8003614:	d821      	bhi.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003616:	2b00      	cmp	r3, #0
 8003618:	d002      	beq.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800361a:	2b40      	cmp	r3, #64	@ 0x40
 800361c:	d007      	beq.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800361e:	e01c      	b.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003620:	4b63      	ldr	r3, [pc, #396]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003624:	4a62      	ldr	r2, [pc, #392]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003626:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800362a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800362c:	e01c      	b.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800362e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003632:	3308      	adds	r3, #8
 8003634:	2100      	movs	r1, #0
 8003636:	4618      	mov	r0, r3
 8003638:	f001 fbe6 	bl	8004e08 <RCCEx_PLL2_Config>
 800363c:	4603      	mov	r3, r0
 800363e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003642:	e011      	b.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003644:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003648:	3328      	adds	r3, #40	@ 0x28
 800364a:	2100      	movs	r1, #0
 800364c:	4618      	mov	r0, r3
 800364e:	f001 fc8d 	bl	8004f6c <RCCEx_PLL3_Config>
 8003652:	4603      	mov	r3, r0
 8003654:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003658:	e006      	b.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003660:	e002      	b.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003662:	bf00      	nop
 8003664:	e000      	b.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003666:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003668:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800366c:	2b00      	cmp	r3, #0
 800366e:	d10a      	bne.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003670:	4b4f      	ldr	r3, [pc, #316]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003672:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003674:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003678:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800367c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800367e:	4a4c      	ldr	r2, [pc, #304]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003680:	430b      	orrs	r3, r1
 8003682:	6513      	str	r3, [r2, #80]	@ 0x50
 8003684:	e003      	b.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003686:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800368a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800368e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003696:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800369a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800369e:	2300      	movs	r3, #0
 80036a0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80036a4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80036a8:	460b      	mov	r3, r1
 80036aa:	4313      	orrs	r3, r2
 80036ac:	d053      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80036ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036b2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80036b6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80036ba:	d035      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80036bc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80036c0:	d82e      	bhi.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80036c2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80036c6:	d031      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80036c8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80036cc:	d828      	bhi.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80036ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80036d2:	d01a      	beq.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x292>
 80036d4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80036d8:	d822      	bhi.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d003      	beq.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80036de:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80036e2:	d007      	beq.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80036e4:	e01c      	b.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036e6:	4b32      	ldr	r3, [pc, #200]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036ea:	4a31      	ldr	r2, [pc, #196]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80036f2:	e01c      	b.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80036f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036f8:	3308      	adds	r3, #8
 80036fa:	2100      	movs	r1, #0
 80036fc:	4618      	mov	r0, r3
 80036fe:	f001 fb83 	bl	8004e08 <RCCEx_PLL2_Config>
 8003702:	4603      	mov	r3, r0
 8003704:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003708:	e011      	b.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800370a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800370e:	3328      	adds	r3, #40	@ 0x28
 8003710:	2100      	movs	r1, #0
 8003712:	4618      	mov	r0, r3
 8003714:	f001 fc2a 	bl	8004f6c <RCCEx_PLL3_Config>
 8003718:	4603      	mov	r3, r0
 800371a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800371e:	e006      	b.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003726:	e002      	b.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003728:	bf00      	nop
 800372a:	e000      	b.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800372c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800372e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003732:	2b00      	cmp	r3, #0
 8003734:	d10b      	bne.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003736:	4b1e      	ldr	r3, [pc, #120]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003738:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800373a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800373e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003742:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003746:	4a1a      	ldr	r2, [pc, #104]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003748:	430b      	orrs	r3, r1
 800374a:	6593      	str	r3, [r2, #88]	@ 0x58
 800374c:	e003      	b.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800374e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003752:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003756:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800375a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800375e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003762:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003766:	2300      	movs	r3, #0
 8003768:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800376c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003770:	460b      	mov	r3, r1
 8003772:	4313      	orrs	r3, r2
 8003774:	d056      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003776:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800377a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800377e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003782:	d038      	beq.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003784:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003788:	d831      	bhi.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x376>
 800378a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800378e:	d034      	beq.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003790:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003794:	d82b      	bhi.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003796:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800379a:	d01d      	beq.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800379c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80037a0:	d825      	bhi.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x376>
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d006      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80037a6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80037aa:	d00a      	beq.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80037ac:	e01f      	b.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x376>
 80037ae:	bf00      	nop
 80037b0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037b4:	4ba2      	ldr	r3, [pc, #648]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037b8:	4aa1      	ldr	r2, [pc, #644]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80037c0:	e01c      	b.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80037c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037c6:	3308      	adds	r3, #8
 80037c8:	2100      	movs	r1, #0
 80037ca:	4618      	mov	r0, r3
 80037cc:	f001 fb1c 	bl	8004e08 <RCCEx_PLL2_Config>
 80037d0:	4603      	mov	r3, r0
 80037d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80037d6:	e011      	b.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80037d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037dc:	3328      	adds	r3, #40	@ 0x28
 80037de:	2100      	movs	r1, #0
 80037e0:	4618      	mov	r0, r3
 80037e2:	f001 fbc3 	bl	8004f6c <RCCEx_PLL3_Config>
 80037e6:	4603      	mov	r3, r0
 80037e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80037ec:	e006      	b.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80037f4:	e002      	b.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80037f6:	bf00      	nop
 80037f8:	e000      	b.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80037fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003800:	2b00      	cmp	r3, #0
 8003802:	d10b      	bne.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003804:	4b8e      	ldr	r3, [pc, #568]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003806:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003808:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800380c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003810:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003814:	4a8a      	ldr	r2, [pc, #552]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003816:	430b      	orrs	r3, r1
 8003818:	6593      	str	r3, [r2, #88]	@ 0x58
 800381a:	e003      	b.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800381c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003820:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003824:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800382c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003830:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003834:	2300      	movs	r3, #0
 8003836:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800383a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800383e:	460b      	mov	r3, r1
 8003840:	4313      	orrs	r3, r2
 8003842:	d03a      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003844:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003848:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800384a:	2b30      	cmp	r3, #48	@ 0x30
 800384c:	d01f      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x416>
 800384e:	2b30      	cmp	r3, #48	@ 0x30
 8003850:	d819      	bhi.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003852:	2b20      	cmp	r3, #32
 8003854:	d00c      	beq.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003856:	2b20      	cmp	r3, #32
 8003858:	d815      	bhi.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800385a:	2b00      	cmp	r3, #0
 800385c:	d019      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800385e:	2b10      	cmp	r3, #16
 8003860:	d111      	bne.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003862:	4b77      	ldr	r3, [pc, #476]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003866:	4a76      	ldr	r2, [pc, #472]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003868:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800386c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800386e:	e011      	b.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003870:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003874:	3308      	adds	r3, #8
 8003876:	2102      	movs	r1, #2
 8003878:	4618      	mov	r0, r3
 800387a:	f001 fac5 	bl	8004e08 <RCCEx_PLL2_Config>
 800387e:	4603      	mov	r3, r0
 8003880:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003884:	e006      	b.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800388c:	e002      	b.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800388e:	bf00      	nop
 8003890:	e000      	b.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003892:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003894:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003898:	2b00      	cmp	r3, #0
 800389a:	d10a      	bne.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800389c:	4b68      	ldr	r3, [pc, #416]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800389e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038a0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80038a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038aa:	4a65      	ldr	r2, [pc, #404]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038ac:	430b      	orrs	r3, r1
 80038ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80038b0:	e003      	b.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80038ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038c2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80038c6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80038ca:	2300      	movs	r3, #0
 80038cc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80038d0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80038d4:	460b      	mov	r3, r1
 80038d6:	4313      	orrs	r3, r2
 80038d8:	d051      	beq.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80038da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038e0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80038e4:	d035      	beq.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80038e6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80038ea:	d82e      	bhi.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80038ec:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80038f0:	d031      	beq.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80038f2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80038f6:	d828      	bhi.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80038f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038fc:	d01a      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80038fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003902:	d822      	bhi.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003904:	2b00      	cmp	r3, #0
 8003906:	d003      	beq.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003908:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800390c:	d007      	beq.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800390e:	e01c      	b.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003910:	4b4b      	ldr	r3, [pc, #300]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003914:	4a4a      	ldr	r2, [pc, #296]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003916:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800391a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800391c:	e01c      	b.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800391e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003922:	3308      	adds	r3, #8
 8003924:	2100      	movs	r1, #0
 8003926:	4618      	mov	r0, r3
 8003928:	f001 fa6e 	bl	8004e08 <RCCEx_PLL2_Config>
 800392c:	4603      	mov	r3, r0
 800392e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003932:	e011      	b.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003934:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003938:	3328      	adds	r3, #40	@ 0x28
 800393a:	2100      	movs	r1, #0
 800393c:	4618      	mov	r0, r3
 800393e:	f001 fb15 	bl	8004f6c <RCCEx_PLL3_Config>
 8003942:	4603      	mov	r3, r0
 8003944:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003948:	e006      	b.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003950:	e002      	b.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003952:	bf00      	nop
 8003954:	e000      	b.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003956:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003958:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800395c:	2b00      	cmp	r3, #0
 800395e:	d10a      	bne.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003960:	4b37      	ldr	r3, [pc, #220]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003962:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003964:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003968:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800396c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800396e:	4a34      	ldr	r2, [pc, #208]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003970:	430b      	orrs	r3, r1
 8003972:	6513      	str	r3, [r2, #80]	@ 0x50
 8003974:	e003      	b.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003976:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800397a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800397e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003986:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800398a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800398e:	2300      	movs	r3, #0
 8003990:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003994:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003998:	460b      	mov	r3, r1
 800399a:	4313      	orrs	r3, r2
 800399c:	d056      	beq.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800399e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80039a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80039a8:	d033      	beq.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80039aa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80039ae:	d82c      	bhi.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80039b0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80039b4:	d02f      	beq.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80039b6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80039ba:	d826      	bhi.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80039bc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80039c0:	d02b      	beq.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80039c2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80039c6:	d820      	bhi.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80039c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80039cc:	d012      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80039ce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80039d2:	d81a      	bhi.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d022      	beq.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80039d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039dc:	d115      	bne.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80039de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039e2:	3308      	adds	r3, #8
 80039e4:	2101      	movs	r1, #1
 80039e6:	4618      	mov	r0, r3
 80039e8:	f001 fa0e 	bl	8004e08 <RCCEx_PLL2_Config>
 80039ec:	4603      	mov	r3, r0
 80039ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80039f2:	e015      	b.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80039f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039f8:	3328      	adds	r3, #40	@ 0x28
 80039fa:	2101      	movs	r1, #1
 80039fc:	4618      	mov	r0, r3
 80039fe:	f001 fab5 	bl	8004f6c <RCCEx_PLL3_Config>
 8003a02:	4603      	mov	r3, r0
 8003a04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003a08:	e00a      	b.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a10:	e006      	b.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003a12:	bf00      	nop
 8003a14:	e004      	b.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003a16:	bf00      	nop
 8003a18:	e002      	b.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003a1a:	bf00      	nop
 8003a1c:	e000      	b.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003a1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d10d      	bne.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003a28:	4b05      	ldr	r3, [pc, #20]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a2c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003a30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a34:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a36:	4a02      	ldr	r2, [pc, #8]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a38:	430b      	orrs	r3, r1
 8003a3a:	6513      	str	r3, [r2, #80]	@ 0x50
 8003a3c:	e006      	b.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003a3e:	bf00      	nop
 8003a40:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a48:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003a4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a54:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003a58:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003a62:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003a66:	460b      	mov	r3, r1
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	d055      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003a6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a70:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003a74:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a78:	d033      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003a7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a7e:	d82c      	bhi.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003a80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a84:	d02f      	beq.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003a86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a8a:	d826      	bhi.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003a8c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003a90:	d02b      	beq.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003a92:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003a96:	d820      	bhi.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003a98:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a9c:	d012      	beq.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003a9e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003aa2:	d81a      	bhi.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d022      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003aa8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003aac:	d115      	bne.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003aae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ab2:	3308      	adds	r3, #8
 8003ab4:	2101      	movs	r1, #1
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f001 f9a6 	bl	8004e08 <RCCEx_PLL2_Config>
 8003abc:	4603      	mov	r3, r0
 8003abe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003ac2:	e015      	b.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003ac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ac8:	3328      	adds	r3, #40	@ 0x28
 8003aca:	2101      	movs	r1, #1
 8003acc:	4618      	mov	r0, r3
 8003ace:	f001 fa4d 	bl	8004f6c <RCCEx_PLL3_Config>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003ad8:	e00a      	b.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ae0:	e006      	b.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003ae2:	bf00      	nop
 8003ae4:	e004      	b.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003ae6:	bf00      	nop
 8003ae8:	e002      	b.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003aea:	bf00      	nop
 8003aec:	e000      	b.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003aee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003af0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d10b      	bne.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003af8:	4ba3      	ldr	r3, [pc, #652]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003afa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003afc:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003b00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b04:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003b08:	4a9f      	ldr	r2, [pc, #636]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b0a:	430b      	orrs	r3, r1
 8003b0c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b0e:	e003      	b.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b14:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003b18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b20:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003b24:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003b28:	2300      	movs	r3, #0
 8003b2a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003b2e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003b32:	460b      	mov	r3, r1
 8003b34:	4313      	orrs	r3, r2
 8003b36:	d037      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003b38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b42:	d00e      	beq.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003b44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b48:	d816      	bhi.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d018      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003b4e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003b52:	d111      	bne.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b54:	4b8c      	ldr	r3, [pc, #560]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b58:	4a8b      	ldr	r2, [pc, #556]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003b60:	e00f      	b.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b66:	3308      	adds	r3, #8
 8003b68:	2101      	movs	r1, #1
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f001 f94c 	bl	8004e08 <RCCEx_PLL2_Config>
 8003b70:	4603      	mov	r3, r0
 8003b72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003b76:	e004      	b.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b7e:	e000      	b.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003b80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d10a      	bne.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003b8a:	4b7f      	ldr	r3, [pc, #508]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b8e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003b92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b98:	4a7b      	ldr	r2, [pc, #492]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b9a:	430b      	orrs	r3, r1
 8003b9c:	6513      	str	r3, [r2, #80]	@ 0x50
 8003b9e:	e003      	b.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ba0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ba4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003ba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bb0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003bb4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003bb8:	2300      	movs	r3, #0
 8003bba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003bbe:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003bc2:	460b      	mov	r3, r1
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	d039      	beq.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003bc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bcc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bce:	2b03      	cmp	r3, #3
 8003bd0:	d81c      	bhi.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003bd2:	a201      	add	r2, pc, #4	@ (adr r2, 8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bd8:	08003c15 	.word	0x08003c15
 8003bdc:	08003be9 	.word	0x08003be9
 8003be0:	08003bf7 	.word	0x08003bf7
 8003be4:	08003c15 	.word	0x08003c15
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003be8:	4b67      	ldr	r3, [pc, #412]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bec:	4a66      	ldr	r2, [pc, #408]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bf2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003bf4:	e00f      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003bf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bfa:	3308      	adds	r3, #8
 8003bfc:	2102      	movs	r1, #2
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f001 f902 	bl	8004e08 <RCCEx_PLL2_Config>
 8003c04:	4603      	mov	r3, r0
 8003c06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003c0a:	e004      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c12:	e000      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003c14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d10a      	bne.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003c1e:	4b5a      	ldr	r3, [pc, #360]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c22:	f023 0103 	bic.w	r1, r3, #3
 8003c26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c2c:	4a56      	ldr	r2, [pc, #344]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c2e:	430b      	orrs	r3, r1
 8003c30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c32:	e003      	b.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c38:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c44:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003c48:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003c52:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003c56:	460b      	mov	r3, r1
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	f000 809f 	beq.w	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c5e:	4b4b      	ldr	r3, [pc, #300]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a4a      	ldr	r2, [pc, #296]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003c64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c68:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c6a:	f7fe f863 	bl	8001d34 <HAL_GetTick>
 8003c6e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c72:	e00b      	b.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c74:	f7fe f85e 	bl	8001d34 <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	2b64      	cmp	r3, #100	@ 0x64
 8003c82:	d903      	bls.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003c84:	2303      	movs	r3, #3
 8003c86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c8a:	e005      	b.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c8c:	4b3f      	ldr	r3, [pc, #252]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d0ed      	beq.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003c98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d179      	bne.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003ca0:	4b39      	ldr	r3, [pc, #228]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ca2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003ca4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ca8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003cac:	4053      	eors	r3, r2
 8003cae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d015      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003cb6:	4b34      	ldr	r3, [pc, #208]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cbe:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003cc2:	4b31      	ldr	r3, [pc, #196]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cc6:	4a30      	ldr	r2, [pc, #192]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ccc:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003cce:	4b2e      	ldr	r3, [pc, #184]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cd2:	4a2d      	ldr	r2, [pc, #180]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cd4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cd8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003cda:	4a2b      	ldr	r2, [pc, #172]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cdc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003ce0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003ce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ce6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003cea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003cee:	d118      	bne.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf0:	f7fe f820 	bl	8001d34 <HAL_GetTick>
 8003cf4:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003cf8:	e00d      	b.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cfa:	f7fe f81b 	bl	8001d34 <HAL_GetTick>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003d04:	1ad2      	subs	r2, r2, r3
 8003d06:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d903      	bls.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003d14:	e005      	b.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d16:	4b1c      	ldr	r3, [pc, #112]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d1a:	f003 0302 	and.w	r3, r3, #2
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d0eb      	beq.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003d22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d129      	bne.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d2e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003d32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d36:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003d3a:	d10e      	bne.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003d3c:	4b12      	ldr	r3, [pc, #72]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d3e:	691b      	ldr	r3, [r3, #16]
 8003d40:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003d44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d48:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003d4c:	091a      	lsrs	r2, r3, #4
 8003d4e:	4b10      	ldr	r3, [pc, #64]	@ (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003d50:	4013      	ands	r3, r2
 8003d52:	4a0d      	ldr	r2, [pc, #52]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d54:	430b      	orrs	r3, r1
 8003d56:	6113      	str	r3, [r2, #16]
 8003d58:	e005      	b.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003d5a:	4b0b      	ldr	r3, [pc, #44]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d5c:	691b      	ldr	r3, [r3, #16]
 8003d5e:	4a0a      	ldr	r2, [pc, #40]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d60:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003d64:	6113      	str	r3, [r2, #16]
 8003d66:	4b08      	ldr	r3, [pc, #32]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d68:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d6e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003d72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d76:	4a04      	ldr	r2, [pc, #16]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d78:	430b      	orrs	r3, r1
 8003d7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d7c:	e00e      	b.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d82:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8003d86:	e009      	b.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003d88:	58024400 	.word	0x58024400
 8003d8c:	58024800 	.word	0x58024800
 8003d90:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d98:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003d9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003da4:	f002 0301 	and.w	r3, r2, #1
 8003da8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003dac:	2300      	movs	r3, #0
 8003dae:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003db2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003db6:	460b      	mov	r3, r1
 8003db8:	4313      	orrs	r3, r2
 8003dba:	f000 8089 	beq.w	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003dbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dc2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003dc4:	2b28      	cmp	r3, #40	@ 0x28
 8003dc6:	d86b      	bhi.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003dc8:	a201      	add	r2, pc, #4	@ (adr r2, 8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dce:	bf00      	nop
 8003dd0:	08003ea9 	.word	0x08003ea9
 8003dd4:	08003ea1 	.word	0x08003ea1
 8003dd8:	08003ea1 	.word	0x08003ea1
 8003ddc:	08003ea1 	.word	0x08003ea1
 8003de0:	08003ea1 	.word	0x08003ea1
 8003de4:	08003ea1 	.word	0x08003ea1
 8003de8:	08003ea1 	.word	0x08003ea1
 8003dec:	08003ea1 	.word	0x08003ea1
 8003df0:	08003e75 	.word	0x08003e75
 8003df4:	08003ea1 	.word	0x08003ea1
 8003df8:	08003ea1 	.word	0x08003ea1
 8003dfc:	08003ea1 	.word	0x08003ea1
 8003e00:	08003ea1 	.word	0x08003ea1
 8003e04:	08003ea1 	.word	0x08003ea1
 8003e08:	08003ea1 	.word	0x08003ea1
 8003e0c:	08003ea1 	.word	0x08003ea1
 8003e10:	08003e8b 	.word	0x08003e8b
 8003e14:	08003ea1 	.word	0x08003ea1
 8003e18:	08003ea1 	.word	0x08003ea1
 8003e1c:	08003ea1 	.word	0x08003ea1
 8003e20:	08003ea1 	.word	0x08003ea1
 8003e24:	08003ea1 	.word	0x08003ea1
 8003e28:	08003ea1 	.word	0x08003ea1
 8003e2c:	08003ea1 	.word	0x08003ea1
 8003e30:	08003ea9 	.word	0x08003ea9
 8003e34:	08003ea1 	.word	0x08003ea1
 8003e38:	08003ea1 	.word	0x08003ea1
 8003e3c:	08003ea1 	.word	0x08003ea1
 8003e40:	08003ea1 	.word	0x08003ea1
 8003e44:	08003ea1 	.word	0x08003ea1
 8003e48:	08003ea1 	.word	0x08003ea1
 8003e4c:	08003ea1 	.word	0x08003ea1
 8003e50:	08003ea9 	.word	0x08003ea9
 8003e54:	08003ea1 	.word	0x08003ea1
 8003e58:	08003ea1 	.word	0x08003ea1
 8003e5c:	08003ea1 	.word	0x08003ea1
 8003e60:	08003ea1 	.word	0x08003ea1
 8003e64:	08003ea1 	.word	0x08003ea1
 8003e68:	08003ea1 	.word	0x08003ea1
 8003e6c:	08003ea1 	.word	0x08003ea1
 8003e70:	08003ea9 	.word	0x08003ea9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e78:	3308      	adds	r3, #8
 8003e7a:	2101      	movs	r1, #1
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f000 ffc3 	bl	8004e08 <RCCEx_PLL2_Config>
 8003e82:	4603      	mov	r3, r0
 8003e84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003e88:	e00f      	b.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e8e:	3328      	adds	r3, #40	@ 0x28
 8003e90:	2101      	movs	r1, #1
 8003e92:	4618      	mov	r0, r3
 8003e94:	f001 f86a 	bl	8004f6c <RCCEx_PLL3_Config>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003e9e:	e004      	b.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ea6:	e000      	b.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003ea8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003eaa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d10a      	bne.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003eb2:	4bbf      	ldr	r3, [pc, #764]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003eb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003eb6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003eba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ebe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003ec0:	4abb      	ldr	r2, [pc, #748]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003ec2:	430b      	orrs	r3, r1
 8003ec4:	6553      	str	r3, [r2, #84]	@ 0x54
 8003ec6:	e003      	b.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ec8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ecc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003ed0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ed8:	f002 0302 	and.w	r3, r2, #2
 8003edc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003ee6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003eea:	460b      	mov	r3, r1
 8003eec:	4313      	orrs	r3, r2
 8003eee:	d041      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003ef0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ef4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ef6:	2b05      	cmp	r3, #5
 8003ef8:	d824      	bhi.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003efa:	a201      	add	r2, pc, #4	@ (adr r2, 8003f00 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f00:	08003f4d 	.word	0x08003f4d
 8003f04:	08003f19 	.word	0x08003f19
 8003f08:	08003f2f 	.word	0x08003f2f
 8003f0c:	08003f4d 	.word	0x08003f4d
 8003f10:	08003f4d 	.word	0x08003f4d
 8003f14:	08003f4d 	.word	0x08003f4d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f1c:	3308      	adds	r3, #8
 8003f1e:	2101      	movs	r1, #1
 8003f20:	4618      	mov	r0, r3
 8003f22:	f000 ff71 	bl	8004e08 <RCCEx_PLL2_Config>
 8003f26:	4603      	mov	r3, r0
 8003f28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003f2c:	e00f      	b.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f32:	3328      	adds	r3, #40	@ 0x28
 8003f34:	2101      	movs	r1, #1
 8003f36:	4618      	mov	r0, r3
 8003f38:	f001 f818 	bl	8004f6c <RCCEx_PLL3_Config>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003f42:	e004      	b.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f4a:	e000      	b.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003f4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d10a      	bne.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003f56:	4b96      	ldr	r3, [pc, #600]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f5a:	f023 0107 	bic.w	r1, r3, #7
 8003f5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f62:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f64:	4a92      	ldr	r2, [pc, #584]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f66:	430b      	orrs	r3, r1
 8003f68:	6553      	str	r3, [r2, #84]	@ 0x54
 8003f6a:	e003      	b.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f70:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f7c:	f002 0304 	and.w	r3, r2, #4
 8003f80:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003f84:	2300      	movs	r3, #0
 8003f86:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003f8a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003f8e:	460b      	mov	r3, r1
 8003f90:	4313      	orrs	r3, r2
 8003f92:	d044      	beq.n	800401e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003f94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f98:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f9c:	2b05      	cmp	r3, #5
 8003f9e:	d825      	bhi.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003fa0:	a201      	add	r2, pc, #4	@ (adr r2, 8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fa6:	bf00      	nop
 8003fa8:	08003ff5 	.word	0x08003ff5
 8003fac:	08003fc1 	.word	0x08003fc1
 8003fb0:	08003fd7 	.word	0x08003fd7
 8003fb4:	08003ff5 	.word	0x08003ff5
 8003fb8:	08003ff5 	.word	0x08003ff5
 8003fbc:	08003ff5 	.word	0x08003ff5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003fc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fc4:	3308      	adds	r3, #8
 8003fc6:	2101      	movs	r1, #1
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f000 ff1d 	bl	8004e08 <RCCEx_PLL2_Config>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003fd4:	e00f      	b.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003fd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fda:	3328      	adds	r3, #40	@ 0x28
 8003fdc:	2101      	movs	r1, #1
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f000 ffc4 	bl	8004f6c <RCCEx_PLL3_Config>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003fea:	e004      	b.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ff2:	e000      	b.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003ff4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ff6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d10b      	bne.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ffe:	4b6c      	ldr	r3, [pc, #432]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004000:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004002:	f023 0107 	bic.w	r1, r3, #7
 8004006:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800400a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800400e:	4a68      	ldr	r2, [pc, #416]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004010:	430b      	orrs	r3, r1
 8004012:	6593      	str	r3, [r2, #88]	@ 0x58
 8004014:	e003      	b.n	800401e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004016:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800401a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800401e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004026:	f002 0320 	and.w	r3, r2, #32
 800402a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800402e:	2300      	movs	r3, #0
 8004030:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004034:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004038:	460b      	mov	r3, r1
 800403a:	4313      	orrs	r3, r2
 800403c:	d055      	beq.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800403e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004042:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004046:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800404a:	d033      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800404c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004050:	d82c      	bhi.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004052:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004056:	d02f      	beq.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004058:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800405c:	d826      	bhi.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800405e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004062:	d02b      	beq.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004064:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004068:	d820      	bhi.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800406a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800406e:	d012      	beq.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004070:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004074:	d81a      	bhi.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004076:	2b00      	cmp	r3, #0
 8004078:	d022      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800407a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800407e:	d115      	bne.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004080:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004084:	3308      	adds	r3, #8
 8004086:	2100      	movs	r1, #0
 8004088:	4618      	mov	r0, r3
 800408a:	f000 febd 	bl	8004e08 <RCCEx_PLL2_Config>
 800408e:	4603      	mov	r3, r0
 8004090:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004094:	e015      	b.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004096:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800409a:	3328      	adds	r3, #40	@ 0x28
 800409c:	2102      	movs	r1, #2
 800409e:	4618      	mov	r0, r3
 80040a0:	f000 ff64 	bl	8004f6c <RCCEx_PLL3_Config>
 80040a4:	4603      	mov	r3, r0
 80040a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80040aa:	e00a      	b.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80040b2:	e006      	b.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80040b4:	bf00      	nop
 80040b6:	e004      	b.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80040b8:	bf00      	nop
 80040ba:	e002      	b.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80040bc:	bf00      	nop
 80040be:	e000      	b.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80040c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d10b      	bne.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80040ca:	4b39      	ldr	r3, [pc, #228]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80040cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040ce:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80040d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040da:	4a35      	ldr	r2, [pc, #212]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80040dc:	430b      	orrs	r3, r1
 80040de:	6553      	str	r3, [r2, #84]	@ 0x54
 80040e0:	e003      	b.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80040ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040f2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80040f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80040fa:	2300      	movs	r3, #0
 80040fc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004100:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004104:	460b      	mov	r3, r1
 8004106:	4313      	orrs	r3, r2
 8004108:	d058      	beq.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800410a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800410e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004112:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004116:	d033      	beq.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004118:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800411c:	d82c      	bhi.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800411e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004122:	d02f      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004124:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004128:	d826      	bhi.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800412a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800412e:	d02b      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004130:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004134:	d820      	bhi.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004136:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800413a:	d012      	beq.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800413c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004140:	d81a      	bhi.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004142:	2b00      	cmp	r3, #0
 8004144:	d022      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004146:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800414a:	d115      	bne.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800414c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004150:	3308      	adds	r3, #8
 8004152:	2100      	movs	r1, #0
 8004154:	4618      	mov	r0, r3
 8004156:	f000 fe57 	bl	8004e08 <RCCEx_PLL2_Config>
 800415a:	4603      	mov	r3, r0
 800415c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004160:	e015      	b.n	800418e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004162:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004166:	3328      	adds	r3, #40	@ 0x28
 8004168:	2102      	movs	r1, #2
 800416a:	4618      	mov	r0, r3
 800416c:	f000 fefe 	bl	8004f6c <RCCEx_PLL3_Config>
 8004170:	4603      	mov	r3, r0
 8004172:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004176:	e00a      	b.n	800418e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800417e:	e006      	b.n	800418e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004180:	bf00      	nop
 8004182:	e004      	b.n	800418e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004184:	bf00      	nop
 8004186:	e002      	b.n	800418e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004188:	bf00      	nop
 800418a:	e000      	b.n	800418e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800418c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800418e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004192:	2b00      	cmp	r3, #0
 8004194:	d10e      	bne.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004196:	4b06      	ldr	r3, [pc, #24]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004198:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800419a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800419e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80041a6:	4a02      	ldr	r2, [pc, #8]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80041a8:	430b      	orrs	r3, r1
 80041aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80041ac:	e006      	b.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80041ae:	bf00      	nop
 80041b0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80041bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041c4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80041c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80041cc:	2300      	movs	r3, #0
 80041ce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80041d2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80041d6:	460b      	mov	r3, r1
 80041d8:	4313      	orrs	r3, r2
 80041da:	d055      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80041dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041e0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80041e4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80041e8:	d033      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80041ea:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80041ee:	d82c      	bhi.n	800424a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80041f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80041f4:	d02f      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80041f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80041fa:	d826      	bhi.n	800424a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80041fc:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004200:	d02b      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004202:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004206:	d820      	bhi.n	800424a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004208:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800420c:	d012      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800420e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004212:	d81a      	bhi.n	800424a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004214:	2b00      	cmp	r3, #0
 8004216:	d022      	beq.n	800425e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004218:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800421c:	d115      	bne.n	800424a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800421e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004222:	3308      	adds	r3, #8
 8004224:	2100      	movs	r1, #0
 8004226:	4618      	mov	r0, r3
 8004228:	f000 fdee 	bl	8004e08 <RCCEx_PLL2_Config>
 800422c:	4603      	mov	r3, r0
 800422e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004232:	e015      	b.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004234:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004238:	3328      	adds	r3, #40	@ 0x28
 800423a:	2102      	movs	r1, #2
 800423c:	4618      	mov	r0, r3
 800423e:	f000 fe95 	bl	8004f6c <RCCEx_PLL3_Config>
 8004242:	4603      	mov	r3, r0
 8004244:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004248:	e00a      	b.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004250:	e006      	b.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004252:	bf00      	nop
 8004254:	e004      	b.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004256:	bf00      	nop
 8004258:	e002      	b.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800425a:	bf00      	nop
 800425c:	e000      	b.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800425e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004260:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004264:	2b00      	cmp	r3, #0
 8004266:	d10b      	bne.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004268:	4ba1      	ldr	r3, [pc, #644]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800426a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800426c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004270:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004274:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004278:	4a9d      	ldr	r2, [pc, #628]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800427a:	430b      	orrs	r3, r1
 800427c:	6593      	str	r3, [r2, #88]	@ 0x58
 800427e:	e003      	b.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004280:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004284:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004288:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800428c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004290:	f002 0308 	and.w	r3, r2, #8
 8004294:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004298:	2300      	movs	r3, #0
 800429a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800429e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80042a2:	460b      	mov	r3, r1
 80042a4:	4313      	orrs	r3, r2
 80042a6:	d01e      	beq.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80042a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042b4:	d10c      	bne.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80042b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042ba:	3328      	adds	r3, #40	@ 0x28
 80042bc:	2102      	movs	r1, #2
 80042be:	4618      	mov	r0, r3
 80042c0:	f000 fe54 	bl	8004f6c <RCCEx_PLL3_Config>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d002      	beq.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80042d0:	4b87      	ldr	r3, [pc, #540]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042d4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80042d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042e0:	4a83      	ldr	r2, [pc, #524]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042e2:	430b      	orrs	r3, r1
 80042e4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80042e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ee:	f002 0310 	and.w	r3, r2, #16
 80042f2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80042f6:	2300      	movs	r3, #0
 80042f8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80042fc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004300:	460b      	mov	r3, r1
 8004302:	4313      	orrs	r3, r2
 8004304:	d01e      	beq.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004306:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800430a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800430e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004312:	d10c      	bne.n	800432e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004314:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004318:	3328      	adds	r3, #40	@ 0x28
 800431a:	2102      	movs	r1, #2
 800431c:	4618      	mov	r0, r3
 800431e:	f000 fe25 	bl	8004f6c <RCCEx_PLL3_Config>
 8004322:	4603      	mov	r3, r0
 8004324:	2b00      	cmp	r3, #0
 8004326:	d002      	beq.n	800432e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800432e:	4b70      	ldr	r3, [pc, #448]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004330:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004332:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004336:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800433a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800433e:	4a6c      	ldr	r2, [pc, #432]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004340:	430b      	orrs	r3, r1
 8004342:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004344:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800434c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004350:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004354:	2300      	movs	r3, #0
 8004356:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800435a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800435e:	460b      	mov	r3, r1
 8004360:	4313      	orrs	r3, r2
 8004362:	d03e      	beq.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004364:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004368:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800436c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004370:	d022      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004372:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004376:	d81b      	bhi.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004378:	2b00      	cmp	r3, #0
 800437a:	d003      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800437c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004380:	d00b      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004382:	e015      	b.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004384:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004388:	3308      	adds	r3, #8
 800438a:	2100      	movs	r1, #0
 800438c:	4618      	mov	r0, r3
 800438e:	f000 fd3b 	bl	8004e08 <RCCEx_PLL2_Config>
 8004392:	4603      	mov	r3, r0
 8004394:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004398:	e00f      	b.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800439a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800439e:	3328      	adds	r3, #40	@ 0x28
 80043a0:	2102      	movs	r1, #2
 80043a2:	4618      	mov	r0, r3
 80043a4:	f000 fde2 	bl	8004f6c <RCCEx_PLL3_Config>
 80043a8:	4603      	mov	r3, r0
 80043aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80043ae:	e004      	b.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80043b6:	e000      	b.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80043b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d10b      	bne.n	80043da <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80043c2:	4b4b      	ldr	r3, [pc, #300]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043c6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80043ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043ce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80043d2:	4a47      	ldr	r2, [pc, #284]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043d4:	430b      	orrs	r3, r1
 80043d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80043d8:	e003      	b.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80043e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ea:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80043ee:	67bb      	str	r3, [r7, #120]	@ 0x78
 80043f0:	2300      	movs	r3, #0
 80043f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80043f4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80043f8:	460b      	mov	r3, r1
 80043fa:	4313      	orrs	r3, r2
 80043fc:	d03b      	beq.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80043fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004402:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004406:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800440a:	d01f      	beq.n	800444c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800440c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004410:	d818      	bhi.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004412:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004416:	d003      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004418:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800441c:	d007      	beq.n	800442e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800441e:	e011      	b.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004420:	4b33      	ldr	r3, [pc, #204]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004424:	4a32      	ldr	r2, [pc, #200]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004426:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800442a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800442c:	e00f      	b.n	800444e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800442e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004432:	3328      	adds	r3, #40	@ 0x28
 8004434:	2101      	movs	r1, #1
 8004436:	4618      	mov	r0, r3
 8004438:	f000 fd98 	bl	8004f6c <RCCEx_PLL3_Config>
 800443c:	4603      	mov	r3, r0
 800443e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004442:	e004      	b.n	800444e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800444a:	e000      	b.n	800444e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800444c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800444e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004452:	2b00      	cmp	r3, #0
 8004454:	d10b      	bne.n	800446e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004456:	4b26      	ldr	r3, [pc, #152]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004458:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800445a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800445e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004462:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004466:	4a22      	ldr	r2, [pc, #136]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004468:	430b      	orrs	r3, r1
 800446a:	6553      	str	r3, [r2, #84]	@ 0x54
 800446c:	e003      	b.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800446e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004472:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004476:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800447a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800447e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004482:	673b      	str	r3, [r7, #112]	@ 0x70
 8004484:	2300      	movs	r3, #0
 8004486:	677b      	str	r3, [r7, #116]	@ 0x74
 8004488:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800448c:	460b      	mov	r3, r1
 800448e:	4313      	orrs	r3, r2
 8004490:	d034      	beq.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004492:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004496:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004498:	2b00      	cmp	r3, #0
 800449a:	d003      	beq.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800449c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044a0:	d007      	beq.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80044a2:	e011      	b.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044a4:	4b12      	ldr	r3, [pc, #72]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044a8:	4a11      	ldr	r2, [pc, #68]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80044ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80044b0:	e00e      	b.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80044b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044b6:	3308      	adds	r3, #8
 80044b8:	2102      	movs	r1, #2
 80044ba:	4618      	mov	r0, r3
 80044bc:	f000 fca4 	bl	8004e08 <RCCEx_PLL2_Config>
 80044c0:	4603      	mov	r3, r0
 80044c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80044c6:	e003      	b.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80044ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d10d      	bne.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80044d8:	4b05      	ldr	r3, [pc, #20]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044dc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80044e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044e6:	4a02      	ldr	r2, [pc, #8]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044e8:	430b      	orrs	r3, r1
 80044ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80044ec:	e006      	b.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80044ee:	bf00      	nop
 80044f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80044fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004504:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004508:	66bb      	str	r3, [r7, #104]	@ 0x68
 800450a:	2300      	movs	r3, #0
 800450c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800450e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004512:	460b      	mov	r3, r1
 8004514:	4313      	orrs	r3, r2
 8004516:	d00c      	beq.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004518:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800451c:	3328      	adds	r3, #40	@ 0x28
 800451e:	2102      	movs	r1, #2
 8004520:	4618      	mov	r0, r3
 8004522:	f000 fd23 	bl	8004f6c <RCCEx_PLL3_Config>
 8004526:	4603      	mov	r3, r0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d002      	beq.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004532:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800453a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800453e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004540:	2300      	movs	r3, #0
 8004542:	667b      	str	r3, [r7, #100]	@ 0x64
 8004544:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004548:	460b      	mov	r3, r1
 800454a:	4313      	orrs	r3, r2
 800454c:	d038      	beq.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800454e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004552:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004556:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800455a:	d018      	beq.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800455c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004560:	d811      	bhi.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004562:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004566:	d014      	beq.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004568:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800456c:	d80b      	bhi.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800456e:	2b00      	cmp	r3, #0
 8004570:	d011      	beq.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004572:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004576:	d106      	bne.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004578:	4bc3      	ldr	r3, [pc, #780]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800457a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800457c:	4ac2      	ldr	r2, [pc, #776]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800457e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004582:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004584:	e008      	b.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800458c:	e004      	b.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800458e:	bf00      	nop
 8004590:	e002      	b.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004592:	bf00      	nop
 8004594:	e000      	b.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004596:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004598:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800459c:	2b00      	cmp	r3, #0
 800459e:	d10b      	bne.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80045a0:	4bb9      	ldr	r3, [pc, #740]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045a4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80045a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80045b0:	4ab5      	ldr	r2, [pc, #724]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045b2:	430b      	orrs	r3, r1
 80045b4:	6553      	str	r3, [r2, #84]	@ 0x54
 80045b6:	e003      	b.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80045c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045c8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80045cc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80045ce:	2300      	movs	r3, #0
 80045d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80045d2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80045d6:	460b      	mov	r3, r1
 80045d8:	4313      	orrs	r3, r2
 80045da:	d009      	beq.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80045dc:	4baa      	ldr	r3, [pc, #680]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045e0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80045e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045ea:	4aa7      	ldr	r2, [pc, #668]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045ec:	430b      	orrs	r3, r1
 80045ee:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80045f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045f8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80045fc:	653b      	str	r3, [r7, #80]	@ 0x50
 80045fe:	2300      	movs	r3, #0
 8004600:	657b      	str	r3, [r7, #84]	@ 0x54
 8004602:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004606:	460b      	mov	r3, r1
 8004608:	4313      	orrs	r3, r2
 800460a:	d00a      	beq.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800460c:	4b9e      	ldr	r3, [pc, #632]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800460e:	691b      	ldr	r3, [r3, #16]
 8004610:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004614:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004618:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800461c:	4a9a      	ldr	r2, [pc, #616]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800461e:	430b      	orrs	r3, r1
 8004620:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004622:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800462a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800462e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004630:	2300      	movs	r3, #0
 8004632:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004634:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004638:	460b      	mov	r3, r1
 800463a:	4313      	orrs	r3, r2
 800463c:	d009      	beq.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800463e:	4b92      	ldr	r3, [pc, #584]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004640:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004642:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004646:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800464a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800464c:	4a8e      	ldr	r2, [pc, #568]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800464e:	430b      	orrs	r3, r1
 8004650:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004652:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800465a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800465e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004660:	2300      	movs	r3, #0
 8004662:	647b      	str	r3, [r7, #68]	@ 0x44
 8004664:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004668:	460b      	mov	r3, r1
 800466a:	4313      	orrs	r3, r2
 800466c:	d00e      	beq.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800466e:	4b86      	ldr	r3, [pc, #536]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004670:	691b      	ldr	r3, [r3, #16]
 8004672:	4a85      	ldr	r2, [pc, #532]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004674:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004678:	6113      	str	r3, [r2, #16]
 800467a:	4b83      	ldr	r3, [pc, #524]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800467c:	6919      	ldr	r1, [r3, #16]
 800467e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004682:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004686:	4a80      	ldr	r2, [pc, #512]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004688:	430b      	orrs	r3, r1
 800468a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800468c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004694:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004698:	63bb      	str	r3, [r7, #56]	@ 0x38
 800469a:	2300      	movs	r3, #0
 800469c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800469e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80046a2:	460b      	mov	r3, r1
 80046a4:	4313      	orrs	r3, r2
 80046a6:	d009      	beq.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80046a8:	4b77      	ldr	r3, [pc, #476]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046ac:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80046b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046b6:	4a74      	ldr	r2, [pc, #464]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046b8:	430b      	orrs	r3, r1
 80046ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80046bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c4:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80046c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80046ca:	2300      	movs	r3, #0
 80046cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80046ce:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80046d2:	460b      	mov	r3, r1
 80046d4:	4313      	orrs	r3, r2
 80046d6:	d00a      	beq.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80046d8:	4b6b      	ldr	r3, [pc, #428]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046dc:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80046e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80046e8:	4a67      	ldr	r2, [pc, #412]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046ea:	430b      	orrs	r3, r1
 80046ec:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80046ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046f6:	2100      	movs	r1, #0
 80046f8:	62b9      	str	r1, [r7, #40]	@ 0x28
 80046fa:	f003 0301 	and.w	r3, r3, #1
 80046fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004700:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004704:	460b      	mov	r3, r1
 8004706:	4313      	orrs	r3, r2
 8004708:	d011      	beq.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800470a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800470e:	3308      	adds	r3, #8
 8004710:	2100      	movs	r1, #0
 8004712:	4618      	mov	r0, r3
 8004714:	f000 fb78 	bl	8004e08 <RCCEx_PLL2_Config>
 8004718:	4603      	mov	r3, r0
 800471a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800471e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004722:	2b00      	cmp	r3, #0
 8004724:	d003      	beq.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004726:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800472a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800472e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004736:	2100      	movs	r1, #0
 8004738:	6239      	str	r1, [r7, #32]
 800473a:	f003 0302 	and.w	r3, r3, #2
 800473e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004740:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004744:	460b      	mov	r3, r1
 8004746:	4313      	orrs	r3, r2
 8004748:	d011      	beq.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800474a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800474e:	3308      	adds	r3, #8
 8004750:	2101      	movs	r1, #1
 8004752:	4618      	mov	r0, r3
 8004754:	f000 fb58 	bl	8004e08 <RCCEx_PLL2_Config>
 8004758:	4603      	mov	r3, r0
 800475a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800475e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004762:	2b00      	cmp	r3, #0
 8004764:	d003      	beq.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004766:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800476a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800476e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004776:	2100      	movs	r1, #0
 8004778:	61b9      	str	r1, [r7, #24]
 800477a:	f003 0304 	and.w	r3, r3, #4
 800477e:	61fb      	str	r3, [r7, #28]
 8004780:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004784:	460b      	mov	r3, r1
 8004786:	4313      	orrs	r3, r2
 8004788:	d011      	beq.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800478a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800478e:	3308      	adds	r3, #8
 8004790:	2102      	movs	r1, #2
 8004792:	4618      	mov	r0, r3
 8004794:	f000 fb38 	bl	8004e08 <RCCEx_PLL2_Config>
 8004798:	4603      	mov	r3, r0
 800479a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800479e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d003      	beq.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80047ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047b6:	2100      	movs	r1, #0
 80047b8:	6139      	str	r1, [r7, #16]
 80047ba:	f003 0308 	and.w	r3, r3, #8
 80047be:	617b      	str	r3, [r7, #20]
 80047c0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80047c4:	460b      	mov	r3, r1
 80047c6:	4313      	orrs	r3, r2
 80047c8:	d011      	beq.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80047ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047ce:	3328      	adds	r3, #40	@ 0x28
 80047d0:	2100      	movs	r1, #0
 80047d2:	4618      	mov	r0, r3
 80047d4:	f000 fbca 	bl	8004f6c <RCCEx_PLL3_Config>
 80047d8:	4603      	mov	r3, r0
 80047da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80047de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d003      	beq.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80047ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047f6:	2100      	movs	r1, #0
 80047f8:	60b9      	str	r1, [r7, #8]
 80047fa:	f003 0310 	and.w	r3, r3, #16
 80047fe:	60fb      	str	r3, [r7, #12]
 8004800:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004804:	460b      	mov	r3, r1
 8004806:	4313      	orrs	r3, r2
 8004808:	d011      	beq.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800480a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800480e:	3328      	adds	r3, #40	@ 0x28
 8004810:	2101      	movs	r1, #1
 8004812:	4618      	mov	r0, r3
 8004814:	f000 fbaa 	bl	8004f6c <RCCEx_PLL3_Config>
 8004818:	4603      	mov	r3, r0
 800481a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800481e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004822:	2b00      	cmp	r3, #0
 8004824:	d003      	beq.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004826:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800482a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800482e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004836:	2100      	movs	r1, #0
 8004838:	6039      	str	r1, [r7, #0]
 800483a:	f003 0320 	and.w	r3, r3, #32
 800483e:	607b      	str	r3, [r7, #4]
 8004840:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004844:	460b      	mov	r3, r1
 8004846:	4313      	orrs	r3, r2
 8004848:	d011      	beq.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800484a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800484e:	3328      	adds	r3, #40	@ 0x28
 8004850:	2102      	movs	r1, #2
 8004852:	4618      	mov	r0, r3
 8004854:	f000 fb8a 	bl	8004f6c <RCCEx_PLL3_Config>
 8004858:	4603      	mov	r3, r0
 800485a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800485e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004862:	2b00      	cmp	r3, #0
 8004864:	d003      	beq.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004866:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800486a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800486e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8004872:	2b00      	cmp	r3, #0
 8004874:	d101      	bne.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004876:	2300      	movs	r3, #0
 8004878:	e000      	b.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
}
 800487c:	4618      	mov	r0, r3
 800487e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8004882:	46bd      	mov	sp, r7
 8004884:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004888:	58024400 	.word	0x58024400

0800488c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004890:	f7fe fd54 	bl	800333c <HAL_RCC_GetHCLKFreq>
 8004894:	4602      	mov	r2, r0
 8004896:	4b06      	ldr	r3, [pc, #24]	@ (80048b0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004898:	6a1b      	ldr	r3, [r3, #32]
 800489a:	091b      	lsrs	r3, r3, #4
 800489c:	f003 0307 	and.w	r3, r3, #7
 80048a0:	4904      	ldr	r1, [pc, #16]	@ (80048b4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80048a2:	5ccb      	ldrb	r3, [r1, r3]
 80048a4:	f003 031f 	and.w	r3, r3, #31
 80048a8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	bd80      	pop	{r7, pc}
 80048b0:	58024400 	.word	0x58024400
 80048b4:	08009424 	.word	0x08009424

080048b8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b089      	sub	sp, #36	@ 0x24
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80048c0:	4ba1      	ldr	r3, [pc, #644]	@ (8004b48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048c4:	f003 0303 	and.w	r3, r3, #3
 80048c8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80048ca:	4b9f      	ldr	r3, [pc, #636]	@ (8004b48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048ce:	0b1b      	lsrs	r3, r3, #12
 80048d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80048d4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80048d6:	4b9c      	ldr	r3, [pc, #624]	@ (8004b48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048da:	091b      	lsrs	r3, r3, #4
 80048dc:	f003 0301 	and.w	r3, r3, #1
 80048e0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80048e2:	4b99      	ldr	r3, [pc, #612]	@ (8004b48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048e6:	08db      	lsrs	r3, r3, #3
 80048e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80048ec:	693a      	ldr	r2, [r7, #16]
 80048ee:	fb02 f303 	mul.w	r3, r2, r3
 80048f2:	ee07 3a90 	vmov	s15, r3
 80048f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048fa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	2b00      	cmp	r3, #0
 8004902:	f000 8111 	beq.w	8004b28 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004906:	69bb      	ldr	r3, [r7, #24]
 8004908:	2b02      	cmp	r3, #2
 800490a:	f000 8083 	beq.w	8004a14 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800490e:	69bb      	ldr	r3, [r7, #24]
 8004910:	2b02      	cmp	r3, #2
 8004912:	f200 80a1 	bhi.w	8004a58 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004916:	69bb      	ldr	r3, [r7, #24]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d003      	beq.n	8004924 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800491c:	69bb      	ldr	r3, [r7, #24]
 800491e:	2b01      	cmp	r3, #1
 8004920:	d056      	beq.n	80049d0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004922:	e099      	b.n	8004a58 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004924:	4b88      	ldr	r3, [pc, #544]	@ (8004b48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 0320 	and.w	r3, r3, #32
 800492c:	2b00      	cmp	r3, #0
 800492e:	d02d      	beq.n	800498c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004930:	4b85      	ldr	r3, [pc, #532]	@ (8004b48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	08db      	lsrs	r3, r3, #3
 8004936:	f003 0303 	and.w	r3, r3, #3
 800493a:	4a84      	ldr	r2, [pc, #528]	@ (8004b4c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800493c:	fa22 f303 	lsr.w	r3, r2, r3
 8004940:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	ee07 3a90 	vmov	s15, r3
 8004948:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	ee07 3a90 	vmov	s15, r3
 8004952:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004956:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800495a:	4b7b      	ldr	r3, [pc, #492]	@ (8004b48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800495c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800495e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004962:	ee07 3a90 	vmov	s15, r3
 8004966:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800496a:	ed97 6a03 	vldr	s12, [r7, #12]
 800496e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004b50 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004972:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004976:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800497a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800497e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004982:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004986:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800498a:	e087      	b.n	8004a9c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	ee07 3a90 	vmov	s15, r3
 8004992:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004996:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004b54 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800499a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800499e:	4b6a      	ldr	r3, [pc, #424]	@ (8004b48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049a6:	ee07 3a90 	vmov	s15, r3
 80049aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80049b2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004b50 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80049b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80049ce:	e065      	b.n	8004a9c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	ee07 3a90 	vmov	s15, r3
 80049d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049da:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004b58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80049de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049e2:	4b59      	ldr	r3, [pc, #356]	@ (8004b48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049ea:	ee07 3a90 	vmov	s15, r3
 80049ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80049f6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004b50 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80049fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a12:	e043      	b.n	8004a9c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	ee07 3a90 	vmov	s15, r3
 8004a1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a1e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004b5c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004a22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a26:	4b48      	ldr	r3, [pc, #288]	@ (8004b48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a2e:	ee07 3a90 	vmov	s15, r3
 8004a32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a36:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a3a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004b50 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004a3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a56:	e021      	b.n	8004a9c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	ee07 3a90 	vmov	s15, r3
 8004a5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a62:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004b58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004a66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a6a:	4b37      	ldr	r3, [pc, #220]	@ (8004b48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a72:	ee07 3a90 	vmov	s15, r3
 8004a76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a7e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004b50 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004a82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a9a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004a9c:	4b2a      	ldr	r3, [pc, #168]	@ (8004b48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aa0:	0a5b      	lsrs	r3, r3, #9
 8004aa2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004aa6:	ee07 3a90 	vmov	s15, r3
 8004aaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004ab2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ab6:	edd7 6a07 	vldr	s13, [r7, #28]
 8004aba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004abe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ac2:	ee17 2a90 	vmov	r2, s15
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004aca:	4b1f      	ldr	r3, [pc, #124]	@ (8004b48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004acc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ace:	0c1b      	lsrs	r3, r3, #16
 8004ad0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ad4:	ee07 3a90 	vmov	s15, r3
 8004ad8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004adc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004ae0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ae4:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ae8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004aec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004af0:	ee17 2a90 	vmov	r2, s15
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004af8:	4b13      	ldr	r3, [pc, #76]	@ (8004b48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004afa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004afc:	0e1b      	lsrs	r3, r3, #24
 8004afe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b02:	ee07 3a90 	vmov	s15, r3
 8004b06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b0a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004b0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b12:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b1e:	ee17 2a90 	vmov	r2, s15
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004b26:	e008      	b.n	8004b3a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	609a      	str	r2, [r3, #8]
}
 8004b3a:	bf00      	nop
 8004b3c:	3724      	adds	r7, #36	@ 0x24
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr
 8004b46:	bf00      	nop
 8004b48:	58024400 	.word	0x58024400
 8004b4c:	03d09000 	.word	0x03d09000
 8004b50:	46000000 	.word	0x46000000
 8004b54:	4c742400 	.word	0x4c742400
 8004b58:	4a742400 	.word	0x4a742400
 8004b5c:	4af42400 	.word	0x4af42400

08004b60 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b089      	sub	sp, #36	@ 0x24
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004b68:	4ba1      	ldr	r3, [pc, #644]	@ (8004df0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b6c:	f003 0303 	and.w	r3, r3, #3
 8004b70:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004b72:	4b9f      	ldr	r3, [pc, #636]	@ (8004df0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b76:	0d1b      	lsrs	r3, r3, #20
 8004b78:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b7c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004b7e:	4b9c      	ldr	r3, [pc, #624]	@ (8004df0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b82:	0a1b      	lsrs	r3, r3, #8
 8004b84:	f003 0301 	and.w	r3, r3, #1
 8004b88:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004b8a:	4b99      	ldr	r3, [pc, #612]	@ (8004df0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b8e:	08db      	lsrs	r3, r3, #3
 8004b90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004b94:	693a      	ldr	r2, [r7, #16]
 8004b96:	fb02 f303 	mul.w	r3, r2, r3
 8004b9a:	ee07 3a90 	vmov	s15, r3
 8004b9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ba2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	f000 8111 	beq.w	8004dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004bae:	69bb      	ldr	r3, [r7, #24]
 8004bb0:	2b02      	cmp	r3, #2
 8004bb2:	f000 8083 	beq.w	8004cbc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004bb6:	69bb      	ldr	r3, [r7, #24]
 8004bb8:	2b02      	cmp	r3, #2
 8004bba:	f200 80a1 	bhi.w	8004d00 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004bbe:	69bb      	ldr	r3, [r7, #24]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d003      	beq.n	8004bcc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004bc4:	69bb      	ldr	r3, [r7, #24]
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d056      	beq.n	8004c78 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004bca:	e099      	b.n	8004d00 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004bcc:	4b88      	ldr	r3, [pc, #544]	@ (8004df0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 0320 	and.w	r3, r3, #32
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d02d      	beq.n	8004c34 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004bd8:	4b85      	ldr	r3, [pc, #532]	@ (8004df0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	08db      	lsrs	r3, r3, #3
 8004bde:	f003 0303 	and.w	r3, r3, #3
 8004be2:	4a84      	ldr	r2, [pc, #528]	@ (8004df4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004be4:	fa22 f303 	lsr.w	r3, r2, r3
 8004be8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	ee07 3a90 	vmov	s15, r3
 8004bf0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	ee07 3a90 	vmov	s15, r3
 8004bfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c02:	4b7b      	ldr	r3, [pc, #492]	@ (8004df0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c0a:	ee07 3a90 	vmov	s15, r3
 8004c0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c12:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c16:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004df8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004c1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c2e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004c32:	e087      	b.n	8004d44 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	ee07 3a90 	vmov	s15, r3
 8004c3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c3e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004dfc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004c42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c46:	4b6a      	ldr	r3, [pc, #424]	@ (8004df0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c4e:	ee07 3a90 	vmov	s15, r3
 8004c52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c56:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c5a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004df8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004c5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c76:	e065      	b.n	8004d44 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	ee07 3a90 	vmov	s15, r3
 8004c7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c82:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004e00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004c86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c8a:	4b59      	ldr	r3, [pc, #356]	@ (8004df0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c92:	ee07 3a90 	vmov	s15, r3
 8004c96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c9e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004df8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004ca2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ca6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004caa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004cae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cb6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004cba:	e043      	b.n	8004d44 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	ee07 3a90 	vmov	s15, r3
 8004cc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cc6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004e04 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004cca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cce:	4b48      	ldr	r3, [pc, #288]	@ (8004df0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cd6:	ee07 3a90 	vmov	s15, r3
 8004cda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cde:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ce2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004df8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004ce6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004cf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cfa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004cfe:	e021      	b.n	8004d44 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	ee07 3a90 	vmov	s15, r3
 8004d06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d0a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004e00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004d0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d12:	4b37      	ldr	r3, [pc, #220]	@ (8004df0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d1a:	ee07 3a90 	vmov	s15, r3
 8004d1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d22:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d26:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004df8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d42:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004d44:	4b2a      	ldr	r3, [pc, #168]	@ (8004df0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d48:	0a5b      	lsrs	r3, r3, #9
 8004d4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d4e:	ee07 3a90 	vmov	s15, r3
 8004d52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d56:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004d5a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d5e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d6a:	ee17 2a90 	vmov	r2, s15
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004d72:	4b1f      	ldr	r3, [pc, #124]	@ (8004df0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d76:	0c1b      	lsrs	r3, r3, #16
 8004d78:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d7c:	ee07 3a90 	vmov	s15, r3
 8004d80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d84:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004d88:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d8c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d98:	ee17 2a90 	vmov	r2, s15
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004da0:	4b13      	ldr	r3, [pc, #76]	@ (8004df0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004da4:	0e1b      	lsrs	r3, r3, #24
 8004da6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004daa:	ee07 3a90 	vmov	s15, r3
 8004dae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004db2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004db6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004dba:	edd7 6a07 	vldr	s13, [r7, #28]
 8004dbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004dc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004dc6:	ee17 2a90 	vmov	r2, s15
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004dce:	e008      	b.n	8004de2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	609a      	str	r2, [r3, #8]
}
 8004de2:	bf00      	nop
 8004de4:	3724      	adds	r7, #36	@ 0x24
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr
 8004dee:	bf00      	nop
 8004df0:	58024400 	.word	0x58024400
 8004df4:	03d09000 	.word	0x03d09000
 8004df8:	46000000 	.word	0x46000000
 8004dfc:	4c742400 	.word	0x4c742400
 8004e00:	4a742400 	.word	0x4a742400
 8004e04:	4af42400 	.word	0x4af42400

08004e08 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b084      	sub	sp, #16
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e12:	2300      	movs	r3, #0
 8004e14:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004e16:	4b53      	ldr	r3, [pc, #332]	@ (8004f64 <RCCEx_PLL2_Config+0x15c>)
 8004e18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e1a:	f003 0303 	and.w	r3, r3, #3
 8004e1e:	2b03      	cmp	r3, #3
 8004e20:	d101      	bne.n	8004e26 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	e099      	b.n	8004f5a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004e26:	4b4f      	ldr	r3, [pc, #316]	@ (8004f64 <RCCEx_PLL2_Config+0x15c>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a4e      	ldr	r2, [pc, #312]	@ (8004f64 <RCCEx_PLL2_Config+0x15c>)
 8004e2c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004e30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e32:	f7fc ff7f 	bl	8001d34 <HAL_GetTick>
 8004e36:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004e38:	e008      	b.n	8004e4c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004e3a:	f7fc ff7b 	bl	8001d34 <HAL_GetTick>
 8004e3e:	4602      	mov	r2, r0
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	1ad3      	subs	r3, r2, r3
 8004e44:	2b02      	cmp	r3, #2
 8004e46:	d901      	bls.n	8004e4c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004e48:	2303      	movs	r3, #3
 8004e4a:	e086      	b.n	8004f5a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004e4c:	4b45      	ldr	r3, [pc, #276]	@ (8004f64 <RCCEx_PLL2_Config+0x15c>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d1f0      	bne.n	8004e3a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004e58:	4b42      	ldr	r3, [pc, #264]	@ (8004f64 <RCCEx_PLL2_Config+0x15c>)
 8004e5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e5c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	031b      	lsls	r3, r3, #12
 8004e66:	493f      	ldr	r1, [pc, #252]	@ (8004f64 <RCCEx_PLL2_Config+0x15c>)
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	628b      	str	r3, [r1, #40]	@ 0x28
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	3b01      	subs	r3, #1
 8004e72:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	3b01      	subs	r3, #1
 8004e7c:	025b      	lsls	r3, r3, #9
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	431a      	orrs	r2, r3
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	68db      	ldr	r3, [r3, #12]
 8004e86:	3b01      	subs	r3, #1
 8004e88:	041b      	lsls	r3, r3, #16
 8004e8a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004e8e:	431a      	orrs	r2, r3
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	691b      	ldr	r3, [r3, #16]
 8004e94:	3b01      	subs	r3, #1
 8004e96:	061b      	lsls	r3, r3, #24
 8004e98:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004e9c:	4931      	ldr	r1, [pc, #196]	@ (8004f64 <RCCEx_PLL2_Config+0x15c>)
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004ea2:	4b30      	ldr	r3, [pc, #192]	@ (8004f64 <RCCEx_PLL2_Config+0x15c>)
 8004ea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ea6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	695b      	ldr	r3, [r3, #20]
 8004eae:	492d      	ldr	r1, [pc, #180]	@ (8004f64 <RCCEx_PLL2_Config+0x15c>)
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004eb4:	4b2b      	ldr	r3, [pc, #172]	@ (8004f64 <RCCEx_PLL2_Config+0x15c>)
 8004eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eb8:	f023 0220 	bic.w	r2, r3, #32
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	699b      	ldr	r3, [r3, #24]
 8004ec0:	4928      	ldr	r1, [pc, #160]	@ (8004f64 <RCCEx_PLL2_Config+0x15c>)
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004ec6:	4b27      	ldr	r3, [pc, #156]	@ (8004f64 <RCCEx_PLL2_Config+0x15c>)
 8004ec8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eca:	4a26      	ldr	r2, [pc, #152]	@ (8004f64 <RCCEx_PLL2_Config+0x15c>)
 8004ecc:	f023 0310 	bic.w	r3, r3, #16
 8004ed0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004ed2:	4b24      	ldr	r3, [pc, #144]	@ (8004f64 <RCCEx_PLL2_Config+0x15c>)
 8004ed4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004ed6:	4b24      	ldr	r3, [pc, #144]	@ (8004f68 <RCCEx_PLL2_Config+0x160>)
 8004ed8:	4013      	ands	r3, r2
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	69d2      	ldr	r2, [r2, #28]
 8004ede:	00d2      	lsls	r2, r2, #3
 8004ee0:	4920      	ldr	r1, [pc, #128]	@ (8004f64 <RCCEx_PLL2_Config+0x15c>)
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004ee6:	4b1f      	ldr	r3, [pc, #124]	@ (8004f64 <RCCEx_PLL2_Config+0x15c>)
 8004ee8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eea:	4a1e      	ldr	r2, [pc, #120]	@ (8004f64 <RCCEx_PLL2_Config+0x15c>)
 8004eec:	f043 0310 	orr.w	r3, r3, #16
 8004ef0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d106      	bne.n	8004f06 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004ef8:	4b1a      	ldr	r3, [pc, #104]	@ (8004f64 <RCCEx_PLL2_Config+0x15c>)
 8004efa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004efc:	4a19      	ldr	r2, [pc, #100]	@ (8004f64 <RCCEx_PLL2_Config+0x15c>)
 8004efe:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004f02:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004f04:	e00f      	b.n	8004f26 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d106      	bne.n	8004f1a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004f0c:	4b15      	ldr	r3, [pc, #84]	@ (8004f64 <RCCEx_PLL2_Config+0x15c>)
 8004f0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f10:	4a14      	ldr	r2, [pc, #80]	@ (8004f64 <RCCEx_PLL2_Config+0x15c>)
 8004f12:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f16:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004f18:	e005      	b.n	8004f26 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004f1a:	4b12      	ldr	r3, [pc, #72]	@ (8004f64 <RCCEx_PLL2_Config+0x15c>)
 8004f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f1e:	4a11      	ldr	r2, [pc, #68]	@ (8004f64 <RCCEx_PLL2_Config+0x15c>)
 8004f20:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004f24:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004f26:	4b0f      	ldr	r3, [pc, #60]	@ (8004f64 <RCCEx_PLL2_Config+0x15c>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a0e      	ldr	r2, [pc, #56]	@ (8004f64 <RCCEx_PLL2_Config+0x15c>)
 8004f2c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004f30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f32:	f7fc feff 	bl	8001d34 <HAL_GetTick>
 8004f36:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004f38:	e008      	b.n	8004f4c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004f3a:	f7fc fefb 	bl	8001d34 <HAL_GetTick>
 8004f3e:	4602      	mov	r2, r0
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	1ad3      	subs	r3, r2, r3
 8004f44:	2b02      	cmp	r3, #2
 8004f46:	d901      	bls.n	8004f4c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004f48:	2303      	movs	r3, #3
 8004f4a:	e006      	b.n	8004f5a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004f4c:	4b05      	ldr	r3, [pc, #20]	@ (8004f64 <RCCEx_PLL2_Config+0x15c>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d0f0      	beq.n	8004f3a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004f58:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3710      	adds	r7, #16
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
 8004f62:	bf00      	nop
 8004f64:	58024400 	.word	0x58024400
 8004f68:	ffff0007 	.word	0xffff0007

08004f6c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b084      	sub	sp, #16
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f76:	2300      	movs	r3, #0
 8004f78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004f7a:	4b53      	ldr	r3, [pc, #332]	@ (80050c8 <RCCEx_PLL3_Config+0x15c>)
 8004f7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f7e:	f003 0303 	and.w	r3, r3, #3
 8004f82:	2b03      	cmp	r3, #3
 8004f84:	d101      	bne.n	8004f8a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	e099      	b.n	80050be <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004f8a:	4b4f      	ldr	r3, [pc, #316]	@ (80050c8 <RCCEx_PLL3_Config+0x15c>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a4e      	ldr	r2, [pc, #312]	@ (80050c8 <RCCEx_PLL3_Config+0x15c>)
 8004f90:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f96:	f7fc fecd 	bl	8001d34 <HAL_GetTick>
 8004f9a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004f9c:	e008      	b.n	8004fb0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004f9e:	f7fc fec9 	bl	8001d34 <HAL_GetTick>
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	1ad3      	subs	r3, r2, r3
 8004fa8:	2b02      	cmp	r3, #2
 8004faa:	d901      	bls.n	8004fb0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004fac:	2303      	movs	r3, #3
 8004fae:	e086      	b.n	80050be <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004fb0:	4b45      	ldr	r3, [pc, #276]	@ (80050c8 <RCCEx_PLL3_Config+0x15c>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d1f0      	bne.n	8004f9e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004fbc:	4b42      	ldr	r3, [pc, #264]	@ (80050c8 <RCCEx_PLL3_Config+0x15c>)
 8004fbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fc0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	051b      	lsls	r3, r3, #20
 8004fca:	493f      	ldr	r1, [pc, #252]	@ (80050c8 <RCCEx_PLL3_Config+0x15c>)
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	628b      	str	r3, [r1, #40]	@ 0x28
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	3b01      	subs	r3, #1
 8004fd6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	3b01      	subs	r3, #1
 8004fe0:	025b      	lsls	r3, r3, #9
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	431a      	orrs	r2, r3
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	68db      	ldr	r3, [r3, #12]
 8004fea:	3b01      	subs	r3, #1
 8004fec:	041b      	lsls	r3, r3, #16
 8004fee:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004ff2:	431a      	orrs	r2, r3
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	691b      	ldr	r3, [r3, #16]
 8004ff8:	3b01      	subs	r3, #1
 8004ffa:	061b      	lsls	r3, r3, #24
 8004ffc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005000:	4931      	ldr	r1, [pc, #196]	@ (80050c8 <RCCEx_PLL3_Config+0x15c>)
 8005002:	4313      	orrs	r3, r2
 8005004:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005006:	4b30      	ldr	r3, [pc, #192]	@ (80050c8 <RCCEx_PLL3_Config+0x15c>)
 8005008:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800500a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	695b      	ldr	r3, [r3, #20]
 8005012:	492d      	ldr	r1, [pc, #180]	@ (80050c8 <RCCEx_PLL3_Config+0x15c>)
 8005014:	4313      	orrs	r3, r2
 8005016:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005018:	4b2b      	ldr	r3, [pc, #172]	@ (80050c8 <RCCEx_PLL3_Config+0x15c>)
 800501a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800501c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	699b      	ldr	r3, [r3, #24]
 8005024:	4928      	ldr	r1, [pc, #160]	@ (80050c8 <RCCEx_PLL3_Config+0x15c>)
 8005026:	4313      	orrs	r3, r2
 8005028:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800502a:	4b27      	ldr	r3, [pc, #156]	@ (80050c8 <RCCEx_PLL3_Config+0x15c>)
 800502c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800502e:	4a26      	ldr	r2, [pc, #152]	@ (80050c8 <RCCEx_PLL3_Config+0x15c>)
 8005030:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005034:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005036:	4b24      	ldr	r3, [pc, #144]	@ (80050c8 <RCCEx_PLL3_Config+0x15c>)
 8005038:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800503a:	4b24      	ldr	r3, [pc, #144]	@ (80050cc <RCCEx_PLL3_Config+0x160>)
 800503c:	4013      	ands	r3, r2
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	69d2      	ldr	r2, [r2, #28]
 8005042:	00d2      	lsls	r2, r2, #3
 8005044:	4920      	ldr	r1, [pc, #128]	@ (80050c8 <RCCEx_PLL3_Config+0x15c>)
 8005046:	4313      	orrs	r3, r2
 8005048:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800504a:	4b1f      	ldr	r3, [pc, #124]	@ (80050c8 <RCCEx_PLL3_Config+0x15c>)
 800504c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800504e:	4a1e      	ldr	r2, [pc, #120]	@ (80050c8 <RCCEx_PLL3_Config+0x15c>)
 8005050:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005054:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d106      	bne.n	800506a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800505c:	4b1a      	ldr	r3, [pc, #104]	@ (80050c8 <RCCEx_PLL3_Config+0x15c>)
 800505e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005060:	4a19      	ldr	r2, [pc, #100]	@ (80050c8 <RCCEx_PLL3_Config+0x15c>)
 8005062:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005066:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005068:	e00f      	b.n	800508a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	2b01      	cmp	r3, #1
 800506e:	d106      	bne.n	800507e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005070:	4b15      	ldr	r3, [pc, #84]	@ (80050c8 <RCCEx_PLL3_Config+0x15c>)
 8005072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005074:	4a14      	ldr	r2, [pc, #80]	@ (80050c8 <RCCEx_PLL3_Config+0x15c>)
 8005076:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800507a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800507c:	e005      	b.n	800508a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800507e:	4b12      	ldr	r3, [pc, #72]	@ (80050c8 <RCCEx_PLL3_Config+0x15c>)
 8005080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005082:	4a11      	ldr	r2, [pc, #68]	@ (80050c8 <RCCEx_PLL3_Config+0x15c>)
 8005084:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005088:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800508a:	4b0f      	ldr	r3, [pc, #60]	@ (80050c8 <RCCEx_PLL3_Config+0x15c>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a0e      	ldr	r2, [pc, #56]	@ (80050c8 <RCCEx_PLL3_Config+0x15c>)
 8005090:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005094:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005096:	f7fc fe4d 	bl	8001d34 <HAL_GetTick>
 800509a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800509c:	e008      	b.n	80050b0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800509e:	f7fc fe49 	bl	8001d34 <HAL_GetTick>
 80050a2:	4602      	mov	r2, r0
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	1ad3      	subs	r3, r2, r3
 80050a8:	2b02      	cmp	r3, #2
 80050aa:	d901      	bls.n	80050b0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80050ac:	2303      	movs	r3, #3
 80050ae:	e006      	b.n	80050be <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80050b0:	4b05      	ldr	r3, [pc, #20]	@ (80050c8 <RCCEx_PLL3_Config+0x15c>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d0f0      	beq.n	800509e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80050bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3710      	adds	r7, #16
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	58024400 	.word	0x58024400
 80050cc:	ffff0007 	.word	0xffff0007

080050d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b082      	sub	sp, #8
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d101      	bne.n	80050e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	e049      	b.n	8005176 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d106      	bne.n	80050fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f7fc f884 	bl	8001204 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2202      	movs	r2, #2
 8005100:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	3304      	adds	r3, #4
 800510c:	4619      	mov	r1, r3
 800510e:	4610      	mov	r0, r2
 8005110:	f000 f9de 	bl	80054d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2201      	movs	r2, #1
 8005120:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2201      	movs	r2, #1
 8005130:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2201      	movs	r2, #1
 8005138:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005174:	2300      	movs	r3, #0
}
 8005176:	4618      	mov	r0, r3
 8005178:	3708      	adds	r7, #8
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
	...

08005180 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005180:	b480      	push	{r7}
 8005182:	b085      	sub	sp, #20
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800518e:	b2db      	uxtb	r3, r3
 8005190:	2b01      	cmp	r3, #1
 8005192:	d001      	beq.n	8005198 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	e054      	b.n	8005242 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2202      	movs	r2, #2
 800519c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	68da      	ldr	r2, [r3, #12]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f042 0201 	orr.w	r2, r2, #1
 80051ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a26      	ldr	r2, [pc, #152]	@ (8005250 <HAL_TIM_Base_Start_IT+0xd0>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d022      	beq.n	8005200 <HAL_TIM_Base_Start_IT+0x80>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051c2:	d01d      	beq.n	8005200 <HAL_TIM_Base_Start_IT+0x80>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a22      	ldr	r2, [pc, #136]	@ (8005254 <HAL_TIM_Base_Start_IT+0xd4>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d018      	beq.n	8005200 <HAL_TIM_Base_Start_IT+0x80>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a21      	ldr	r2, [pc, #132]	@ (8005258 <HAL_TIM_Base_Start_IT+0xd8>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d013      	beq.n	8005200 <HAL_TIM_Base_Start_IT+0x80>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a1f      	ldr	r2, [pc, #124]	@ (800525c <HAL_TIM_Base_Start_IT+0xdc>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d00e      	beq.n	8005200 <HAL_TIM_Base_Start_IT+0x80>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a1e      	ldr	r2, [pc, #120]	@ (8005260 <HAL_TIM_Base_Start_IT+0xe0>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d009      	beq.n	8005200 <HAL_TIM_Base_Start_IT+0x80>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a1c      	ldr	r2, [pc, #112]	@ (8005264 <HAL_TIM_Base_Start_IT+0xe4>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d004      	beq.n	8005200 <HAL_TIM_Base_Start_IT+0x80>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a1b      	ldr	r2, [pc, #108]	@ (8005268 <HAL_TIM_Base_Start_IT+0xe8>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d115      	bne.n	800522c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	689a      	ldr	r2, [r3, #8]
 8005206:	4b19      	ldr	r3, [pc, #100]	@ (800526c <HAL_TIM_Base_Start_IT+0xec>)
 8005208:	4013      	ands	r3, r2
 800520a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2b06      	cmp	r3, #6
 8005210:	d015      	beq.n	800523e <HAL_TIM_Base_Start_IT+0xbe>
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005218:	d011      	beq.n	800523e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f042 0201 	orr.w	r2, r2, #1
 8005228:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800522a:	e008      	b.n	800523e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f042 0201 	orr.w	r2, r2, #1
 800523a:	601a      	str	r2, [r3, #0]
 800523c:	e000      	b.n	8005240 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800523e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005240:	2300      	movs	r3, #0
}
 8005242:	4618      	mov	r0, r3
 8005244:	3714      	adds	r7, #20
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr
 800524e:	bf00      	nop
 8005250:	40010000 	.word	0x40010000
 8005254:	40000400 	.word	0x40000400
 8005258:	40000800 	.word	0x40000800
 800525c:	40000c00 	.word	0x40000c00
 8005260:	40010400 	.word	0x40010400
 8005264:	40001800 	.word	0x40001800
 8005268:	40014000 	.word	0x40014000
 800526c:	00010007 	.word	0x00010007

08005270 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b084      	sub	sp, #16
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	68db      	ldr	r3, [r3, #12]
 800527e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	691b      	ldr	r3, [r3, #16]
 8005286:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	f003 0302 	and.w	r3, r3, #2
 800528e:	2b00      	cmp	r3, #0
 8005290:	d020      	beq.n	80052d4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	f003 0302 	and.w	r3, r3, #2
 8005298:	2b00      	cmp	r3, #0
 800529a:	d01b      	beq.n	80052d4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f06f 0202 	mvn.w	r2, #2
 80052a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2201      	movs	r2, #1
 80052aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	699b      	ldr	r3, [r3, #24]
 80052b2:	f003 0303 	and.w	r3, r3, #3
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d003      	beq.n	80052c2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f000 f8e9 	bl	8005492 <HAL_TIM_IC_CaptureCallback>
 80052c0:	e005      	b.n	80052ce <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 f8db 	bl	800547e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f000 f8ec 	bl	80054a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	f003 0304 	and.w	r3, r3, #4
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d020      	beq.n	8005320 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	f003 0304 	and.w	r3, r3, #4
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d01b      	beq.n	8005320 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f06f 0204 	mvn.w	r2, #4
 80052f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2202      	movs	r2, #2
 80052f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	699b      	ldr	r3, [r3, #24]
 80052fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005302:	2b00      	cmp	r3, #0
 8005304:	d003      	beq.n	800530e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f000 f8c3 	bl	8005492 <HAL_TIM_IC_CaptureCallback>
 800530c:	e005      	b.n	800531a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f000 f8b5 	bl	800547e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f000 f8c6 	bl	80054a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	f003 0308 	and.w	r3, r3, #8
 8005326:	2b00      	cmp	r3, #0
 8005328:	d020      	beq.n	800536c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	f003 0308 	and.w	r3, r3, #8
 8005330:	2b00      	cmp	r3, #0
 8005332:	d01b      	beq.n	800536c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f06f 0208 	mvn.w	r2, #8
 800533c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2204      	movs	r2, #4
 8005342:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	69db      	ldr	r3, [r3, #28]
 800534a:	f003 0303 	and.w	r3, r3, #3
 800534e:	2b00      	cmp	r3, #0
 8005350:	d003      	beq.n	800535a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f000 f89d 	bl	8005492 <HAL_TIM_IC_CaptureCallback>
 8005358:	e005      	b.n	8005366 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f000 f88f 	bl	800547e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f000 f8a0 	bl	80054a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2200      	movs	r2, #0
 800536a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	f003 0310 	and.w	r3, r3, #16
 8005372:	2b00      	cmp	r3, #0
 8005374:	d020      	beq.n	80053b8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	f003 0310 	and.w	r3, r3, #16
 800537c:	2b00      	cmp	r3, #0
 800537e:	d01b      	beq.n	80053b8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f06f 0210 	mvn.w	r2, #16
 8005388:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2208      	movs	r2, #8
 800538e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	69db      	ldr	r3, [r3, #28]
 8005396:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800539a:	2b00      	cmp	r3, #0
 800539c:	d003      	beq.n	80053a6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f000 f877 	bl	8005492 <HAL_TIM_IC_CaptureCallback>
 80053a4:	e005      	b.n	80053b2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f000 f869 	bl	800547e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f000 f87a 	bl	80054a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	f003 0301 	and.w	r3, r3, #1
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d00c      	beq.n	80053dc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	f003 0301 	and.w	r3, r3, #1
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d007      	beq.n	80053dc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f06f 0201 	mvn.w	r2, #1
 80053d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f7fb fec0 	bl	800115c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d104      	bne.n	80053f0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d00c      	beq.n	800540a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d007      	beq.n	800540a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005402:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f000 f99b 	bl	8005740 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005410:	2b00      	cmp	r3, #0
 8005412:	d00c      	beq.n	800542e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800541a:	2b00      	cmp	r3, #0
 800541c:	d007      	beq.n	800542e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005426:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f000 f993 	bl	8005754 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005434:	2b00      	cmp	r3, #0
 8005436:	d00c      	beq.n	8005452 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800543e:	2b00      	cmp	r3, #0
 8005440:	d007      	beq.n	8005452 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800544a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f000 f834 	bl	80054ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	f003 0320 	and.w	r3, r3, #32
 8005458:	2b00      	cmp	r3, #0
 800545a:	d00c      	beq.n	8005476 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f003 0320 	and.w	r3, r3, #32
 8005462:	2b00      	cmp	r3, #0
 8005464:	d007      	beq.n	8005476 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f06f 0220 	mvn.w	r2, #32
 800546e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f000 f95b 	bl	800572c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005476:	bf00      	nop
 8005478:	3710      	adds	r7, #16
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}

0800547e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800547e:	b480      	push	{r7}
 8005480:	b083      	sub	sp, #12
 8005482:	af00      	add	r7, sp, #0
 8005484:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005486:	bf00      	nop
 8005488:	370c      	adds	r7, #12
 800548a:	46bd      	mov	sp, r7
 800548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005490:	4770      	bx	lr

08005492 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005492:	b480      	push	{r7}
 8005494:	b083      	sub	sp, #12
 8005496:	af00      	add	r7, sp, #0
 8005498:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800549a:	bf00      	nop
 800549c:	370c      	adds	r7, #12
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr

080054a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80054a6:	b480      	push	{r7}
 80054a8:	b083      	sub	sp, #12
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80054ae:	bf00      	nop
 80054b0:	370c      	adds	r7, #12
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr

080054ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80054ba:	b480      	push	{r7}
 80054bc:	b083      	sub	sp, #12
 80054be:	af00      	add	r7, sp, #0
 80054c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80054c2:	bf00      	nop
 80054c4:	370c      	adds	r7, #12
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr
	...

080054d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b085      	sub	sp, #20
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	4a43      	ldr	r2, [pc, #268]	@ (80055f0 <TIM_Base_SetConfig+0x120>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d013      	beq.n	8005510 <TIM_Base_SetConfig+0x40>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054ee:	d00f      	beq.n	8005510 <TIM_Base_SetConfig+0x40>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	4a40      	ldr	r2, [pc, #256]	@ (80055f4 <TIM_Base_SetConfig+0x124>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d00b      	beq.n	8005510 <TIM_Base_SetConfig+0x40>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	4a3f      	ldr	r2, [pc, #252]	@ (80055f8 <TIM_Base_SetConfig+0x128>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d007      	beq.n	8005510 <TIM_Base_SetConfig+0x40>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	4a3e      	ldr	r2, [pc, #248]	@ (80055fc <TIM_Base_SetConfig+0x12c>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d003      	beq.n	8005510 <TIM_Base_SetConfig+0x40>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	4a3d      	ldr	r2, [pc, #244]	@ (8005600 <TIM_Base_SetConfig+0x130>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d108      	bne.n	8005522 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005516:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	68fa      	ldr	r2, [r7, #12]
 800551e:	4313      	orrs	r3, r2
 8005520:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	4a32      	ldr	r2, [pc, #200]	@ (80055f0 <TIM_Base_SetConfig+0x120>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d01f      	beq.n	800556a <TIM_Base_SetConfig+0x9a>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005530:	d01b      	beq.n	800556a <TIM_Base_SetConfig+0x9a>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	4a2f      	ldr	r2, [pc, #188]	@ (80055f4 <TIM_Base_SetConfig+0x124>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d017      	beq.n	800556a <TIM_Base_SetConfig+0x9a>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	4a2e      	ldr	r2, [pc, #184]	@ (80055f8 <TIM_Base_SetConfig+0x128>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d013      	beq.n	800556a <TIM_Base_SetConfig+0x9a>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	4a2d      	ldr	r2, [pc, #180]	@ (80055fc <TIM_Base_SetConfig+0x12c>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d00f      	beq.n	800556a <TIM_Base_SetConfig+0x9a>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	4a2c      	ldr	r2, [pc, #176]	@ (8005600 <TIM_Base_SetConfig+0x130>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d00b      	beq.n	800556a <TIM_Base_SetConfig+0x9a>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	4a2b      	ldr	r2, [pc, #172]	@ (8005604 <TIM_Base_SetConfig+0x134>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d007      	beq.n	800556a <TIM_Base_SetConfig+0x9a>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	4a2a      	ldr	r2, [pc, #168]	@ (8005608 <TIM_Base_SetConfig+0x138>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d003      	beq.n	800556a <TIM_Base_SetConfig+0x9a>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	4a29      	ldr	r2, [pc, #164]	@ (800560c <TIM_Base_SetConfig+0x13c>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d108      	bne.n	800557c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005570:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	68db      	ldr	r3, [r3, #12]
 8005576:	68fa      	ldr	r2, [r7, #12]
 8005578:	4313      	orrs	r3, r2
 800557a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	695b      	ldr	r3, [r3, #20]
 8005586:	4313      	orrs	r3, r2
 8005588:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	689a      	ldr	r2, [r3, #8]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	4a14      	ldr	r2, [pc, #80]	@ (80055f0 <TIM_Base_SetConfig+0x120>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d00f      	beq.n	80055c2 <TIM_Base_SetConfig+0xf2>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4a16      	ldr	r2, [pc, #88]	@ (8005600 <TIM_Base_SetConfig+0x130>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d00b      	beq.n	80055c2 <TIM_Base_SetConfig+0xf2>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	4a15      	ldr	r2, [pc, #84]	@ (8005604 <TIM_Base_SetConfig+0x134>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d007      	beq.n	80055c2 <TIM_Base_SetConfig+0xf2>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	4a14      	ldr	r2, [pc, #80]	@ (8005608 <TIM_Base_SetConfig+0x138>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d003      	beq.n	80055c2 <TIM_Base_SetConfig+0xf2>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4a13      	ldr	r2, [pc, #76]	@ (800560c <TIM_Base_SetConfig+0x13c>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d103      	bne.n	80055ca <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	691a      	ldr	r2, [r3, #16]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f043 0204 	orr.w	r2, r3, #4
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2201      	movs	r2, #1
 80055da:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	68fa      	ldr	r2, [r7, #12]
 80055e0:	601a      	str	r2, [r3, #0]
}
 80055e2:	bf00      	nop
 80055e4:	3714      	adds	r7, #20
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr
 80055ee:	bf00      	nop
 80055f0:	40010000 	.word	0x40010000
 80055f4:	40000400 	.word	0x40000400
 80055f8:	40000800 	.word	0x40000800
 80055fc:	40000c00 	.word	0x40000c00
 8005600:	40010400 	.word	0x40010400
 8005604:	40014000 	.word	0x40014000
 8005608:	40014400 	.word	0x40014400
 800560c:	40014800 	.word	0x40014800

08005610 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005610:	b480      	push	{r7}
 8005612:	b085      	sub	sp, #20
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005620:	2b01      	cmp	r3, #1
 8005622:	d101      	bne.n	8005628 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005624:	2302      	movs	r3, #2
 8005626:	e06d      	b.n	8005704 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2201      	movs	r2, #1
 800562c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2202      	movs	r2, #2
 8005634:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a30      	ldr	r2, [pc, #192]	@ (8005710 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d004      	beq.n	800565c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a2f      	ldr	r2, [pc, #188]	@ (8005714 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d108      	bne.n	800566e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005662:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	68fa      	ldr	r2, [r7, #12]
 800566a:	4313      	orrs	r3, r2
 800566c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005674:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	68fa      	ldr	r2, [r7, #12]
 800567c:	4313      	orrs	r3, r2
 800567e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	68fa      	ldr	r2, [r7, #12]
 8005686:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a20      	ldr	r2, [pc, #128]	@ (8005710 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d022      	beq.n	80056d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800569a:	d01d      	beq.n	80056d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a1d      	ldr	r2, [pc, #116]	@ (8005718 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d018      	beq.n	80056d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a1c      	ldr	r2, [pc, #112]	@ (800571c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d013      	beq.n	80056d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a1a      	ldr	r2, [pc, #104]	@ (8005720 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d00e      	beq.n	80056d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a15      	ldr	r2, [pc, #84]	@ (8005714 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d009      	beq.n	80056d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a16      	ldr	r2, [pc, #88]	@ (8005724 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d004      	beq.n	80056d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a15      	ldr	r2, [pc, #84]	@ (8005728 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d10c      	bne.n	80056f2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80056de:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	68ba      	ldr	r2, [r7, #8]
 80056e6:	4313      	orrs	r3, r2
 80056e8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	68ba      	ldr	r2, [r7, #8]
 80056f0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2201      	movs	r2, #1
 80056f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2200      	movs	r2, #0
 80056fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005702:	2300      	movs	r3, #0
}
 8005704:	4618      	mov	r0, r3
 8005706:	3714      	adds	r7, #20
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr
 8005710:	40010000 	.word	0x40010000
 8005714:	40010400 	.word	0x40010400
 8005718:	40000400 	.word	0x40000400
 800571c:	40000800 	.word	0x40000800
 8005720:	40000c00 	.word	0x40000c00
 8005724:	40001800 	.word	0x40001800
 8005728:	40014000 	.word	0x40014000

0800572c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800572c:	b480      	push	{r7}
 800572e:	b083      	sub	sp, #12
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005734:	bf00      	nop
 8005736:	370c      	adds	r7, #12
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr

08005740 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005740:	b480      	push	{r7}
 8005742:	b083      	sub	sp, #12
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005748:	bf00      	nop
 800574a:	370c      	adds	r7, #12
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr

08005754 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005754:	b480      	push	{r7}
 8005756:	b083      	sub	sp, #12
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800575c:	bf00      	nop
 800575e:	370c      	adds	r7, #12
 8005760:	46bd      	mov	sp, r7
 8005762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005766:	4770      	bx	lr

08005768 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b082      	sub	sp, #8
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d101      	bne.n	800577a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	e042      	b.n	8005800 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005780:	2b00      	cmp	r3, #0
 8005782:	d106      	bne.n	8005792 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2200      	movs	r2, #0
 8005788:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f7fb fd61 	bl	8001254 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2224      	movs	r2, #36	@ 0x24
 8005796:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f022 0201 	bic.w	r2, r2, #1
 80057a8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d002      	beq.n	80057b8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f000 fe1e 	bl	80063f4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f000 f8b3 	bl	8005924 <UART_SetConfig>
 80057be:	4603      	mov	r3, r0
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d101      	bne.n	80057c8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80057c4:	2301      	movs	r3, #1
 80057c6:	e01b      	b.n	8005800 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	685a      	ldr	r2, [r3, #4]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80057d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	689a      	ldr	r2, [r3, #8]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80057e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f042 0201 	orr.w	r2, r2, #1
 80057f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f000 fe9d 	bl	8006538 <UART_CheckIdleState>
 80057fe:	4603      	mov	r3, r0
}
 8005800:	4618      	mov	r0, r3
 8005802:	3708      	adds	r7, #8
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}

08005808 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b08a      	sub	sp, #40	@ 0x28
 800580c:	af02      	add	r7, sp, #8
 800580e:	60f8      	str	r0, [r7, #12]
 8005810:	60b9      	str	r1, [r7, #8]
 8005812:	603b      	str	r3, [r7, #0]
 8005814:	4613      	mov	r3, r2
 8005816:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800581e:	2b20      	cmp	r3, #32
 8005820:	d17b      	bne.n	800591a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d002      	beq.n	800582e <HAL_UART_Transmit+0x26>
 8005828:	88fb      	ldrh	r3, [r7, #6]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d101      	bne.n	8005832 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	e074      	b.n	800591c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2200      	movs	r2, #0
 8005836:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2221      	movs	r2, #33	@ 0x21
 800583e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005842:	f7fc fa77 	bl	8001d34 <HAL_GetTick>
 8005846:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	88fa      	ldrh	r2, [r7, #6]
 800584c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	88fa      	ldrh	r2, [r7, #6]
 8005854:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005860:	d108      	bne.n	8005874 <HAL_UART_Transmit+0x6c>
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	691b      	ldr	r3, [r3, #16]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d104      	bne.n	8005874 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800586a:	2300      	movs	r3, #0
 800586c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	61bb      	str	r3, [r7, #24]
 8005872:	e003      	b.n	800587c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005878:	2300      	movs	r3, #0
 800587a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800587c:	e030      	b.n	80058e0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	9300      	str	r3, [sp, #0]
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	2200      	movs	r2, #0
 8005886:	2180      	movs	r1, #128	@ 0x80
 8005888:	68f8      	ldr	r0, [r7, #12]
 800588a:	f000 feff 	bl	800668c <UART_WaitOnFlagUntilTimeout>
 800588e:	4603      	mov	r3, r0
 8005890:	2b00      	cmp	r3, #0
 8005892:	d005      	beq.n	80058a0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2220      	movs	r2, #32
 8005898:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800589c:	2303      	movs	r3, #3
 800589e:	e03d      	b.n	800591c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80058a0:	69fb      	ldr	r3, [r7, #28]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d10b      	bne.n	80058be <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80058a6:	69bb      	ldr	r3, [r7, #24]
 80058a8:	881b      	ldrh	r3, [r3, #0]
 80058aa:	461a      	mov	r2, r3
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058b4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80058b6:	69bb      	ldr	r3, [r7, #24]
 80058b8:	3302      	adds	r3, #2
 80058ba:	61bb      	str	r3, [r7, #24]
 80058bc:	e007      	b.n	80058ce <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80058be:	69fb      	ldr	r3, [r7, #28]
 80058c0:	781a      	ldrb	r2, [r3, #0]
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80058c8:	69fb      	ldr	r3, [r7, #28]
 80058ca:	3301      	adds	r3, #1
 80058cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	3b01      	subs	r3, #1
 80058d8:	b29a      	uxth	r2, r3
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d1c8      	bne.n	800587e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	9300      	str	r3, [sp, #0]
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	2200      	movs	r2, #0
 80058f4:	2140      	movs	r1, #64	@ 0x40
 80058f6:	68f8      	ldr	r0, [r7, #12]
 80058f8:	f000 fec8 	bl	800668c <UART_WaitOnFlagUntilTimeout>
 80058fc:	4603      	mov	r3, r0
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d005      	beq.n	800590e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2220      	movs	r2, #32
 8005906:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800590a:	2303      	movs	r3, #3
 800590c:	e006      	b.n	800591c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2220      	movs	r2, #32
 8005912:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005916:	2300      	movs	r3, #0
 8005918:	e000      	b.n	800591c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800591a:	2302      	movs	r3, #2
  }
}
 800591c:	4618      	mov	r0, r3
 800591e:	3720      	adds	r7, #32
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}

08005924 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005924:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005928:	b092      	sub	sp, #72	@ 0x48
 800592a:	af00      	add	r7, sp, #0
 800592c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800592e:	2300      	movs	r3, #0
 8005930:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	689a      	ldr	r2, [r3, #8]
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	691b      	ldr	r3, [r3, #16]
 800593c:	431a      	orrs	r2, r3
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	695b      	ldr	r3, [r3, #20]
 8005942:	431a      	orrs	r2, r3
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	69db      	ldr	r3, [r3, #28]
 8005948:	4313      	orrs	r3, r2
 800594a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	4bbe      	ldr	r3, [pc, #760]	@ (8005c4c <UART_SetConfig+0x328>)
 8005954:	4013      	ands	r3, r2
 8005956:	697a      	ldr	r2, [r7, #20]
 8005958:	6812      	ldr	r2, [r2, #0]
 800595a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800595c:	430b      	orrs	r3, r1
 800595e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	68da      	ldr	r2, [r3, #12]
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	430a      	orrs	r2, r1
 8005974:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	699b      	ldr	r3, [r3, #24]
 800597a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4ab3      	ldr	r2, [pc, #716]	@ (8005c50 <UART_SetConfig+0x32c>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d004      	beq.n	8005990 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	6a1b      	ldr	r3, [r3, #32]
 800598a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800598c:	4313      	orrs	r3, r2
 800598e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	689a      	ldr	r2, [r3, #8]
 8005996:	4baf      	ldr	r3, [pc, #700]	@ (8005c54 <UART_SetConfig+0x330>)
 8005998:	4013      	ands	r3, r2
 800599a:	697a      	ldr	r2, [r7, #20]
 800599c:	6812      	ldr	r2, [r2, #0]
 800599e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80059a0:	430b      	orrs	r3, r1
 80059a2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059aa:	f023 010f 	bic.w	r1, r3, #15
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	430a      	orrs	r2, r1
 80059b8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4aa6      	ldr	r2, [pc, #664]	@ (8005c58 <UART_SetConfig+0x334>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d177      	bne.n	8005ab4 <UART_SetConfig+0x190>
 80059c4:	4ba5      	ldr	r3, [pc, #660]	@ (8005c5c <UART_SetConfig+0x338>)
 80059c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059c8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80059cc:	2b28      	cmp	r3, #40	@ 0x28
 80059ce:	d86d      	bhi.n	8005aac <UART_SetConfig+0x188>
 80059d0:	a201      	add	r2, pc, #4	@ (adr r2, 80059d8 <UART_SetConfig+0xb4>)
 80059d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059d6:	bf00      	nop
 80059d8:	08005a7d 	.word	0x08005a7d
 80059dc:	08005aad 	.word	0x08005aad
 80059e0:	08005aad 	.word	0x08005aad
 80059e4:	08005aad 	.word	0x08005aad
 80059e8:	08005aad 	.word	0x08005aad
 80059ec:	08005aad 	.word	0x08005aad
 80059f0:	08005aad 	.word	0x08005aad
 80059f4:	08005aad 	.word	0x08005aad
 80059f8:	08005a85 	.word	0x08005a85
 80059fc:	08005aad 	.word	0x08005aad
 8005a00:	08005aad 	.word	0x08005aad
 8005a04:	08005aad 	.word	0x08005aad
 8005a08:	08005aad 	.word	0x08005aad
 8005a0c:	08005aad 	.word	0x08005aad
 8005a10:	08005aad 	.word	0x08005aad
 8005a14:	08005aad 	.word	0x08005aad
 8005a18:	08005a8d 	.word	0x08005a8d
 8005a1c:	08005aad 	.word	0x08005aad
 8005a20:	08005aad 	.word	0x08005aad
 8005a24:	08005aad 	.word	0x08005aad
 8005a28:	08005aad 	.word	0x08005aad
 8005a2c:	08005aad 	.word	0x08005aad
 8005a30:	08005aad 	.word	0x08005aad
 8005a34:	08005aad 	.word	0x08005aad
 8005a38:	08005a95 	.word	0x08005a95
 8005a3c:	08005aad 	.word	0x08005aad
 8005a40:	08005aad 	.word	0x08005aad
 8005a44:	08005aad 	.word	0x08005aad
 8005a48:	08005aad 	.word	0x08005aad
 8005a4c:	08005aad 	.word	0x08005aad
 8005a50:	08005aad 	.word	0x08005aad
 8005a54:	08005aad 	.word	0x08005aad
 8005a58:	08005a9d 	.word	0x08005a9d
 8005a5c:	08005aad 	.word	0x08005aad
 8005a60:	08005aad 	.word	0x08005aad
 8005a64:	08005aad 	.word	0x08005aad
 8005a68:	08005aad 	.word	0x08005aad
 8005a6c:	08005aad 	.word	0x08005aad
 8005a70:	08005aad 	.word	0x08005aad
 8005a74:	08005aad 	.word	0x08005aad
 8005a78:	08005aa5 	.word	0x08005aa5
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a82:	e222      	b.n	8005eca <UART_SetConfig+0x5a6>
 8005a84:	2304      	movs	r3, #4
 8005a86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a8a:	e21e      	b.n	8005eca <UART_SetConfig+0x5a6>
 8005a8c:	2308      	movs	r3, #8
 8005a8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a92:	e21a      	b.n	8005eca <UART_SetConfig+0x5a6>
 8005a94:	2310      	movs	r3, #16
 8005a96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a9a:	e216      	b.n	8005eca <UART_SetConfig+0x5a6>
 8005a9c:	2320      	movs	r3, #32
 8005a9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005aa2:	e212      	b.n	8005eca <UART_SetConfig+0x5a6>
 8005aa4:	2340      	movs	r3, #64	@ 0x40
 8005aa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005aaa:	e20e      	b.n	8005eca <UART_SetConfig+0x5a6>
 8005aac:	2380      	movs	r3, #128	@ 0x80
 8005aae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ab2:	e20a      	b.n	8005eca <UART_SetConfig+0x5a6>
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a69      	ldr	r2, [pc, #420]	@ (8005c60 <UART_SetConfig+0x33c>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d130      	bne.n	8005b20 <UART_SetConfig+0x1fc>
 8005abe:	4b67      	ldr	r3, [pc, #412]	@ (8005c5c <UART_SetConfig+0x338>)
 8005ac0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ac2:	f003 0307 	and.w	r3, r3, #7
 8005ac6:	2b05      	cmp	r3, #5
 8005ac8:	d826      	bhi.n	8005b18 <UART_SetConfig+0x1f4>
 8005aca:	a201      	add	r2, pc, #4	@ (adr r2, 8005ad0 <UART_SetConfig+0x1ac>)
 8005acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ad0:	08005ae9 	.word	0x08005ae9
 8005ad4:	08005af1 	.word	0x08005af1
 8005ad8:	08005af9 	.word	0x08005af9
 8005adc:	08005b01 	.word	0x08005b01
 8005ae0:	08005b09 	.word	0x08005b09
 8005ae4:	08005b11 	.word	0x08005b11
 8005ae8:	2300      	movs	r3, #0
 8005aea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005aee:	e1ec      	b.n	8005eca <UART_SetConfig+0x5a6>
 8005af0:	2304      	movs	r3, #4
 8005af2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005af6:	e1e8      	b.n	8005eca <UART_SetConfig+0x5a6>
 8005af8:	2308      	movs	r3, #8
 8005afa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005afe:	e1e4      	b.n	8005eca <UART_SetConfig+0x5a6>
 8005b00:	2310      	movs	r3, #16
 8005b02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b06:	e1e0      	b.n	8005eca <UART_SetConfig+0x5a6>
 8005b08:	2320      	movs	r3, #32
 8005b0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b0e:	e1dc      	b.n	8005eca <UART_SetConfig+0x5a6>
 8005b10:	2340      	movs	r3, #64	@ 0x40
 8005b12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b16:	e1d8      	b.n	8005eca <UART_SetConfig+0x5a6>
 8005b18:	2380      	movs	r3, #128	@ 0x80
 8005b1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b1e:	e1d4      	b.n	8005eca <UART_SetConfig+0x5a6>
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a4f      	ldr	r2, [pc, #316]	@ (8005c64 <UART_SetConfig+0x340>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d130      	bne.n	8005b8c <UART_SetConfig+0x268>
 8005b2a:	4b4c      	ldr	r3, [pc, #304]	@ (8005c5c <UART_SetConfig+0x338>)
 8005b2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b2e:	f003 0307 	and.w	r3, r3, #7
 8005b32:	2b05      	cmp	r3, #5
 8005b34:	d826      	bhi.n	8005b84 <UART_SetConfig+0x260>
 8005b36:	a201      	add	r2, pc, #4	@ (adr r2, 8005b3c <UART_SetConfig+0x218>)
 8005b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b3c:	08005b55 	.word	0x08005b55
 8005b40:	08005b5d 	.word	0x08005b5d
 8005b44:	08005b65 	.word	0x08005b65
 8005b48:	08005b6d 	.word	0x08005b6d
 8005b4c:	08005b75 	.word	0x08005b75
 8005b50:	08005b7d 	.word	0x08005b7d
 8005b54:	2300      	movs	r3, #0
 8005b56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b5a:	e1b6      	b.n	8005eca <UART_SetConfig+0x5a6>
 8005b5c:	2304      	movs	r3, #4
 8005b5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b62:	e1b2      	b.n	8005eca <UART_SetConfig+0x5a6>
 8005b64:	2308      	movs	r3, #8
 8005b66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b6a:	e1ae      	b.n	8005eca <UART_SetConfig+0x5a6>
 8005b6c:	2310      	movs	r3, #16
 8005b6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b72:	e1aa      	b.n	8005eca <UART_SetConfig+0x5a6>
 8005b74:	2320      	movs	r3, #32
 8005b76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b7a:	e1a6      	b.n	8005eca <UART_SetConfig+0x5a6>
 8005b7c:	2340      	movs	r3, #64	@ 0x40
 8005b7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b82:	e1a2      	b.n	8005eca <UART_SetConfig+0x5a6>
 8005b84:	2380      	movs	r3, #128	@ 0x80
 8005b86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b8a:	e19e      	b.n	8005eca <UART_SetConfig+0x5a6>
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a35      	ldr	r2, [pc, #212]	@ (8005c68 <UART_SetConfig+0x344>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d130      	bne.n	8005bf8 <UART_SetConfig+0x2d4>
 8005b96:	4b31      	ldr	r3, [pc, #196]	@ (8005c5c <UART_SetConfig+0x338>)
 8005b98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b9a:	f003 0307 	and.w	r3, r3, #7
 8005b9e:	2b05      	cmp	r3, #5
 8005ba0:	d826      	bhi.n	8005bf0 <UART_SetConfig+0x2cc>
 8005ba2:	a201      	add	r2, pc, #4	@ (adr r2, 8005ba8 <UART_SetConfig+0x284>)
 8005ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ba8:	08005bc1 	.word	0x08005bc1
 8005bac:	08005bc9 	.word	0x08005bc9
 8005bb0:	08005bd1 	.word	0x08005bd1
 8005bb4:	08005bd9 	.word	0x08005bd9
 8005bb8:	08005be1 	.word	0x08005be1
 8005bbc:	08005be9 	.word	0x08005be9
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bc6:	e180      	b.n	8005eca <UART_SetConfig+0x5a6>
 8005bc8:	2304      	movs	r3, #4
 8005bca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bce:	e17c      	b.n	8005eca <UART_SetConfig+0x5a6>
 8005bd0:	2308      	movs	r3, #8
 8005bd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bd6:	e178      	b.n	8005eca <UART_SetConfig+0x5a6>
 8005bd8:	2310      	movs	r3, #16
 8005bda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bde:	e174      	b.n	8005eca <UART_SetConfig+0x5a6>
 8005be0:	2320      	movs	r3, #32
 8005be2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005be6:	e170      	b.n	8005eca <UART_SetConfig+0x5a6>
 8005be8:	2340      	movs	r3, #64	@ 0x40
 8005bea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bee:	e16c      	b.n	8005eca <UART_SetConfig+0x5a6>
 8005bf0:	2380      	movs	r3, #128	@ 0x80
 8005bf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bf6:	e168      	b.n	8005eca <UART_SetConfig+0x5a6>
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a1b      	ldr	r2, [pc, #108]	@ (8005c6c <UART_SetConfig+0x348>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d142      	bne.n	8005c88 <UART_SetConfig+0x364>
 8005c02:	4b16      	ldr	r3, [pc, #88]	@ (8005c5c <UART_SetConfig+0x338>)
 8005c04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c06:	f003 0307 	and.w	r3, r3, #7
 8005c0a:	2b05      	cmp	r3, #5
 8005c0c:	d838      	bhi.n	8005c80 <UART_SetConfig+0x35c>
 8005c0e:	a201      	add	r2, pc, #4	@ (adr r2, 8005c14 <UART_SetConfig+0x2f0>)
 8005c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c14:	08005c2d 	.word	0x08005c2d
 8005c18:	08005c35 	.word	0x08005c35
 8005c1c:	08005c3d 	.word	0x08005c3d
 8005c20:	08005c45 	.word	0x08005c45
 8005c24:	08005c71 	.word	0x08005c71
 8005c28:	08005c79 	.word	0x08005c79
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c32:	e14a      	b.n	8005eca <UART_SetConfig+0x5a6>
 8005c34:	2304      	movs	r3, #4
 8005c36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c3a:	e146      	b.n	8005eca <UART_SetConfig+0x5a6>
 8005c3c:	2308      	movs	r3, #8
 8005c3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c42:	e142      	b.n	8005eca <UART_SetConfig+0x5a6>
 8005c44:	2310      	movs	r3, #16
 8005c46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c4a:	e13e      	b.n	8005eca <UART_SetConfig+0x5a6>
 8005c4c:	cfff69f3 	.word	0xcfff69f3
 8005c50:	58000c00 	.word	0x58000c00
 8005c54:	11fff4ff 	.word	0x11fff4ff
 8005c58:	40011000 	.word	0x40011000
 8005c5c:	58024400 	.word	0x58024400
 8005c60:	40004400 	.word	0x40004400
 8005c64:	40004800 	.word	0x40004800
 8005c68:	40004c00 	.word	0x40004c00
 8005c6c:	40005000 	.word	0x40005000
 8005c70:	2320      	movs	r3, #32
 8005c72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c76:	e128      	b.n	8005eca <UART_SetConfig+0x5a6>
 8005c78:	2340      	movs	r3, #64	@ 0x40
 8005c7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c7e:	e124      	b.n	8005eca <UART_SetConfig+0x5a6>
 8005c80:	2380      	movs	r3, #128	@ 0x80
 8005c82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c86:	e120      	b.n	8005eca <UART_SetConfig+0x5a6>
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4acb      	ldr	r2, [pc, #812]	@ (8005fbc <UART_SetConfig+0x698>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d176      	bne.n	8005d80 <UART_SetConfig+0x45c>
 8005c92:	4bcb      	ldr	r3, [pc, #812]	@ (8005fc0 <UART_SetConfig+0x69c>)
 8005c94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c96:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005c9a:	2b28      	cmp	r3, #40	@ 0x28
 8005c9c:	d86c      	bhi.n	8005d78 <UART_SetConfig+0x454>
 8005c9e:	a201      	add	r2, pc, #4	@ (adr r2, 8005ca4 <UART_SetConfig+0x380>)
 8005ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ca4:	08005d49 	.word	0x08005d49
 8005ca8:	08005d79 	.word	0x08005d79
 8005cac:	08005d79 	.word	0x08005d79
 8005cb0:	08005d79 	.word	0x08005d79
 8005cb4:	08005d79 	.word	0x08005d79
 8005cb8:	08005d79 	.word	0x08005d79
 8005cbc:	08005d79 	.word	0x08005d79
 8005cc0:	08005d79 	.word	0x08005d79
 8005cc4:	08005d51 	.word	0x08005d51
 8005cc8:	08005d79 	.word	0x08005d79
 8005ccc:	08005d79 	.word	0x08005d79
 8005cd0:	08005d79 	.word	0x08005d79
 8005cd4:	08005d79 	.word	0x08005d79
 8005cd8:	08005d79 	.word	0x08005d79
 8005cdc:	08005d79 	.word	0x08005d79
 8005ce0:	08005d79 	.word	0x08005d79
 8005ce4:	08005d59 	.word	0x08005d59
 8005ce8:	08005d79 	.word	0x08005d79
 8005cec:	08005d79 	.word	0x08005d79
 8005cf0:	08005d79 	.word	0x08005d79
 8005cf4:	08005d79 	.word	0x08005d79
 8005cf8:	08005d79 	.word	0x08005d79
 8005cfc:	08005d79 	.word	0x08005d79
 8005d00:	08005d79 	.word	0x08005d79
 8005d04:	08005d61 	.word	0x08005d61
 8005d08:	08005d79 	.word	0x08005d79
 8005d0c:	08005d79 	.word	0x08005d79
 8005d10:	08005d79 	.word	0x08005d79
 8005d14:	08005d79 	.word	0x08005d79
 8005d18:	08005d79 	.word	0x08005d79
 8005d1c:	08005d79 	.word	0x08005d79
 8005d20:	08005d79 	.word	0x08005d79
 8005d24:	08005d69 	.word	0x08005d69
 8005d28:	08005d79 	.word	0x08005d79
 8005d2c:	08005d79 	.word	0x08005d79
 8005d30:	08005d79 	.word	0x08005d79
 8005d34:	08005d79 	.word	0x08005d79
 8005d38:	08005d79 	.word	0x08005d79
 8005d3c:	08005d79 	.word	0x08005d79
 8005d40:	08005d79 	.word	0x08005d79
 8005d44:	08005d71 	.word	0x08005d71
 8005d48:	2301      	movs	r3, #1
 8005d4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d4e:	e0bc      	b.n	8005eca <UART_SetConfig+0x5a6>
 8005d50:	2304      	movs	r3, #4
 8005d52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d56:	e0b8      	b.n	8005eca <UART_SetConfig+0x5a6>
 8005d58:	2308      	movs	r3, #8
 8005d5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d5e:	e0b4      	b.n	8005eca <UART_SetConfig+0x5a6>
 8005d60:	2310      	movs	r3, #16
 8005d62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d66:	e0b0      	b.n	8005eca <UART_SetConfig+0x5a6>
 8005d68:	2320      	movs	r3, #32
 8005d6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d6e:	e0ac      	b.n	8005eca <UART_SetConfig+0x5a6>
 8005d70:	2340      	movs	r3, #64	@ 0x40
 8005d72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d76:	e0a8      	b.n	8005eca <UART_SetConfig+0x5a6>
 8005d78:	2380      	movs	r3, #128	@ 0x80
 8005d7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d7e:	e0a4      	b.n	8005eca <UART_SetConfig+0x5a6>
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a8f      	ldr	r2, [pc, #572]	@ (8005fc4 <UART_SetConfig+0x6a0>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d130      	bne.n	8005dec <UART_SetConfig+0x4c8>
 8005d8a:	4b8d      	ldr	r3, [pc, #564]	@ (8005fc0 <UART_SetConfig+0x69c>)
 8005d8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d8e:	f003 0307 	and.w	r3, r3, #7
 8005d92:	2b05      	cmp	r3, #5
 8005d94:	d826      	bhi.n	8005de4 <UART_SetConfig+0x4c0>
 8005d96:	a201      	add	r2, pc, #4	@ (adr r2, 8005d9c <UART_SetConfig+0x478>)
 8005d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d9c:	08005db5 	.word	0x08005db5
 8005da0:	08005dbd 	.word	0x08005dbd
 8005da4:	08005dc5 	.word	0x08005dc5
 8005da8:	08005dcd 	.word	0x08005dcd
 8005dac:	08005dd5 	.word	0x08005dd5
 8005db0:	08005ddd 	.word	0x08005ddd
 8005db4:	2300      	movs	r3, #0
 8005db6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dba:	e086      	b.n	8005eca <UART_SetConfig+0x5a6>
 8005dbc:	2304      	movs	r3, #4
 8005dbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dc2:	e082      	b.n	8005eca <UART_SetConfig+0x5a6>
 8005dc4:	2308      	movs	r3, #8
 8005dc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dca:	e07e      	b.n	8005eca <UART_SetConfig+0x5a6>
 8005dcc:	2310      	movs	r3, #16
 8005dce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dd2:	e07a      	b.n	8005eca <UART_SetConfig+0x5a6>
 8005dd4:	2320      	movs	r3, #32
 8005dd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dda:	e076      	b.n	8005eca <UART_SetConfig+0x5a6>
 8005ddc:	2340      	movs	r3, #64	@ 0x40
 8005dde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005de2:	e072      	b.n	8005eca <UART_SetConfig+0x5a6>
 8005de4:	2380      	movs	r3, #128	@ 0x80
 8005de6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dea:	e06e      	b.n	8005eca <UART_SetConfig+0x5a6>
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a75      	ldr	r2, [pc, #468]	@ (8005fc8 <UART_SetConfig+0x6a4>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d130      	bne.n	8005e58 <UART_SetConfig+0x534>
 8005df6:	4b72      	ldr	r3, [pc, #456]	@ (8005fc0 <UART_SetConfig+0x69c>)
 8005df8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dfa:	f003 0307 	and.w	r3, r3, #7
 8005dfe:	2b05      	cmp	r3, #5
 8005e00:	d826      	bhi.n	8005e50 <UART_SetConfig+0x52c>
 8005e02:	a201      	add	r2, pc, #4	@ (adr r2, 8005e08 <UART_SetConfig+0x4e4>)
 8005e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e08:	08005e21 	.word	0x08005e21
 8005e0c:	08005e29 	.word	0x08005e29
 8005e10:	08005e31 	.word	0x08005e31
 8005e14:	08005e39 	.word	0x08005e39
 8005e18:	08005e41 	.word	0x08005e41
 8005e1c:	08005e49 	.word	0x08005e49
 8005e20:	2300      	movs	r3, #0
 8005e22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e26:	e050      	b.n	8005eca <UART_SetConfig+0x5a6>
 8005e28:	2304      	movs	r3, #4
 8005e2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e2e:	e04c      	b.n	8005eca <UART_SetConfig+0x5a6>
 8005e30:	2308      	movs	r3, #8
 8005e32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e36:	e048      	b.n	8005eca <UART_SetConfig+0x5a6>
 8005e38:	2310      	movs	r3, #16
 8005e3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e3e:	e044      	b.n	8005eca <UART_SetConfig+0x5a6>
 8005e40:	2320      	movs	r3, #32
 8005e42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e46:	e040      	b.n	8005eca <UART_SetConfig+0x5a6>
 8005e48:	2340      	movs	r3, #64	@ 0x40
 8005e4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e4e:	e03c      	b.n	8005eca <UART_SetConfig+0x5a6>
 8005e50:	2380      	movs	r3, #128	@ 0x80
 8005e52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e56:	e038      	b.n	8005eca <UART_SetConfig+0x5a6>
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a5b      	ldr	r2, [pc, #364]	@ (8005fcc <UART_SetConfig+0x6a8>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d130      	bne.n	8005ec4 <UART_SetConfig+0x5a0>
 8005e62:	4b57      	ldr	r3, [pc, #348]	@ (8005fc0 <UART_SetConfig+0x69c>)
 8005e64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e66:	f003 0307 	and.w	r3, r3, #7
 8005e6a:	2b05      	cmp	r3, #5
 8005e6c:	d826      	bhi.n	8005ebc <UART_SetConfig+0x598>
 8005e6e:	a201      	add	r2, pc, #4	@ (adr r2, 8005e74 <UART_SetConfig+0x550>)
 8005e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e74:	08005e8d 	.word	0x08005e8d
 8005e78:	08005e95 	.word	0x08005e95
 8005e7c:	08005e9d 	.word	0x08005e9d
 8005e80:	08005ea5 	.word	0x08005ea5
 8005e84:	08005ead 	.word	0x08005ead
 8005e88:	08005eb5 	.word	0x08005eb5
 8005e8c:	2302      	movs	r3, #2
 8005e8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e92:	e01a      	b.n	8005eca <UART_SetConfig+0x5a6>
 8005e94:	2304      	movs	r3, #4
 8005e96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e9a:	e016      	b.n	8005eca <UART_SetConfig+0x5a6>
 8005e9c:	2308      	movs	r3, #8
 8005e9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ea2:	e012      	b.n	8005eca <UART_SetConfig+0x5a6>
 8005ea4:	2310      	movs	r3, #16
 8005ea6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005eaa:	e00e      	b.n	8005eca <UART_SetConfig+0x5a6>
 8005eac:	2320      	movs	r3, #32
 8005eae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005eb2:	e00a      	b.n	8005eca <UART_SetConfig+0x5a6>
 8005eb4:	2340      	movs	r3, #64	@ 0x40
 8005eb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005eba:	e006      	b.n	8005eca <UART_SetConfig+0x5a6>
 8005ebc:	2380      	movs	r3, #128	@ 0x80
 8005ebe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ec2:	e002      	b.n	8005eca <UART_SetConfig+0x5a6>
 8005ec4:	2380      	movs	r3, #128	@ 0x80
 8005ec6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a3f      	ldr	r2, [pc, #252]	@ (8005fcc <UART_SetConfig+0x6a8>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	f040 80f8 	bne.w	80060c6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005ed6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005eda:	2b20      	cmp	r3, #32
 8005edc:	dc46      	bgt.n	8005f6c <UART_SetConfig+0x648>
 8005ede:	2b02      	cmp	r3, #2
 8005ee0:	f2c0 8082 	blt.w	8005fe8 <UART_SetConfig+0x6c4>
 8005ee4:	3b02      	subs	r3, #2
 8005ee6:	2b1e      	cmp	r3, #30
 8005ee8:	d87e      	bhi.n	8005fe8 <UART_SetConfig+0x6c4>
 8005eea:	a201      	add	r2, pc, #4	@ (adr r2, 8005ef0 <UART_SetConfig+0x5cc>)
 8005eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ef0:	08005f73 	.word	0x08005f73
 8005ef4:	08005fe9 	.word	0x08005fe9
 8005ef8:	08005f7b 	.word	0x08005f7b
 8005efc:	08005fe9 	.word	0x08005fe9
 8005f00:	08005fe9 	.word	0x08005fe9
 8005f04:	08005fe9 	.word	0x08005fe9
 8005f08:	08005f8b 	.word	0x08005f8b
 8005f0c:	08005fe9 	.word	0x08005fe9
 8005f10:	08005fe9 	.word	0x08005fe9
 8005f14:	08005fe9 	.word	0x08005fe9
 8005f18:	08005fe9 	.word	0x08005fe9
 8005f1c:	08005fe9 	.word	0x08005fe9
 8005f20:	08005fe9 	.word	0x08005fe9
 8005f24:	08005fe9 	.word	0x08005fe9
 8005f28:	08005f9b 	.word	0x08005f9b
 8005f2c:	08005fe9 	.word	0x08005fe9
 8005f30:	08005fe9 	.word	0x08005fe9
 8005f34:	08005fe9 	.word	0x08005fe9
 8005f38:	08005fe9 	.word	0x08005fe9
 8005f3c:	08005fe9 	.word	0x08005fe9
 8005f40:	08005fe9 	.word	0x08005fe9
 8005f44:	08005fe9 	.word	0x08005fe9
 8005f48:	08005fe9 	.word	0x08005fe9
 8005f4c:	08005fe9 	.word	0x08005fe9
 8005f50:	08005fe9 	.word	0x08005fe9
 8005f54:	08005fe9 	.word	0x08005fe9
 8005f58:	08005fe9 	.word	0x08005fe9
 8005f5c:	08005fe9 	.word	0x08005fe9
 8005f60:	08005fe9 	.word	0x08005fe9
 8005f64:	08005fe9 	.word	0x08005fe9
 8005f68:	08005fdb 	.word	0x08005fdb
 8005f6c:	2b40      	cmp	r3, #64	@ 0x40
 8005f6e:	d037      	beq.n	8005fe0 <UART_SetConfig+0x6bc>
 8005f70:	e03a      	b.n	8005fe8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005f72:	f7fe fc8b 	bl	800488c <HAL_RCCEx_GetD3PCLK1Freq>
 8005f76:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005f78:	e03c      	b.n	8005ff4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f7fe fc9a 	bl	80048b8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f88:	e034      	b.n	8005ff4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f8a:	f107 0318 	add.w	r3, r7, #24
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f7fe fde6 	bl	8004b60 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005f94:	69fb      	ldr	r3, [r7, #28]
 8005f96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f98:	e02c      	b.n	8005ff4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f9a:	4b09      	ldr	r3, [pc, #36]	@ (8005fc0 <UART_SetConfig+0x69c>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f003 0320 	and.w	r3, r3, #32
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d016      	beq.n	8005fd4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005fa6:	4b06      	ldr	r3, [pc, #24]	@ (8005fc0 <UART_SetConfig+0x69c>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	08db      	lsrs	r3, r3, #3
 8005fac:	f003 0303 	and.w	r3, r3, #3
 8005fb0:	4a07      	ldr	r2, [pc, #28]	@ (8005fd0 <UART_SetConfig+0x6ac>)
 8005fb2:	fa22 f303 	lsr.w	r3, r2, r3
 8005fb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005fb8:	e01c      	b.n	8005ff4 <UART_SetConfig+0x6d0>
 8005fba:	bf00      	nop
 8005fbc:	40011400 	.word	0x40011400
 8005fc0:	58024400 	.word	0x58024400
 8005fc4:	40007800 	.word	0x40007800
 8005fc8:	40007c00 	.word	0x40007c00
 8005fcc:	58000c00 	.word	0x58000c00
 8005fd0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005fd4:	4b9d      	ldr	r3, [pc, #628]	@ (800624c <UART_SetConfig+0x928>)
 8005fd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005fd8:	e00c      	b.n	8005ff4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005fda:	4b9d      	ldr	r3, [pc, #628]	@ (8006250 <UART_SetConfig+0x92c>)
 8005fdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005fde:	e009      	b.n	8005ff4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fe0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005fe4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005fe6:	e005      	b.n	8005ff4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005fec:	2301      	movs	r3, #1
 8005fee:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005ff2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005ff4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	f000 81de 	beq.w	80063b8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006000:	4a94      	ldr	r2, [pc, #592]	@ (8006254 <UART_SetConfig+0x930>)
 8006002:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006006:	461a      	mov	r2, r3
 8006008:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800600a:	fbb3 f3f2 	udiv	r3, r3, r2
 800600e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	685a      	ldr	r2, [r3, #4]
 8006014:	4613      	mov	r3, r2
 8006016:	005b      	lsls	r3, r3, #1
 8006018:	4413      	add	r3, r2
 800601a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800601c:	429a      	cmp	r2, r3
 800601e:	d305      	bcc.n	800602c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006026:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006028:	429a      	cmp	r2, r3
 800602a:	d903      	bls.n	8006034 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800602c:	2301      	movs	r3, #1
 800602e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006032:	e1c1      	b.n	80063b8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006034:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006036:	2200      	movs	r2, #0
 8006038:	60bb      	str	r3, [r7, #8]
 800603a:	60fa      	str	r2, [r7, #12]
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006040:	4a84      	ldr	r2, [pc, #528]	@ (8006254 <UART_SetConfig+0x930>)
 8006042:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006046:	b29b      	uxth	r3, r3
 8006048:	2200      	movs	r2, #0
 800604a:	603b      	str	r3, [r7, #0]
 800604c:	607a      	str	r2, [r7, #4]
 800604e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006052:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006056:	f7fa f99b 	bl	8000390 <__aeabi_uldivmod>
 800605a:	4602      	mov	r2, r0
 800605c:	460b      	mov	r3, r1
 800605e:	4610      	mov	r0, r2
 8006060:	4619      	mov	r1, r3
 8006062:	f04f 0200 	mov.w	r2, #0
 8006066:	f04f 0300 	mov.w	r3, #0
 800606a:	020b      	lsls	r3, r1, #8
 800606c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006070:	0202      	lsls	r2, r0, #8
 8006072:	6979      	ldr	r1, [r7, #20]
 8006074:	6849      	ldr	r1, [r1, #4]
 8006076:	0849      	lsrs	r1, r1, #1
 8006078:	2000      	movs	r0, #0
 800607a:	460c      	mov	r4, r1
 800607c:	4605      	mov	r5, r0
 800607e:	eb12 0804 	adds.w	r8, r2, r4
 8006082:	eb43 0905 	adc.w	r9, r3, r5
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	2200      	movs	r2, #0
 800608c:	469a      	mov	sl, r3
 800608e:	4693      	mov	fp, r2
 8006090:	4652      	mov	r2, sl
 8006092:	465b      	mov	r3, fp
 8006094:	4640      	mov	r0, r8
 8006096:	4649      	mov	r1, r9
 8006098:	f7fa f97a 	bl	8000390 <__aeabi_uldivmod>
 800609c:	4602      	mov	r2, r0
 800609e:	460b      	mov	r3, r1
 80060a0:	4613      	mov	r3, r2
 80060a2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80060a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80060aa:	d308      	bcc.n	80060be <UART_SetConfig+0x79a>
 80060ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80060b2:	d204      	bcs.n	80060be <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80060ba:	60da      	str	r2, [r3, #12]
 80060bc:	e17c      	b.n	80063b8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80060c4:	e178      	b.n	80063b8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	69db      	ldr	r3, [r3, #28]
 80060ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80060ce:	f040 80c5 	bne.w	800625c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80060d2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80060d6:	2b20      	cmp	r3, #32
 80060d8:	dc48      	bgt.n	800616c <UART_SetConfig+0x848>
 80060da:	2b00      	cmp	r3, #0
 80060dc:	db7b      	blt.n	80061d6 <UART_SetConfig+0x8b2>
 80060de:	2b20      	cmp	r3, #32
 80060e0:	d879      	bhi.n	80061d6 <UART_SetConfig+0x8b2>
 80060e2:	a201      	add	r2, pc, #4	@ (adr r2, 80060e8 <UART_SetConfig+0x7c4>)
 80060e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060e8:	08006173 	.word	0x08006173
 80060ec:	0800617b 	.word	0x0800617b
 80060f0:	080061d7 	.word	0x080061d7
 80060f4:	080061d7 	.word	0x080061d7
 80060f8:	08006183 	.word	0x08006183
 80060fc:	080061d7 	.word	0x080061d7
 8006100:	080061d7 	.word	0x080061d7
 8006104:	080061d7 	.word	0x080061d7
 8006108:	08006193 	.word	0x08006193
 800610c:	080061d7 	.word	0x080061d7
 8006110:	080061d7 	.word	0x080061d7
 8006114:	080061d7 	.word	0x080061d7
 8006118:	080061d7 	.word	0x080061d7
 800611c:	080061d7 	.word	0x080061d7
 8006120:	080061d7 	.word	0x080061d7
 8006124:	080061d7 	.word	0x080061d7
 8006128:	080061a3 	.word	0x080061a3
 800612c:	080061d7 	.word	0x080061d7
 8006130:	080061d7 	.word	0x080061d7
 8006134:	080061d7 	.word	0x080061d7
 8006138:	080061d7 	.word	0x080061d7
 800613c:	080061d7 	.word	0x080061d7
 8006140:	080061d7 	.word	0x080061d7
 8006144:	080061d7 	.word	0x080061d7
 8006148:	080061d7 	.word	0x080061d7
 800614c:	080061d7 	.word	0x080061d7
 8006150:	080061d7 	.word	0x080061d7
 8006154:	080061d7 	.word	0x080061d7
 8006158:	080061d7 	.word	0x080061d7
 800615c:	080061d7 	.word	0x080061d7
 8006160:	080061d7 	.word	0x080061d7
 8006164:	080061d7 	.word	0x080061d7
 8006168:	080061c9 	.word	0x080061c9
 800616c:	2b40      	cmp	r3, #64	@ 0x40
 800616e:	d02e      	beq.n	80061ce <UART_SetConfig+0x8aa>
 8006170:	e031      	b.n	80061d6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006172:	f7fd f913 	bl	800339c <HAL_RCC_GetPCLK1Freq>
 8006176:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006178:	e033      	b.n	80061e2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800617a:	f7fd f925 	bl	80033c8 <HAL_RCC_GetPCLK2Freq>
 800617e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006180:	e02f      	b.n	80061e2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006182:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006186:	4618      	mov	r0, r3
 8006188:	f7fe fb96 	bl	80048b8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800618c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800618e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006190:	e027      	b.n	80061e2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006192:	f107 0318 	add.w	r3, r7, #24
 8006196:	4618      	mov	r0, r3
 8006198:	f7fe fce2 	bl	8004b60 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800619c:	69fb      	ldr	r3, [r7, #28]
 800619e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061a0:	e01f      	b.n	80061e2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80061a2:	4b2d      	ldr	r3, [pc, #180]	@ (8006258 <UART_SetConfig+0x934>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f003 0320 	and.w	r3, r3, #32
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d009      	beq.n	80061c2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80061ae:	4b2a      	ldr	r3, [pc, #168]	@ (8006258 <UART_SetConfig+0x934>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	08db      	lsrs	r3, r3, #3
 80061b4:	f003 0303 	and.w	r3, r3, #3
 80061b8:	4a24      	ldr	r2, [pc, #144]	@ (800624c <UART_SetConfig+0x928>)
 80061ba:	fa22 f303 	lsr.w	r3, r2, r3
 80061be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80061c0:	e00f      	b.n	80061e2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80061c2:	4b22      	ldr	r3, [pc, #136]	@ (800624c <UART_SetConfig+0x928>)
 80061c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061c6:	e00c      	b.n	80061e2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80061c8:	4b21      	ldr	r3, [pc, #132]	@ (8006250 <UART_SetConfig+0x92c>)
 80061ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061cc:	e009      	b.n	80061e2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80061d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061d4:	e005      	b.n	80061e2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80061d6:	2300      	movs	r3, #0
 80061d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80061da:	2301      	movs	r3, #1
 80061dc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80061e0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80061e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	f000 80e7 	beq.w	80063b8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061ee:	4a19      	ldr	r2, [pc, #100]	@ (8006254 <UART_SetConfig+0x930>)
 80061f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061f4:	461a      	mov	r2, r3
 80061f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80061fc:	005a      	lsls	r2, r3, #1
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	085b      	lsrs	r3, r3, #1
 8006204:	441a      	add	r2, r3
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	fbb2 f3f3 	udiv	r3, r2, r3
 800620e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006210:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006212:	2b0f      	cmp	r3, #15
 8006214:	d916      	bls.n	8006244 <UART_SetConfig+0x920>
 8006216:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006218:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800621c:	d212      	bcs.n	8006244 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800621e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006220:	b29b      	uxth	r3, r3
 8006222:	f023 030f 	bic.w	r3, r3, #15
 8006226:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006228:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800622a:	085b      	lsrs	r3, r3, #1
 800622c:	b29b      	uxth	r3, r3
 800622e:	f003 0307 	and.w	r3, r3, #7
 8006232:	b29a      	uxth	r2, r3
 8006234:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006236:	4313      	orrs	r3, r2
 8006238:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006240:	60da      	str	r2, [r3, #12]
 8006242:	e0b9      	b.n	80063b8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006244:	2301      	movs	r3, #1
 8006246:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800624a:	e0b5      	b.n	80063b8 <UART_SetConfig+0xa94>
 800624c:	03d09000 	.word	0x03d09000
 8006250:	003d0900 	.word	0x003d0900
 8006254:	08009440 	.word	0x08009440
 8006258:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800625c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006260:	2b20      	cmp	r3, #32
 8006262:	dc49      	bgt.n	80062f8 <UART_SetConfig+0x9d4>
 8006264:	2b00      	cmp	r3, #0
 8006266:	db7c      	blt.n	8006362 <UART_SetConfig+0xa3e>
 8006268:	2b20      	cmp	r3, #32
 800626a:	d87a      	bhi.n	8006362 <UART_SetConfig+0xa3e>
 800626c:	a201      	add	r2, pc, #4	@ (adr r2, 8006274 <UART_SetConfig+0x950>)
 800626e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006272:	bf00      	nop
 8006274:	080062ff 	.word	0x080062ff
 8006278:	08006307 	.word	0x08006307
 800627c:	08006363 	.word	0x08006363
 8006280:	08006363 	.word	0x08006363
 8006284:	0800630f 	.word	0x0800630f
 8006288:	08006363 	.word	0x08006363
 800628c:	08006363 	.word	0x08006363
 8006290:	08006363 	.word	0x08006363
 8006294:	0800631f 	.word	0x0800631f
 8006298:	08006363 	.word	0x08006363
 800629c:	08006363 	.word	0x08006363
 80062a0:	08006363 	.word	0x08006363
 80062a4:	08006363 	.word	0x08006363
 80062a8:	08006363 	.word	0x08006363
 80062ac:	08006363 	.word	0x08006363
 80062b0:	08006363 	.word	0x08006363
 80062b4:	0800632f 	.word	0x0800632f
 80062b8:	08006363 	.word	0x08006363
 80062bc:	08006363 	.word	0x08006363
 80062c0:	08006363 	.word	0x08006363
 80062c4:	08006363 	.word	0x08006363
 80062c8:	08006363 	.word	0x08006363
 80062cc:	08006363 	.word	0x08006363
 80062d0:	08006363 	.word	0x08006363
 80062d4:	08006363 	.word	0x08006363
 80062d8:	08006363 	.word	0x08006363
 80062dc:	08006363 	.word	0x08006363
 80062e0:	08006363 	.word	0x08006363
 80062e4:	08006363 	.word	0x08006363
 80062e8:	08006363 	.word	0x08006363
 80062ec:	08006363 	.word	0x08006363
 80062f0:	08006363 	.word	0x08006363
 80062f4:	08006355 	.word	0x08006355
 80062f8:	2b40      	cmp	r3, #64	@ 0x40
 80062fa:	d02e      	beq.n	800635a <UART_SetConfig+0xa36>
 80062fc:	e031      	b.n	8006362 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062fe:	f7fd f84d 	bl	800339c <HAL_RCC_GetPCLK1Freq>
 8006302:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006304:	e033      	b.n	800636e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006306:	f7fd f85f 	bl	80033c8 <HAL_RCC_GetPCLK2Freq>
 800630a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800630c:	e02f      	b.n	800636e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800630e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006312:	4618      	mov	r0, r3
 8006314:	f7fe fad0 	bl	80048b8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800631a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800631c:	e027      	b.n	800636e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800631e:	f107 0318 	add.w	r3, r7, #24
 8006322:	4618      	mov	r0, r3
 8006324:	f7fe fc1c 	bl	8004b60 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006328:	69fb      	ldr	r3, [r7, #28]
 800632a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800632c:	e01f      	b.n	800636e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800632e:	4b2d      	ldr	r3, [pc, #180]	@ (80063e4 <UART_SetConfig+0xac0>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f003 0320 	and.w	r3, r3, #32
 8006336:	2b00      	cmp	r3, #0
 8006338:	d009      	beq.n	800634e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800633a:	4b2a      	ldr	r3, [pc, #168]	@ (80063e4 <UART_SetConfig+0xac0>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	08db      	lsrs	r3, r3, #3
 8006340:	f003 0303 	and.w	r3, r3, #3
 8006344:	4a28      	ldr	r2, [pc, #160]	@ (80063e8 <UART_SetConfig+0xac4>)
 8006346:	fa22 f303 	lsr.w	r3, r2, r3
 800634a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800634c:	e00f      	b.n	800636e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800634e:	4b26      	ldr	r3, [pc, #152]	@ (80063e8 <UART_SetConfig+0xac4>)
 8006350:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006352:	e00c      	b.n	800636e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006354:	4b25      	ldr	r3, [pc, #148]	@ (80063ec <UART_SetConfig+0xac8>)
 8006356:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006358:	e009      	b.n	800636e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800635a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800635e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006360:	e005      	b.n	800636e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8006362:	2300      	movs	r3, #0
 8006364:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006366:	2301      	movs	r3, #1
 8006368:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800636c:	bf00      	nop
    }

    if (pclk != 0U)
 800636e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006370:	2b00      	cmp	r3, #0
 8006372:	d021      	beq.n	80063b8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006378:	4a1d      	ldr	r2, [pc, #116]	@ (80063f0 <UART_SetConfig+0xacc>)
 800637a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800637e:	461a      	mov	r2, r3
 8006380:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006382:	fbb3 f2f2 	udiv	r2, r3, r2
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	085b      	lsrs	r3, r3, #1
 800638c:	441a      	add	r2, r3
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	fbb2 f3f3 	udiv	r3, r2, r3
 8006396:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006398:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800639a:	2b0f      	cmp	r3, #15
 800639c:	d909      	bls.n	80063b2 <UART_SetConfig+0xa8e>
 800639e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063a4:	d205      	bcs.n	80063b2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80063a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063a8:	b29a      	uxth	r2, r3
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	60da      	str	r2, [r3, #12]
 80063b0:	e002      	b.n	80063b8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80063b2:	2301      	movs	r3, #1
 80063b4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	2201      	movs	r2, #1
 80063bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	2201      	movs	r2, #1
 80063c4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	2200      	movs	r2, #0
 80063cc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	2200      	movs	r2, #0
 80063d2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80063d4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80063d8:	4618      	mov	r0, r3
 80063da:	3748      	adds	r7, #72	@ 0x48
 80063dc:	46bd      	mov	sp, r7
 80063de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80063e2:	bf00      	nop
 80063e4:	58024400 	.word	0x58024400
 80063e8:	03d09000 	.word	0x03d09000
 80063ec:	003d0900 	.word	0x003d0900
 80063f0:	08009440 	.word	0x08009440

080063f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b083      	sub	sp, #12
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006400:	f003 0308 	and.w	r3, r3, #8
 8006404:	2b00      	cmp	r3, #0
 8006406:	d00a      	beq.n	800641e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	430a      	orrs	r2, r1
 800641c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006422:	f003 0301 	and.w	r3, r3, #1
 8006426:	2b00      	cmp	r3, #0
 8006428:	d00a      	beq.n	8006440 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	430a      	orrs	r2, r1
 800643e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006444:	f003 0302 	and.w	r3, r3, #2
 8006448:	2b00      	cmp	r3, #0
 800644a:	d00a      	beq.n	8006462 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	430a      	orrs	r2, r1
 8006460:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006466:	f003 0304 	and.w	r3, r3, #4
 800646a:	2b00      	cmp	r3, #0
 800646c:	d00a      	beq.n	8006484 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	430a      	orrs	r2, r1
 8006482:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006488:	f003 0310 	and.w	r3, r3, #16
 800648c:	2b00      	cmp	r3, #0
 800648e:	d00a      	beq.n	80064a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	430a      	orrs	r2, r1
 80064a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064aa:	f003 0320 	and.w	r3, r3, #32
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d00a      	beq.n	80064c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	430a      	orrs	r2, r1
 80064c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d01a      	beq.n	800650a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	430a      	orrs	r2, r1
 80064e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80064f2:	d10a      	bne.n	800650a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	430a      	orrs	r2, r1
 8006508:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800650e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006512:	2b00      	cmp	r3, #0
 8006514:	d00a      	beq.n	800652c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	430a      	orrs	r2, r1
 800652a:	605a      	str	r2, [r3, #4]
  }
}
 800652c:	bf00      	nop
 800652e:	370c      	adds	r7, #12
 8006530:	46bd      	mov	sp, r7
 8006532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006536:	4770      	bx	lr

08006538 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b098      	sub	sp, #96	@ 0x60
 800653c:	af02      	add	r7, sp, #8
 800653e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2200      	movs	r2, #0
 8006544:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006548:	f7fb fbf4 	bl	8001d34 <HAL_GetTick>
 800654c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f003 0308 	and.w	r3, r3, #8
 8006558:	2b08      	cmp	r3, #8
 800655a:	d12f      	bne.n	80065bc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800655c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006560:	9300      	str	r3, [sp, #0]
 8006562:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006564:	2200      	movs	r2, #0
 8006566:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f000 f88e 	bl	800668c <UART_WaitOnFlagUntilTimeout>
 8006570:	4603      	mov	r3, r0
 8006572:	2b00      	cmp	r3, #0
 8006574:	d022      	beq.n	80065bc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800657c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800657e:	e853 3f00 	ldrex	r3, [r3]
 8006582:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006584:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006586:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800658a:	653b      	str	r3, [r7, #80]	@ 0x50
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	461a      	mov	r2, r3
 8006592:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006594:	647b      	str	r3, [r7, #68]	@ 0x44
 8006596:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006598:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800659a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800659c:	e841 2300 	strex	r3, r2, [r1]
 80065a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80065a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d1e6      	bne.n	8006576 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2220      	movs	r2, #32
 80065ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2200      	movs	r2, #0
 80065b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065b8:	2303      	movs	r3, #3
 80065ba:	e063      	b.n	8006684 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f003 0304 	and.w	r3, r3, #4
 80065c6:	2b04      	cmp	r3, #4
 80065c8:	d149      	bne.n	800665e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065ca:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80065ce:	9300      	str	r3, [sp, #0]
 80065d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80065d2:	2200      	movs	r2, #0
 80065d4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f000 f857 	bl	800668c <UART_WaitOnFlagUntilTimeout>
 80065de:	4603      	mov	r3, r0
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d03c      	beq.n	800665e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ec:	e853 3f00 	ldrex	r3, [r3]
 80065f0:	623b      	str	r3, [r7, #32]
   return(result);
 80065f2:	6a3b      	ldr	r3, [r7, #32]
 80065f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80065f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	461a      	mov	r2, r3
 8006600:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006602:	633b      	str	r3, [r7, #48]	@ 0x30
 8006604:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006606:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006608:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800660a:	e841 2300 	strex	r3, r2, [r1]
 800660e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006612:	2b00      	cmp	r3, #0
 8006614:	d1e6      	bne.n	80065e4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	3308      	adds	r3, #8
 800661c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	e853 3f00 	ldrex	r3, [r3]
 8006624:	60fb      	str	r3, [r7, #12]
   return(result);
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	f023 0301 	bic.w	r3, r3, #1
 800662c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	3308      	adds	r3, #8
 8006634:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006636:	61fa      	str	r2, [r7, #28]
 8006638:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800663a:	69b9      	ldr	r1, [r7, #24]
 800663c:	69fa      	ldr	r2, [r7, #28]
 800663e:	e841 2300 	strex	r3, r2, [r1]
 8006642:	617b      	str	r3, [r7, #20]
   return(result);
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d1e5      	bne.n	8006616 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2220      	movs	r2, #32
 800664e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2200      	movs	r2, #0
 8006656:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800665a:	2303      	movs	r3, #3
 800665c:	e012      	b.n	8006684 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2220      	movs	r2, #32
 8006662:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2220      	movs	r2, #32
 800666a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2200      	movs	r2, #0
 8006672:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2200      	movs	r2, #0
 8006678:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2200      	movs	r2, #0
 800667e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006682:	2300      	movs	r3, #0
}
 8006684:	4618      	mov	r0, r3
 8006686:	3758      	adds	r7, #88	@ 0x58
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}

0800668c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b084      	sub	sp, #16
 8006690:	af00      	add	r7, sp, #0
 8006692:	60f8      	str	r0, [r7, #12]
 8006694:	60b9      	str	r1, [r7, #8]
 8006696:	603b      	str	r3, [r7, #0]
 8006698:	4613      	mov	r3, r2
 800669a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800669c:	e04f      	b.n	800673e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800669e:	69bb      	ldr	r3, [r7, #24]
 80066a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066a4:	d04b      	beq.n	800673e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066a6:	f7fb fb45 	bl	8001d34 <HAL_GetTick>
 80066aa:	4602      	mov	r2, r0
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	1ad3      	subs	r3, r2, r3
 80066b0:	69ba      	ldr	r2, [r7, #24]
 80066b2:	429a      	cmp	r2, r3
 80066b4:	d302      	bcc.n	80066bc <UART_WaitOnFlagUntilTimeout+0x30>
 80066b6:	69bb      	ldr	r3, [r7, #24]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d101      	bne.n	80066c0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80066bc:	2303      	movs	r3, #3
 80066be:	e04e      	b.n	800675e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f003 0304 	and.w	r3, r3, #4
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d037      	beq.n	800673e <UART_WaitOnFlagUntilTimeout+0xb2>
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	2b80      	cmp	r3, #128	@ 0x80
 80066d2:	d034      	beq.n	800673e <UART_WaitOnFlagUntilTimeout+0xb2>
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	2b40      	cmp	r3, #64	@ 0x40
 80066d8:	d031      	beq.n	800673e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	69db      	ldr	r3, [r3, #28]
 80066e0:	f003 0308 	and.w	r3, r3, #8
 80066e4:	2b08      	cmp	r3, #8
 80066e6:	d110      	bne.n	800670a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	2208      	movs	r2, #8
 80066ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80066f0:	68f8      	ldr	r0, [r7, #12]
 80066f2:	f000 f839 	bl	8006768 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2208      	movs	r2, #8
 80066fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2200      	movs	r2, #0
 8006702:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006706:	2301      	movs	r3, #1
 8006708:	e029      	b.n	800675e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	69db      	ldr	r3, [r3, #28]
 8006710:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006714:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006718:	d111      	bne.n	800673e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006722:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006724:	68f8      	ldr	r0, [r7, #12]
 8006726:	f000 f81f 	bl	8006768 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2220      	movs	r2, #32
 800672e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2200      	movs	r2, #0
 8006736:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800673a:	2303      	movs	r3, #3
 800673c:	e00f      	b.n	800675e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	69da      	ldr	r2, [r3, #28]
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	4013      	ands	r3, r2
 8006748:	68ba      	ldr	r2, [r7, #8]
 800674a:	429a      	cmp	r2, r3
 800674c:	bf0c      	ite	eq
 800674e:	2301      	moveq	r3, #1
 8006750:	2300      	movne	r3, #0
 8006752:	b2db      	uxtb	r3, r3
 8006754:	461a      	mov	r2, r3
 8006756:	79fb      	ldrb	r3, [r7, #7]
 8006758:	429a      	cmp	r2, r3
 800675a:	d0a0      	beq.n	800669e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800675c:	2300      	movs	r3, #0
}
 800675e:	4618      	mov	r0, r3
 8006760:	3710      	adds	r7, #16
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}
	...

08006768 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006768:	b480      	push	{r7}
 800676a:	b095      	sub	sp, #84	@ 0x54
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006776:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006778:	e853 3f00 	ldrex	r3, [r3]
 800677c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800677e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006780:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006784:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	461a      	mov	r2, r3
 800678c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800678e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006790:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006792:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006794:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006796:	e841 2300 	strex	r3, r2, [r1]
 800679a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800679c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d1e6      	bne.n	8006770 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	3308      	adds	r3, #8
 80067a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067aa:	6a3b      	ldr	r3, [r7, #32]
 80067ac:	e853 3f00 	ldrex	r3, [r3]
 80067b0:	61fb      	str	r3, [r7, #28]
   return(result);
 80067b2:	69fa      	ldr	r2, [r7, #28]
 80067b4:	4b1e      	ldr	r3, [pc, #120]	@ (8006830 <UART_EndRxTransfer+0xc8>)
 80067b6:	4013      	ands	r3, r2
 80067b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	3308      	adds	r3, #8
 80067c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80067c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80067c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80067c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80067ca:	e841 2300 	strex	r3, r2, [r1]
 80067ce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80067d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d1e5      	bne.n	80067a2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80067da:	2b01      	cmp	r3, #1
 80067dc:	d118      	bne.n	8006810 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	e853 3f00 	ldrex	r3, [r3]
 80067ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	f023 0310 	bic.w	r3, r3, #16
 80067f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	461a      	mov	r2, r3
 80067fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80067fc:	61bb      	str	r3, [r7, #24]
 80067fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006800:	6979      	ldr	r1, [r7, #20]
 8006802:	69ba      	ldr	r2, [r7, #24]
 8006804:	e841 2300 	strex	r3, r2, [r1]
 8006808:	613b      	str	r3, [r7, #16]
   return(result);
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d1e6      	bne.n	80067de <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2220      	movs	r2, #32
 8006814:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2200      	movs	r2, #0
 800681c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2200      	movs	r2, #0
 8006822:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006824:	bf00      	nop
 8006826:	3754      	adds	r7, #84	@ 0x54
 8006828:	46bd      	mov	sp, r7
 800682a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682e:	4770      	bx	lr
 8006830:	effffffe 	.word	0xeffffffe

08006834 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006834:	b480      	push	{r7}
 8006836:	b085      	sub	sp, #20
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006842:	2b01      	cmp	r3, #1
 8006844:	d101      	bne.n	800684a <HAL_UARTEx_DisableFifoMode+0x16>
 8006846:	2302      	movs	r3, #2
 8006848:	e027      	b.n	800689a <HAL_UARTEx_DisableFifoMode+0x66>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2201      	movs	r2, #1
 800684e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2224      	movs	r2, #36	@ 0x24
 8006856:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	681a      	ldr	r2, [r3, #0]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f022 0201 	bic.w	r2, r2, #1
 8006870:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006878:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2200      	movs	r2, #0
 800687e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	68fa      	ldr	r2, [r7, #12]
 8006886:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2220      	movs	r2, #32
 800688c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2200      	movs	r2, #0
 8006894:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006898:	2300      	movs	r3, #0
}
 800689a:	4618      	mov	r0, r3
 800689c:	3714      	adds	r7, #20
 800689e:	46bd      	mov	sp, r7
 80068a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a4:	4770      	bx	lr

080068a6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80068a6:	b580      	push	{r7, lr}
 80068a8:	b084      	sub	sp, #16
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	6078      	str	r0, [r7, #4]
 80068ae:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80068b6:	2b01      	cmp	r3, #1
 80068b8:	d101      	bne.n	80068be <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80068ba:	2302      	movs	r3, #2
 80068bc:	e02d      	b.n	800691a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2201      	movs	r2, #1
 80068c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2224      	movs	r2, #36	@ 0x24
 80068ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	681a      	ldr	r2, [r3, #0]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f022 0201 	bic.w	r2, r2, #1
 80068e4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	689b      	ldr	r3, [r3, #8]
 80068ec:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	683a      	ldr	r2, [r7, #0]
 80068f6:	430a      	orrs	r2, r1
 80068f8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f000 f850 	bl	80069a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	68fa      	ldr	r2, [r7, #12]
 8006906:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2220      	movs	r2, #32
 800690c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2200      	movs	r2, #0
 8006914:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006918:	2300      	movs	r3, #0
}
 800691a:	4618      	mov	r0, r3
 800691c:	3710      	adds	r7, #16
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}

08006922 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006922:	b580      	push	{r7, lr}
 8006924:	b084      	sub	sp, #16
 8006926:	af00      	add	r7, sp, #0
 8006928:	6078      	str	r0, [r7, #4]
 800692a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006932:	2b01      	cmp	r3, #1
 8006934:	d101      	bne.n	800693a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006936:	2302      	movs	r3, #2
 8006938:	e02d      	b.n	8006996 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2201      	movs	r2, #1
 800693e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2224      	movs	r2, #36	@ 0x24
 8006946:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	681a      	ldr	r2, [r3, #0]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f022 0201 	bic.w	r2, r2, #1
 8006960:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	683a      	ldr	r2, [r7, #0]
 8006972:	430a      	orrs	r2, r1
 8006974:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f000 f812 	bl	80069a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	68fa      	ldr	r2, [r7, #12]
 8006982:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2220      	movs	r2, #32
 8006988:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006994:	2300      	movs	r3, #0
}
 8006996:	4618      	mov	r0, r3
 8006998:	3710      	adds	r7, #16
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}
	...

080069a0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b085      	sub	sp, #20
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d108      	bne.n	80069c2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2201      	movs	r2, #1
 80069b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2201      	movs	r2, #1
 80069bc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80069c0:	e031      	b.n	8006a26 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80069c2:	2310      	movs	r3, #16
 80069c4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80069c6:	2310      	movs	r3, #16
 80069c8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	689b      	ldr	r3, [r3, #8]
 80069d0:	0e5b      	lsrs	r3, r3, #25
 80069d2:	b2db      	uxtb	r3, r3
 80069d4:	f003 0307 	and.w	r3, r3, #7
 80069d8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	689b      	ldr	r3, [r3, #8]
 80069e0:	0f5b      	lsrs	r3, r3, #29
 80069e2:	b2db      	uxtb	r3, r3
 80069e4:	f003 0307 	and.w	r3, r3, #7
 80069e8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80069ea:	7bbb      	ldrb	r3, [r7, #14]
 80069ec:	7b3a      	ldrb	r2, [r7, #12]
 80069ee:	4911      	ldr	r1, [pc, #68]	@ (8006a34 <UARTEx_SetNbDataToProcess+0x94>)
 80069f0:	5c8a      	ldrb	r2, [r1, r2]
 80069f2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80069f6:	7b3a      	ldrb	r2, [r7, #12]
 80069f8:	490f      	ldr	r1, [pc, #60]	@ (8006a38 <UARTEx_SetNbDataToProcess+0x98>)
 80069fa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80069fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8006a00:	b29a      	uxth	r2, r3
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006a08:	7bfb      	ldrb	r3, [r7, #15]
 8006a0a:	7b7a      	ldrb	r2, [r7, #13]
 8006a0c:	4909      	ldr	r1, [pc, #36]	@ (8006a34 <UARTEx_SetNbDataToProcess+0x94>)
 8006a0e:	5c8a      	ldrb	r2, [r1, r2]
 8006a10:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006a14:	7b7a      	ldrb	r2, [r7, #13]
 8006a16:	4908      	ldr	r1, [pc, #32]	@ (8006a38 <UARTEx_SetNbDataToProcess+0x98>)
 8006a18:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006a1a:	fb93 f3f2 	sdiv	r3, r3, r2
 8006a1e:	b29a      	uxth	r2, r3
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006a26:	bf00      	nop
 8006a28:	3714      	adds	r7, #20
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a30:	4770      	bx	lr
 8006a32:	bf00      	nop
 8006a34:	08009458 	.word	0x08009458
 8006a38:	08009460 	.word	0x08009460

08006a3c <__cvt>:
 8006a3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a3e:	ed2d 8b02 	vpush	{d8}
 8006a42:	eeb0 8b40 	vmov.f64	d8, d0
 8006a46:	b085      	sub	sp, #20
 8006a48:	4617      	mov	r7, r2
 8006a4a:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8006a4c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006a4e:	ee18 2a90 	vmov	r2, s17
 8006a52:	f025 0520 	bic.w	r5, r5, #32
 8006a56:	2a00      	cmp	r2, #0
 8006a58:	bfb6      	itet	lt
 8006a5a:	222d      	movlt	r2, #45	@ 0x2d
 8006a5c:	2200      	movge	r2, #0
 8006a5e:	eeb1 8b40 	vneglt.f64	d8, d0
 8006a62:	2d46      	cmp	r5, #70	@ 0x46
 8006a64:	460c      	mov	r4, r1
 8006a66:	701a      	strb	r2, [r3, #0]
 8006a68:	d004      	beq.n	8006a74 <__cvt+0x38>
 8006a6a:	2d45      	cmp	r5, #69	@ 0x45
 8006a6c:	d100      	bne.n	8006a70 <__cvt+0x34>
 8006a6e:	3401      	adds	r4, #1
 8006a70:	2102      	movs	r1, #2
 8006a72:	e000      	b.n	8006a76 <__cvt+0x3a>
 8006a74:	2103      	movs	r1, #3
 8006a76:	ab03      	add	r3, sp, #12
 8006a78:	9301      	str	r3, [sp, #4]
 8006a7a:	ab02      	add	r3, sp, #8
 8006a7c:	9300      	str	r3, [sp, #0]
 8006a7e:	4622      	mov	r2, r4
 8006a80:	4633      	mov	r3, r6
 8006a82:	eeb0 0b48 	vmov.f64	d0, d8
 8006a86:	f000 ff1f 	bl	80078c8 <_dtoa_r>
 8006a8a:	2d47      	cmp	r5, #71	@ 0x47
 8006a8c:	d114      	bne.n	8006ab8 <__cvt+0x7c>
 8006a8e:	07fb      	lsls	r3, r7, #31
 8006a90:	d50a      	bpl.n	8006aa8 <__cvt+0x6c>
 8006a92:	1902      	adds	r2, r0, r4
 8006a94:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006a98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a9c:	bf08      	it	eq
 8006a9e:	9203      	streq	r2, [sp, #12]
 8006aa0:	2130      	movs	r1, #48	@ 0x30
 8006aa2:	9b03      	ldr	r3, [sp, #12]
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d319      	bcc.n	8006adc <__cvt+0xa0>
 8006aa8:	9b03      	ldr	r3, [sp, #12]
 8006aaa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006aac:	1a1b      	subs	r3, r3, r0
 8006aae:	6013      	str	r3, [r2, #0]
 8006ab0:	b005      	add	sp, #20
 8006ab2:	ecbd 8b02 	vpop	{d8}
 8006ab6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ab8:	2d46      	cmp	r5, #70	@ 0x46
 8006aba:	eb00 0204 	add.w	r2, r0, r4
 8006abe:	d1e9      	bne.n	8006a94 <__cvt+0x58>
 8006ac0:	7803      	ldrb	r3, [r0, #0]
 8006ac2:	2b30      	cmp	r3, #48	@ 0x30
 8006ac4:	d107      	bne.n	8006ad6 <__cvt+0x9a>
 8006ac6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006aca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ace:	bf1c      	itt	ne
 8006ad0:	f1c4 0401 	rsbne	r4, r4, #1
 8006ad4:	6034      	strne	r4, [r6, #0]
 8006ad6:	6833      	ldr	r3, [r6, #0]
 8006ad8:	441a      	add	r2, r3
 8006ada:	e7db      	b.n	8006a94 <__cvt+0x58>
 8006adc:	1c5c      	adds	r4, r3, #1
 8006ade:	9403      	str	r4, [sp, #12]
 8006ae0:	7019      	strb	r1, [r3, #0]
 8006ae2:	e7de      	b.n	8006aa2 <__cvt+0x66>

08006ae4 <__exponent>:
 8006ae4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ae6:	2900      	cmp	r1, #0
 8006ae8:	bfba      	itte	lt
 8006aea:	4249      	neglt	r1, r1
 8006aec:	232d      	movlt	r3, #45	@ 0x2d
 8006aee:	232b      	movge	r3, #43	@ 0x2b
 8006af0:	2909      	cmp	r1, #9
 8006af2:	7002      	strb	r2, [r0, #0]
 8006af4:	7043      	strb	r3, [r0, #1]
 8006af6:	dd29      	ble.n	8006b4c <__exponent+0x68>
 8006af8:	f10d 0307 	add.w	r3, sp, #7
 8006afc:	461d      	mov	r5, r3
 8006afe:	270a      	movs	r7, #10
 8006b00:	461a      	mov	r2, r3
 8006b02:	fbb1 f6f7 	udiv	r6, r1, r7
 8006b06:	fb07 1416 	mls	r4, r7, r6, r1
 8006b0a:	3430      	adds	r4, #48	@ 0x30
 8006b0c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006b10:	460c      	mov	r4, r1
 8006b12:	2c63      	cmp	r4, #99	@ 0x63
 8006b14:	f103 33ff 	add.w	r3, r3, #4294967295
 8006b18:	4631      	mov	r1, r6
 8006b1a:	dcf1      	bgt.n	8006b00 <__exponent+0x1c>
 8006b1c:	3130      	adds	r1, #48	@ 0x30
 8006b1e:	1e94      	subs	r4, r2, #2
 8006b20:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006b24:	1c41      	adds	r1, r0, #1
 8006b26:	4623      	mov	r3, r4
 8006b28:	42ab      	cmp	r3, r5
 8006b2a:	d30a      	bcc.n	8006b42 <__exponent+0x5e>
 8006b2c:	f10d 0309 	add.w	r3, sp, #9
 8006b30:	1a9b      	subs	r3, r3, r2
 8006b32:	42ac      	cmp	r4, r5
 8006b34:	bf88      	it	hi
 8006b36:	2300      	movhi	r3, #0
 8006b38:	3302      	adds	r3, #2
 8006b3a:	4403      	add	r3, r0
 8006b3c:	1a18      	subs	r0, r3, r0
 8006b3e:	b003      	add	sp, #12
 8006b40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b42:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006b46:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006b4a:	e7ed      	b.n	8006b28 <__exponent+0x44>
 8006b4c:	2330      	movs	r3, #48	@ 0x30
 8006b4e:	3130      	adds	r1, #48	@ 0x30
 8006b50:	7083      	strb	r3, [r0, #2]
 8006b52:	70c1      	strb	r1, [r0, #3]
 8006b54:	1d03      	adds	r3, r0, #4
 8006b56:	e7f1      	b.n	8006b3c <__exponent+0x58>

08006b58 <_printf_float>:
 8006b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b5c:	b08d      	sub	sp, #52	@ 0x34
 8006b5e:	460c      	mov	r4, r1
 8006b60:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006b64:	4616      	mov	r6, r2
 8006b66:	461f      	mov	r7, r3
 8006b68:	4605      	mov	r5, r0
 8006b6a:	f000 fdad 	bl	80076c8 <_localeconv_r>
 8006b6e:	f8d0 b000 	ldr.w	fp, [r0]
 8006b72:	4658      	mov	r0, fp
 8006b74:	f7f9 fc04 	bl	8000380 <strlen>
 8006b78:	2300      	movs	r3, #0
 8006b7a:	930a      	str	r3, [sp, #40]	@ 0x28
 8006b7c:	f8d8 3000 	ldr.w	r3, [r8]
 8006b80:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006b84:	6822      	ldr	r2, [r4, #0]
 8006b86:	9005      	str	r0, [sp, #20]
 8006b88:	3307      	adds	r3, #7
 8006b8a:	f023 0307 	bic.w	r3, r3, #7
 8006b8e:	f103 0108 	add.w	r1, r3, #8
 8006b92:	f8c8 1000 	str.w	r1, [r8]
 8006b96:	ed93 0b00 	vldr	d0, [r3]
 8006b9a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8006df8 <_printf_float+0x2a0>
 8006b9e:	eeb0 7bc0 	vabs.f64	d7, d0
 8006ba2:	eeb4 7b46 	vcmp.f64	d7, d6
 8006ba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006baa:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8006bae:	dd24      	ble.n	8006bfa <_printf_float+0xa2>
 8006bb0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8006bb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bb8:	d502      	bpl.n	8006bc0 <_printf_float+0x68>
 8006bba:	232d      	movs	r3, #45	@ 0x2d
 8006bbc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006bc0:	498f      	ldr	r1, [pc, #572]	@ (8006e00 <_printf_float+0x2a8>)
 8006bc2:	4b90      	ldr	r3, [pc, #576]	@ (8006e04 <_printf_float+0x2ac>)
 8006bc4:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8006bc8:	bf8c      	ite	hi
 8006bca:	4688      	movhi	r8, r1
 8006bcc:	4698      	movls	r8, r3
 8006bce:	f022 0204 	bic.w	r2, r2, #4
 8006bd2:	2303      	movs	r3, #3
 8006bd4:	6123      	str	r3, [r4, #16]
 8006bd6:	6022      	str	r2, [r4, #0]
 8006bd8:	f04f 0a00 	mov.w	sl, #0
 8006bdc:	9700      	str	r7, [sp, #0]
 8006bde:	4633      	mov	r3, r6
 8006be0:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006be2:	4621      	mov	r1, r4
 8006be4:	4628      	mov	r0, r5
 8006be6:	f000 f9d1 	bl	8006f8c <_printf_common>
 8006bea:	3001      	adds	r0, #1
 8006bec:	f040 8089 	bne.w	8006d02 <_printf_float+0x1aa>
 8006bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8006bf4:	b00d      	add	sp, #52	@ 0x34
 8006bf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bfa:	eeb4 0b40 	vcmp.f64	d0, d0
 8006bfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c02:	d709      	bvc.n	8006c18 <_printf_float+0xc0>
 8006c04:	ee10 3a90 	vmov	r3, s1
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	bfbc      	itt	lt
 8006c0c:	232d      	movlt	r3, #45	@ 0x2d
 8006c0e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006c12:	497d      	ldr	r1, [pc, #500]	@ (8006e08 <_printf_float+0x2b0>)
 8006c14:	4b7d      	ldr	r3, [pc, #500]	@ (8006e0c <_printf_float+0x2b4>)
 8006c16:	e7d5      	b.n	8006bc4 <_printf_float+0x6c>
 8006c18:	6863      	ldr	r3, [r4, #4]
 8006c1a:	1c59      	adds	r1, r3, #1
 8006c1c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8006c20:	d139      	bne.n	8006c96 <_printf_float+0x13e>
 8006c22:	2306      	movs	r3, #6
 8006c24:	6063      	str	r3, [r4, #4]
 8006c26:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	6022      	str	r2, [r4, #0]
 8006c2e:	9303      	str	r3, [sp, #12]
 8006c30:	ab0a      	add	r3, sp, #40	@ 0x28
 8006c32:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8006c36:	ab09      	add	r3, sp, #36	@ 0x24
 8006c38:	9300      	str	r3, [sp, #0]
 8006c3a:	6861      	ldr	r1, [r4, #4]
 8006c3c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006c40:	4628      	mov	r0, r5
 8006c42:	f7ff fefb 	bl	8006a3c <__cvt>
 8006c46:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006c4a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006c4c:	4680      	mov	r8, r0
 8006c4e:	d129      	bne.n	8006ca4 <_printf_float+0x14c>
 8006c50:	1cc8      	adds	r0, r1, #3
 8006c52:	db02      	blt.n	8006c5a <_printf_float+0x102>
 8006c54:	6863      	ldr	r3, [r4, #4]
 8006c56:	4299      	cmp	r1, r3
 8006c58:	dd41      	ble.n	8006cde <_printf_float+0x186>
 8006c5a:	f1a9 0902 	sub.w	r9, r9, #2
 8006c5e:	fa5f f989 	uxtb.w	r9, r9
 8006c62:	3901      	subs	r1, #1
 8006c64:	464a      	mov	r2, r9
 8006c66:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006c6a:	9109      	str	r1, [sp, #36]	@ 0x24
 8006c6c:	f7ff ff3a 	bl	8006ae4 <__exponent>
 8006c70:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006c72:	1813      	adds	r3, r2, r0
 8006c74:	2a01      	cmp	r2, #1
 8006c76:	4682      	mov	sl, r0
 8006c78:	6123      	str	r3, [r4, #16]
 8006c7a:	dc02      	bgt.n	8006c82 <_printf_float+0x12a>
 8006c7c:	6822      	ldr	r2, [r4, #0]
 8006c7e:	07d2      	lsls	r2, r2, #31
 8006c80:	d501      	bpl.n	8006c86 <_printf_float+0x12e>
 8006c82:	3301      	adds	r3, #1
 8006c84:	6123      	str	r3, [r4, #16]
 8006c86:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d0a6      	beq.n	8006bdc <_printf_float+0x84>
 8006c8e:	232d      	movs	r3, #45	@ 0x2d
 8006c90:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c94:	e7a2      	b.n	8006bdc <_printf_float+0x84>
 8006c96:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006c9a:	d1c4      	bne.n	8006c26 <_printf_float+0xce>
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d1c2      	bne.n	8006c26 <_printf_float+0xce>
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	e7bf      	b.n	8006c24 <_printf_float+0xcc>
 8006ca4:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8006ca8:	d9db      	bls.n	8006c62 <_printf_float+0x10a>
 8006caa:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8006cae:	d118      	bne.n	8006ce2 <_printf_float+0x18a>
 8006cb0:	2900      	cmp	r1, #0
 8006cb2:	6863      	ldr	r3, [r4, #4]
 8006cb4:	dd0b      	ble.n	8006cce <_printf_float+0x176>
 8006cb6:	6121      	str	r1, [r4, #16]
 8006cb8:	b913      	cbnz	r3, 8006cc0 <_printf_float+0x168>
 8006cba:	6822      	ldr	r2, [r4, #0]
 8006cbc:	07d0      	lsls	r0, r2, #31
 8006cbe:	d502      	bpl.n	8006cc6 <_printf_float+0x16e>
 8006cc0:	3301      	adds	r3, #1
 8006cc2:	440b      	add	r3, r1
 8006cc4:	6123      	str	r3, [r4, #16]
 8006cc6:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006cc8:	f04f 0a00 	mov.w	sl, #0
 8006ccc:	e7db      	b.n	8006c86 <_printf_float+0x12e>
 8006cce:	b913      	cbnz	r3, 8006cd6 <_printf_float+0x17e>
 8006cd0:	6822      	ldr	r2, [r4, #0]
 8006cd2:	07d2      	lsls	r2, r2, #31
 8006cd4:	d501      	bpl.n	8006cda <_printf_float+0x182>
 8006cd6:	3302      	adds	r3, #2
 8006cd8:	e7f4      	b.n	8006cc4 <_printf_float+0x16c>
 8006cda:	2301      	movs	r3, #1
 8006cdc:	e7f2      	b.n	8006cc4 <_printf_float+0x16c>
 8006cde:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8006ce2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006ce4:	4299      	cmp	r1, r3
 8006ce6:	db05      	blt.n	8006cf4 <_printf_float+0x19c>
 8006ce8:	6823      	ldr	r3, [r4, #0]
 8006cea:	6121      	str	r1, [r4, #16]
 8006cec:	07d8      	lsls	r0, r3, #31
 8006cee:	d5ea      	bpl.n	8006cc6 <_printf_float+0x16e>
 8006cf0:	1c4b      	adds	r3, r1, #1
 8006cf2:	e7e7      	b.n	8006cc4 <_printf_float+0x16c>
 8006cf4:	2900      	cmp	r1, #0
 8006cf6:	bfd4      	ite	le
 8006cf8:	f1c1 0202 	rsble	r2, r1, #2
 8006cfc:	2201      	movgt	r2, #1
 8006cfe:	4413      	add	r3, r2
 8006d00:	e7e0      	b.n	8006cc4 <_printf_float+0x16c>
 8006d02:	6823      	ldr	r3, [r4, #0]
 8006d04:	055a      	lsls	r2, r3, #21
 8006d06:	d407      	bmi.n	8006d18 <_printf_float+0x1c0>
 8006d08:	6923      	ldr	r3, [r4, #16]
 8006d0a:	4642      	mov	r2, r8
 8006d0c:	4631      	mov	r1, r6
 8006d0e:	4628      	mov	r0, r5
 8006d10:	47b8      	blx	r7
 8006d12:	3001      	adds	r0, #1
 8006d14:	d12a      	bne.n	8006d6c <_printf_float+0x214>
 8006d16:	e76b      	b.n	8006bf0 <_printf_float+0x98>
 8006d18:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8006d1c:	f240 80e0 	bls.w	8006ee0 <_printf_float+0x388>
 8006d20:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8006d24:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d2c:	d133      	bne.n	8006d96 <_printf_float+0x23e>
 8006d2e:	4a38      	ldr	r2, [pc, #224]	@ (8006e10 <_printf_float+0x2b8>)
 8006d30:	2301      	movs	r3, #1
 8006d32:	4631      	mov	r1, r6
 8006d34:	4628      	mov	r0, r5
 8006d36:	47b8      	blx	r7
 8006d38:	3001      	adds	r0, #1
 8006d3a:	f43f af59 	beq.w	8006bf0 <_printf_float+0x98>
 8006d3e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006d42:	4543      	cmp	r3, r8
 8006d44:	db02      	blt.n	8006d4c <_printf_float+0x1f4>
 8006d46:	6823      	ldr	r3, [r4, #0]
 8006d48:	07d8      	lsls	r0, r3, #31
 8006d4a:	d50f      	bpl.n	8006d6c <_printf_float+0x214>
 8006d4c:	9b05      	ldr	r3, [sp, #20]
 8006d4e:	465a      	mov	r2, fp
 8006d50:	4631      	mov	r1, r6
 8006d52:	4628      	mov	r0, r5
 8006d54:	47b8      	blx	r7
 8006d56:	3001      	adds	r0, #1
 8006d58:	f43f af4a 	beq.w	8006bf0 <_printf_float+0x98>
 8006d5c:	f04f 0900 	mov.w	r9, #0
 8006d60:	f108 38ff 	add.w	r8, r8, #4294967295
 8006d64:	f104 0a1a 	add.w	sl, r4, #26
 8006d68:	45c8      	cmp	r8, r9
 8006d6a:	dc09      	bgt.n	8006d80 <_printf_float+0x228>
 8006d6c:	6823      	ldr	r3, [r4, #0]
 8006d6e:	079b      	lsls	r3, r3, #30
 8006d70:	f100 8107 	bmi.w	8006f82 <_printf_float+0x42a>
 8006d74:	68e0      	ldr	r0, [r4, #12]
 8006d76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006d78:	4298      	cmp	r0, r3
 8006d7a:	bfb8      	it	lt
 8006d7c:	4618      	movlt	r0, r3
 8006d7e:	e739      	b.n	8006bf4 <_printf_float+0x9c>
 8006d80:	2301      	movs	r3, #1
 8006d82:	4652      	mov	r2, sl
 8006d84:	4631      	mov	r1, r6
 8006d86:	4628      	mov	r0, r5
 8006d88:	47b8      	blx	r7
 8006d8a:	3001      	adds	r0, #1
 8006d8c:	f43f af30 	beq.w	8006bf0 <_printf_float+0x98>
 8006d90:	f109 0901 	add.w	r9, r9, #1
 8006d94:	e7e8      	b.n	8006d68 <_printf_float+0x210>
 8006d96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	dc3b      	bgt.n	8006e14 <_printf_float+0x2bc>
 8006d9c:	4a1c      	ldr	r2, [pc, #112]	@ (8006e10 <_printf_float+0x2b8>)
 8006d9e:	2301      	movs	r3, #1
 8006da0:	4631      	mov	r1, r6
 8006da2:	4628      	mov	r0, r5
 8006da4:	47b8      	blx	r7
 8006da6:	3001      	adds	r0, #1
 8006da8:	f43f af22 	beq.w	8006bf0 <_printf_float+0x98>
 8006dac:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006db0:	ea59 0303 	orrs.w	r3, r9, r3
 8006db4:	d102      	bne.n	8006dbc <_printf_float+0x264>
 8006db6:	6823      	ldr	r3, [r4, #0]
 8006db8:	07d9      	lsls	r1, r3, #31
 8006dba:	d5d7      	bpl.n	8006d6c <_printf_float+0x214>
 8006dbc:	9b05      	ldr	r3, [sp, #20]
 8006dbe:	465a      	mov	r2, fp
 8006dc0:	4631      	mov	r1, r6
 8006dc2:	4628      	mov	r0, r5
 8006dc4:	47b8      	blx	r7
 8006dc6:	3001      	adds	r0, #1
 8006dc8:	f43f af12 	beq.w	8006bf0 <_printf_float+0x98>
 8006dcc:	f04f 0a00 	mov.w	sl, #0
 8006dd0:	f104 0b1a 	add.w	fp, r4, #26
 8006dd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006dd6:	425b      	negs	r3, r3
 8006dd8:	4553      	cmp	r3, sl
 8006dda:	dc01      	bgt.n	8006de0 <_printf_float+0x288>
 8006ddc:	464b      	mov	r3, r9
 8006dde:	e794      	b.n	8006d0a <_printf_float+0x1b2>
 8006de0:	2301      	movs	r3, #1
 8006de2:	465a      	mov	r2, fp
 8006de4:	4631      	mov	r1, r6
 8006de6:	4628      	mov	r0, r5
 8006de8:	47b8      	blx	r7
 8006dea:	3001      	adds	r0, #1
 8006dec:	f43f af00 	beq.w	8006bf0 <_printf_float+0x98>
 8006df0:	f10a 0a01 	add.w	sl, sl, #1
 8006df4:	e7ee      	b.n	8006dd4 <_printf_float+0x27c>
 8006df6:	bf00      	nop
 8006df8:	ffffffff 	.word	0xffffffff
 8006dfc:	7fefffff 	.word	0x7fefffff
 8006e00:	0800946c 	.word	0x0800946c
 8006e04:	08009468 	.word	0x08009468
 8006e08:	08009474 	.word	0x08009474
 8006e0c:	08009470 	.word	0x08009470
 8006e10:	08009478 	.word	0x08009478
 8006e14:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006e16:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006e1a:	4553      	cmp	r3, sl
 8006e1c:	bfa8      	it	ge
 8006e1e:	4653      	movge	r3, sl
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	4699      	mov	r9, r3
 8006e24:	dc37      	bgt.n	8006e96 <_printf_float+0x33e>
 8006e26:	2300      	movs	r3, #0
 8006e28:	9307      	str	r3, [sp, #28]
 8006e2a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006e2e:	f104 021a 	add.w	r2, r4, #26
 8006e32:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006e34:	9907      	ldr	r1, [sp, #28]
 8006e36:	9306      	str	r3, [sp, #24]
 8006e38:	eba3 0309 	sub.w	r3, r3, r9
 8006e3c:	428b      	cmp	r3, r1
 8006e3e:	dc31      	bgt.n	8006ea4 <_printf_float+0x34c>
 8006e40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e42:	459a      	cmp	sl, r3
 8006e44:	dc3b      	bgt.n	8006ebe <_printf_float+0x366>
 8006e46:	6823      	ldr	r3, [r4, #0]
 8006e48:	07da      	lsls	r2, r3, #31
 8006e4a:	d438      	bmi.n	8006ebe <_printf_float+0x366>
 8006e4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e4e:	ebaa 0903 	sub.w	r9, sl, r3
 8006e52:	9b06      	ldr	r3, [sp, #24]
 8006e54:	ebaa 0303 	sub.w	r3, sl, r3
 8006e58:	4599      	cmp	r9, r3
 8006e5a:	bfa8      	it	ge
 8006e5c:	4699      	movge	r9, r3
 8006e5e:	f1b9 0f00 	cmp.w	r9, #0
 8006e62:	dc34      	bgt.n	8006ece <_printf_float+0x376>
 8006e64:	f04f 0800 	mov.w	r8, #0
 8006e68:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006e6c:	f104 0b1a 	add.w	fp, r4, #26
 8006e70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e72:	ebaa 0303 	sub.w	r3, sl, r3
 8006e76:	eba3 0309 	sub.w	r3, r3, r9
 8006e7a:	4543      	cmp	r3, r8
 8006e7c:	f77f af76 	ble.w	8006d6c <_printf_float+0x214>
 8006e80:	2301      	movs	r3, #1
 8006e82:	465a      	mov	r2, fp
 8006e84:	4631      	mov	r1, r6
 8006e86:	4628      	mov	r0, r5
 8006e88:	47b8      	blx	r7
 8006e8a:	3001      	adds	r0, #1
 8006e8c:	f43f aeb0 	beq.w	8006bf0 <_printf_float+0x98>
 8006e90:	f108 0801 	add.w	r8, r8, #1
 8006e94:	e7ec      	b.n	8006e70 <_printf_float+0x318>
 8006e96:	4642      	mov	r2, r8
 8006e98:	4631      	mov	r1, r6
 8006e9a:	4628      	mov	r0, r5
 8006e9c:	47b8      	blx	r7
 8006e9e:	3001      	adds	r0, #1
 8006ea0:	d1c1      	bne.n	8006e26 <_printf_float+0x2ce>
 8006ea2:	e6a5      	b.n	8006bf0 <_printf_float+0x98>
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	4631      	mov	r1, r6
 8006ea8:	4628      	mov	r0, r5
 8006eaa:	9206      	str	r2, [sp, #24]
 8006eac:	47b8      	blx	r7
 8006eae:	3001      	adds	r0, #1
 8006eb0:	f43f ae9e 	beq.w	8006bf0 <_printf_float+0x98>
 8006eb4:	9b07      	ldr	r3, [sp, #28]
 8006eb6:	9a06      	ldr	r2, [sp, #24]
 8006eb8:	3301      	adds	r3, #1
 8006eba:	9307      	str	r3, [sp, #28]
 8006ebc:	e7b9      	b.n	8006e32 <_printf_float+0x2da>
 8006ebe:	9b05      	ldr	r3, [sp, #20]
 8006ec0:	465a      	mov	r2, fp
 8006ec2:	4631      	mov	r1, r6
 8006ec4:	4628      	mov	r0, r5
 8006ec6:	47b8      	blx	r7
 8006ec8:	3001      	adds	r0, #1
 8006eca:	d1bf      	bne.n	8006e4c <_printf_float+0x2f4>
 8006ecc:	e690      	b.n	8006bf0 <_printf_float+0x98>
 8006ece:	9a06      	ldr	r2, [sp, #24]
 8006ed0:	464b      	mov	r3, r9
 8006ed2:	4442      	add	r2, r8
 8006ed4:	4631      	mov	r1, r6
 8006ed6:	4628      	mov	r0, r5
 8006ed8:	47b8      	blx	r7
 8006eda:	3001      	adds	r0, #1
 8006edc:	d1c2      	bne.n	8006e64 <_printf_float+0x30c>
 8006ede:	e687      	b.n	8006bf0 <_printf_float+0x98>
 8006ee0:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8006ee4:	f1b9 0f01 	cmp.w	r9, #1
 8006ee8:	dc01      	bgt.n	8006eee <_printf_float+0x396>
 8006eea:	07db      	lsls	r3, r3, #31
 8006eec:	d536      	bpl.n	8006f5c <_printf_float+0x404>
 8006eee:	2301      	movs	r3, #1
 8006ef0:	4642      	mov	r2, r8
 8006ef2:	4631      	mov	r1, r6
 8006ef4:	4628      	mov	r0, r5
 8006ef6:	47b8      	blx	r7
 8006ef8:	3001      	adds	r0, #1
 8006efa:	f43f ae79 	beq.w	8006bf0 <_printf_float+0x98>
 8006efe:	9b05      	ldr	r3, [sp, #20]
 8006f00:	465a      	mov	r2, fp
 8006f02:	4631      	mov	r1, r6
 8006f04:	4628      	mov	r0, r5
 8006f06:	47b8      	blx	r7
 8006f08:	3001      	adds	r0, #1
 8006f0a:	f43f ae71 	beq.w	8006bf0 <_printf_float+0x98>
 8006f0e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8006f12:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006f16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f1a:	f109 39ff 	add.w	r9, r9, #4294967295
 8006f1e:	d018      	beq.n	8006f52 <_printf_float+0x3fa>
 8006f20:	464b      	mov	r3, r9
 8006f22:	f108 0201 	add.w	r2, r8, #1
 8006f26:	4631      	mov	r1, r6
 8006f28:	4628      	mov	r0, r5
 8006f2a:	47b8      	blx	r7
 8006f2c:	3001      	adds	r0, #1
 8006f2e:	d10c      	bne.n	8006f4a <_printf_float+0x3f2>
 8006f30:	e65e      	b.n	8006bf0 <_printf_float+0x98>
 8006f32:	2301      	movs	r3, #1
 8006f34:	465a      	mov	r2, fp
 8006f36:	4631      	mov	r1, r6
 8006f38:	4628      	mov	r0, r5
 8006f3a:	47b8      	blx	r7
 8006f3c:	3001      	adds	r0, #1
 8006f3e:	f43f ae57 	beq.w	8006bf0 <_printf_float+0x98>
 8006f42:	f108 0801 	add.w	r8, r8, #1
 8006f46:	45c8      	cmp	r8, r9
 8006f48:	dbf3      	blt.n	8006f32 <_printf_float+0x3da>
 8006f4a:	4653      	mov	r3, sl
 8006f4c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006f50:	e6dc      	b.n	8006d0c <_printf_float+0x1b4>
 8006f52:	f04f 0800 	mov.w	r8, #0
 8006f56:	f104 0b1a 	add.w	fp, r4, #26
 8006f5a:	e7f4      	b.n	8006f46 <_printf_float+0x3ee>
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	4642      	mov	r2, r8
 8006f60:	e7e1      	b.n	8006f26 <_printf_float+0x3ce>
 8006f62:	2301      	movs	r3, #1
 8006f64:	464a      	mov	r2, r9
 8006f66:	4631      	mov	r1, r6
 8006f68:	4628      	mov	r0, r5
 8006f6a:	47b8      	blx	r7
 8006f6c:	3001      	adds	r0, #1
 8006f6e:	f43f ae3f 	beq.w	8006bf0 <_printf_float+0x98>
 8006f72:	f108 0801 	add.w	r8, r8, #1
 8006f76:	68e3      	ldr	r3, [r4, #12]
 8006f78:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006f7a:	1a5b      	subs	r3, r3, r1
 8006f7c:	4543      	cmp	r3, r8
 8006f7e:	dcf0      	bgt.n	8006f62 <_printf_float+0x40a>
 8006f80:	e6f8      	b.n	8006d74 <_printf_float+0x21c>
 8006f82:	f04f 0800 	mov.w	r8, #0
 8006f86:	f104 0919 	add.w	r9, r4, #25
 8006f8a:	e7f4      	b.n	8006f76 <_printf_float+0x41e>

08006f8c <_printf_common>:
 8006f8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f90:	4616      	mov	r6, r2
 8006f92:	4698      	mov	r8, r3
 8006f94:	688a      	ldr	r2, [r1, #8]
 8006f96:	690b      	ldr	r3, [r1, #16]
 8006f98:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	bfb8      	it	lt
 8006fa0:	4613      	movlt	r3, r2
 8006fa2:	6033      	str	r3, [r6, #0]
 8006fa4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006fa8:	4607      	mov	r7, r0
 8006faa:	460c      	mov	r4, r1
 8006fac:	b10a      	cbz	r2, 8006fb2 <_printf_common+0x26>
 8006fae:	3301      	adds	r3, #1
 8006fb0:	6033      	str	r3, [r6, #0]
 8006fb2:	6823      	ldr	r3, [r4, #0]
 8006fb4:	0699      	lsls	r1, r3, #26
 8006fb6:	bf42      	ittt	mi
 8006fb8:	6833      	ldrmi	r3, [r6, #0]
 8006fba:	3302      	addmi	r3, #2
 8006fbc:	6033      	strmi	r3, [r6, #0]
 8006fbe:	6825      	ldr	r5, [r4, #0]
 8006fc0:	f015 0506 	ands.w	r5, r5, #6
 8006fc4:	d106      	bne.n	8006fd4 <_printf_common+0x48>
 8006fc6:	f104 0a19 	add.w	sl, r4, #25
 8006fca:	68e3      	ldr	r3, [r4, #12]
 8006fcc:	6832      	ldr	r2, [r6, #0]
 8006fce:	1a9b      	subs	r3, r3, r2
 8006fd0:	42ab      	cmp	r3, r5
 8006fd2:	dc26      	bgt.n	8007022 <_printf_common+0x96>
 8006fd4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006fd8:	6822      	ldr	r2, [r4, #0]
 8006fda:	3b00      	subs	r3, #0
 8006fdc:	bf18      	it	ne
 8006fde:	2301      	movne	r3, #1
 8006fe0:	0692      	lsls	r2, r2, #26
 8006fe2:	d42b      	bmi.n	800703c <_printf_common+0xb0>
 8006fe4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006fe8:	4641      	mov	r1, r8
 8006fea:	4638      	mov	r0, r7
 8006fec:	47c8      	blx	r9
 8006fee:	3001      	adds	r0, #1
 8006ff0:	d01e      	beq.n	8007030 <_printf_common+0xa4>
 8006ff2:	6823      	ldr	r3, [r4, #0]
 8006ff4:	6922      	ldr	r2, [r4, #16]
 8006ff6:	f003 0306 	and.w	r3, r3, #6
 8006ffa:	2b04      	cmp	r3, #4
 8006ffc:	bf02      	ittt	eq
 8006ffe:	68e5      	ldreq	r5, [r4, #12]
 8007000:	6833      	ldreq	r3, [r6, #0]
 8007002:	1aed      	subeq	r5, r5, r3
 8007004:	68a3      	ldr	r3, [r4, #8]
 8007006:	bf0c      	ite	eq
 8007008:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800700c:	2500      	movne	r5, #0
 800700e:	4293      	cmp	r3, r2
 8007010:	bfc4      	itt	gt
 8007012:	1a9b      	subgt	r3, r3, r2
 8007014:	18ed      	addgt	r5, r5, r3
 8007016:	2600      	movs	r6, #0
 8007018:	341a      	adds	r4, #26
 800701a:	42b5      	cmp	r5, r6
 800701c:	d11a      	bne.n	8007054 <_printf_common+0xc8>
 800701e:	2000      	movs	r0, #0
 8007020:	e008      	b.n	8007034 <_printf_common+0xa8>
 8007022:	2301      	movs	r3, #1
 8007024:	4652      	mov	r2, sl
 8007026:	4641      	mov	r1, r8
 8007028:	4638      	mov	r0, r7
 800702a:	47c8      	blx	r9
 800702c:	3001      	adds	r0, #1
 800702e:	d103      	bne.n	8007038 <_printf_common+0xac>
 8007030:	f04f 30ff 	mov.w	r0, #4294967295
 8007034:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007038:	3501      	adds	r5, #1
 800703a:	e7c6      	b.n	8006fca <_printf_common+0x3e>
 800703c:	18e1      	adds	r1, r4, r3
 800703e:	1c5a      	adds	r2, r3, #1
 8007040:	2030      	movs	r0, #48	@ 0x30
 8007042:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007046:	4422      	add	r2, r4
 8007048:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800704c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007050:	3302      	adds	r3, #2
 8007052:	e7c7      	b.n	8006fe4 <_printf_common+0x58>
 8007054:	2301      	movs	r3, #1
 8007056:	4622      	mov	r2, r4
 8007058:	4641      	mov	r1, r8
 800705a:	4638      	mov	r0, r7
 800705c:	47c8      	blx	r9
 800705e:	3001      	adds	r0, #1
 8007060:	d0e6      	beq.n	8007030 <_printf_common+0xa4>
 8007062:	3601      	adds	r6, #1
 8007064:	e7d9      	b.n	800701a <_printf_common+0x8e>
	...

08007068 <_printf_i>:
 8007068:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800706c:	7e0f      	ldrb	r7, [r1, #24]
 800706e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007070:	2f78      	cmp	r7, #120	@ 0x78
 8007072:	4691      	mov	r9, r2
 8007074:	4680      	mov	r8, r0
 8007076:	460c      	mov	r4, r1
 8007078:	469a      	mov	sl, r3
 800707a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800707e:	d807      	bhi.n	8007090 <_printf_i+0x28>
 8007080:	2f62      	cmp	r7, #98	@ 0x62
 8007082:	d80a      	bhi.n	800709a <_printf_i+0x32>
 8007084:	2f00      	cmp	r7, #0
 8007086:	f000 80d1 	beq.w	800722c <_printf_i+0x1c4>
 800708a:	2f58      	cmp	r7, #88	@ 0x58
 800708c:	f000 80b8 	beq.w	8007200 <_printf_i+0x198>
 8007090:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007094:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007098:	e03a      	b.n	8007110 <_printf_i+0xa8>
 800709a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800709e:	2b15      	cmp	r3, #21
 80070a0:	d8f6      	bhi.n	8007090 <_printf_i+0x28>
 80070a2:	a101      	add	r1, pc, #4	@ (adr r1, 80070a8 <_printf_i+0x40>)
 80070a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80070a8:	08007101 	.word	0x08007101
 80070ac:	08007115 	.word	0x08007115
 80070b0:	08007091 	.word	0x08007091
 80070b4:	08007091 	.word	0x08007091
 80070b8:	08007091 	.word	0x08007091
 80070bc:	08007091 	.word	0x08007091
 80070c0:	08007115 	.word	0x08007115
 80070c4:	08007091 	.word	0x08007091
 80070c8:	08007091 	.word	0x08007091
 80070cc:	08007091 	.word	0x08007091
 80070d0:	08007091 	.word	0x08007091
 80070d4:	08007213 	.word	0x08007213
 80070d8:	0800713f 	.word	0x0800713f
 80070dc:	080071cd 	.word	0x080071cd
 80070e0:	08007091 	.word	0x08007091
 80070e4:	08007091 	.word	0x08007091
 80070e8:	08007235 	.word	0x08007235
 80070ec:	08007091 	.word	0x08007091
 80070f0:	0800713f 	.word	0x0800713f
 80070f4:	08007091 	.word	0x08007091
 80070f8:	08007091 	.word	0x08007091
 80070fc:	080071d5 	.word	0x080071d5
 8007100:	6833      	ldr	r3, [r6, #0]
 8007102:	1d1a      	adds	r2, r3, #4
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	6032      	str	r2, [r6, #0]
 8007108:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800710c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007110:	2301      	movs	r3, #1
 8007112:	e09c      	b.n	800724e <_printf_i+0x1e6>
 8007114:	6833      	ldr	r3, [r6, #0]
 8007116:	6820      	ldr	r0, [r4, #0]
 8007118:	1d19      	adds	r1, r3, #4
 800711a:	6031      	str	r1, [r6, #0]
 800711c:	0606      	lsls	r6, r0, #24
 800711e:	d501      	bpl.n	8007124 <_printf_i+0xbc>
 8007120:	681d      	ldr	r5, [r3, #0]
 8007122:	e003      	b.n	800712c <_printf_i+0xc4>
 8007124:	0645      	lsls	r5, r0, #25
 8007126:	d5fb      	bpl.n	8007120 <_printf_i+0xb8>
 8007128:	f9b3 5000 	ldrsh.w	r5, [r3]
 800712c:	2d00      	cmp	r5, #0
 800712e:	da03      	bge.n	8007138 <_printf_i+0xd0>
 8007130:	232d      	movs	r3, #45	@ 0x2d
 8007132:	426d      	negs	r5, r5
 8007134:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007138:	4858      	ldr	r0, [pc, #352]	@ (800729c <_printf_i+0x234>)
 800713a:	230a      	movs	r3, #10
 800713c:	e011      	b.n	8007162 <_printf_i+0xfa>
 800713e:	6821      	ldr	r1, [r4, #0]
 8007140:	6833      	ldr	r3, [r6, #0]
 8007142:	0608      	lsls	r0, r1, #24
 8007144:	f853 5b04 	ldr.w	r5, [r3], #4
 8007148:	d402      	bmi.n	8007150 <_printf_i+0xe8>
 800714a:	0649      	lsls	r1, r1, #25
 800714c:	bf48      	it	mi
 800714e:	b2ad      	uxthmi	r5, r5
 8007150:	2f6f      	cmp	r7, #111	@ 0x6f
 8007152:	4852      	ldr	r0, [pc, #328]	@ (800729c <_printf_i+0x234>)
 8007154:	6033      	str	r3, [r6, #0]
 8007156:	bf14      	ite	ne
 8007158:	230a      	movne	r3, #10
 800715a:	2308      	moveq	r3, #8
 800715c:	2100      	movs	r1, #0
 800715e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007162:	6866      	ldr	r6, [r4, #4]
 8007164:	60a6      	str	r6, [r4, #8]
 8007166:	2e00      	cmp	r6, #0
 8007168:	db05      	blt.n	8007176 <_printf_i+0x10e>
 800716a:	6821      	ldr	r1, [r4, #0]
 800716c:	432e      	orrs	r6, r5
 800716e:	f021 0104 	bic.w	r1, r1, #4
 8007172:	6021      	str	r1, [r4, #0]
 8007174:	d04b      	beq.n	800720e <_printf_i+0x1a6>
 8007176:	4616      	mov	r6, r2
 8007178:	fbb5 f1f3 	udiv	r1, r5, r3
 800717c:	fb03 5711 	mls	r7, r3, r1, r5
 8007180:	5dc7      	ldrb	r7, [r0, r7]
 8007182:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007186:	462f      	mov	r7, r5
 8007188:	42bb      	cmp	r3, r7
 800718a:	460d      	mov	r5, r1
 800718c:	d9f4      	bls.n	8007178 <_printf_i+0x110>
 800718e:	2b08      	cmp	r3, #8
 8007190:	d10b      	bne.n	80071aa <_printf_i+0x142>
 8007192:	6823      	ldr	r3, [r4, #0]
 8007194:	07df      	lsls	r7, r3, #31
 8007196:	d508      	bpl.n	80071aa <_printf_i+0x142>
 8007198:	6923      	ldr	r3, [r4, #16]
 800719a:	6861      	ldr	r1, [r4, #4]
 800719c:	4299      	cmp	r1, r3
 800719e:	bfde      	ittt	le
 80071a0:	2330      	movle	r3, #48	@ 0x30
 80071a2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80071a6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80071aa:	1b92      	subs	r2, r2, r6
 80071ac:	6122      	str	r2, [r4, #16]
 80071ae:	f8cd a000 	str.w	sl, [sp]
 80071b2:	464b      	mov	r3, r9
 80071b4:	aa03      	add	r2, sp, #12
 80071b6:	4621      	mov	r1, r4
 80071b8:	4640      	mov	r0, r8
 80071ba:	f7ff fee7 	bl	8006f8c <_printf_common>
 80071be:	3001      	adds	r0, #1
 80071c0:	d14a      	bne.n	8007258 <_printf_i+0x1f0>
 80071c2:	f04f 30ff 	mov.w	r0, #4294967295
 80071c6:	b004      	add	sp, #16
 80071c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071cc:	6823      	ldr	r3, [r4, #0]
 80071ce:	f043 0320 	orr.w	r3, r3, #32
 80071d2:	6023      	str	r3, [r4, #0]
 80071d4:	4832      	ldr	r0, [pc, #200]	@ (80072a0 <_printf_i+0x238>)
 80071d6:	2778      	movs	r7, #120	@ 0x78
 80071d8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80071dc:	6823      	ldr	r3, [r4, #0]
 80071de:	6831      	ldr	r1, [r6, #0]
 80071e0:	061f      	lsls	r7, r3, #24
 80071e2:	f851 5b04 	ldr.w	r5, [r1], #4
 80071e6:	d402      	bmi.n	80071ee <_printf_i+0x186>
 80071e8:	065f      	lsls	r7, r3, #25
 80071ea:	bf48      	it	mi
 80071ec:	b2ad      	uxthmi	r5, r5
 80071ee:	6031      	str	r1, [r6, #0]
 80071f0:	07d9      	lsls	r1, r3, #31
 80071f2:	bf44      	itt	mi
 80071f4:	f043 0320 	orrmi.w	r3, r3, #32
 80071f8:	6023      	strmi	r3, [r4, #0]
 80071fa:	b11d      	cbz	r5, 8007204 <_printf_i+0x19c>
 80071fc:	2310      	movs	r3, #16
 80071fe:	e7ad      	b.n	800715c <_printf_i+0xf4>
 8007200:	4826      	ldr	r0, [pc, #152]	@ (800729c <_printf_i+0x234>)
 8007202:	e7e9      	b.n	80071d8 <_printf_i+0x170>
 8007204:	6823      	ldr	r3, [r4, #0]
 8007206:	f023 0320 	bic.w	r3, r3, #32
 800720a:	6023      	str	r3, [r4, #0]
 800720c:	e7f6      	b.n	80071fc <_printf_i+0x194>
 800720e:	4616      	mov	r6, r2
 8007210:	e7bd      	b.n	800718e <_printf_i+0x126>
 8007212:	6833      	ldr	r3, [r6, #0]
 8007214:	6825      	ldr	r5, [r4, #0]
 8007216:	6961      	ldr	r1, [r4, #20]
 8007218:	1d18      	adds	r0, r3, #4
 800721a:	6030      	str	r0, [r6, #0]
 800721c:	062e      	lsls	r6, r5, #24
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	d501      	bpl.n	8007226 <_printf_i+0x1be>
 8007222:	6019      	str	r1, [r3, #0]
 8007224:	e002      	b.n	800722c <_printf_i+0x1c4>
 8007226:	0668      	lsls	r0, r5, #25
 8007228:	d5fb      	bpl.n	8007222 <_printf_i+0x1ba>
 800722a:	8019      	strh	r1, [r3, #0]
 800722c:	2300      	movs	r3, #0
 800722e:	6123      	str	r3, [r4, #16]
 8007230:	4616      	mov	r6, r2
 8007232:	e7bc      	b.n	80071ae <_printf_i+0x146>
 8007234:	6833      	ldr	r3, [r6, #0]
 8007236:	1d1a      	adds	r2, r3, #4
 8007238:	6032      	str	r2, [r6, #0]
 800723a:	681e      	ldr	r6, [r3, #0]
 800723c:	6862      	ldr	r2, [r4, #4]
 800723e:	2100      	movs	r1, #0
 8007240:	4630      	mov	r0, r6
 8007242:	f7f9 f84d 	bl	80002e0 <memchr>
 8007246:	b108      	cbz	r0, 800724c <_printf_i+0x1e4>
 8007248:	1b80      	subs	r0, r0, r6
 800724a:	6060      	str	r0, [r4, #4]
 800724c:	6863      	ldr	r3, [r4, #4]
 800724e:	6123      	str	r3, [r4, #16]
 8007250:	2300      	movs	r3, #0
 8007252:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007256:	e7aa      	b.n	80071ae <_printf_i+0x146>
 8007258:	6923      	ldr	r3, [r4, #16]
 800725a:	4632      	mov	r2, r6
 800725c:	4649      	mov	r1, r9
 800725e:	4640      	mov	r0, r8
 8007260:	47d0      	blx	sl
 8007262:	3001      	adds	r0, #1
 8007264:	d0ad      	beq.n	80071c2 <_printf_i+0x15a>
 8007266:	6823      	ldr	r3, [r4, #0]
 8007268:	079b      	lsls	r3, r3, #30
 800726a:	d413      	bmi.n	8007294 <_printf_i+0x22c>
 800726c:	68e0      	ldr	r0, [r4, #12]
 800726e:	9b03      	ldr	r3, [sp, #12]
 8007270:	4298      	cmp	r0, r3
 8007272:	bfb8      	it	lt
 8007274:	4618      	movlt	r0, r3
 8007276:	e7a6      	b.n	80071c6 <_printf_i+0x15e>
 8007278:	2301      	movs	r3, #1
 800727a:	4632      	mov	r2, r6
 800727c:	4649      	mov	r1, r9
 800727e:	4640      	mov	r0, r8
 8007280:	47d0      	blx	sl
 8007282:	3001      	adds	r0, #1
 8007284:	d09d      	beq.n	80071c2 <_printf_i+0x15a>
 8007286:	3501      	adds	r5, #1
 8007288:	68e3      	ldr	r3, [r4, #12]
 800728a:	9903      	ldr	r1, [sp, #12]
 800728c:	1a5b      	subs	r3, r3, r1
 800728e:	42ab      	cmp	r3, r5
 8007290:	dcf2      	bgt.n	8007278 <_printf_i+0x210>
 8007292:	e7eb      	b.n	800726c <_printf_i+0x204>
 8007294:	2500      	movs	r5, #0
 8007296:	f104 0619 	add.w	r6, r4, #25
 800729a:	e7f5      	b.n	8007288 <_printf_i+0x220>
 800729c:	0800947a 	.word	0x0800947a
 80072a0:	0800948b 	.word	0x0800948b

080072a4 <std>:
 80072a4:	2300      	movs	r3, #0
 80072a6:	b510      	push	{r4, lr}
 80072a8:	4604      	mov	r4, r0
 80072aa:	e9c0 3300 	strd	r3, r3, [r0]
 80072ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80072b2:	6083      	str	r3, [r0, #8]
 80072b4:	8181      	strh	r1, [r0, #12]
 80072b6:	6643      	str	r3, [r0, #100]	@ 0x64
 80072b8:	81c2      	strh	r2, [r0, #14]
 80072ba:	6183      	str	r3, [r0, #24]
 80072bc:	4619      	mov	r1, r3
 80072be:	2208      	movs	r2, #8
 80072c0:	305c      	adds	r0, #92	@ 0x5c
 80072c2:	f000 f9f9 	bl	80076b8 <memset>
 80072c6:	4b0d      	ldr	r3, [pc, #52]	@ (80072fc <std+0x58>)
 80072c8:	6263      	str	r3, [r4, #36]	@ 0x24
 80072ca:	4b0d      	ldr	r3, [pc, #52]	@ (8007300 <std+0x5c>)
 80072cc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80072ce:	4b0d      	ldr	r3, [pc, #52]	@ (8007304 <std+0x60>)
 80072d0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80072d2:	4b0d      	ldr	r3, [pc, #52]	@ (8007308 <std+0x64>)
 80072d4:	6323      	str	r3, [r4, #48]	@ 0x30
 80072d6:	4b0d      	ldr	r3, [pc, #52]	@ (800730c <std+0x68>)
 80072d8:	6224      	str	r4, [r4, #32]
 80072da:	429c      	cmp	r4, r3
 80072dc:	d006      	beq.n	80072ec <std+0x48>
 80072de:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80072e2:	4294      	cmp	r4, r2
 80072e4:	d002      	beq.n	80072ec <std+0x48>
 80072e6:	33d0      	adds	r3, #208	@ 0xd0
 80072e8:	429c      	cmp	r4, r3
 80072ea:	d105      	bne.n	80072f8 <std+0x54>
 80072ec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80072f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072f4:	f000 ba5c 	b.w	80077b0 <__retarget_lock_init_recursive>
 80072f8:	bd10      	pop	{r4, pc}
 80072fa:	bf00      	nop
 80072fc:	08007509 	.word	0x08007509
 8007300:	0800752b 	.word	0x0800752b
 8007304:	08007563 	.word	0x08007563
 8007308:	08007587 	.word	0x08007587
 800730c:	2400043c 	.word	0x2400043c

08007310 <stdio_exit_handler>:
 8007310:	4a02      	ldr	r2, [pc, #8]	@ (800731c <stdio_exit_handler+0xc>)
 8007312:	4903      	ldr	r1, [pc, #12]	@ (8007320 <stdio_exit_handler+0x10>)
 8007314:	4803      	ldr	r0, [pc, #12]	@ (8007324 <stdio_exit_handler+0x14>)
 8007316:	f000 b869 	b.w	80073ec <_fwalk_sglue>
 800731a:	bf00      	nop
 800731c:	24000030 	.word	0x24000030
 8007320:	08009005 	.word	0x08009005
 8007324:	24000040 	.word	0x24000040

08007328 <cleanup_stdio>:
 8007328:	6841      	ldr	r1, [r0, #4]
 800732a:	4b0c      	ldr	r3, [pc, #48]	@ (800735c <cleanup_stdio+0x34>)
 800732c:	4299      	cmp	r1, r3
 800732e:	b510      	push	{r4, lr}
 8007330:	4604      	mov	r4, r0
 8007332:	d001      	beq.n	8007338 <cleanup_stdio+0x10>
 8007334:	f001 fe66 	bl	8009004 <_fflush_r>
 8007338:	68a1      	ldr	r1, [r4, #8]
 800733a:	4b09      	ldr	r3, [pc, #36]	@ (8007360 <cleanup_stdio+0x38>)
 800733c:	4299      	cmp	r1, r3
 800733e:	d002      	beq.n	8007346 <cleanup_stdio+0x1e>
 8007340:	4620      	mov	r0, r4
 8007342:	f001 fe5f 	bl	8009004 <_fflush_r>
 8007346:	68e1      	ldr	r1, [r4, #12]
 8007348:	4b06      	ldr	r3, [pc, #24]	@ (8007364 <cleanup_stdio+0x3c>)
 800734a:	4299      	cmp	r1, r3
 800734c:	d004      	beq.n	8007358 <cleanup_stdio+0x30>
 800734e:	4620      	mov	r0, r4
 8007350:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007354:	f001 be56 	b.w	8009004 <_fflush_r>
 8007358:	bd10      	pop	{r4, pc}
 800735a:	bf00      	nop
 800735c:	2400043c 	.word	0x2400043c
 8007360:	240004a4 	.word	0x240004a4
 8007364:	2400050c 	.word	0x2400050c

08007368 <global_stdio_init.part.0>:
 8007368:	b510      	push	{r4, lr}
 800736a:	4b0b      	ldr	r3, [pc, #44]	@ (8007398 <global_stdio_init.part.0+0x30>)
 800736c:	4c0b      	ldr	r4, [pc, #44]	@ (800739c <global_stdio_init.part.0+0x34>)
 800736e:	4a0c      	ldr	r2, [pc, #48]	@ (80073a0 <global_stdio_init.part.0+0x38>)
 8007370:	601a      	str	r2, [r3, #0]
 8007372:	4620      	mov	r0, r4
 8007374:	2200      	movs	r2, #0
 8007376:	2104      	movs	r1, #4
 8007378:	f7ff ff94 	bl	80072a4 <std>
 800737c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007380:	2201      	movs	r2, #1
 8007382:	2109      	movs	r1, #9
 8007384:	f7ff ff8e 	bl	80072a4 <std>
 8007388:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800738c:	2202      	movs	r2, #2
 800738e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007392:	2112      	movs	r1, #18
 8007394:	f7ff bf86 	b.w	80072a4 <std>
 8007398:	24000574 	.word	0x24000574
 800739c:	2400043c 	.word	0x2400043c
 80073a0:	08007311 	.word	0x08007311

080073a4 <__sfp_lock_acquire>:
 80073a4:	4801      	ldr	r0, [pc, #4]	@ (80073ac <__sfp_lock_acquire+0x8>)
 80073a6:	f000 ba04 	b.w	80077b2 <__retarget_lock_acquire_recursive>
 80073aa:	bf00      	nop
 80073ac:	2400057d 	.word	0x2400057d

080073b0 <__sfp_lock_release>:
 80073b0:	4801      	ldr	r0, [pc, #4]	@ (80073b8 <__sfp_lock_release+0x8>)
 80073b2:	f000 b9ff 	b.w	80077b4 <__retarget_lock_release_recursive>
 80073b6:	bf00      	nop
 80073b8:	2400057d 	.word	0x2400057d

080073bc <__sinit>:
 80073bc:	b510      	push	{r4, lr}
 80073be:	4604      	mov	r4, r0
 80073c0:	f7ff fff0 	bl	80073a4 <__sfp_lock_acquire>
 80073c4:	6a23      	ldr	r3, [r4, #32]
 80073c6:	b11b      	cbz	r3, 80073d0 <__sinit+0x14>
 80073c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073cc:	f7ff bff0 	b.w	80073b0 <__sfp_lock_release>
 80073d0:	4b04      	ldr	r3, [pc, #16]	@ (80073e4 <__sinit+0x28>)
 80073d2:	6223      	str	r3, [r4, #32]
 80073d4:	4b04      	ldr	r3, [pc, #16]	@ (80073e8 <__sinit+0x2c>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d1f5      	bne.n	80073c8 <__sinit+0xc>
 80073dc:	f7ff ffc4 	bl	8007368 <global_stdio_init.part.0>
 80073e0:	e7f2      	b.n	80073c8 <__sinit+0xc>
 80073e2:	bf00      	nop
 80073e4:	08007329 	.word	0x08007329
 80073e8:	24000574 	.word	0x24000574

080073ec <_fwalk_sglue>:
 80073ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073f0:	4607      	mov	r7, r0
 80073f2:	4688      	mov	r8, r1
 80073f4:	4614      	mov	r4, r2
 80073f6:	2600      	movs	r6, #0
 80073f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80073fc:	f1b9 0901 	subs.w	r9, r9, #1
 8007400:	d505      	bpl.n	800740e <_fwalk_sglue+0x22>
 8007402:	6824      	ldr	r4, [r4, #0]
 8007404:	2c00      	cmp	r4, #0
 8007406:	d1f7      	bne.n	80073f8 <_fwalk_sglue+0xc>
 8007408:	4630      	mov	r0, r6
 800740a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800740e:	89ab      	ldrh	r3, [r5, #12]
 8007410:	2b01      	cmp	r3, #1
 8007412:	d907      	bls.n	8007424 <_fwalk_sglue+0x38>
 8007414:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007418:	3301      	adds	r3, #1
 800741a:	d003      	beq.n	8007424 <_fwalk_sglue+0x38>
 800741c:	4629      	mov	r1, r5
 800741e:	4638      	mov	r0, r7
 8007420:	47c0      	blx	r8
 8007422:	4306      	orrs	r6, r0
 8007424:	3568      	adds	r5, #104	@ 0x68
 8007426:	e7e9      	b.n	80073fc <_fwalk_sglue+0x10>

08007428 <iprintf>:
 8007428:	b40f      	push	{r0, r1, r2, r3}
 800742a:	b507      	push	{r0, r1, r2, lr}
 800742c:	4906      	ldr	r1, [pc, #24]	@ (8007448 <iprintf+0x20>)
 800742e:	ab04      	add	r3, sp, #16
 8007430:	6808      	ldr	r0, [r1, #0]
 8007432:	f853 2b04 	ldr.w	r2, [r3], #4
 8007436:	6881      	ldr	r1, [r0, #8]
 8007438:	9301      	str	r3, [sp, #4]
 800743a:	f001 fc47 	bl	8008ccc <_vfiprintf_r>
 800743e:	b003      	add	sp, #12
 8007440:	f85d eb04 	ldr.w	lr, [sp], #4
 8007444:	b004      	add	sp, #16
 8007446:	4770      	bx	lr
 8007448:	2400003c 	.word	0x2400003c

0800744c <_puts_r>:
 800744c:	6a03      	ldr	r3, [r0, #32]
 800744e:	b570      	push	{r4, r5, r6, lr}
 8007450:	6884      	ldr	r4, [r0, #8]
 8007452:	4605      	mov	r5, r0
 8007454:	460e      	mov	r6, r1
 8007456:	b90b      	cbnz	r3, 800745c <_puts_r+0x10>
 8007458:	f7ff ffb0 	bl	80073bc <__sinit>
 800745c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800745e:	07db      	lsls	r3, r3, #31
 8007460:	d405      	bmi.n	800746e <_puts_r+0x22>
 8007462:	89a3      	ldrh	r3, [r4, #12]
 8007464:	0598      	lsls	r0, r3, #22
 8007466:	d402      	bmi.n	800746e <_puts_r+0x22>
 8007468:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800746a:	f000 f9a2 	bl	80077b2 <__retarget_lock_acquire_recursive>
 800746e:	89a3      	ldrh	r3, [r4, #12]
 8007470:	0719      	lsls	r1, r3, #28
 8007472:	d502      	bpl.n	800747a <_puts_r+0x2e>
 8007474:	6923      	ldr	r3, [r4, #16]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d135      	bne.n	80074e6 <_puts_r+0x9a>
 800747a:	4621      	mov	r1, r4
 800747c:	4628      	mov	r0, r5
 800747e:	f000 f8c5 	bl	800760c <__swsetup_r>
 8007482:	b380      	cbz	r0, 80074e6 <_puts_r+0x9a>
 8007484:	f04f 35ff 	mov.w	r5, #4294967295
 8007488:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800748a:	07da      	lsls	r2, r3, #31
 800748c:	d405      	bmi.n	800749a <_puts_r+0x4e>
 800748e:	89a3      	ldrh	r3, [r4, #12]
 8007490:	059b      	lsls	r3, r3, #22
 8007492:	d402      	bmi.n	800749a <_puts_r+0x4e>
 8007494:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007496:	f000 f98d 	bl	80077b4 <__retarget_lock_release_recursive>
 800749a:	4628      	mov	r0, r5
 800749c:	bd70      	pop	{r4, r5, r6, pc}
 800749e:	2b00      	cmp	r3, #0
 80074a0:	da04      	bge.n	80074ac <_puts_r+0x60>
 80074a2:	69a2      	ldr	r2, [r4, #24]
 80074a4:	429a      	cmp	r2, r3
 80074a6:	dc17      	bgt.n	80074d8 <_puts_r+0x8c>
 80074a8:	290a      	cmp	r1, #10
 80074aa:	d015      	beq.n	80074d8 <_puts_r+0x8c>
 80074ac:	6823      	ldr	r3, [r4, #0]
 80074ae:	1c5a      	adds	r2, r3, #1
 80074b0:	6022      	str	r2, [r4, #0]
 80074b2:	7019      	strb	r1, [r3, #0]
 80074b4:	68a3      	ldr	r3, [r4, #8]
 80074b6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80074ba:	3b01      	subs	r3, #1
 80074bc:	60a3      	str	r3, [r4, #8]
 80074be:	2900      	cmp	r1, #0
 80074c0:	d1ed      	bne.n	800749e <_puts_r+0x52>
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	da11      	bge.n	80074ea <_puts_r+0x9e>
 80074c6:	4622      	mov	r2, r4
 80074c8:	210a      	movs	r1, #10
 80074ca:	4628      	mov	r0, r5
 80074cc:	f000 f85f 	bl	800758e <__swbuf_r>
 80074d0:	3001      	adds	r0, #1
 80074d2:	d0d7      	beq.n	8007484 <_puts_r+0x38>
 80074d4:	250a      	movs	r5, #10
 80074d6:	e7d7      	b.n	8007488 <_puts_r+0x3c>
 80074d8:	4622      	mov	r2, r4
 80074da:	4628      	mov	r0, r5
 80074dc:	f000 f857 	bl	800758e <__swbuf_r>
 80074e0:	3001      	adds	r0, #1
 80074e2:	d1e7      	bne.n	80074b4 <_puts_r+0x68>
 80074e4:	e7ce      	b.n	8007484 <_puts_r+0x38>
 80074e6:	3e01      	subs	r6, #1
 80074e8:	e7e4      	b.n	80074b4 <_puts_r+0x68>
 80074ea:	6823      	ldr	r3, [r4, #0]
 80074ec:	1c5a      	adds	r2, r3, #1
 80074ee:	6022      	str	r2, [r4, #0]
 80074f0:	220a      	movs	r2, #10
 80074f2:	701a      	strb	r2, [r3, #0]
 80074f4:	e7ee      	b.n	80074d4 <_puts_r+0x88>
	...

080074f8 <puts>:
 80074f8:	4b02      	ldr	r3, [pc, #8]	@ (8007504 <puts+0xc>)
 80074fa:	4601      	mov	r1, r0
 80074fc:	6818      	ldr	r0, [r3, #0]
 80074fe:	f7ff bfa5 	b.w	800744c <_puts_r>
 8007502:	bf00      	nop
 8007504:	2400003c 	.word	0x2400003c

08007508 <__sread>:
 8007508:	b510      	push	{r4, lr}
 800750a:	460c      	mov	r4, r1
 800750c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007510:	f000 f900 	bl	8007714 <_read_r>
 8007514:	2800      	cmp	r0, #0
 8007516:	bfab      	itete	ge
 8007518:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800751a:	89a3      	ldrhlt	r3, [r4, #12]
 800751c:	181b      	addge	r3, r3, r0
 800751e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007522:	bfac      	ite	ge
 8007524:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007526:	81a3      	strhlt	r3, [r4, #12]
 8007528:	bd10      	pop	{r4, pc}

0800752a <__swrite>:
 800752a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800752e:	461f      	mov	r7, r3
 8007530:	898b      	ldrh	r3, [r1, #12]
 8007532:	05db      	lsls	r3, r3, #23
 8007534:	4605      	mov	r5, r0
 8007536:	460c      	mov	r4, r1
 8007538:	4616      	mov	r6, r2
 800753a:	d505      	bpl.n	8007548 <__swrite+0x1e>
 800753c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007540:	2302      	movs	r3, #2
 8007542:	2200      	movs	r2, #0
 8007544:	f000 f8d4 	bl	80076f0 <_lseek_r>
 8007548:	89a3      	ldrh	r3, [r4, #12]
 800754a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800754e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007552:	81a3      	strh	r3, [r4, #12]
 8007554:	4632      	mov	r2, r6
 8007556:	463b      	mov	r3, r7
 8007558:	4628      	mov	r0, r5
 800755a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800755e:	f000 b8eb 	b.w	8007738 <_write_r>

08007562 <__sseek>:
 8007562:	b510      	push	{r4, lr}
 8007564:	460c      	mov	r4, r1
 8007566:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800756a:	f000 f8c1 	bl	80076f0 <_lseek_r>
 800756e:	1c43      	adds	r3, r0, #1
 8007570:	89a3      	ldrh	r3, [r4, #12]
 8007572:	bf15      	itete	ne
 8007574:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007576:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800757a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800757e:	81a3      	strheq	r3, [r4, #12]
 8007580:	bf18      	it	ne
 8007582:	81a3      	strhne	r3, [r4, #12]
 8007584:	bd10      	pop	{r4, pc}

08007586 <__sclose>:
 8007586:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800758a:	f000 b8a1 	b.w	80076d0 <_close_r>

0800758e <__swbuf_r>:
 800758e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007590:	460e      	mov	r6, r1
 8007592:	4614      	mov	r4, r2
 8007594:	4605      	mov	r5, r0
 8007596:	b118      	cbz	r0, 80075a0 <__swbuf_r+0x12>
 8007598:	6a03      	ldr	r3, [r0, #32]
 800759a:	b90b      	cbnz	r3, 80075a0 <__swbuf_r+0x12>
 800759c:	f7ff ff0e 	bl	80073bc <__sinit>
 80075a0:	69a3      	ldr	r3, [r4, #24]
 80075a2:	60a3      	str	r3, [r4, #8]
 80075a4:	89a3      	ldrh	r3, [r4, #12]
 80075a6:	071a      	lsls	r2, r3, #28
 80075a8:	d501      	bpl.n	80075ae <__swbuf_r+0x20>
 80075aa:	6923      	ldr	r3, [r4, #16]
 80075ac:	b943      	cbnz	r3, 80075c0 <__swbuf_r+0x32>
 80075ae:	4621      	mov	r1, r4
 80075b0:	4628      	mov	r0, r5
 80075b2:	f000 f82b 	bl	800760c <__swsetup_r>
 80075b6:	b118      	cbz	r0, 80075c0 <__swbuf_r+0x32>
 80075b8:	f04f 37ff 	mov.w	r7, #4294967295
 80075bc:	4638      	mov	r0, r7
 80075be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075c0:	6823      	ldr	r3, [r4, #0]
 80075c2:	6922      	ldr	r2, [r4, #16]
 80075c4:	1a98      	subs	r0, r3, r2
 80075c6:	6963      	ldr	r3, [r4, #20]
 80075c8:	b2f6      	uxtb	r6, r6
 80075ca:	4283      	cmp	r3, r0
 80075cc:	4637      	mov	r7, r6
 80075ce:	dc05      	bgt.n	80075dc <__swbuf_r+0x4e>
 80075d0:	4621      	mov	r1, r4
 80075d2:	4628      	mov	r0, r5
 80075d4:	f001 fd16 	bl	8009004 <_fflush_r>
 80075d8:	2800      	cmp	r0, #0
 80075da:	d1ed      	bne.n	80075b8 <__swbuf_r+0x2a>
 80075dc:	68a3      	ldr	r3, [r4, #8]
 80075de:	3b01      	subs	r3, #1
 80075e0:	60a3      	str	r3, [r4, #8]
 80075e2:	6823      	ldr	r3, [r4, #0]
 80075e4:	1c5a      	adds	r2, r3, #1
 80075e6:	6022      	str	r2, [r4, #0]
 80075e8:	701e      	strb	r6, [r3, #0]
 80075ea:	6962      	ldr	r2, [r4, #20]
 80075ec:	1c43      	adds	r3, r0, #1
 80075ee:	429a      	cmp	r2, r3
 80075f0:	d004      	beq.n	80075fc <__swbuf_r+0x6e>
 80075f2:	89a3      	ldrh	r3, [r4, #12]
 80075f4:	07db      	lsls	r3, r3, #31
 80075f6:	d5e1      	bpl.n	80075bc <__swbuf_r+0x2e>
 80075f8:	2e0a      	cmp	r6, #10
 80075fa:	d1df      	bne.n	80075bc <__swbuf_r+0x2e>
 80075fc:	4621      	mov	r1, r4
 80075fe:	4628      	mov	r0, r5
 8007600:	f001 fd00 	bl	8009004 <_fflush_r>
 8007604:	2800      	cmp	r0, #0
 8007606:	d0d9      	beq.n	80075bc <__swbuf_r+0x2e>
 8007608:	e7d6      	b.n	80075b8 <__swbuf_r+0x2a>
	...

0800760c <__swsetup_r>:
 800760c:	b538      	push	{r3, r4, r5, lr}
 800760e:	4b29      	ldr	r3, [pc, #164]	@ (80076b4 <__swsetup_r+0xa8>)
 8007610:	4605      	mov	r5, r0
 8007612:	6818      	ldr	r0, [r3, #0]
 8007614:	460c      	mov	r4, r1
 8007616:	b118      	cbz	r0, 8007620 <__swsetup_r+0x14>
 8007618:	6a03      	ldr	r3, [r0, #32]
 800761a:	b90b      	cbnz	r3, 8007620 <__swsetup_r+0x14>
 800761c:	f7ff fece 	bl	80073bc <__sinit>
 8007620:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007624:	0719      	lsls	r1, r3, #28
 8007626:	d422      	bmi.n	800766e <__swsetup_r+0x62>
 8007628:	06da      	lsls	r2, r3, #27
 800762a:	d407      	bmi.n	800763c <__swsetup_r+0x30>
 800762c:	2209      	movs	r2, #9
 800762e:	602a      	str	r2, [r5, #0]
 8007630:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007634:	81a3      	strh	r3, [r4, #12]
 8007636:	f04f 30ff 	mov.w	r0, #4294967295
 800763a:	e033      	b.n	80076a4 <__swsetup_r+0x98>
 800763c:	0758      	lsls	r0, r3, #29
 800763e:	d512      	bpl.n	8007666 <__swsetup_r+0x5a>
 8007640:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007642:	b141      	cbz	r1, 8007656 <__swsetup_r+0x4a>
 8007644:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007648:	4299      	cmp	r1, r3
 800764a:	d002      	beq.n	8007652 <__swsetup_r+0x46>
 800764c:	4628      	mov	r0, r5
 800764e:	f000 fe99 	bl	8008384 <_free_r>
 8007652:	2300      	movs	r3, #0
 8007654:	6363      	str	r3, [r4, #52]	@ 0x34
 8007656:	89a3      	ldrh	r3, [r4, #12]
 8007658:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800765c:	81a3      	strh	r3, [r4, #12]
 800765e:	2300      	movs	r3, #0
 8007660:	6063      	str	r3, [r4, #4]
 8007662:	6923      	ldr	r3, [r4, #16]
 8007664:	6023      	str	r3, [r4, #0]
 8007666:	89a3      	ldrh	r3, [r4, #12]
 8007668:	f043 0308 	orr.w	r3, r3, #8
 800766c:	81a3      	strh	r3, [r4, #12]
 800766e:	6923      	ldr	r3, [r4, #16]
 8007670:	b94b      	cbnz	r3, 8007686 <__swsetup_r+0x7a>
 8007672:	89a3      	ldrh	r3, [r4, #12]
 8007674:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007678:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800767c:	d003      	beq.n	8007686 <__swsetup_r+0x7a>
 800767e:	4621      	mov	r1, r4
 8007680:	4628      	mov	r0, r5
 8007682:	f001 fd0d 	bl	80090a0 <__smakebuf_r>
 8007686:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800768a:	f013 0201 	ands.w	r2, r3, #1
 800768e:	d00a      	beq.n	80076a6 <__swsetup_r+0x9a>
 8007690:	2200      	movs	r2, #0
 8007692:	60a2      	str	r2, [r4, #8]
 8007694:	6962      	ldr	r2, [r4, #20]
 8007696:	4252      	negs	r2, r2
 8007698:	61a2      	str	r2, [r4, #24]
 800769a:	6922      	ldr	r2, [r4, #16]
 800769c:	b942      	cbnz	r2, 80076b0 <__swsetup_r+0xa4>
 800769e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80076a2:	d1c5      	bne.n	8007630 <__swsetup_r+0x24>
 80076a4:	bd38      	pop	{r3, r4, r5, pc}
 80076a6:	0799      	lsls	r1, r3, #30
 80076a8:	bf58      	it	pl
 80076aa:	6962      	ldrpl	r2, [r4, #20]
 80076ac:	60a2      	str	r2, [r4, #8]
 80076ae:	e7f4      	b.n	800769a <__swsetup_r+0x8e>
 80076b0:	2000      	movs	r0, #0
 80076b2:	e7f7      	b.n	80076a4 <__swsetup_r+0x98>
 80076b4:	2400003c 	.word	0x2400003c

080076b8 <memset>:
 80076b8:	4402      	add	r2, r0
 80076ba:	4603      	mov	r3, r0
 80076bc:	4293      	cmp	r3, r2
 80076be:	d100      	bne.n	80076c2 <memset+0xa>
 80076c0:	4770      	bx	lr
 80076c2:	f803 1b01 	strb.w	r1, [r3], #1
 80076c6:	e7f9      	b.n	80076bc <memset+0x4>

080076c8 <_localeconv_r>:
 80076c8:	4800      	ldr	r0, [pc, #0]	@ (80076cc <_localeconv_r+0x4>)
 80076ca:	4770      	bx	lr
 80076cc:	2400017c 	.word	0x2400017c

080076d0 <_close_r>:
 80076d0:	b538      	push	{r3, r4, r5, lr}
 80076d2:	4d06      	ldr	r5, [pc, #24]	@ (80076ec <_close_r+0x1c>)
 80076d4:	2300      	movs	r3, #0
 80076d6:	4604      	mov	r4, r0
 80076d8:	4608      	mov	r0, r1
 80076da:	602b      	str	r3, [r5, #0]
 80076dc:	f7f9 ff36 	bl	800154c <_close>
 80076e0:	1c43      	adds	r3, r0, #1
 80076e2:	d102      	bne.n	80076ea <_close_r+0x1a>
 80076e4:	682b      	ldr	r3, [r5, #0]
 80076e6:	b103      	cbz	r3, 80076ea <_close_r+0x1a>
 80076e8:	6023      	str	r3, [r4, #0]
 80076ea:	bd38      	pop	{r3, r4, r5, pc}
 80076ec:	24000578 	.word	0x24000578

080076f0 <_lseek_r>:
 80076f0:	b538      	push	{r3, r4, r5, lr}
 80076f2:	4d07      	ldr	r5, [pc, #28]	@ (8007710 <_lseek_r+0x20>)
 80076f4:	4604      	mov	r4, r0
 80076f6:	4608      	mov	r0, r1
 80076f8:	4611      	mov	r1, r2
 80076fa:	2200      	movs	r2, #0
 80076fc:	602a      	str	r2, [r5, #0]
 80076fe:	461a      	mov	r2, r3
 8007700:	f7f9 ff4b 	bl	800159a <_lseek>
 8007704:	1c43      	adds	r3, r0, #1
 8007706:	d102      	bne.n	800770e <_lseek_r+0x1e>
 8007708:	682b      	ldr	r3, [r5, #0]
 800770a:	b103      	cbz	r3, 800770e <_lseek_r+0x1e>
 800770c:	6023      	str	r3, [r4, #0]
 800770e:	bd38      	pop	{r3, r4, r5, pc}
 8007710:	24000578 	.word	0x24000578

08007714 <_read_r>:
 8007714:	b538      	push	{r3, r4, r5, lr}
 8007716:	4d07      	ldr	r5, [pc, #28]	@ (8007734 <_read_r+0x20>)
 8007718:	4604      	mov	r4, r0
 800771a:	4608      	mov	r0, r1
 800771c:	4611      	mov	r1, r2
 800771e:	2200      	movs	r2, #0
 8007720:	602a      	str	r2, [r5, #0]
 8007722:	461a      	mov	r2, r3
 8007724:	f7f9 fed9 	bl	80014da <_read>
 8007728:	1c43      	adds	r3, r0, #1
 800772a:	d102      	bne.n	8007732 <_read_r+0x1e>
 800772c:	682b      	ldr	r3, [r5, #0]
 800772e:	b103      	cbz	r3, 8007732 <_read_r+0x1e>
 8007730:	6023      	str	r3, [r4, #0]
 8007732:	bd38      	pop	{r3, r4, r5, pc}
 8007734:	24000578 	.word	0x24000578

08007738 <_write_r>:
 8007738:	b538      	push	{r3, r4, r5, lr}
 800773a:	4d07      	ldr	r5, [pc, #28]	@ (8007758 <_write_r+0x20>)
 800773c:	4604      	mov	r4, r0
 800773e:	4608      	mov	r0, r1
 8007740:	4611      	mov	r1, r2
 8007742:	2200      	movs	r2, #0
 8007744:	602a      	str	r2, [r5, #0]
 8007746:	461a      	mov	r2, r3
 8007748:	f7f9 fee4 	bl	8001514 <_write>
 800774c:	1c43      	adds	r3, r0, #1
 800774e:	d102      	bne.n	8007756 <_write_r+0x1e>
 8007750:	682b      	ldr	r3, [r5, #0]
 8007752:	b103      	cbz	r3, 8007756 <_write_r+0x1e>
 8007754:	6023      	str	r3, [r4, #0]
 8007756:	bd38      	pop	{r3, r4, r5, pc}
 8007758:	24000578 	.word	0x24000578

0800775c <__errno>:
 800775c:	4b01      	ldr	r3, [pc, #4]	@ (8007764 <__errno+0x8>)
 800775e:	6818      	ldr	r0, [r3, #0]
 8007760:	4770      	bx	lr
 8007762:	bf00      	nop
 8007764:	2400003c 	.word	0x2400003c

08007768 <__libc_init_array>:
 8007768:	b570      	push	{r4, r5, r6, lr}
 800776a:	4d0d      	ldr	r5, [pc, #52]	@ (80077a0 <__libc_init_array+0x38>)
 800776c:	4c0d      	ldr	r4, [pc, #52]	@ (80077a4 <__libc_init_array+0x3c>)
 800776e:	1b64      	subs	r4, r4, r5
 8007770:	10a4      	asrs	r4, r4, #2
 8007772:	2600      	movs	r6, #0
 8007774:	42a6      	cmp	r6, r4
 8007776:	d109      	bne.n	800778c <__libc_init_array+0x24>
 8007778:	4d0b      	ldr	r5, [pc, #44]	@ (80077a8 <__libc_init_array+0x40>)
 800777a:	4c0c      	ldr	r4, [pc, #48]	@ (80077ac <__libc_init_array+0x44>)
 800777c:	f001 fdbc 	bl	80092f8 <_init>
 8007780:	1b64      	subs	r4, r4, r5
 8007782:	10a4      	asrs	r4, r4, #2
 8007784:	2600      	movs	r6, #0
 8007786:	42a6      	cmp	r6, r4
 8007788:	d105      	bne.n	8007796 <__libc_init_array+0x2e>
 800778a:	bd70      	pop	{r4, r5, r6, pc}
 800778c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007790:	4798      	blx	r3
 8007792:	3601      	adds	r6, #1
 8007794:	e7ee      	b.n	8007774 <__libc_init_array+0xc>
 8007796:	f855 3b04 	ldr.w	r3, [r5], #4
 800779a:	4798      	blx	r3
 800779c:	3601      	adds	r6, #1
 800779e:	e7f2      	b.n	8007786 <__libc_init_array+0x1e>
 80077a0:	080097e4 	.word	0x080097e4
 80077a4:	080097e4 	.word	0x080097e4
 80077a8:	080097e4 	.word	0x080097e4
 80077ac:	080097e8 	.word	0x080097e8

080077b0 <__retarget_lock_init_recursive>:
 80077b0:	4770      	bx	lr

080077b2 <__retarget_lock_acquire_recursive>:
 80077b2:	4770      	bx	lr

080077b4 <__retarget_lock_release_recursive>:
 80077b4:	4770      	bx	lr

080077b6 <quorem>:
 80077b6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077ba:	6903      	ldr	r3, [r0, #16]
 80077bc:	690c      	ldr	r4, [r1, #16]
 80077be:	42a3      	cmp	r3, r4
 80077c0:	4607      	mov	r7, r0
 80077c2:	db7e      	blt.n	80078c2 <quorem+0x10c>
 80077c4:	3c01      	subs	r4, #1
 80077c6:	f101 0814 	add.w	r8, r1, #20
 80077ca:	00a3      	lsls	r3, r4, #2
 80077cc:	f100 0514 	add.w	r5, r0, #20
 80077d0:	9300      	str	r3, [sp, #0]
 80077d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80077d6:	9301      	str	r3, [sp, #4]
 80077d8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80077dc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80077e0:	3301      	adds	r3, #1
 80077e2:	429a      	cmp	r2, r3
 80077e4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80077e8:	fbb2 f6f3 	udiv	r6, r2, r3
 80077ec:	d32e      	bcc.n	800784c <quorem+0x96>
 80077ee:	f04f 0a00 	mov.w	sl, #0
 80077f2:	46c4      	mov	ip, r8
 80077f4:	46ae      	mov	lr, r5
 80077f6:	46d3      	mov	fp, sl
 80077f8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80077fc:	b298      	uxth	r0, r3
 80077fe:	fb06 a000 	mla	r0, r6, r0, sl
 8007802:	0c02      	lsrs	r2, r0, #16
 8007804:	0c1b      	lsrs	r3, r3, #16
 8007806:	fb06 2303 	mla	r3, r6, r3, r2
 800780a:	f8de 2000 	ldr.w	r2, [lr]
 800780e:	b280      	uxth	r0, r0
 8007810:	b292      	uxth	r2, r2
 8007812:	1a12      	subs	r2, r2, r0
 8007814:	445a      	add	r2, fp
 8007816:	f8de 0000 	ldr.w	r0, [lr]
 800781a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800781e:	b29b      	uxth	r3, r3
 8007820:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007824:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007828:	b292      	uxth	r2, r2
 800782a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800782e:	45e1      	cmp	r9, ip
 8007830:	f84e 2b04 	str.w	r2, [lr], #4
 8007834:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007838:	d2de      	bcs.n	80077f8 <quorem+0x42>
 800783a:	9b00      	ldr	r3, [sp, #0]
 800783c:	58eb      	ldr	r3, [r5, r3]
 800783e:	b92b      	cbnz	r3, 800784c <quorem+0x96>
 8007840:	9b01      	ldr	r3, [sp, #4]
 8007842:	3b04      	subs	r3, #4
 8007844:	429d      	cmp	r5, r3
 8007846:	461a      	mov	r2, r3
 8007848:	d32f      	bcc.n	80078aa <quorem+0xf4>
 800784a:	613c      	str	r4, [r7, #16]
 800784c:	4638      	mov	r0, r7
 800784e:	f001 f90b 	bl	8008a68 <__mcmp>
 8007852:	2800      	cmp	r0, #0
 8007854:	db25      	blt.n	80078a2 <quorem+0xec>
 8007856:	4629      	mov	r1, r5
 8007858:	2000      	movs	r0, #0
 800785a:	f858 2b04 	ldr.w	r2, [r8], #4
 800785e:	f8d1 c000 	ldr.w	ip, [r1]
 8007862:	fa1f fe82 	uxth.w	lr, r2
 8007866:	fa1f f38c 	uxth.w	r3, ip
 800786a:	eba3 030e 	sub.w	r3, r3, lr
 800786e:	4403      	add	r3, r0
 8007870:	0c12      	lsrs	r2, r2, #16
 8007872:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007876:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800787a:	b29b      	uxth	r3, r3
 800787c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007880:	45c1      	cmp	r9, r8
 8007882:	f841 3b04 	str.w	r3, [r1], #4
 8007886:	ea4f 4022 	mov.w	r0, r2, asr #16
 800788a:	d2e6      	bcs.n	800785a <quorem+0xa4>
 800788c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007890:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007894:	b922      	cbnz	r2, 80078a0 <quorem+0xea>
 8007896:	3b04      	subs	r3, #4
 8007898:	429d      	cmp	r5, r3
 800789a:	461a      	mov	r2, r3
 800789c:	d30b      	bcc.n	80078b6 <quorem+0x100>
 800789e:	613c      	str	r4, [r7, #16]
 80078a0:	3601      	adds	r6, #1
 80078a2:	4630      	mov	r0, r6
 80078a4:	b003      	add	sp, #12
 80078a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078aa:	6812      	ldr	r2, [r2, #0]
 80078ac:	3b04      	subs	r3, #4
 80078ae:	2a00      	cmp	r2, #0
 80078b0:	d1cb      	bne.n	800784a <quorem+0x94>
 80078b2:	3c01      	subs	r4, #1
 80078b4:	e7c6      	b.n	8007844 <quorem+0x8e>
 80078b6:	6812      	ldr	r2, [r2, #0]
 80078b8:	3b04      	subs	r3, #4
 80078ba:	2a00      	cmp	r2, #0
 80078bc:	d1ef      	bne.n	800789e <quorem+0xe8>
 80078be:	3c01      	subs	r4, #1
 80078c0:	e7ea      	b.n	8007898 <quorem+0xe2>
 80078c2:	2000      	movs	r0, #0
 80078c4:	e7ee      	b.n	80078a4 <quorem+0xee>
	...

080078c8 <_dtoa_r>:
 80078c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078cc:	ed2d 8b02 	vpush	{d8}
 80078d0:	69c7      	ldr	r7, [r0, #28]
 80078d2:	b091      	sub	sp, #68	@ 0x44
 80078d4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80078d8:	ec55 4b10 	vmov	r4, r5, d0
 80078dc:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 80078de:	9107      	str	r1, [sp, #28]
 80078e0:	4681      	mov	r9, r0
 80078e2:	9209      	str	r2, [sp, #36]	@ 0x24
 80078e4:	930d      	str	r3, [sp, #52]	@ 0x34
 80078e6:	b97f      	cbnz	r7, 8007908 <_dtoa_r+0x40>
 80078e8:	2010      	movs	r0, #16
 80078ea:	f000 fd95 	bl	8008418 <malloc>
 80078ee:	4602      	mov	r2, r0
 80078f0:	f8c9 001c 	str.w	r0, [r9, #28]
 80078f4:	b920      	cbnz	r0, 8007900 <_dtoa_r+0x38>
 80078f6:	4ba0      	ldr	r3, [pc, #640]	@ (8007b78 <_dtoa_r+0x2b0>)
 80078f8:	21ef      	movs	r1, #239	@ 0xef
 80078fa:	48a0      	ldr	r0, [pc, #640]	@ (8007b7c <_dtoa_r+0x2b4>)
 80078fc:	f001 fc4c 	bl	8009198 <__assert_func>
 8007900:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007904:	6007      	str	r7, [r0, #0]
 8007906:	60c7      	str	r7, [r0, #12]
 8007908:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800790c:	6819      	ldr	r1, [r3, #0]
 800790e:	b159      	cbz	r1, 8007928 <_dtoa_r+0x60>
 8007910:	685a      	ldr	r2, [r3, #4]
 8007912:	604a      	str	r2, [r1, #4]
 8007914:	2301      	movs	r3, #1
 8007916:	4093      	lsls	r3, r2
 8007918:	608b      	str	r3, [r1, #8]
 800791a:	4648      	mov	r0, r9
 800791c:	f000 fe72 	bl	8008604 <_Bfree>
 8007920:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007924:	2200      	movs	r2, #0
 8007926:	601a      	str	r2, [r3, #0]
 8007928:	1e2b      	subs	r3, r5, #0
 800792a:	bfbb      	ittet	lt
 800792c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007930:	9303      	strlt	r3, [sp, #12]
 8007932:	2300      	movge	r3, #0
 8007934:	2201      	movlt	r2, #1
 8007936:	bfac      	ite	ge
 8007938:	6033      	strge	r3, [r6, #0]
 800793a:	6032      	strlt	r2, [r6, #0]
 800793c:	4b90      	ldr	r3, [pc, #576]	@ (8007b80 <_dtoa_r+0x2b8>)
 800793e:	9e03      	ldr	r6, [sp, #12]
 8007940:	43b3      	bics	r3, r6
 8007942:	d110      	bne.n	8007966 <_dtoa_r+0x9e>
 8007944:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007946:	f242 730f 	movw	r3, #9999	@ 0x270f
 800794a:	6013      	str	r3, [r2, #0]
 800794c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8007950:	4323      	orrs	r3, r4
 8007952:	f000 84e6 	beq.w	8008322 <_dtoa_r+0xa5a>
 8007956:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007958:	4f8a      	ldr	r7, [pc, #552]	@ (8007b84 <_dtoa_r+0x2bc>)
 800795a:	2b00      	cmp	r3, #0
 800795c:	f000 84e8 	beq.w	8008330 <_dtoa_r+0xa68>
 8007960:	1cfb      	adds	r3, r7, #3
 8007962:	f000 bce3 	b.w	800832c <_dtoa_r+0xa64>
 8007966:	ed9d 8b02 	vldr	d8, [sp, #8]
 800796a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800796e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007972:	d10a      	bne.n	800798a <_dtoa_r+0xc2>
 8007974:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007976:	2301      	movs	r3, #1
 8007978:	6013      	str	r3, [r2, #0]
 800797a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800797c:	b113      	cbz	r3, 8007984 <_dtoa_r+0xbc>
 800797e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8007980:	4b81      	ldr	r3, [pc, #516]	@ (8007b88 <_dtoa_r+0x2c0>)
 8007982:	6013      	str	r3, [r2, #0]
 8007984:	4f81      	ldr	r7, [pc, #516]	@ (8007b8c <_dtoa_r+0x2c4>)
 8007986:	f000 bcd3 	b.w	8008330 <_dtoa_r+0xa68>
 800798a:	aa0e      	add	r2, sp, #56	@ 0x38
 800798c:	a90f      	add	r1, sp, #60	@ 0x3c
 800798e:	4648      	mov	r0, r9
 8007990:	eeb0 0b48 	vmov.f64	d0, d8
 8007994:	f001 f918 	bl	8008bc8 <__d2b>
 8007998:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800799c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800799e:	9001      	str	r0, [sp, #4]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d045      	beq.n	8007a30 <_dtoa_r+0x168>
 80079a4:	eeb0 7b48 	vmov.f64	d7, d8
 80079a8:	ee18 1a90 	vmov	r1, s17
 80079ac:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80079b0:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 80079b4:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80079b8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80079bc:	2500      	movs	r5, #0
 80079be:	ee07 1a90 	vmov	s15, r1
 80079c2:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 80079c6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8007b60 <_dtoa_r+0x298>
 80079ca:	ee37 7b46 	vsub.f64	d7, d7, d6
 80079ce:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8007b68 <_dtoa_r+0x2a0>
 80079d2:	eea7 6b05 	vfma.f64	d6, d7, d5
 80079d6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8007b70 <_dtoa_r+0x2a8>
 80079da:	ee07 3a90 	vmov	s15, r3
 80079de:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80079e2:	eeb0 7b46 	vmov.f64	d7, d6
 80079e6:	eea4 7b05 	vfma.f64	d7, d4, d5
 80079ea:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80079ee:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80079f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079f6:	ee16 8a90 	vmov	r8, s13
 80079fa:	d508      	bpl.n	8007a0e <_dtoa_r+0x146>
 80079fc:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8007a00:	eeb4 6b47 	vcmp.f64	d6, d7
 8007a04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a08:	bf18      	it	ne
 8007a0a:	f108 38ff 	addne.w	r8, r8, #4294967295
 8007a0e:	f1b8 0f16 	cmp.w	r8, #22
 8007a12:	d82b      	bhi.n	8007a6c <_dtoa_r+0x1a4>
 8007a14:	495e      	ldr	r1, [pc, #376]	@ (8007b90 <_dtoa_r+0x2c8>)
 8007a16:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8007a1a:	ed91 7b00 	vldr	d7, [r1]
 8007a1e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8007a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a26:	d501      	bpl.n	8007a2c <_dtoa_r+0x164>
 8007a28:	f108 38ff 	add.w	r8, r8, #4294967295
 8007a2c:	2100      	movs	r1, #0
 8007a2e:	e01e      	b.n	8007a6e <_dtoa_r+0x1a6>
 8007a30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a32:	4413      	add	r3, r2
 8007a34:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8007a38:	2920      	cmp	r1, #32
 8007a3a:	bfc1      	itttt	gt
 8007a3c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8007a40:	408e      	lslgt	r6, r1
 8007a42:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8007a46:	fa24 f101 	lsrgt.w	r1, r4, r1
 8007a4a:	bfd6      	itet	le
 8007a4c:	f1c1 0120 	rsble	r1, r1, #32
 8007a50:	4331      	orrgt	r1, r6
 8007a52:	fa04 f101 	lslle.w	r1, r4, r1
 8007a56:	ee07 1a90 	vmov	s15, r1
 8007a5a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8007a5e:	3b01      	subs	r3, #1
 8007a60:	ee17 1a90 	vmov	r1, s15
 8007a64:	2501      	movs	r5, #1
 8007a66:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8007a6a:	e7a8      	b.n	80079be <_dtoa_r+0xf6>
 8007a6c:	2101      	movs	r1, #1
 8007a6e:	1ad2      	subs	r2, r2, r3
 8007a70:	1e53      	subs	r3, r2, #1
 8007a72:	9306      	str	r3, [sp, #24]
 8007a74:	bf45      	ittet	mi
 8007a76:	f1c2 0301 	rsbmi	r3, r2, #1
 8007a7a:	9304      	strmi	r3, [sp, #16]
 8007a7c:	2300      	movpl	r3, #0
 8007a7e:	2300      	movmi	r3, #0
 8007a80:	bf4c      	ite	mi
 8007a82:	9306      	strmi	r3, [sp, #24]
 8007a84:	9304      	strpl	r3, [sp, #16]
 8007a86:	f1b8 0f00 	cmp.w	r8, #0
 8007a8a:	910c      	str	r1, [sp, #48]	@ 0x30
 8007a8c:	db18      	blt.n	8007ac0 <_dtoa_r+0x1f8>
 8007a8e:	9b06      	ldr	r3, [sp, #24]
 8007a90:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8007a94:	4443      	add	r3, r8
 8007a96:	9306      	str	r3, [sp, #24]
 8007a98:	2300      	movs	r3, #0
 8007a9a:	9a07      	ldr	r2, [sp, #28]
 8007a9c:	2a09      	cmp	r2, #9
 8007a9e:	d845      	bhi.n	8007b2c <_dtoa_r+0x264>
 8007aa0:	2a05      	cmp	r2, #5
 8007aa2:	bfc4      	itt	gt
 8007aa4:	3a04      	subgt	r2, #4
 8007aa6:	9207      	strgt	r2, [sp, #28]
 8007aa8:	9a07      	ldr	r2, [sp, #28]
 8007aaa:	f1a2 0202 	sub.w	r2, r2, #2
 8007aae:	bfcc      	ite	gt
 8007ab0:	2400      	movgt	r4, #0
 8007ab2:	2401      	movle	r4, #1
 8007ab4:	2a03      	cmp	r2, #3
 8007ab6:	d844      	bhi.n	8007b42 <_dtoa_r+0x27a>
 8007ab8:	e8df f002 	tbb	[pc, r2]
 8007abc:	0b173634 	.word	0x0b173634
 8007ac0:	9b04      	ldr	r3, [sp, #16]
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	eba3 0308 	sub.w	r3, r3, r8
 8007ac8:	9304      	str	r3, [sp, #16]
 8007aca:	920a      	str	r2, [sp, #40]	@ 0x28
 8007acc:	f1c8 0300 	rsb	r3, r8, #0
 8007ad0:	e7e3      	b.n	8007a9a <_dtoa_r+0x1d2>
 8007ad2:	2201      	movs	r2, #1
 8007ad4:	9208      	str	r2, [sp, #32]
 8007ad6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007ad8:	eb08 0b02 	add.w	fp, r8, r2
 8007adc:	f10b 0a01 	add.w	sl, fp, #1
 8007ae0:	4652      	mov	r2, sl
 8007ae2:	2a01      	cmp	r2, #1
 8007ae4:	bfb8      	it	lt
 8007ae6:	2201      	movlt	r2, #1
 8007ae8:	e006      	b.n	8007af8 <_dtoa_r+0x230>
 8007aea:	2201      	movs	r2, #1
 8007aec:	9208      	str	r2, [sp, #32]
 8007aee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007af0:	2a00      	cmp	r2, #0
 8007af2:	dd29      	ble.n	8007b48 <_dtoa_r+0x280>
 8007af4:	4693      	mov	fp, r2
 8007af6:	4692      	mov	sl, r2
 8007af8:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8007afc:	2100      	movs	r1, #0
 8007afe:	2004      	movs	r0, #4
 8007b00:	f100 0614 	add.w	r6, r0, #20
 8007b04:	4296      	cmp	r6, r2
 8007b06:	d926      	bls.n	8007b56 <_dtoa_r+0x28e>
 8007b08:	6079      	str	r1, [r7, #4]
 8007b0a:	4648      	mov	r0, r9
 8007b0c:	9305      	str	r3, [sp, #20]
 8007b0e:	f000 fd39 	bl	8008584 <_Balloc>
 8007b12:	9b05      	ldr	r3, [sp, #20]
 8007b14:	4607      	mov	r7, r0
 8007b16:	2800      	cmp	r0, #0
 8007b18:	d13e      	bne.n	8007b98 <_dtoa_r+0x2d0>
 8007b1a:	4b1e      	ldr	r3, [pc, #120]	@ (8007b94 <_dtoa_r+0x2cc>)
 8007b1c:	4602      	mov	r2, r0
 8007b1e:	f240 11af 	movw	r1, #431	@ 0x1af
 8007b22:	e6ea      	b.n	80078fa <_dtoa_r+0x32>
 8007b24:	2200      	movs	r2, #0
 8007b26:	e7e1      	b.n	8007aec <_dtoa_r+0x224>
 8007b28:	2200      	movs	r2, #0
 8007b2a:	e7d3      	b.n	8007ad4 <_dtoa_r+0x20c>
 8007b2c:	2401      	movs	r4, #1
 8007b2e:	2200      	movs	r2, #0
 8007b30:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8007b34:	f04f 3bff 	mov.w	fp, #4294967295
 8007b38:	2100      	movs	r1, #0
 8007b3a:	46da      	mov	sl, fp
 8007b3c:	2212      	movs	r2, #18
 8007b3e:	9109      	str	r1, [sp, #36]	@ 0x24
 8007b40:	e7da      	b.n	8007af8 <_dtoa_r+0x230>
 8007b42:	2201      	movs	r2, #1
 8007b44:	9208      	str	r2, [sp, #32]
 8007b46:	e7f5      	b.n	8007b34 <_dtoa_r+0x26c>
 8007b48:	f04f 0b01 	mov.w	fp, #1
 8007b4c:	46da      	mov	sl, fp
 8007b4e:	465a      	mov	r2, fp
 8007b50:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8007b54:	e7d0      	b.n	8007af8 <_dtoa_r+0x230>
 8007b56:	3101      	adds	r1, #1
 8007b58:	0040      	lsls	r0, r0, #1
 8007b5a:	e7d1      	b.n	8007b00 <_dtoa_r+0x238>
 8007b5c:	f3af 8000 	nop.w
 8007b60:	636f4361 	.word	0x636f4361
 8007b64:	3fd287a7 	.word	0x3fd287a7
 8007b68:	8b60c8b3 	.word	0x8b60c8b3
 8007b6c:	3fc68a28 	.word	0x3fc68a28
 8007b70:	509f79fb 	.word	0x509f79fb
 8007b74:	3fd34413 	.word	0x3fd34413
 8007b78:	080094a9 	.word	0x080094a9
 8007b7c:	080094c0 	.word	0x080094c0
 8007b80:	7ff00000 	.word	0x7ff00000
 8007b84:	080094a5 	.word	0x080094a5
 8007b88:	08009479 	.word	0x08009479
 8007b8c:	08009478 	.word	0x08009478
 8007b90:	08009610 	.word	0x08009610
 8007b94:	08009518 	.word	0x08009518
 8007b98:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8007b9c:	f1ba 0f0e 	cmp.w	sl, #14
 8007ba0:	6010      	str	r0, [r2, #0]
 8007ba2:	d86e      	bhi.n	8007c82 <_dtoa_r+0x3ba>
 8007ba4:	2c00      	cmp	r4, #0
 8007ba6:	d06c      	beq.n	8007c82 <_dtoa_r+0x3ba>
 8007ba8:	f1b8 0f00 	cmp.w	r8, #0
 8007bac:	f340 80b4 	ble.w	8007d18 <_dtoa_r+0x450>
 8007bb0:	4ac8      	ldr	r2, [pc, #800]	@ (8007ed4 <_dtoa_r+0x60c>)
 8007bb2:	f008 010f 	and.w	r1, r8, #15
 8007bb6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8007bba:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8007bbe:	ed92 7b00 	vldr	d7, [r2]
 8007bc2:	ea4f 1128 	mov.w	r1, r8, asr #4
 8007bc6:	f000 809b 	beq.w	8007d00 <_dtoa_r+0x438>
 8007bca:	4ac3      	ldr	r2, [pc, #780]	@ (8007ed8 <_dtoa_r+0x610>)
 8007bcc:	ed92 6b08 	vldr	d6, [r2, #32]
 8007bd0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8007bd4:	ed8d 6b02 	vstr	d6, [sp, #8]
 8007bd8:	f001 010f 	and.w	r1, r1, #15
 8007bdc:	2203      	movs	r2, #3
 8007bde:	48be      	ldr	r0, [pc, #760]	@ (8007ed8 <_dtoa_r+0x610>)
 8007be0:	2900      	cmp	r1, #0
 8007be2:	f040 808f 	bne.w	8007d04 <_dtoa_r+0x43c>
 8007be6:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007bea:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8007bee:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007bf2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007bf4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007bf8:	2900      	cmp	r1, #0
 8007bfa:	f000 80b3 	beq.w	8007d64 <_dtoa_r+0x49c>
 8007bfe:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8007c02:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c0a:	f140 80ab 	bpl.w	8007d64 <_dtoa_r+0x49c>
 8007c0e:	f1ba 0f00 	cmp.w	sl, #0
 8007c12:	f000 80a7 	beq.w	8007d64 <_dtoa_r+0x49c>
 8007c16:	f1bb 0f00 	cmp.w	fp, #0
 8007c1a:	dd30      	ble.n	8007c7e <_dtoa_r+0x3b6>
 8007c1c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8007c20:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007c24:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007c28:	f108 31ff 	add.w	r1, r8, #4294967295
 8007c2c:	9105      	str	r1, [sp, #20]
 8007c2e:	3201      	adds	r2, #1
 8007c30:	465c      	mov	r4, fp
 8007c32:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007c36:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8007c3a:	ee07 2a90 	vmov	s15, r2
 8007c3e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007c42:	eea7 5b06 	vfma.f64	d5, d7, d6
 8007c46:	ee15 2a90 	vmov	r2, s11
 8007c4a:	ec51 0b15 	vmov	r0, r1, d5
 8007c4e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8007c52:	2c00      	cmp	r4, #0
 8007c54:	f040 808a 	bne.w	8007d6c <_dtoa_r+0x4a4>
 8007c58:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8007c5c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007c60:	ec41 0b17 	vmov	d7, r0, r1
 8007c64:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007c68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c6c:	f300 826a 	bgt.w	8008144 <_dtoa_r+0x87c>
 8007c70:	eeb1 7b47 	vneg.f64	d7, d7
 8007c74:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007c78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c7c:	d423      	bmi.n	8007cc6 <_dtoa_r+0x3fe>
 8007c7e:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007c82:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007c84:	2a00      	cmp	r2, #0
 8007c86:	f2c0 8129 	blt.w	8007edc <_dtoa_r+0x614>
 8007c8a:	f1b8 0f0e 	cmp.w	r8, #14
 8007c8e:	f300 8125 	bgt.w	8007edc <_dtoa_r+0x614>
 8007c92:	4b90      	ldr	r3, [pc, #576]	@ (8007ed4 <_dtoa_r+0x60c>)
 8007c94:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007c98:	ed93 6b00 	vldr	d6, [r3]
 8007c9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	f280 80c8 	bge.w	8007e34 <_dtoa_r+0x56c>
 8007ca4:	f1ba 0f00 	cmp.w	sl, #0
 8007ca8:	f300 80c4 	bgt.w	8007e34 <_dtoa_r+0x56c>
 8007cac:	d10b      	bne.n	8007cc6 <_dtoa_r+0x3fe>
 8007cae:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8007cb2:	ee26 6b07 	vmul.f64	d6, d6, d7
 8007cb6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007cba:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cc2:	f2c0 823c 	blt.w	800813e <_dtoa_r+0x876>
 8007cc6:	2400      	movs	r4, #0
 8007cc8:	4625      	mov	r5, r4
 8007cca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ccc:	43db      	mvns	r3, r3
 8007cce:	9305      	str	r3, [sp, #20]
 8007cd0:	463e      	mov	r6, r7
 8007cd2:	f04f 0800 	mov.w	r8, #0
 8007cd6:	4621      	mov	r1, r4
 8007cd8:	4648      	mov	r0, r9
 8007cda:	f000 fc93 	bl	8008604 <_Bfree>
 8007cde:	2d00      	cmp	r5, #0
 8007ce0:	f000 80a2 	beq.w	8007e28 <_dtoa_r+0x560>
 8007ce4:	f1b8 0f00 	cmp.w	r8, #0
 8007ce8:	d005      	beq.n	8007cf6 <_dtoa_r+0x42e>
 8007cea:	45a8      	cmp	r8, r5
 8007cec:	d003      	beq.n	8007cf6 <_dtoa_r+0x42e>
 8007cee:	4641      	mov	r1, r8
 8007cf0:	4648      	mov	r0, r9
 8007cf2:	f000 fc87 	bl	8008604 <_Bfree>
 8007cf6:	4629      	mov	r1, r5
 8007cf8:	4648      	mov	r0, r9
 8007cfa:	f000 fc83 	bl	8008604 <_Bfree>
 8007cfe:	e093      	b.n	8007e28 <_dtoa_r+0x560>
 8007d00:	2202      	movs	r2, #2
 8007d02:	e76c      	b.n	8007bde <_dtoa_r+0x316>
 8007d04:	07cc      	lsls	r4, r1, #31
 8007d06:	d504      	bpl.n	8007d12 <_dtoa_r+0x44a>
 8007d08:	ed90 6b00 	vldr	d6, [r0]
 8007d0c:	3201      	adds	r2, #1
 8007d0e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007d12:	1049      	asrs	r1, r1, #1
 8007d14:	3008      	adds	r0, #8
 8007d16:	e763      	b.n	8007be0 <_dtoa_r+0x318>
 8007d18:	d022      	beq.n	8007d60 <_dtoa_r+0x498>
 8007d1a:	f1c8 0100 	rsb	r1, r8, #0
 8007d1e:	4a6d      	ldr	r2, [pc, #436]	@ (8007ed4 <_dtoa_r+0x60c>)
 8007d20:	f001 000f 	and.w	r0, r1, #15
 8007d24:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8007d28:	ed92 7b00 	vldr	d7, [r2]
 8007d2c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8007d30:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007d34:	4868      	ldr	r0, [pc, #416]	@ (8007ed8 <_dtoa_r+0x610>)
 8007d36:	1109      	asrs	r1, r1, #4
 8007d38:	2400      	movs	r4, #0
 8007d3a:	2202      	movs	r2, #2
 8007d3c:	b929      	cbnz	r1, 8007d4a <_dtoa_r+0x482>
 8007d3e:	2c00      	cmp	r4, #0
 8007d40:	f43f af57 	beq.w	8007bf2 <_dtoa_r+0x32a>
 8007d44:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007d48:	e753      	b.n	8007bf2 <_dtoa_r+0x32a>
 8007d4a:	07ce      	lsls	r6, r1, #31
 8007d4c:	d505      	bpl.n	8007d5a <_dtoa_r+0x492>
 8007d4e:	ed90 6b00 	vldr	d6, [r0]
 8007d52:	3201      	adds	r2, #1
 8007d54:	2401      	movs	r4, #1
 8007d56:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007d5a:	1049      	asrs	r1, r1, #1
 8007d5c:	3008      	adds	r0, #8
 8007d5e:	e7ed      	b.n	8007d3c <_dtoa_r+0x474>
 8007d60:	2202      	movs	r2, #2
 8007d62:	e746      	b.n	8007bf2 <_dtoa_r+0x32a>
 8007d64:	f8cd 8014 	str.w	r8, [sp, #20]
 8007d68:	4654      	mov	r4, sl
 8007d6a:	e762      	b.n	8007c32 <_dtoa_r+0x36a>
 8007d6c:	4a59      	ldr	r2, [pc, #356]	@ (8007ed4 <_dtoa_r+0x60c>)
 8007d6e:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8007d72:	ed12 4b02 	vldr	d4, [r2, #-8]
 8007d76:	9a08      	ldr	r2, [sp, #32]
 8007d78:	ec41 0b17 	vmov	d7, r0, r1
 8007d7c:	443c      	add	r4, r7
 8007d7e:	b34a      	cbz	r2, 8007dd4 <_dtoa_r+0x50c>
 8007d80:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8007d84:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8007d88:	463e      	mov	r6, r7
 8007d8a:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8007d8e:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8007d92:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007d96:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007d9a:	ee14 2a90 	vmov	r2, s9
 8007d9e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007da2:	3230      	adds	r2, #48	@ 0x30
 8007da4:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007da8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007dac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007db0:	f806 2b01 	strb.w	r2, [r6], #1
 8007db4:	d438      	bmi.n	8007e28 <_dtoa_r+0x560>
 8007db6:	ee32 5b46 	vsub.f64	d5, d2, d6
 8007dba:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8007dbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dc2:	d46e      	bmi.n	8007ea2 <_dtoa_r+0x5da>
 8007dc4:	42a6      	cmp	r6, r4
 8007dc6:	f43f af5a 	beq.w	8007c7e <_dtoa_r+0x3b6>
 8007dca:	ee27 7b03 	vmul.f64	d7, d7, d3
 8007dce:	ee26 6b03 	vmul.f64	d6, d6, d3
 8007dd2:	e7e0      	b.n	8007d96 <_dtoa_r+0x4ce>
 8007dd4:	4621      	mov	r1, r4
 8007dd6:	463e      	mov	r6, r7
 8007dd8:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007ddc:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8007de0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007de4:	ee14 2a90 	vmov	r2, s9
 8007de8:	3230      	adds	r2, #48	@ 0x30
 8007dea:	f806 2b01 	strb.w	r2, [r6], #1
 8007dee:	42a6      	cmp	r6, r4
 8007df0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007df4:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007df8:	d119      	bne.n	8007e2e <_dtoa_r+0x566>
 8007dfa:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8007dfe:	ee37 4b05 	vadd.f64	d4, d7, d5
 8007e02:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8007e06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e0a:	dc4a      	bgt.n	8007ea2 <_dtoa_r+0x5da>
 8007e0c:	ee35 5b47 	vsub.f64	d5, d5, d7
 8007e10:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8007e14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e18:	f57f af31 	bpl.w	8007c7e <_dtoa_r+0x3b6>
 8007e1c:	460e      	mov	r6, r1
 8007e1e:	3901      	subs	r1, #1
 8007e20:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007e24:	2b30      	cmp	r3, #48	@ 0x30
 8007e26:	d0f9      	beq.n	8007e1c <_dtoa_r+0x554>
 8007e28:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8007e2c:	e027      	b.n	8007e7e <_dtoa_r+0x5b6>
 8007e2e:	ee26 6b03 	vmul.f64	d6, d6, d3
 8007e32:	e7d5      	b.n	8007de0 <_dtoa_r+0x518>
 8007e34:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007e38:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8007e3c:	463e      	mov	r6, r7
 8007e3e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8007e42:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8007e46:	ee15 3a10 	vmov	r3, s10
 8007e4a:	3330      	adds	r3, #48	@ 0x30
 8007e4c:	f806 3b01 	strb.w	r3, [r6], #1
 8007e50:	1bf3      	subs	r3, r6, r7
 8007e52:	459a      	cmp	sl, r3
 8007e54:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8007e58:	eea3 7b46 	vfms.f64	d7, d3, d6
 8007e5c:	d132      	bne.n	8007ec4 <_dtoa_r+0x5fc>
 8007e5e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8007e62:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007e66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e6a:	dc18      	bgt.n	8007e9e <_dtoa_r+0x5d6>
 8007e6c:	eeb4 7b46 	vcmp.f64	d7, d6
 8007e70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e74:	d103      	bne.n	8007e7e <_dtoa_r+0x5b6>
 8007e76:	ee15 3a10 	vmov	r3, s10
 8007e7a:	07db      	lsls	r3, r3, #31
 8007e7c:	d40f      	bmi.n	8007e9e <_dtoa_r+0x5d6>
 8007e7e:	9901      	ldr	r1, [sp, #4]
 8007e80:	4648      	mov	r0, r9
 8007e82:	f000 fbbf 	bl	8008604 <_Bfree>
 8007e86:	2300      	movs	r3, #0
 8007e88:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007e8a:	7033      	strb	r3, [r6, #0]
 8007e8c:	f108 0301 	add.w	r3, r8, #1
 8007e90:	6013      	str	r3, [r2, #0]
 8007e92:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	f000 824b 	beq.w	8008330 <_dtoa_r+0xa68>
 8007e9a:	601e      	str	r6, [r3, #0]
 8007e9c:	e248      	b.n	8008330 <_dtoa_r+0xa68>
 8007e9e:	f8cd 8014 	str.w	r8, [sp, #20]
 8007ea2:	4633      	mov	r3, r6
 8007ea4:	461e      	mov	r6, r3
 8007ea6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007eaa:	2a39      	cmp	r2, #57	@ 0x39
 8007eac:	d106      	bne.n	8007ebc <_dtoa_r+0x5f4>
 8007eae:	429f      	cmp	r7, r3
 8007eb0:	d1f8      	bne.n	8007ea4 <_dtoa_r+0x5dc>
 8007eb2:	9a05      	ldr	r2, [sp, #20]
 8007eb4:	3201      	adds	r2, #1
 8007eb6:	9205      	str	r2, [sp, #20]
 8007eb8:	2230      	movs	r2, #48	@ 0x30
 8007eba:	703a      	strb	r2, [r7, #0]
 8007ebc:	781a      	ldrb	r2, [r3, #0]
 8007ebe:	3201      	adds	r2, #1
 8007ec0:	701a      	strb	r2, [r3, #0]
 8007ec2:	e7b1      	b.n	8007e28 <_dtoa_r+0x560>
 8007ec4:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007ec8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007ecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ed0:	d1b5      	bne.n	8007e3e <_dtoa_r+0x576>
 8007ed2:	e7d4      	b.n	8007e7e <_dtoa_r+0x5b6>
 8007ed4:	08009610 	.word	0x08009610
 8007ed8:	080095e8 	.word	0x080095e8
 8007edc:	9908      	ldr	r1, [sp, #32]
 8007ede:	2900      	cmp	r1, #0
 8007ee0:	f000 80e9 	beq.w	80080b6 <_dtoa_r+0x7ee>
 8007ee4:	9907      	ldr	r1, [sp, #28]
 8007ee6:	2901      	cmp	r1, #1
 8007ee8:	f300 80cb 	bgt.w	8008082 <_dtoa_r+0x7ba>
 8007eec:	2d00      	cmp	r5, #0
 8007eee:	f000 80c4 	beq.w	800807a <_dtoa_r+0x7b2>
 8007ef2:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8007ef6:	9e04      	ldr	r6, [sp, #16]
 8007ef8:	461c      	mov	r4, r3
 8007efa:	9305      	str	r3, [sp, #20]
 8007efc:	9b04      	ldr	r3, [sp, #16]
 8007efe:	4413      	add	r3, r2
 8007f00:	9304      	str	r3, [sp, #16]
 8007f02:	9b06      	ldr	r3, [sp, #24]
 8007f04:	2101      	movs	r1, #1
 8007f06:	4413      	add	r3, r2
 8007f08:	4648      	mov	r0, r9
 8007f0a:	9306      	str	r3, [sp, #24]
 8007f0c:	f000 fc2e 	bl	800876c <__i2b>
 8007f10:	9b05      	ldr	r3, [sp, #20]
 8007f12:	4605      	mov	r5, r0
 8007f14:	b166      	cbz	r6, 8007f30 <_dtoa_r+0x668>
 8007f16:	9a06      	ldr	r2, [sp, #24]
 8007f18:	2a00      	cmp	r2, #0
 8007f1a:	dd09      	ble.n	8007f30 <_dtoa_r+0x668>
 8007f1c:	42b2      	cmp	r2, r6
 8007f1e:	9904      	ldr	r1, [sp, #16]
 8007f20:	bfa8      	it	ge
 8007f22:	4632      	movge	r2, r6
 8007f24:	1a89      	subs	r1, r1, r2
 8007f26:	9104      	str	r1, [sp, #16]
 8007f28:	9906      	ldr	r1, [sp, #24]
 8007f2a:	1ab6      	subs	r6, r6, r2
 8007f2c:	1a8a      	subs	r2, r1, r2
 8007f2e:	9206      	str	r2, [sp, #24]
 8007f30:	b30b      	cbz	r3, 8007f76 <_dtoa_r+0x6ae>
 8007f32:	9a08      	ldr	r2, [sp, #32]
 8007f34:	2a00      	cmp	r2, #0
 8007f36:	f000 80c5 	beq.w	80080c4 <_dtoa_r+0x7fc>
 8007f3a:	2c00      	cmp	r4, #0
 8007f3c:	f000 80bf 	beq.w	80080be <_dtoa_r+0x7f6>
 8007f40:	4629      	mov	r1, r5
 8007f42:	4622      	mov	r2, r4
 8007f44:	4648      	mov	r0, r9
 8007f46:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007f48:	f000 fcc8 	bl	80088dc <__pow5mult>
 8007f4c:	9a01      	ldr	r2, [sp, #4]
 8007f4e:	4601      	mov	r1, r0
 8007f50:	4605      	mov	r5, r0
 8007f52:	4648      	mov	r0, r9
 8007f54:	f000 fc20 	bl	8008798 <__multiply>
 8007f58:	9901      	ldr	r1, [sp, #4]
 8007f5a:	9005      	str	r0, [sp, #20]
 8007f5c:	4648      	mov	r0, r9
 8007f5e:	f000 fb51 	bl	8008604 <_Bfree>
 8007f62:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007f64:	1b1b      	subs	r3, r3, r4
 8007f66:	f000 80b0 	beq.w	80080ca <_dtoa_r+0x802>
 8007f6a:	9905      	ldr	r1, [sp, #20]
 8007f6c:	461a      	mov	r2, r3
 8007f6e:	4648      	mov	r0, r9
 8007f70:	f000 fcb4 	bl	80088dc <__pow5mult>
 8007f74:	9001      	str	r0, [sp, #4]
 8007f76:	2101      	movs	r1, #1
 8007f78:	4648      	mov	r0, r9
 8007f7a:	f000 fbf7 	bl	800876c <__i2b>
 8007f7e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f80:	4604      	mov	r4, r0
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	f000 81da 	beq.w	800833c <_dtoa_r+0xa74>
 8007f88:	461a      	mov	r2, r3
 8007f8a:	4601      	mov	r1, r0
 8007f8c:	4648      	mov	r0, r9
 8007f8e:	f000 fca5 	bl	80088dc <__pow5mult>
 8007f92:	9b07      	ldr	r3, [sp, #28]
 8007f94:	2b01      	cmp	r3, #1
 8007f96:	4604      	mov	r4, r0
 8007f98:	f300 80a0 	bgt.w	80080dc <_dtoa_r+0x814>
 8007f9c:	9b02      	ldr	r3, [sp, #8]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	f040 8096 	bne.w	80080d0 <_dtoa_r+0x808>
 8007fa4:	9b03      	ldr	r3, [sp, #12]
 8007fa6:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8007faa:	2a00      	cmp	r2, #0
 8007fac:	f040 8092 	bne.w	80080d4 <_dtoa_r+0x80c>
 8007fb0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8007fb4:	0d12      	lsrs	r2, r2, #20
 8007fb6:	0512      	lsls	r2, r2, #20
 8007fb8:	2a00      	cmp	r2, #0
 8007fba:	f000 808d 	beq.w	80080d8 <_dtoa_r+0x810>
 8007fbe:	9b04      	ldr	r3, [sp, #16]
 8007fc0:	3301      	adds	r3, #1
 8007fc2:	9304      	str	r3, [sp, #16]
 8007fc4:	9b06      	ldr	r3, [sp, #24]
 8007fc6:	3301      	adds	r3, #1
 8007fc8:	9306      	str	r3, [sp, #24]
 8007fca:	2301      	movs	r3, #1
 8007fcc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007fce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	f000 81b9 	beq.w	8008348 <_dtoa_r+0xa80>
 8007fd6:	6922      	ldr	r2, [r4, #16]
 8007fd8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8007fdc:	6910      	ldr	r0, [r2, #16]
 8007fde:	f000 fb79 	bl	80086d4 <__hi0bits>
 8007fe2:	f1c0 0020 	rsb	r0, r0, #32
 8007fe6:	9b06      	ldr	r3, [sp, #24]
 8007fe8:	4418      	add	r0, r3
 8007fea:	f010 001f 	ands.w	r0, r0, #31
 8007fee:	f000 8081 	beq.w	80080f4 <_dtoa_r+0x82c>
 8007ff2:	f1c0 0220 	rsb	r2, r0, #32
 8007ff6:	2a04      	cmp	r2, #4
 8007ff8:	dd73      	ble.n	80080e2 <_dtoa_r+0x81a>
 8007ffa:	9b04      	ldr	r3, [sp, #16]
 8007ffc:	f1c0 001c 	rsb	r0, r0, #28
 8008000:	4403      	add	r3, r0
 8008002:	9304      	str	r3, [sp, #16]
 8008004:	9b06      	ldr	r3, [sp, #24]
 8008006:	4406      	add	r6, r0
 8008008:	4403      	add	r3, r0
 800800a:	9306      	str	r3, [sp, #24]
 800800c:	9b04      	ldr	r3, [sp, #16]
 800800e:	2b00      	cmp	r3, #0
 8008010:	dd05      	ble.n	800801e <_dtoa_r+0x756>
 8008012:	9901      	ldr	r1, [sp, #4]
 8008014:	461a      	mov	r2, r3
 8008016:	4648      	mov	r0, r9
 8008018:	f000 fcba 	bl	8008990 <__lshift>
 800801c:	9001      	str	r0, [sp, #4]
 800801e:	9b06      	ldr	r3, [sp, #24]
 8008020:	2b00      	cmp	r3, #0
 8008022:	dd05      	ble.n	8008030 <_dtoa_r+0x768>
 8008024:	4621      	mov	r1, r4
 8008026:	461a      	mov	r2, r3
 8008028:	4648      	mov	r0, r9
 800802a:	f000 fcb1 	bl	8008990 <__lshift>
 800802e:	4604      	mov	r4, r0
 8008030:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008032:	2b00      	cmp	r3, #0
 8008034:	d060      	beq.n	80080f8 <_dtoa_r+0x830>
 8008036:	9801      	ldr	r0, [sp, #4]
 8008038:	4621      	mov	r1, r4
 800803a:	f000 fd15 	bl	8008a68 <__mcmp>
 800803e:	2800      	cmp	r0, #0
 8008040:	da5a      	bge.n	80080f8 <_dtoa_r+0x830>
 8008042:	f108 33ff 	add.w	r3, r8, #4294967295
 8008046:	9305      	str	r3, [sp, #20]
 8008048:	9901      	ldr	r1, [sp, #4]
 800804a:	2300      	movs	r3, #0
 800804c:	220a      	movs	r2, #10
 800804e:	4648      	mov	r0, r9
 8008050:	f000 fafa 	bl	8008648 <__multadd>
 8008054:	9b08      	ldr	r3, [sp, #32]
 8008056:	9001      	str	r0, [sp, #4]
 8008058:	2b00      	cmp	r3, #0
 800805a:	f000 8177 	beq.w	800834c <_dtoa_r+0xa84>
 800805e:	4629      	mov	r1, r5
 8008060:	2300      	movs	r3, #0
 8008062:	220a      	movs	r2, #10
 8008064:	4648      	mov	r0, r9
 8008066:	f000 faef 	bl	8008648 <__multadd>
 800806a:	f1bb 0f00 	cmp.w	fp, #0
 800806e:	4605      	mov	r5, r0
 8008070:	dc6e      	bgt.n	8008150 <_dtoa_r+0x888>
 8008072:	9b07      	ldr	r3, [sp, #28]
 8008074:	2b02      	cmp	r3, #2
 8008076:	dc48      	bgt.n	800810a <_dtoa_r+0x842>
 8008078:	e06a      	b.n	8008150 <_dtoa_r+0x888>
 800807a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800807c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008080:	e739      	b.n	8007ef6 <_dtoa_r+0x62e>
 8008082:	f10a 34ff 	add.w	r4, sl, #4294967295
 8008086:	42a3      	cmp	r3, r4
 8008088:	db07      	blt.n	800809a <_dtoa_r+0x7d2>
 800808a:	f1ba 0f00 	cmp.w	sl, #0
 800808e:	eba3 0404 	sub.w	r4, r3, r4
 8008092:	db0b      	blt.n	80080ac <_dtoa_r+0x7e4>
 8008094:	9e04      	ldr	r6, [sp, #16]
 8008096:	4652      	mov	r2, sl
 8008098:	e72f      	b.n	8007efa <_dtoa_r+0x632>
 800809a:	1ae2      	subs	r2, r4, r3
 800809c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800809e:	9e04      	ldr	r6, [sp, #16]
 80080a0:	4413      	add	r3, r2
 80080a2:	930a      	str	r3, [sp, #40]	@ 0x28
 80080a4:	4652      	mov	r2, sl
 80080a6:	4623      	mov	r3, r4
 80080a8:	2400      	movs	r4, #0
 80080aa:	e726      	b.n	8007efa <_dtoa_r+0x632>
 80080ac:	9a04      	ldr	r2, [sp, #16]
 80080ae:	eba2 060a 	sub.w	r6, r2, sl
 80080b2:	2200      	movs	r2, #0
 80080b4:	e721      	b.n	8007efa <_dtoa_r+0x632>
 80080b6:	9e04      	ldr	r6, [sp, #16]
 80080b8:	9d08      	ldr	r5, [sp, #32]
 80080ba:	461c      	mov	r4, r3
 80080bc:	e72a      	b.n	8007f14 <_dtoa_r+0x64c>
 80080be:	9a01      	ldr	r2, [sp, #4]
 80080c0:	9205      	str	r2, [sp, #20]
 80080c2:	e752      	b.n	8007f6a <_dtoa_r+0x6a2>
 80080c4:	9901      	ldr	r1, [sp, #4]
 80080c6:	461a      	mov	r2, r3
 80080c8:	e751      	b.n	8007f6e <_dtoa_r+0x6a6>
 80080ca:	9b05      	ldr	r3, [sp, #20]
 80080cc:	9301      	str	r3, [sp, #4]
 80080ce:	e752      	b.n	8007f76 <_dtoa_r+0x6ae>
 80080d0:	2300      	movs	r3, #0
 80080d2:	e77b      	b.n	8007fcc <_dtoa_r+0x704>
 80080d4:	9b02      	ldr	r3, [sp, #8]
 80080d6:	e779      	b.n	8007fcc <_dtoa_r+0x704>
 80080d8:	920b      	str	r2, [sp, #44]	@ 0x2c
 80080da:	e778      	b.n	8007fce <_dtoa_r+0x706>
 80080dc:	2300      	movs	r3, #0
 80080de:	930b      	str	r3, [sp, #44]	@ 0x2c
 80080e0:	e779      	b.n	8007fd6 <_dtoa_r+0x70e>
 80080e2:	d093      	beq.n	800800c <_dtoa_r+0x744>
 80080e4:	9b04      	ldr	r3, [sp, #16]
 80080e6:	321c      	adds	r2, #28
 80080e8:	4413      	add	r3, r2
 80080ea:	9304      	str	r3, [sp, #16]
 80080ec:	9b06      	ldr	r3, [sp, #24]
 80080ee:	4416      	add	r6, r2
 80080f0:	4413      	add	r3, r2
 80080f2:	e78a      	b.n	800800a <_dtoa_r+0x742>
 80080f4:	4602      	mov	r2, r0
 80080f6:	e7f5      	b.n	80080e4 <_dtoa_r+0x81c>
 80080f8:	f1ba 0f00 	cmp.w	sl, #0
 80080fc:	f8cd 8014 	str.w	r8, [sp, #20]
 8008100:	46d3      	mov	fp, sl
 8008102:	dc21      	bgt.n	8008148 <_dtoa_r+0x880>
 8008104:	9b07      	ldr	r3, [sp, #28]
 8008106:	2b02      	cmp	r3, #2
 8008108:	dd1e      	ble.n	8008148 <_dtoa_r+0x880>
 800810a:	f1bb 0f00 	cmp.w	fp, #0
 800810e:	f47f addc 	bne.w	8007cca <_dtoa_r+0x402>
 8008112:	4621      	mov	r1, r4
 8008114:	465b      	mov	r3, fp
 8008116:	2205      	movs	r2, #5
 8008118:	4648      	mov	r0, r9
 800811a:	f000 fa95 	bl	8008648 <__multadd>
 800811e:	4601      	mov	r1, r0
 8008120:	4604      	mov	r4, r0
 8008122:	9801      	ldr	r0, [sp, #4]
 8008124:	f000 fca0 	bl	8008a68 <__mcmp>
 8008128:	2800      	cmp	r0, #0
 800812a:	f77f adce 	ble.w	8007cca <_dtoa_r+0x402>
 800812e:	463e      	mov	r6, r7
 8008130:	2331      	movs	r3, #49	@ 0x31
 8008132:	f806 3b01 	strb.w	r3, [r6], #1
 8008136:	9b05      	ldr	r3, [sp, #20]
 8008138:	3301      	adds	r3, #1
 800813a:	9305      	str	r3, [sp, #20]
 800813c:	e5c9      	b.n	8007cd2 <_dtoa_r+0x40a>
 800813e:	f8cd 8014 	str.w	r8, [sp, #20]
 8008142:	4654      	mov	r4, sl
 8008144:	4625      	mov	r5, r4
 8008146:	e7f2      	b.n	800812e <_dtoa_r+0x866>
 8008148:	9b08      	ldr	r3, [sp, #32]
 800814a:	2b00      	cmp	r3, #0
 800814c:	f000 8102 	beq.w	8008354 <_dtoa_r+0xa8c>
 8008150:	2e00      	cmp	r6, #0
 8008152:	dd05      	ble.n	8008160 <_dtoa_r+0x898>
 8008154:	4629      	mov	r1, r5
 8008156:	4632      	mov	r2, r6
 8008158:	4648      	mov	r0, r9
 800815a:	f000 fc19 	bl	8008990 <__lshift>
 800815e:	4605      	mov	r5, r0
 8008160:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008162:	2b00      	cmp	r3, #0
 8008164:	d058      	beq.n	8008218 <_dtoa_r+0x950>
 8008166:	6869      	ldr	r1, [r5, #4]
 8008168:	4648      	mov	r0, r9
 800816a:	f000 fa0b 	bl	8008584 <_Balloc>
 800816e:	4606      	mov	r6, r0
 8008170:	b928      	cbnz	r0, 800817e <_dtoa_r+0x8b6>
 8008172:	4b82      	ldr	r3, [pc, #520]	@ (800837c <_dtoa_r+0xab4>)
 8008174:	4602      	mov	r2, r0
 8008176:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800817a:	f7ff bbbe 	b.w	80078fa <_dtoa_r+0x32>
 800817e:	692a      	ldr	r2, [r5, #16]
 8008180:	3202      	adds	r2, #2
 8008182:	0092      	lsls	r2, r2, #2
 8008184:	f105 010c 	add.w	r1, r5, #12
 8008188:	300c      	adds	r0, #12
 800818a:	f000 fff7 	bl	800917c <memcpy>
 800818e:	2201      	movs	r2, #1
 8008190:	4631      	mov	r1, r6
 8008192:	4648      	mov	r0, r9
 8008194:	f000 fbfc 	bl	8008990 <__lshift>
 8008198:	1c7b      	adds	r3, r7, #1
 800819a:	9304      	str	r3, [sp, #16]
 800819c:	eb07 030b 	add.w	r3, r7, fp
 80081a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80081a2:	9b02      	ldr	r3, [sp, #8]
 80081a4:	f003 0301 	and.w	r3, r3, #1
 80081a8:	46a8      	mov	r8, r5
 80081aa:	9308      	str	r3, [sp, #32]
 80081ac:	4605      	mov	r5, r0
 80081ae:	9b04      	ldr	r3, [sp, #16]
 80081b0:	9801      	ldr	r0, [sp, #4]
 80081b2:	4621      	mov	r1, r4
 80081b4:	f103 3bff 	add.w	fp, r3, #4294967295
 80081b8:	f7ff fafd 	bl	80077b6 <quorem>
 80081bc:	4641      	mov	r1, r8
 80081be:	9002      	str	r0, [sp, #8]
 80081c0:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80081c4:	9801      	ldr	r0, [sp, #4]
 80081c6:	f000 fc4f 	bl	8008a68 <__mcmp>
 80081ca:	462a      	mov	r2, r5
 80081cc:	9006      	str	r0, [sp, #24]
 80081ce:	4621      	mov	r1, r4
 80081d0:	4648      	mov	r0, r9
 80081d2:	f000 fc65 	bl	8008aa0 <__mdiff>
 80081d6:	68c2      	ldr	r2, [r0, #12]
 80081d8:	4606      	mov	r6, r0
 80081da:	b9fa      	cbnz	r2, 800821c <_dtoa_r+0x954>
 80081dc:	4601      	mov	r1, r0
 80081de:	9801      	ldr	r0, [sp, #4]
 80081e0:	f000 fc42 	bl	8008a68 <__mcmp>
 80081e4:	4602      	mov	r2, r0
 80081e6:	4631      	mov	r1, r6
 80081e8:	4648      	mov	r0, r9
 80081ea:	920a      	str	r2, [sp, #40]	@ 0x28
 80081ec:	f000 fa0a 	bl	8008604 <_Bfree>
 80081f0:	9b07      	ldr	r3, [sp, #28]
 80081f2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80081f4:	9e04      	ldr	r6, [sp, #16]
 80081f6:	ea42 0103 	orr.w	r1, r2, r3
 80081fa:	9b08      	ldr	r3, [sp, #32]
 80081fc:	4319      	orrs	r1, r3
 80081fe:	d10f      	bne.n	8008220 <_dtoa_r+0x958>
 8008200:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8008204:	d028      	beq.n	8008258 <_dtoa_r+0x990>
 8008206:	9b06      	ldr	r3, [sp, #24]
 8008208:	2b00      	cmp	r3, #0
 800820a:	dd02      	ble.n	8008212 <_dtoa_r+0x94a>
 800820c:	9b02      	ldr	r3, [sp, #8]
 800820e:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8008212:	f88b a000 	strb.w	sl, [fp]
 8008216:	e55e      	b.n	8007cd6 <_dtoa_r+0x40e>
 8008218:	4628      	mov	r0, r5
 800821a:	e7bd      	b.n	8008198 <_dtoa_r+0x8d0>
 800821c:	2201      	movs	r2, #1
 800821e:	e7e2      	b.n	80081e6 <_dtoa_r+0x91e>
 8008220:	9b06      	ldr	r3, [sp, #24]
 8008222:	2b00      	cmp	r3, #0
 8008224:	db04      	blt.n	8008230 <_dtoa_r+0x968>
 8008226:	9907      	ldr	r1, [sp, #28]
 8008228:	430b      	orrs	r3, r1
 800822a:	9908      	ldr	r1, [sp, #32]
 800822c:	430b      	orrs	r3, r1
 800822e:	d120      	bne.n	8008272 <_dtoa_r+0x9aa>
 8008230:	2a00      	cmp	r2, #0
 8008232:	ddee      	ble.n	8008212 <_dtoa_r+0x94a>
 8008234:	9901      	ldr	r1, [sp, #4]
 8008236:	2201      	movs	r2, #1
 8008238:	4648      	mov	r0, r9
 800823a:	f000 fba9 	bl	8008990 <__lshift>
 800823e:	4621      	mov	r1, r4
 8008240:	9001      	str	r0, [sp, #4]
 8008242:	f000 fc11 	bl	8008a68 <__mcmp>
 8008246:	2800      	cmp	r0, #0
 8008248:	dc03      	bgt.n	8008252 <_dtoa_r+0x98a>
 800824a:	d1e2      	bne.n	8008212 <_dtoa_r+0x94a>
 800824c:	f01a 0f01 	tst.w	sl, #1
 8008250:	d0df      	beq.n	8008212 <_dtoa_r+0x94a>
 8008252:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8008256:	d1d9      	bne.n	800820c <_dtoa_r+0x944>
 8008258:	2339      	movs	r3, #57	@ 0x39
 800825a:	f88b 3000 	strb.w	r3, [fp]
 800825e:	4633      	mov	r3, r6
 8008260:	461e      	mov	r6, r3
 8008262:	3b01      	subs	r3, #1
 8008264:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008268:	2a39      	cmp	r2, #57	@ 0x39
 800826a:	d052      	beq.n	8008312 <_dtoa_r+0xa4a>
 800826c:	3201      	adds	r2, #1
 800826e:	701a      	strb	r2, [r3, #0]
 8008270:	e531      	b.n	8007cd6 <_dtoa_r+0x40e>
 8008272:	2a00      	cmp	r2, #0
 8008274:	dd07      	ble.n	8008286 <_dtoa_r+0x9be>
 8008276:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800827a:	d0ed      	beq.n	8008258 <_dtoa_r+0x990>
 800827c:	f10a 0301 	add.w	r3, sl, #1
 8008280:	f88b 3000 	strb.w	r3, [fp]
 8008284:	e527      	b.n	8007cd6 <_dtoa_r+0x40e>
 8008286:	9b04      	ldr	r3, [sp, #16]
 8008288:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800828a:	f803 ac01 	strb.w	sl, [r3, #-1]
 800828e:	4293      	cmp	r3, r2
 8008290:	d029      	beq.n	80082e6 <_dtoa_r+0xa1e>
 8008292:	9901      	ldr	r1, [sp, #4]
 8008294:	2300      	movs	r3, #0
 8008296:	220a      	movs	r2, #10
 8008298:	4648      	mov	r0, r9
 800829a:	f000 f9d5 	bl	8008648 <__multadd>
 800829e:	45a8      	cmp	r8, r5
 80082a0:	9001      	str	r0, [sp, #4]
 80082a2:	f04f 0300 	mov.w	r3, #0
 80082a6:	f04f 020a 	mov.w	r2, #10
 80082aa:	4641      	mov	r1, r8
 80082ac:	4648      	mov	r0, r9
 80082ae:	d107      	bne.n	80082c0 <_dtoa_r+0x9f8>
 80082b0:	f000 f9ca 	bl	8008648 <__multadd>
 80082b4:	4680      	mov	r8, r0
 80082b6:	4605      	mov	r5, r0
 80082b8:	9b04      	ldr	r3, [sp, #16]
 80082ba:	3301      	adds	r3, #1
 80082bc:	9304      	str	r3, [sp, #16]
 80082be:	e776      	b.n	80081ae <_dtoa_r+0x8e6>
 80082c0:	f000 f9c2 	bl	8008648 <__multadd>
 80082c4:	4629      	mov	r1, r5
 80082c6:	4680      	mov	r8, r0
 80082c8:	2300      	movs	r3, #0
 80082ca:	220a      	movs	r2, #10
 80082cc:	4648      	mov	r0, r9
 80082ce:	f000 f9bb 	bl	8008648 <__multadd>
 80082d2:	4605      	mov	r5, r0
 80082d4:	e7f0      	b.n	80082b8 <_dtoa_r+0x9f0>
 80082d6:	f1bb 0f00 	cmp.w	fp, #0
 80082da:	bfcc      	ite	gt
 80082dc:	465e      	movgt	r6, fp
 80082de:	2601      	movle	r6, #1
 80082e0:	443e      	add	r6, r7
 80082e2:	f04f 0800 	mov.w	r8, #0
 80082e6:	9901      	ldr	r1, [sp, #4]
 80082e8:	2201      	movs	r2, #1
 80082ea:	4648      	mov	r0, r9
 80082ec:	f000 fb50 	bl	8008990 <__lshift>
 80082f0:	4621      	mov	r1, r4
 80082f2:	9001      	str	r0, [sp, #4]
 80082f4:	f000 fbb8 	bl	8008a68 <__mcmp>
 80082f8:	2800      	cmp	r0, #0
 80082fa:	dcb0      	bgt.n	800825e <_dtoa_r+0x996>
 80082fc:	d102      	bne.n	8008304 <_dtoa_r+0xa3c>
 80082fe:	f01a 0f01 	tst.w	sl, #1
 8008302:	d1ac      	bne.n	800825e <_dtoa_r+0x996>
 8008304:	4633      	mov	r3, r6
 8008306:	461e      	mov	r6, r3
 8008308:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800830c:	2a30      	cmp	r2, #48	@ 0x30
 800830e:	d0fa      	beq.n	8008306 <_dtoa_r+0xa3e>
 8008310:	e4e1      	b.n	8007cd6 <_dtoa_r+0x40e>
 8008312:	429f      	cmp	r7, r3
 8008314:	d1a4      	bne.n	8008260 <_dtoa_r+0x998>
 8008316:	9b05      	ldr	r3, [sp, #20]
 8008318:	3301      	adds	r3, #1
 800831a:	9305      	str	r3, [sp, #20]
 800831c:	2331      	movs	r3, #49	@ 0x31
 800831e:	703b      	strb	r3, [r7, #0]
 8008320:	e4d9      	b.n	8007cd6 <_dtoa_r+0x40e>
 8008322:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008324:	4f16      	ldr	r7, [pc, #88]	@ (8008380 <_dtoa_r+0xab8>)
 8008326:	b11b      	cbz	r3, 8008330 <_dtoa_r+0xa68>
 8008328:	f107 0308 	add.w	r3, r7, #8
 800832c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800832e:	6013      	str	r3, [r2, #0]
 8008330:	4638      	mov	r0, r7
 8008332:	b011      	add	sp, #68	@ 0x44
 8008334:	ecbd 8b02 	vpop	{d8}
 8008338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800833c:	9b07      	ldr	r3, [sp, #28]
 800833e:	2b01      	cmp	r3, #1
 8008340:	f77f ae2c 	ble.w	8007f9c <_dtoa_r+0x6d4>
 8008344:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008346:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008348:	2001      	movs	r0, #1
 800834a:	e64c      	b.n	8007fe6 <_dtoa_r+0x71e>
 800834c:	f1bb 0f00 	cmp.w	fp, #0
 8008350:	f77f aed8 	ble.w	8008104 <_dtoa_r+0x83c>
 8008354:	463e      	mov	r6, r7
 8008356:	9801      	ldr	r0, [sp, #4]
 8008358:	4621      	mov	r1, r4
 800835a:	f7ff fa2c 	bl	80077b6 <quorem>
 800835e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8008362:	f806 ab01 	strb.w	sl, [r6], #1
 8008366:	1bf2      	subs	r2, r6, r7
 8008368:	4593      	cmp	fp, r2
 800836a:	ddb4      	ble.n	80082d6 <_dtoa_r+0xa0e>
 800836c:	9901      	ldr	r1, [sp, #4]
 800836e:	2300      	movs	r3, #0
 8008370:	220a      	movs	r2, #10
 8008372:	4648      	mov	r0, r9
 8008374:	f000 f968 	bl	8008648 <__multadd>
 8008378:	9001      	str	r0, [sp, #4]
 800837a:	e7ec      	b.n	8008356 <_dtoa_r+0xa8e>
 800837c:	08009518 	.word	0x08009518
 8008380:	0800949c 	.word	0x0800949c

08008384 <_free_r>:
 8008384:	b538      	push	{r3, r4, r5, lr}
 8008386:	4605      	mov	r5, r0
 8008388:	2900      	cmp	r1, #0
 800838a:	d041      	beq.n	8008410 <_free_r+0x8c>
 800838c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008390:	1f0c      	subs	r4, r1, #4
 8008392:	2b00      	cmp	r3, #0
 8008394:	bfb8      	it	lt
 8008396:	18e4      	addlt	r4, r4, r3
 8008398:	f000 f8e8 	bl	800856c <__malloc_lock>
 800839c:	4a1d      	ldr	r2, [pc, #116]	@ (8008414 <_free_r+0x90>)
 800839e:	6813      	ldr	r3, [r2, #0]
 80083a0:	b933      	cbnz	r3, 80083b0 <_free_r+0x2c>
 80083a2:	6063      	str	r3, [r4, #4]
 80083a4:	6014      	str	r4, [r2, #0]
 80083a6:	4628      	mov	r0, r5
 80083a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80083ac:	f000 b8e4 	b.w	8008578 <__malloc_unlock>
 80083b0:	42a3      	cmp	r3, r4
 80083b2:	d908      	bls.n	80083c6 <_free_r+0x42>
 80083b4:	6820      	ldr	r0, [r4, #0]
 80083b6:	1821      	adds	r1, r4, r0
 80083b8:	428b      	cmp	r3, r1
 80083ba:	bf01      	itttt	eq
 80083bc:	6819      	ldreq	r1, [r3, #0]
 80083be:	685b      	ldreq	r3, [r3, #4]
 80083c0:	1809      	addeq	r1, r1, r0
 80083c2:	6021      	streq	r1, [r4, #0]
 80083c4:	e7ed      	b.n	80083a2 <_free_r+0x1e>
 80083c6:	461a      	mov	r2, r3
 80083c8:	685b      	ldr	r3, [r3, #4]
 80083ca:	b10b      	cbz	r3, 80083d0 <_free_r+0x4c>
 80083cc:	42a3      	cmp	r3, r4
 80083ce:	d9fa      	bls.n	80083c6 <_free_r+0x42>
 80083d0:	6811      	ldr	r1, [r2, #0]
 80083d2:	1850      	adds	r0, r2, r1
 80083d4:	42a0      	cmp	r0, r4
 80083d6:	d10b      	bne.n	80083f0 <_free_r+0x6c>
 80083d8:	6820      	ldr	r0, [r4, #0]
 80083da:	4401      	add	r1, r0
 80083dc:	1850      	adds	r0, r2, r1
 80083de:	4283      	cmp	r3, r0
 80083e0:	6011      	str	r1, [r2, #0]
 80083e2:	d1e0      	bne.n	80083a6 <_free_r+0x22>
 80083e4:	6818      	ldr	r0, [r3, #0]
 80083e6:	685b      	ldr	r3, [r3, #4]
 80083e8:	6053      	str	r3, [r2, #4]
 80083ea:	4408      	add	r0, r1
 80083ec:	6010      	str	r0, [r2, #0]
 80083ee:	e7da      	b.n	80083a6 <_free_r+0x22>
 80083f0:	d902      	bls.n	80083f8 <_free_r+0x74>
 80083f2:	230c      	movs	r3, #12
 80083f4:	602b      	str	r3, [r5, #0]
 80083f6:	e7d6      	b.n	80083a6 <_free_r+0x22>
 80083f8:	6820      	ldr	r0, [r4, #0]
 80083fa:	1821      	adds	r1, r4, r0
 80083fc:	428b      	cmp	r3, r1
 80083fe:	bf04      	itt	eq
 8008400:	6819      	ldreq	r1, [r3, #0]
 8008402:	685b      	ldreq	r3, [r3, #4]
 8008404:	6063      	str	r3, [r4, #4]
 8008406:	bf04      	itt	eq
 8008408:	1809      	addeq	r1, r1, r0
 800840a:	6021      	streq	r1, [r4, #0]
 800840c:	6054      	str	r4, [r2, #4]
 800840e:	e7ca      	b.n	80083a6 <_free_r+0x22>
 8008410:	bd38      	pop	{r3, r4, r5, pc}
 8008412:	bf00      	nop
 8008414:	24000584 	.word	0x24000584

08008418 <malloc>:
 8008418:	4b02      	ldr	r3, [pc, #8]	@ (8008424 <malloc+0xc>)
 800841a:	4601      	mov	r1, r0
 800841c:	6818      	ldr	r0, [r3, #0]
 800841e:	f000 b825 	b.w	800846c <_malloc_r>
 8008422:	bf00      	nop
 8008424:	2400003c 	.word	0x2400003c

08008428 <sbrk_aligned>:
 8008428:	b570      	push	{r4, r5, r6, lr}
 800842a:	4e0f      	ldr	r6, [pc, #60]	@ (8008468 <sbrk_aligned+0x40>)
 800842c:	460c      	mov	r4, r1
 800842e:	6831      	ldr	r1, [r6, #0]
 8008430:	4605      	mov	r5, r0
 8008432:	b911      	cbnz	r1, 800843a <sbrk_aligned+0x12>
 8008434:	f000 fe92 	bl	800915c <_sbrk_r>
 8008438:	6030      	str	r0, [r6, #0]
 800843a:	4621      	mov	r1, r4
 800843c:	4628      	mov	r0, r5
 800843e:	f000 fe8d 	bl	800915c <_sbrk_r>
 8008442:	1c43      	adds	r3, r0, #1
 8008444:	d103      	bne.n	800844e <sbrk_aligned+0x26>
 8008446:	f04f 34ff 	mov.w	r4, #4294967295
 800844a:	4620      	mov	r0, r4
 800844c:	bd70      	pop	{r4, r5, r6, pc}
 800844e:	1cc4      	adds	r4, r0, #3
 8008450:	f024 0403 	bic.w	r4, r4, #3
 8008454:	42a0      	cmp	r0, r4
 8008456:	d0f8      	beq.n	800844a <sbrk_aligned+0x22>
 8008458:	1a21      	subs	r1, r4, r0
 800845a:	4628      	mov	r0, r5
 800845c:	f000 fe7e 	bl	800915c <_sbrk_r>
 8008460:	3001      	adds	r0, #1
 8008462:	d1f2      	bne.n	800844a <sbrk_aligned+0x22>
 8008464:	e7ef      	b.n	8008446 <sbrk_aligned+0x1e>
 8008466:	bf00      	nop
 8008468:	24000580 	.word	0x24000580

0800846c <_malloc_r>:
 800846c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008470:	1ccd      	adds	r5, r1, #3
 8008472:	f025 0503 	bic.w	r5, r5, #3
 8008476:	3508      	adds	r5, #8
 8008478:	2d0c      	cmp	r5, #12
 800847a:	bf38      	it	cc
 800847c:	250c      	movcc	r5, #12
 800847e:	2d00      	cmp	r5, #0
 8008480:	4606      	mov	r6, r0
 8008482:	db01      	blt.n	8008488 <_malloc_r+0x1c>
 8008484:	42a9      	cmp	r1, r5
 8008486:	d904      	bls.n	8008492 <_malloc_r+0x26>
 8008488:	230c      	movs	r3, #12
 800848a:	6033      	str	r3, [r6, #0]
 800848c:	2000      	movs	r0, #0
 800848e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008492:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008568 <_malloc_r+0xfc>
 8008496:	f000 f869 	bl	800856c <__malloc_lock>
 800849a:	f8d8 3000 	ldr.w	r3, [r8]
 800849e:	461c      	mov	r4, r3
 80084a0:	bb44      	cbnz	r4, 80084f4 <_malloc_r+0x88>
 80084a2:	4629      	mov	r1, r5
 80084a4:	4630      	mov	r0, r6
 80084a6:	f7ff ffbf 	bl	8008428 <sbrk_aligned>
 80084aa:	1c43      	adds	r3, r0, #1
 80084ac:	4604      	mov	r4, r0
 80084ae:	d158      	bne.n	8008562 <_malloc_r+0xf6>
 80084b0:	f8d8 4000 	ldr.w	r4, [r8]
 80084b4:	4627      	mov	r7, r4
 80084b6:	2f00      	cmp	r7, #0
 80084b8:	d143      	bne.n	8008542 <_malloc_r+0xd6>
 80084ba:	2c00      	cmp	r4, #0
 80084bc:	d04b      	beq.n	8008556 <_malloc_r+0xea>
 80084be:	6823      	ldr	r3, [r4, #0]
 80084c0:	4639      	mov	r1, r7
 80084c2:	4630      	mov	r0, r6
 80084c4:	eb04 0903 	add.w	r9, r4, r3
 80084c8:	f000 fe48 	bl	800915c <_sbrk_r>
 80084cc:	4581      	cmp	r9, r0
 80084ce:	d142      	bne.n	8008556 <_malloc_r+0xea>
 80084d0:	6821      	ldr	r1, [r4, #0]
 80084d2:	1a6d      	subs	r5, r5, r1
 80084d4:	4629      	mov	r1, r5
 80084d6:	4630      	mov	r0, r6
 80084d8:	f7ff ffa6 	bl	8008428 <sbrk_aligned>
 80084dc:	3001      	adds	r0, #1
 80084de:	d03a      	beq.n	8008556 <_malloc_r+0xea>
 80084e0:	6823      	ldr	r3, [r4, #0]
 80084e2:	442b      	add	r3, r5
 80084e4:	6023      	str	r3, [r4, #0]
 80084e6:	f8d8 3000 	ldr.w	r3, [r8]
 80084ea:	685a      	ldr	r2, [r3, #4]
 80084ec:	bb62      	cbnz	r2, 8008548 <_malloc_r+0xdc>
 80084ee:	f8c8 7000 	str.w	r7, [r8]
 80084f2:	e00f      	b.n	8008514 <_malloc_r+0xa8>
 80084f4:	6822      	ldr	r2, [r4, #0]
 80084f6:	1b52      	subs	r2, r2, r5
 80084f8:	d420      	bmi.n	800853c <_malloc_r+0xd0>
 80084fa:	2a0b      	cmp	r2, #11
 80084fc:	d917      	bls.n	800852e <_malloc_r+0xc2>
 80084fe:	1961      	adds	r1, r4, r5
 8008500:	42a3      	cmp	r3, r4
 8008502:	6025      	str	r5, [r4, #0]
 8008504:	bf18      	it	ne
 8008506:	6059      	strne	r1, [r3, #4]
 8008508:	6863      	ldr	r3, [r4, #4]
 800850a:	bf08      	it	eq
 800850c:	f8c8 1000 	streq.w	r1, [r8]
 8008510:	5162      	str	r2, [r4, r5]
 8008512:	604b      	str	r3, [r1, #4]
 8008514:	4630      	mov	r0, r6
 8008516:	f000 f82f 	bl	8008578 <__malloc_unlock>
 800851a:	f104 000b 	add.w	r0, r4, #11
 800851e:	1d23      	adds	r3, r4, #4
 8008520:	f020 0007 	bic.w	r0, r0, #7
 8008524:	1ac2      	subs	r2, r0, r3
 8008526:	bf1c      	itt	ne
 8008528:	1a1b      	subne	r3, r3, r0
 800852a:	50a3      	strne	r3, [r4, r2]
 800852c:	e7af      	b.n	800848e <_malloc_r+0x22>
 800852e:	6862      	ldr	r2, [r4, #4]
 8008530:	42a3      	cmp	r3, r4
 8008532:	bf0c      	ite	eq
 8008534:	f8c8 2000 	streq.w	r2, [r8]
 8008538:	605a      	strne	r2, [r3, #4]
 800853a:	e7eb      	b.n	8008514 <_malloc_r+0xa8>
 800853c:	4623      	mov	r3, r4
 800853e:	6864      	ldr	r4, [r4, #4]
 8008540:	e7ae      	b.n	80084a0 <_malloc_r+0x34>
 8008542:	463c      	mov	r4, r7
 8008544:	687f      	ldr	r7, [r7, #4]
 8008546:	e7b6      	b.n	80084b6 <_malloc_r+0x4a>
 8008548:	461a      	mov	r2, r3
 800854a:	685b      	ldr	r3, [r3, #4]
 800854c:	42a3      	cmp	r3, r4
 800854e:	d1fb      	bne.n	8008548 <_malloc_r+0xdc>
 8008550:	2300      	movs	r3, #0
 8008552:	6053      	str	r3, [r2, #4]
 8008554:	e7de      	b.n	8008514 <_malloc_r+0xa8>
 8008556:	230c      	movs	r3, #12
 8008558:	6033      	str	r3, [r6, #0]
 800855a:	4630      	mov	r0, r6
 800855c:	f000 f80c 	bl	8008578 <__malloc_unlock>
 8008560:	e794      	b.n	800848c <_malloc_r+0x20>
 8008562:	6005      	str	r5, [r0, #0]
 8008564:	e7d6      	b.n	8008514 <_malloc_r+0xa8>
 8008566:	bf00      	nop
 8008568:	24000584 	.word	0x24000584

0800856c <__malloc_lock>:
 800856c:	4801      	ldr	r0, [pc, #4]	@ (8008574 <__malloc_lock+0x8>)
 800856e:	f7ff b920 	b.w	80077b2 <__retarget_lock_acquire_recursive>
 8008572:	bf00      	nop
 8008574:	2400057c 	.word	0x2400057c

08008578 <__malloc_unlock>:
 8008578:	4801      	ldr	r0, [pc, #4]	@ (8008580 <__malloc_unlock+0x8>)
 800857a:	f7ff b91b 	b.w	80077b4 <__retarget_lock_release_recursive>
 800857e:	bf00      	nop
 8008580:	2400057c 	.word	0x2400057c

08008584 <_Balloc>:
 8008584:	b570      	push	{r4, r5, r6, lr}
 8008586:	69c6      	ldr	r6, [r0, #28]
 8008588:	4604      	mov	r4, r0
 800858a:	460d      	mov	r5, r1
 800858c:	b976      	cbnz	r6, 80085ac <_Balloc+0x28>
 800858e:	2010      	movs	r0, #16
 8008590:	f7ff ff42 	bl	8008418 <malloc>
 8008594:	4602      	mov	r2, r0
 8008596:	61e0      	str	r0, [r4, #28]
 8008598:	b920      	cbnz	r0, 80085a4 <_Balloc+0x20>
 800859a:	4b18      	ldr	r3, [pc, #96]	@ (80085fc <_Balloc+0x78>)
 800859c:	4818      	ldr	r0, [pc, #96]	@ (8008600 <_Balloc+0x7c>)
 800859e:	216b      	movs	r1, #107	@ 0x6b
 80085a0:	f000 fdfa 	bl	8009198 <__assert_func>
 80085a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80085a8:	6006      	str	r6, [r0, #0]
 80085aa:	60c6      	str	r6, [r0, #12]
 80085ac:	69e6      	ldr	r6, [r4, #28]
 80085ae:	68f3      	ldr	r3, [r6, #12]
 80085b0:	b183      	cbz	r3, 80085d4 <_Balloc+0x50>
 80085b2:	69e3      	ldr	r3, [r4, #28]
 80085b4:	68db      	ldr	r3, [r3, #12]
 80085b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80085ba:	b9b8      	cbnz	r0, 80085ec <_Balloc+0x68>
 80085bc:	2101      	movs	r1, #1
 80085be:	fa01 f605 	lsl.w	r6, r1, r5
 80085c2:	1d72      	adds	r2, r6, #5
 80085c4:	0092      	lsls	r2, r2, #2
 80085c6:	4620      	mov	r0, r4
 80085c8:	f000 fe04 	bl	80091d4 <_calloc_r>
 80085cc:	b160      	cbz	r0, 80085e8 <_Balloc+0x64>
 80085ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80085d2:	e00e      	b.n	80085f2 <_Balloc+0x6e>
 80085d4:	2221      	movs	r2, #33	@ 0x21
 80085d6:	2104      	movs	r1, #4
 80085d8:	4620      	mov	r0, r4
 80085da:	f000 fdfb 	bl	80091d4 <_calloc_r>
 80085de:	69e3      	ldr	r3, [r4, #28]
 80085e0:	60f0      	str	r0, [r6, #12]
 80085e2:	68db      	ldr	r3, [r3, #12]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d1e4      	bne.n	80085b2 <_Balloc+0x2e>
 80085e8:	2000      	movs	r0, #0
 80085ea:	bd70      	pop	{r4, r5, r6, pc}
 80085ec:	6802      	ldr	r2, [r0, #0]
 80085ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80085f2:	2300      	movs	r3, #0
 80085f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80085f8:	e7f7      	b.n	80085ea <_Balloc+0x66>
 80085fa:	bf00      	nop
 80085fc:	080094a9 	.word	0x080094a9
 8008600:	08009529 	.word	0x08009529

08008604 <_Bfree>:
 8008604:	b570      	push	{r4, r5, r6, lr}
 8008606:	69c6      	ldr	r6, [r0, #28]
 8008608:	4605      	mov	r5, r0
 800860a:	460c      	mov	r4, r1
 800860c:	b976      	cbnz	r6, 800862c <_Bfree+0x28>
 800860e:	2010      	movs	r0, #16
 8008610:	f7ff ff02 	bl	8008418 <malloc>
 8008614:	4602      	mov	r2, r0
 8008616:	61e8      	str	r0, [r5, #28]
 8008618:	b920      	cbnz	r0, 8008624 <_Bfree+0x20>
 800861a:	4b09      	ldr	r3, [pc, #36]	@ (8008640 <_Bfree+0x3c>)
 800861c:	4809      	ldr	r0, [pc, #36]	@ (8008644 <_Bfree+0x40>)
 800861e:	218f      	movs	r1, #143	@ 0x8f
 8008620:	f000 fdba 	bl	8009198 <__assert_func>
 8008624:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008628:	6006      	str	r6, [r0, #0]
 800862a:	60c6      	str	r6, [r0, #12]
 800862c:	b13c      	cbz	r4, 800863e <_Bfree+0x3a>
 800862e:	69eb      	ldr	r3, [r5, #28]
 8008630:	6862      	ldr	r2, [r4, #4]
 8008632:	68db      	ldr	r3, [r3, #12]
 8008634:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008638:	6021      	str	r1, [r4, #0]
 800863a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800863e:	bd70      	pop	{r4, r5, r6, pc}
 8008640:	080094a9 	.word	0x080094a9
 8008644:	08009529 	.word	0x08009529

08008648 <__multadd>:
 8008648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800864c:	690d      	ldr	r5, [r1, #16]
 800864e:	4607      	mov	r7, r0
 8008650:	460c      	mov	r4, r1
 8008652:	461e      	mov	r6, r3
 8008654:	f101 0c14 	add.w	ip, r1, #20
 8008658:	2000      	movs	r0, #0
 800865a:	f8dc 3000 	ldr.w	r3, [ip]
 800865e:	b299      	uxth	r1, r3
 8008660:	fb02 6101 	mla	r1, r2, r1, r6
 8008664:	0c1e      	lsrs	r6, r3, #16
 8008666:	0c0b      	lsrs	r3, r1, #16
 8008668:	fb02 3306 	mla	r3, r2, r6, r3
 800866c:	b289      	uxth	r1, r1
 800866e:	3001      	adds	r0, #1
 8008670:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008674:	4285      	cmp	r5, r0
 8008676:	f84c 1b04 	str.w	r1, [ip], #4
 800867a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800867e:	dcec      	bgt.n	800865a <__multadd+0x12>
 8008680:	b30e      	cbz	r6, 80086c6 <__multadd+0x7e>
 8008682:	68a3      	ldr	r3, [r4, #8]
 8008684:	42ab      	cmp	r3, r5
 8008686:	dc19      	bgt.n	80086bc <__multadd+0x74>
 8008688:	6861      	ldr	r1, [r4, #4]
 800868a:	4638      	mov	r0, r7
 800868c:	3101      	adds	r1, #1
 800868e:	f7ff ff79 	bl	8008584 <_Balloc>
 8008692:	4680      	mov	r8, r0
 8008694:	b928      	cbnz	r0, 80086a2 <__multadd+0x5a>
 8008696:	4602      	mov	r2, r0
 8008698:	4b0c      	ldr	r3, [pc, #48]	@ (80086cc <__multadd+0x84>)
 800869a:	480d      	ldr	r0, [pc, #52]	@ (80086d0 <__multadd+0x88>)
 800869c:	21ba      	movs	r1, #186	@ 0xba
 800869e:	f000 fd7b 	bl	8009198 <__assert_func>
 80086a2:	6922      	ldr	r2, [r4, #16]
 80086a4:	3202      	adds	r2, #2
 80086a6:	f104 010c 	add.w	r1, r4, #12
 80086aa:	0092      	lsls	r2, r2, #2
 80086ac:	300c      	adds	r0, #12
 80086ae:	f000 fd65 	bl	800917c <memcpy>
 80086b2:	4621      	mov	r1, r4
 80086b4:	4638      	mov	r0, r7
 80086b6:	f7ff ffa5 	bl	8008604 <_Bfree>
 80086ba:	4644      	mov	r4, r8
 80086bc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80086c0:	3501      	adds	r5, #1
 80086c2:	615e      	str	r6, [r3, #20]
 80086c4:	6125      	str	r5, [r4, #16]
 80086c6:	4620      	mov	r0, r4
 80086c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086cc:	08009518 	.word	0x08009518
 80086d0:	08009529 	.word	0x08009529

080086d4 <__hi0bits>:
 80086d4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80086d8:	4603      	mov	r3, r0
 80086da:	bf36      	itet	cc
 80086dc:	0403      	lslcc	r3, r0, #16
 80086de:	2000      	movcs	r0, #0
 80086e0:	2010      	movcc	r0, #16
 80086e2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80086e6:	bf3c      	itt	cc
 80086e8:	021b      	lslcc	r3, r3, #8
 80086ea:	3008      	addcc	r0, #8
 80086ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80086f0:	bf3c      	itt	cc
 80086f2:	011b      	lslcc	r3, r3, #4
 80086f4:	3004      	addcc	r0, #4
 80086f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086fa:	bf3c      	itt	cc
 80086fc:	009b      	lslcc	r3, r3, #2
 80086fe:	3002      	addcc	r0, #2
 8008700:	2b00      	cmp	r3, #0
 8008702:	db05      	blt.n	8008710 <__hi0bits+0x3c>
 8008704:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008708:	f100 0001 	add.w	r0, r0, #1
 800870c:	bf08      	it	eq
 800870e:	2020      	moveq	r0, #32
 8008710:	4770      	bx	lr

08008712 <__lo0bits>:
 8008712:	6803      	ldr	r3, [r0, #0]
 8008714:	4602      	mov	r2, r0
 8008716:	f013 0007 	ands.w	r0, r3, #7
 800871a:	d00b      	beq.n	8008734 <__lo0bits+0x22>
 800871c:	07d9      	lsls	r1, r3, #31
 800871e:	d421      	bmi.n	8008764 <__lo0bits+0x52>
 8008720:	0798      	lsls	r0, r3, #30
 8008722:	bf49      	itett	mi
 8008724:	085b      	lsrmi	r3, r3, #1
 8008726:	089b      	lsrpl	r3, r3, #2
 8008728:	2001      	movmi	r0, #1
 800872a:	6013      	strmi	r3, [r2, #0]
 800872c:	bf5c      	itt	pl
 800872e:	6013      	strpl	r3, [r2, #0]
 8008730:	2002      	movpl	r0, #2
 8008732:	4770      	bx	lr
 8008734:	b299      	uxth	r1, r3
 8008736:	b909      	cbnz	r1, 800873c <__lo0bits+0x2a>
 8008738:	0c1b      	lsrs	r3, r3, #16
 800873a:	2010      	movs	r0, #16
 800873c:	b2d9      	uxtb	r1, r3
 800873e:	b909      	cbnz	r1, 8008744 <__lo0bits+0x32>
 8008740:	3008      	adds	r0, #8
 8008742:	0a1b      	lsrs	r3, r3, #8
 8008744:	0719      	lsls	r1, r3, #28
 8008746:	bf04      	itt	eq
 8008748:	091b      	lsreq	r3, r3, #4
 800874a:	3004      	addeq	r0, #4
 800874c:	0799      	lsls	r1, r3, #30
 800874e:	bf04      	itt	eq
 8008750:	089b      	lsreq	r3, r3, #2
 8008752:	3002      	addeq	r0, #2
 8008754:	07d9      	lsls	r1, r3, #31
 8008756:	d403      	bmi.n	8008760 <__lo0bits+0x4e>
 8008758:	085b      	lsrs	r3, r3, #1
 800875a:	f100 0001 	add.w	r0, r0, #1
 800875e:	d003      	beq.n	8008768 <__lo0bits+0x56>
 8008760:	6013      	str	r3, [r2, #0]
 8008762:	4770      	bx	lr
 8008764:	2000      	movs	r0, #0
 8008766:	4770      	bx	lr
 8008768:	2020      	movs	r0, #32
 800876a:	4770      	bx	lr

0800876c <__i2b>:
 800876c:	b510      	push	{r4, lr}
 800876e:	460c      	mov	r4, r1
 8008770:	2101      	movs	r1, #1
 8008772:	f7ff ff07 	bl	8008584 <_Balloc>
 8008776:	4602      	mov	r2, r0
 8008778:	b928      	cbnz	r0, 8008786 <__i2b+0x1a>
 800877a:	4b05      	ldr	r3, [pc, #20]	@ (8008790 <__i2b+0x24>)
 800877c:	4805      	ldr	r0, [pc, #20]	@ (8008794 <__i2b+0x28>)
 800877e:	f240 1145 	movw	r1, #325	@ 0x145
 8008782:	f000 fd09 	bl	8009198 <__assert_func>
 8008786:	2301      	movs	r3, #1
 8008788:	6144      	str	r4, [r0, #20]
 800878a:	6103      	str	r3, [r0, #16]
 800878c:	bd10      	pop	{r4, pc}
 800878e:	bf00      	nop
 8008790:	08009518 	.word	0x08009518
 8008794:	08009529 	.word	0x08009529

08008798 <__multiply>:
 8008798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800879c:	4617      	mov	r7, r2
 800879e:	690a      	ldr	r2, [r1, #16]
 80087a0:	693b      	ldr	r3, [r7, #16]
 80087a2:	429a      	cmp	r2, r3
 80087a4:	bfa8      	it	ge
 80087a6:	463b      	movge	r3, r7
 80087a8:	4689      	mov	r9, r1
 80087aa:	bfa4      	itt	ge
 80087ac:	460f      	movge	r7, r1
 80087ae:	4699      	movge	r9, r3
 80087b0:	693d      	ldr	r5, [r7, #16]
 80087b2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	6879      	ldr	r1, [r7, #4]
 80087ba:	eb05 060a 	add.w	r6, r5, sl
 80087be:	42b3      	cmp	r3, r6
 80087c0:	b085      	sub	sp, #20
 80087c2:	bfb8      	it	lt
 80087c4:	3101      	addlt	r1, #1
 80087c6:	f7ff fedd 	bl	8008584 <_Balloc>
 80087ca:	b930      	cbnz	r0, 80087da <__multiply+0x42>
 80087cc:	4602      	mov	r2, r0
 80087ce:	4b41      	ldr	r3, [pc, #260]	@ (80088d4 <__multiply+0x13c>)
 80087d0:	4841      	ldr	r0, [pc, #260]	@ (80088d8 <__multiply+0x140>)
 80087d2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80087d6:	f000 fcdf 	bl	8009198 <__assert_func>
 80087da:	f100 0414 	add.w	r4, r0, #20
 80087de:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80087e2:	4623      	mov	r3, r4
 80087e4:	2200      	movs	r2, #0
 80087e6:	4573      	cmp	r3, lr
 80087e8:	d320      	bcc.n	800882c <__multiply+0x94>
 80087ea:	f107 0814 	add.w	r8, r7, #20
 80087ee:	f109 0114 	add.w	r1, r9, #20
 80087f2:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80087f6:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80087fa:	9302      	str	r3, [sp, #8]
 80087fc:	1beb      	subs	r3, r5, r7
 80087fe:	3b15      	subs	r3, #21
 8008800:	f023 0303 	bic.w	r3, r3, #3
 8008804:	3304      	adds	r3, #4
 8008806:	3715      	adds	r7, #21
 8008808:	42bd      	cmp	r5, r7
 800880a:	bf38      	it	cc
 800880c:	2304      	movcc	r3, #4
 800880e:	9301      	str	r3, [sp, #4]
 8008810:	9b02      	ldr	r3, [sp, #8]
 8008812:	9103      	str	r1, [sp, #12]
 8008814:	428b      	cmp	r3, r1
 8008816:	d80c      	bhi.n	8008832 <__multiply+0x9a>
 8008818:	2e00      	cmp	r6, #0
 800881a:	dd03      	ble.n	8008824 <__multiply+0x8c>
 800881c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008820:	2b00      	cmp	r3, #0
 8008822:	d055      	beq.n	80088d0 <__multiply+0x138>
 8008824:	6106      	str	r6, [r0, #16]
 8008826:	b005      	add	sp, #20
 8008828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800882c:	f843 2b04 	str.w	r2, [r3], #4
 8008830:	e7d9      	b.n	80087e6 <__multiply+0x4e>
 8008832:	f8b1 a000 	ldrh.w	sl, [r1]
 8008836:	f1ba 0f00 	cmp.w	sl, #0
 800883a:	d01f      	beq.n	800887c <__multiply+0xe4>
 800883c:	46c4      	mov	ip, r8
 800883e:	46a1      	mov	r9, r4
 8008840:	2700      	movs	r7, #0
 8008842:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008846:	f8d9 3000 	ldr.w	r3, [r9]
 800884a:	fa1f fb82 	uxth.w	fp, r2
 800884e:	b29b      	uxth	r3, r3
 8008850:	fb0a 330b 	mla	r3, sl, fp, r3
 8008854:	443b      	add	r3, r7
 8008856:	f8d9 7000 	ldr.w	r7, [r9]
 800885a:	0c12      	lsrs	r2, r2, #16
 800885c:	0c3f      	lsrs	r7, r7, #16
 800885e:	fb0a 7202 	mla	r2, sl, r2, r7
 8008862:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8008866:	b29b      	uxth	r3, r3
 8008868:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800886c:	4565      	cmp	r5, ip
 800886e:	f849 3b04 	str.w	r3, [r9], #4
 8008872:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8008876:	d8e4      	bhi.n	8008842 <__multiply+0xaa>
 8008878:	9b01      	ldr	r3, [sp, #4]
 800887a:	50e7      	str	r7, [r4, r3]
 800887c:	9b03      	ldr	r3, [sp, #12]
 800887e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008882:	3104      	adds	r1, #4
 8008884:	f1b9 0f00 	cmp.w	r9, #0
 8008888:	d020      	beq.n	80088cc <__multiply+0x134>
 800888a:	6823      	ldr	r3, [r4, #0]
 800888c:	4647      	mov	r7, r8
 800888e:	46a4      	mov	ip, r4
 8008890:	f04f 0a00 	mov.w	sl, #0
 8008894:	f8b7 b000 	ldrh.w	fp, [r7]
 8008898:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800889c:	fb09 220b 	mla	r2, r9, fp, r2
 80088a0:	4452      	add	r2, sl
 80088a2:	b29b      	uxth	r3, r3
 80088a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80088a8:	f84c 3b04 	str.w	r3, [ip], #4
 80088ac:	f857 3b04 	ldr.w	r3, [r7], #4
 80088b0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80088b4:	f8bc 3000 	ldrh.w	r3, [ip]
 80088b8:	fb09 330a 	mla	r3, r9, sl, r3
 80088bc:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80088c0:	42bd      	cmp	r5, r7
 80088c2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80088c6:	d8e5      	bhi.n	8008894 <__multiply+0xfc>
 80088c8:	9a01      	ldr	r2, [sp, #4]
 80088ca:	50a3      	str	r3, [r4, r2]
 80088cc:	3404      	adds	r4, #4
 80088ce:	e79f      	b.n	8008810 <__multiply+0x78>
 80088d0:	3e01      	subs	r6, #1
 80088d2:	e7a1      	b.n	8008818 <__multiply+0x80>
 80088d4:	08009518 	.word	0x08009518
 80088d8:	08009529 	.word	0x08009529

080088dc <__pow5mult>:
 80088dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088e0:	4615      	mov	r5, r2
 80088e2:	f012 0203 	ands.w	r2, r2, #3
 80088e6:	4607      	mov	r7, r0
 80088e8:	460e      	mov	r6, r1
 80088ea:	d007      	beq.n	80088fc <__pow5mult+0x20>
 80088ec:	4c25      	ldr	r4, [pc, #148]	@ (8008984 <__pow5mult+0xa8>)
 80088ee:	3a01      	subs	r2, #1
 80088f0:	2300      	movs	r3, #0
 80088f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80088f6:	f7ff fea7 	bl	8008648 <__multadd>
 80088fa:	4606      	mov	r6, r0
 80088fc:	10ad      	asrs	r5, r5, #2
 80088fe:	d03d      	beq.n	800897c <__pow5mult+0xa0>
 8008900:	69fc      	ldr	r4, [r7, #28]
 8008902:	b97c      	cbnz	r4, 8008924 <__pow5mult+0x48>
 8008904:	2010      	movs	r0, #16
 8008906:	f7ff fd87 	bl	8008418 <malloc>
 800890a:	4602      	mov	r2, r0
 800890c:	61f8      	str	r0, [r7, #28]
 800890e:	b928      	cbnz	r0, 800891c <__pow5mult+0x40>
 8008910:	4b1d      	ldr	r3, [pc, #116]	@ (8008988 <__pow5mult+0xac>)
 8008912:	481e      	ldr	r0, [pc, #120]	@ (800898c <__pow5mult+0xb0>)
 8008914:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008918:	f000 fc3e 	bl	8009198 <__assert_func>
 800891c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008920:	6004      	str	r4, [r0, #0]
 8008922:	60c4      	str	r4, [r0, #12]
 8008924:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008928:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800892c:	b94c      	cbnz	r4, 8008942 <__pow5mult+0x66>
 800892e:	f240 2171 	movw	r1, #625	@ 0x271
 8008932:	4638      	mov	r0, r7
 8008934:	f7ff ff1a 	bl	800876c <__i2b>
 8008938:	2300      	movs	r3, #0
 800893a:	f8c8 0008 	str.w	r0, [r8, #8]
 800893e:	4604      	mov	r4, r0
 8008940:	6003      	str	r3, [r0, #0]
 8008942:	f04f 0900 	mov.w	r9, #0
 8008946:	07eb      	lsls	r3, r5, #31
 8008948:	d50a      	bpl.n	8008960 <__pow5mult+0x84>
 800894a:	4631      	mov	r1, r6
 800894c:	4622      	mov	r2, r4
 800894e:	4638      	mov	r0, r7
 8008950:	f7ff ff22 	bl	8008798 <__multiply>
 8008954:	4631      	mov	r1, r6
 8008956:	4680      	mov	r8, r0
 8008958:	4638      	mov	r0, r7
 800895a:	f7ff fe53 	bl	8008604 <_Bfree>
 800895e:	4646      	mov	r6, r8
 8008960:	106d      	asrs	r5, r5, #1
 8008962:	d00b      	beq.n	800897c <__pow5mult+0xa0>
 8008964:	6820      	ldr	r0, [r4, #0]
 8008966:	b938      	cbnz	r0, 8008978 <__pow5mult+0x9c>
 8008968:	4622      	mov	r2, r4
 800896a:	4621      	mov	r1, r4
 800896c:	4638      	mov	r0, r7
 800896e:	f7ff ff13 	bl	8008798 <__multiply>
 8008972:	6020      	str	r0, [r4, #0]
 8008974:	f8c0 9000 	str.w	r9, [r0]
 8008978:	4604      	mov	r4, r0
 800897a:	e7e4      	b.n	8008946 <__pow5mult+0x6a>
 800897c:	4630      	mov	r0, r6
 800897e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008982:	bf00      	nop
 8008984:	080095dc 	.word	0x080095dc
 8008988:	080094a9 	.word	0x080094a9
 800898c:	08009529 	.word	0x08009529

08008990 <__lshift>:
 8008990:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008994:	460c      	mov	r4, r1
 8008996:	6849      	ldr	r1, [r1, #4]
 8008998:	6923      	ldr	r3, [r4, #16]
 800899a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800899e:	68a3      	ldr	r3, [r4, #8]
 80089a0:	4607      	mov	r7, r0
 80089a2:	4691      	mov	r9, r2
 80089a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80089a8:	f108 0601 	add.w	r6, r8, #1
 80089ac:	42b3      	cmp	r3, r6
 80089ae:	db0b      	blt.n	80089c8 <__lshift+0x38>
 80089b0:	4638      	mov	r0, r7
 80089b2:	f7ff fde7 	bl	8008584 <_Balloc>
 80089b6:	4605      	mov	r5, r0
 80089b8:	b948      	cbnz	r0, 80089ce <__lshift+0x3e>
 80089ba:	4602      	mov	r2, r0
 80089bc:	4b28      	ldr	r3, [pc, #160]	@ (8008a60 <__lshift+0xd0>)
 80089be:	4829      	ldr	r0, [pc, #164]	@ (8008a64 <__lshift+0xd4>)
 80089c0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80089c4:	f000 fbe8 	bl	8009198 <__assert_func>
 80089c8:	3101      	adds	r1, #1
 80089ca:	005b      	lsls	r3, r3, #1
 80089cc:	e7ee      	b.n	80089ac <__lshift+0x1c>
 80089ce:	2300      	movs	r3, #0
 80089d0:	f100 0114 	add.w	r1, r0, #20
 80089d4:	f100 0210 	add.w	r2, r0, #16
 80089d8:	4618      	mov	r0, r3
 80089da:	4553      	cmp	r3, sl
 80089dc:	db33      	blt.n	8008a46 <__lshift+0xb6>
 80089de:	6920      	ldr	r0, [r4, #16]
 80089e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80089e4:	f104 0314 	add.w	r3, r4, #20
 80089e8:	f019 091f 	ands.w	r9, r9, #31
 80089ec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80089f0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80089f4:	d02b      	beq.n	8008a4e <__lshift+0xbe>
 80089f6:	f1c9 0e20 	rsb	lr, r9, #32
 80089fa:	468a      	mov	sl, r1
 80089fc:	2200      	movs	r2, #0
 80089fe:	6818      	ldr	r0, [r3, #0]
 8008a00:	fa00 f009 	lsl.w	r0, r0, r9
 8008a04:	4310      	orrs	r0, r2
 8008a06:	f84a 0b04 	str.w	r0, [sl], #4
 8008a0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a0e:	459c      	cmp	ip, r3
 8008a10:	fa22 f20e 	lsr.w	r2, r2, lr
 8008a14:	d8f3      	bhi.n	80089fe <__lshift+0x6e>
 8008a16:	ebac 0304 	sub.w	r3, ip, r4
 8008a1a:	3b15      	subs	r3, #21
 8008a1c:	f023 0303 	bic.w	r3, r3, #3
 8008a20:	3304      	adds	r3, #4
 8008a22:	f104 0015 	add.w	r0, r4, #21
 8008a26:	4560      	cmp	r0, ip
 8008a28:	bf88      	it	hi
 8008a2a:	2304      	movhi	r3, #4
 8008a2c:	50ca      	str	r2, [r1, r3]
 8008a2e:	b10a      	cbz	r2, 8008a34 <__lshift+0xa4>
 8008a30:	f108 0602 	add.w	r6, r8, #2
 8008a34:	3e01      	subs	r6, #1
 8008a36:	4638      	mov	r0, r7
 8008a38:	612e      	str	r6, [r5, #16]
 8008a3a:	4621      	mov	r1, r4
 8008a3c:	f7ff fde2 	bl	8008604 <_Bfree>
 8008a40:	4628      	mov	r0, r5
 8008a42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a46:	f842 0f04 	str.w	r0, [r2, #4]!
 8008a4a:	3301      	adds	r3, #1
 8008a4c:	e7c5      	b.n	80089da <__lshift+0x4a>
 8008a4e:	3904      	subs	r1, #4
 8008a50:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a54:	f841 2f04 	str.w	r2, [r1, #4]!
 8008a58:	459c      	cmp	ip, r3
 8008a5a:	d8f9      	bhi.n	8008a50 <__lshift+0xc0>
 8008a5c:	e7ea      	b.n	8008a34 <__lshift+0xa4>
 8008a5e:	bf00      	nop
 8008a60:	08009518 	.word	0x08009518
 8008a64:	08009529 	.word	0x08009529

08008a68 <__mcmp>:
 8008a68:	690a      	ldr	r2, [r1, #16]
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	6900      	ldr	r0, [r0, #16]
 8008a6e:	1a80      	subs	r0, r0, r2
 8008a70:	b530      	push	{r4, r5, lr}
 8008a72:	d10e      	bne.n	8008a92 <__mcmp+0x2a>
 8008a74:	3314      	adds	r3, #20
 8008a76:	3114      	adds	r1, #20
 8008a78:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008a7c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008a80:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008a84:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008a88:	4295      	cmp	r5, r2
 8008a8a:	d003      	beq.n	8008a94 <__mcmp+0x2c>
 8008a8c:	d205      	bcs.n	8008a9a <__mcmp+0x32>
 8008a8e:	f04f 30ff 	mov.w	r0, #4294967295
 8008a92:	bd30      	pop	{r4, r5, pc}
 8008a94:	42a3      	cmp	r3, r4
 8008a96:	d3f3      	bcc.n	8008a80 <__mcmp+0x18>
 8008a98:	e7fb      	b.n	8008a92 <__mcmp+0x2a>
 8008a9a:	2001      	movs	r0, #1
 8008a9c:	e7f9      	b.n	8008a92 <__mcmp+0x2a>
	...

08008aa0 <__mdiff>:
 8008aa0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008aa4:	4689      	mov	r9, r1
 8008aa6:	4606      	mov	r6, r0
 8008aa8:	4611      	mov	r1, r2
 8008aaa:	4648      	mov	r0, r9
 8008aac:	4614      	mov	r4, r2
 8008aae:	f7ff ffdb 	bl	8008a68 <__mcmp>
 8008ab2:	1e05      	subs	r5, r0, #0
 8008ab4:	d112      	bne.n	8008adc <__mdiff+0x3c>
 8008ab6:	4629      	mov	r1, r5
 8008ab8:	4630      	mov	r0, r6
 8008aba:	f7ff fd63 	bl	8008584 <_Balloc>
 8008abe:	4602      	mov	r2, r0
 8008ac0:	b928      	cbnz	r0, 8008ace <__mdiff+0x2e>
 8008ac2:	4b3f      	ldr	r3, [pc, #252]	@ (8008bc0 <__mdiff+0x120>)
 8008ac4:	f240 2137 	movw	r1, #567	@ 0x237
 8008ac8:	483e      	ldr	r0, [pc, #248]	@ (8008bc4 <__mdiff+0x124>)
 8008aca:	f000 fb65 	bl	8009198 <__assert_func>
 8008ace:	2301      	movs	r3, #1
 8008ad0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008ad4:	4610      	mov	r0, r2
 8008ad6:	b003      	add	sp, #12
 8008ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008adc:	bfbc      	itt	lt
 8008ade:	464b      	movlt	r3, r9
 8008ae0:	46a1      	movlt	r9, r4
 8008ae2:	4630      	mov	r0, r6
 8008ae4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008ae8:	bfba      	itte	lt
 8008aea:	461c      	movlt	r4, r3
 8008aec:	2501      	movlt	r5, #1
 8008aee:	2500      	movge	r5, #0
 8008af0:	f7ff fd48 	bl	8008584 <_Balloc>
 8008af4:	4602      	mov	r2, r0
 8008af6:	b918      	cbnz	r0, 8008b00 <__mdiff+0x60>
 8008af8:	4b31      	ldr	r3, [pc, #196]	@ (8008bc0 <__mdiff+0x120>)
 8008afa:	f240 2145 	movw	r1, #581	@ 0x245
 8008afe:	e7e3      	b.n	8008ac8 <__mdiff+0x28>
 8008b00:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008b04:	6926      	ldr	r6, [r4, #16]
 8008b06:	60c5      	str	r5, [r0, #12]
 8008b08:	f109 0310 	add.w	r3, r9, #16
 8008b0c:	f109 0514 	add.w	r5, r9, #20
 8008b10:	f104 0e14 	add.w	lr, r4, #20
 8008b14:	f100 0b14 	add.w	fp, r0, #20
 8008b18:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008b1c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008b20:	9301      	str	r3, [sp, #4]
 8008b22:	46d9      	mov	r9, fp
 8008b24:	f04f 0c00 	mov.w	ip, #0
 8008b28:	9b01      	ldr	r3, [sp, #4]
 8008b2a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008b2e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008b32:	9301      	str	r3, [sp, #4]
 8008b34:	fa1f f38a 	uxth.w	r3, sl
 8008b38:	4619      	mov	r1, r3
 8008b3a:	b283      	uxth	r3, r0
 8008b3c:	1acb      	subs	r3, r1, r3
 8008b3e:	0c00      	lsrs	r0, r0, #16
 8008b40:	4463      	add	r3, ip
 8008b42:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008b46:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008b4a:	b29b      	uxth	r3, r3
 8008b4c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008b50:	4576      	cmp	r6, lr
 8008b52:	f849 3b04 	str.w	r3, [r9], #4
 8008b56:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008b5a:	d8e5      	bhi.n	8008b28 <__mdiff+0x88>
 8008b5c:	1b33      	subs	r3, r6, r4
 8008b5e:	3b15      	subs	r3, #21
 8008b60:	f023 0303 	bic.w	r3, r3, #3
 8008b64:	3415      	adds	r4, #21
 8008b66:	3304      	adds	r3, #4
 8008b68:	42a6      	cmp	r6, r4
 8008b6a:	bf38      	it	cc
 8008b6c:	2304      	movcc	r3, #4
 8008b6e:	441d      	add	r5, r3
 8008b70:	445b      	add	r3, fp
 8008b72:	461e      	mov	r6, r3
 8008b74:	462c      	mov	r4, r5
 8008b76:	4544      	cmp	r4, r8
 8008b78:	d30e      	bcc.n	8008b98 <__mdiff+0xf8>
 8008b7a:	f108 0103 	add.w	r1, r8, #3
 8008b7e:	1b49      	subs	r1, r1, r5
 8008b80:	f021 0103 	bic.w	r1, r1, #3
 8008b84:	3d03      	subs	r5, #3
 8008b86:	45a8      	cmp	r8, r5
 8008b88:	bf38      	it	cc
 8008b8a:	2100      	movcc	r1, #0
 8008b8c:	440b      	add	r3, r1
 8008b8e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008b92:	b191      	cbz	r1, 8008bba <__mdiff+0x11a>
 8008b94:	6117      	str	r7, [r2, #16]
 8008b96:	e79d      	b.n	8008ad4 <__mdiff+0x34>
 8008b98:	f854 1b04 	ldr.w	r1, [r4], #4
 8008b9c:	46e6      	mov	lr, ip
 8008b9e:	0c08      	lsrs	r0, r1, #16
 8008ba0:	fa1c fc81 	uxtah	ip, ip, r1
 8008ba4:	4471      	add	r1, lr
 8008ba6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008baa:	b289      	uxth	r1, r1
 8008bac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008bb0:	f846 1b04 	str.w	r1, [r6], #4
 8008bb4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008bb8:	e7dd      	b.n	8008b76 <__mdiff+0xd6>
 8008bba:	3f01      	subs	r7, #1
 8008bbc:	e7e7      	b.n	8008b8e <__mdiff+0xee>
 8008bbe:	bf00      	nop
 8008bc0:	08009518 	.word	0x08009518
 8008bc4:	08009529 	.word	0x08009529

08008bc8 <__d2b>:
 8008bc8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008bcc:	460f      	mov	r7, r1
 8008bce:	2101      	movs	r1, #1
 8008bd0:	ec59 8b10 	vmov	r8, r9, d0
 8008bd4:	4616      	mov	r6, r2
 8008bd6:	f7ff fcd5 	bl	8008584 <_Balloc>
 8008bda:	4604      	mov	r4, r0
 8008bdc:	b930      	cbnz	r0, 8008bec <__d2b+0x24>
 8008bde:	4602      	mov	r2, r0
 8008be0:	4b23      	ldr	r3, [pc, #140]	@ (8008c70 <__d2b+0xa8>)
 8008be2:	4824      	ldr	r0, [pc, #144]	@ (8008c74 <__d2b+0xac>)
 8008be4:	f240 310f 	movw	r1, #783	@ 0x30f
 8008be8:	f000 fad6 	bl	8009198 <__assert_func>
 8008bec:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008bf0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008bf4:	b10d      	cbz	r5, 8008bfa <__d2b+0x32>
 8008bf6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008bfa:	9301      	str	r3, [sp, #4]
 8008bfc:	f1b8 0300 	subs.w	r3, r8, #0
 8008c00:	d023      	beq.n	8008c4a <__d2b+0x82>
 8008c02:	4668      	mov	r0, sp
 8008c04:	9300      	str	r3, [sp, #0]
 8008c06:	f7ff fd84 	bl	8008712 <__lo0bits>
 8008c0a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008c0e:	b1d0      	cbz	r0, 8008c46 <__d2b+0x7e>
 8008c10:	f1c0 0320 	rsb	r3, r0, #32
 8008c14:	fa02 f303 	lsl.w	r3, r2, r3
 8008c18:	430b      	orrs	r3, r1
 8008c1a:	40c2      	lsrs	r2, r0
 8008c1c:	6163      	str	r3, [r4, #20]
 8008c1e:	9201      	str	r2, [sp, #4]
 8008c20:	9b01      	ldr	r3, [sp, #4]
 8008c22:	61a3      	str	r3, [r4, #24]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	bf0c      	ite	eq
 8008c28:	2201      	moveq	r2, #1
 8008c2a:	2202      	movne	r2, #2
 8008c2c:	6122      	str	r2, [r4, #16]
 8008c2e:	b1a5      	cbz	r5, 8008c5a <__d2b+0x92>
 8008c30:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008c34:	4405      	add	r5, r0
 8008c36:	603d      	str	r5, [r7, #0]
 8008c38:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008c3c:	6030      	str	r0, [r6, #0]
 8008c3e:	4620      	mov	r0, r4
 8008c40:	b003      	add	sp, #12
 8008c42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008c46:	6161      	str	r1, [r4, #20]
 8008c48:	e7ea      	b.n	8008c20 <__d2b+0x58>
 8008c4a:	a801      	add	r0, sp, #4
 8008c4c:	f7ff fd61 	bl	8008712 <__lo0bits>
 8008c50:	9b01      	ldr	r3, [sp, #4]
 8008c52:	6163      	str	r3, [r4, #20]
 8008c54:	3020      	adds	r0, #32
 8008c56:	2201      	movs	r2, #1
 8008c58:	e7e8      	b.n	8008c2c <__d2b+0x64>
 8008c5a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008c5e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008c62:	6038      	str	r0, [r7, #0]
 8008c64:	6918      	ldr	r0, [r3, #16]
 8008c66:	f7ff fd35 	bl	80086d4 <__hi0bits>
 8008c6a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008c6e:	e7e5      	b.n	8008c3c <__d2b+0x74>
 8008c70:	08009518 	.word	0x08009518
 8008c74:	08009529 	.word	0x08009529

08008c78 <__sfputc_r>:
 8008c78:	6893      	ldr	r3, [r2, #8]
 8008c7a:	3b01      	subs	r3, #1
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	b410      	push	{r4}
 8008c80:	6093      	str	r3, [r2, #8]
 8008c82:	da08      	bge.n	8008c96 <__sfputc_r+0x1e>
 8008c84:	6994      	ldr	r4, [r2, #24]
 8008c86:	42a3      	cmp	r3, r4
 8008c88:	db01      	blt.n	8008c8e <__sfputc_r+0x16>
 8008c8a:	290a      	cmp	r1, #10
 8008c8c:	d103      	bne.n	8008c96 <__sfputc_r+0x1e>
 8008c8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c92:	f7fe bc7c 	b.w	800758e <__swbuf_r>
 8008c96:	6813      	ldr	r3, [r2, #0]
 8008c98:	1c58      	adds	r0, r3, #1
 8008c9a:	6010      	str	r0, [r2, #0]
 8008c9c:	7019      	strb	r1, [r3, #0]
 8008c9e:	4608      	mov	r0, r1
 8008ca0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ca4:	4770      	bx	lr

08008ca6 <__sfputs_r>:
 8008ca6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ca8:	4606      	mov	r6, r0
 8008caa:	460f      	mov	r7, r1
 8008cac:	4614      	mov	r4, r2
 8008cae:	18d5      	adds	r5, r2, r3
 8008cb0:	42ac      	cmp	r4, r5
 8008cb2:	d101      	bne.n	8008cb8 <__sfputs_r+0x12>
 8008cb4:	2000      	movs	r0, #0
 8008cb6:	e007      	b.n	8008cc8 <__sfputs_r+0x22>
 8008cb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cbc:	463a      	mov	r2, r7
 8008cbe:	4630      	mov	r0, r6
 8008cc0:	f7ff ffda 	bl	8008c78 <__sfputc_r>
 8008cc4:	1c43      	adds	r3, r0, #1
 8008cc6:	d1f3      	bne.n	8008cb0 <__sfputs_r+0xa>
 8008cc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008ccc <_vfiprintf_r>:
 8008ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cd0:	460d      	mov	r5, r1
 8008cd2:	b09d      	sub	sp, #116	@ 0x74
 8008cd4:	4614      	mov	r4, r2
 8008cd6:	4698      	mov	r8, r3
 8008cd8:	4606      	mov	r6, r0
 8008cda:	b118      	cbz	r0, 8008ce4 <_vfiprintf_r+0x18>
 8008cdc:	6a03      	ldr	r3, [r0, #32]
 8008cde:	b90b      	cbnz	r3, 8008ce4 <_vfiprintf_r+0x18>
 8008ce0:	f7fe fb6c 	bl	80073bc <__sinit>
 8008ce4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008ce6:	07d9      	lsls	r1, r3, #31
 8008ce8:	d405      	bmi.n	8008cf6 <_vfiprintf_r+0x2a>
 8008cea:	89ab      	ldrh	r3, [r5, #12]
 8008cec:	059a      	lsls	r2, r3, #22
 8008cee:	d402      	bmi.n	8008cf6 <_vfiprintf_r+0x2a>
 8008cf0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008cf2:	f7fe fd5e 	bl	80077b2 <__retarget_lock_acquire_recursive>
 8008cf6:	89ab      	ldrh	r3, [r5, #12]
 8008cf8:	071b      	lsls	r3, r3, #28
 8008cfa:	d501      	bpl.n	8008d00 <_vfiprintf_r+0x34>
 8008cfc:	692b      	ldr	r3, [r5, #16]
 8008cfe:	b99b      	cbnz	r3, 8008d28 <_vfiprintf_r+0x5c>
 8008d00:	4629      	mov	r1, r5
 8008d02:	4630      	mov	r0, r6
 8008d04:	f7fe fc82 	bl	800760c <__swsetup_r>
 8008d08:	b170      	cbz	r0, 8008d28 <_vfiprintf_r+0x5c>
 8008d0a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008d0c:	07dc      	lsls	r4, r3, #31
 8008d0e:	d504      	bpl.n	8008d1a <_vfiprintf_r+0x4e>
 8008d10:	f04f 30ff 	mov.w	r0, #4294967295
 8008d14:	b01d      	add	sp, #116	@ 0x74
 8008d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d1a:	89ab      	ldrh	r3, [r5, #12]
 8008d1c:	0598      	lsls	r0, r3, #22
 8008d1e:	d4f7      	bmi.n	8008d10 <_vfiprintf_r+0x44>
 8008d20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008d22:	f7fe fd47 	bl	80077b4 <__retarget_lock_release_recursive>
 8008d26:	e7f3      	b.n	8008d10 <_vfiprintf_r+0x44>
 8008d28:	2300      	movs	r3, #0
 8008d2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d2c:	2320      	movs	r3, #32
 8008d2e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008d32:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d36:	2330      	movs	r3, #48	@ 0x30
 8008d38:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008ee8 <_vfiprintf_r+0x21c>
 8008d3c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008d40:	f04f 0901 	mov.w	r9, #1
 8008d44:	4623      	mov	r3, r4
 8008d46:	469a      	mov	sl, r3
 8008d48:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d4c:	b10a      	cbz	r2, 8008d52 <_vfiprintf_r+0x86>
 8008d4e:	2a25      	cmp	r2, #37	@ 0x25
 8008d50:	d1f9      	bne.n	8008d46 <_vfiprintf_r+0x7a>
 8008d52:	ebba 0b04 	subs.w	fp, sl, r4
 8008d56:	d00b      	beq.n	8008d70 <_vfiprintf_r+0xa4>
 8008d58:	465b      	mov	r3, fp
 8008d5a:	4622      	mov	r2, r4
 8008d5c:	4629      	mov	r1, r5
 8008d5e:	4630      	mov	r0, r6
 8008d60:	f7ff ffa1 	bl	8008ca6 <__sfputs_r>
 8008d64:	3001      	adds	r0, #1
 8008d66:	f000 80a7 	beq.w	8008eb8 <_vfiprintf_r+0x1ec>
 8008d6a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008d6c:	445a      	add	r2, fp
 8008d6e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008d70:	f89a 3000 	ldrb.w	r3, [sl]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	f000 809f 	beq.w	8008eb8 <_vfiprintf_r+0x1ec>
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	f04f 32ff 	mov.w	r2, #4294967295
 8008d80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d84:	f10a 0a01 	add.w	sl, sl, #1
 8008d88:	9304      	str	r3, [sp, #16]
 8008d8a:	9307      	str	r3, [sp, #28]
 8008d8c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008d90:	931a      	str	r3, [sp, #104]	@ 0x68
 8008d92:	4654      	mov	r4, sl
 8008d94:	2205      	movs	r2, #5
 8008d96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d9a:	4853      	ldr	r0, [pc, #332]	@ (8008ee8 <_vfiprintf_r+0x21c>)
 8008d9c:	f7f7 faa0 	bl	80002e0 <memchr>
 8008da0:	9a04      	ldr	r2, [sp, #16]
 8008da2:	b9d8      	cbnz	r0, 8008ddc <_vfiprintf_r+0x110>
 8008da4:	06d1      	lsls	r1, r2, #27
 8008da6:	bf44      	itt	mi
 8008da8:	2320      	movmi	r3, #32
 8008daa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008dae:	0713      	lsls	r3, r2, #28
 8008db0:	bf44      	itt	mi
 8008db2:	232b      	movmi	r3, #43	@ 0x2b
 8008db4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008db8:	f89a 3000 	ldrb.w	r3, [sl]
 8008dbc:	2b2a      	cmp	r3, #42	@ 0x2a
 8008dbe:	d015      	beq.n	8008dec <_vfiprintf_r+0x120>
 8008dc0:	9a07      	ldr	r2, [sp, #28]
 8008dc2:	4654      	mov	r4, sl
 8008dc4:	2000      	movs	r0, #0
 8008dc6:	f04f 0c0a 	mov.w	ip, #10
 8008dca:	4621      	mov	r1, r4
 8008dcc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008dd0:	3b30      	subs	r3, #48	@ 0x30
 8008dd2:	2b09      	cmp	r3, #9
 8008dd4:	d94b      	bls.n	8008e6e <_vfiprintf_r+0x1a2>
 8008dd6:	b1b0      	cbz	r0, 8008e06 <_vfiprintf_r+0x13a>
 8008dd8:	9207      	str	r2, [sp, #28]
 8008dda:	e014      	b.n	8008e06 <_vfiprintf_r+0x13a>
 8008ddc:	eba0 0308 	sub.w	r3, r0, r8
 8008de0:	fa09 f303 	lsl.w	r3, r9, r3
 8008de4:	4313      	orrs	r3, r2
 8008de6:	9304      	str	r3, [sp, #16]
 8008de8:	46a2      	mov	sl, r4
 8008dea:	e7d2      	b.n	8008d92 <_vfiprintf_r+0xc6>
 8008dec:	9b03      	ldr	r3, [sp, #12]
 8008dee:	1d19      	adds	r1, r3, #4
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	9103      	str	r1, [sp, #12]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	bfbb      	ittet	lt
 8008df8:	425b      	neglt	r3, r3
 8008dfa:	f042 0202 	orrlt.w	r2, r2, #2
 8008dfe:	9307      	strge	r3, [sp, #28]
 8008e00:	9307      	strlt	r3, [sp, #28]
 8008e02:	bfb8      	it	lt
 8008e04:	9204      	strlt	r2, [sp, #16]
 8008e06:	7823      	ldrb	r3, [r4, #0]
 8008e08:	2b2e      	cmp	r3, #46	@ 0x2e
 8008e0a:	d10a      	bne.n	8008e22 <_vfiprintf_r+0x156>
 8008e0c:	7863      	ldrb	r3, [r4, #1]
 8008e0e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e10:	d132      	bne.n	8008e78 <_vfiprintf_r+0x1ac>
 8008e12:	9b03      	ldr	r3, [sp, #12]
 8008e14:	1d1a      	adds	r2, r3, #4
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	9203      	str	r2, [sp, #12]
 8008e1a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008e1e:	3402      	adds	r4, #2
 8008e20:	9305      	str	r3, [sp, #20]
 8008e22:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008ef8 <_vfiprintf_r+0x22c>
 8008e26:	7821      	ldrb	r1, [r4, #0]
 8008e28:	2203      	movs	r2, #3
 8008e2a:	4650      	mov	r0, sl
 8008e2c:	f7f7 fa58 	bl	80002e0 <memchr>
 8008e30:	b138      	cbz	r0, 8008e42 <_vfiprintf_r+0x176>
 8008e32:	9b04      	ldr	r3, [sp, #16]
 8008e34:	eba0 000a 	sub.w	r0, r0, sl
 8008e38:	2240      	movs	r2, #64	@ 0x40
 8008e3a:	4082      	lsls	r2, r0
 8008e3c:	4313      	orrs	r3, r2
 8008e3e:	3401      	adds	r4, #1
 8008e40:	9304      	str	r3, [sp, #16]
 8008e42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e46:	4829      	ldr	r0, [pc, #164]	@ (8008eec <_vfiprintf_r+0x220>)
 8008e48:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008e4c:	2206      	movs	r2, #6
 8008e4e:	f7f7 fa47 	bl	80002e0 <memchr>
 8008e52:	2800      	cmp	r0, #0
 8008e54:	d03f      	beq.n	8008ed6 <_vfiprintf_r+0x20a>
 8008e56:	4b26      	ldr	r3, [pc, #152]	@ (8008ef0 <_vfiprintf_r+0x224>)
 8008e58:	bb1b      	cbnz	r3, 8008ea2 <_vfiprintf_r+0x1d6>
 8008e5a:	9b03      	ldr	r3, [sp, #12]
 8008e5c:	3307      	adds	r3, #7
 8008e5e:	f023 0307 	bic.w	r3, r3, #7
 8008e62:	3308      	adds	r3, #8
 8008e64:	9303      	str	r3, [sp, #12]
 8008e66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e68:	443b      	add	r3, r7
 8008e6a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e6c:	e76a      	b.n	8008d44 <_vfiprintf_r+0x78>
 8008e6e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e72:	460c      	mov	r4, r1
 8008e74:	2001      	movs	r0, #1
 8008e76:	e7a8      	b.n	8008dca <_vfiprintf_r+0xfe>
 8008e78:	2300      	movs	r3, #0
 8008e7a:	3401      	adds	r4, #1
 8008e7c:	9305      	str	r3, [sp, #20]
 8008e7e:	4619      	mov	r1, r3
 8008e80:	f04f 0c0a 	mov.w	ip, #10
 8008e84:	4620      	mov	r0, r4
 8008e86:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e8a:	3a30      	subs	r2, #48	@ 0x30
 8008e8c:	2a09      	cmp	r2, #9
 8008e8e:	d903      	bls.n	8008e98 <_vfiprintf_r+0x1cc>
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d0c6      	beq.n	8008e22 <_vfiprintf_r+0x156>
 8008e94:	9105      	str	r1, [sp, #20]
 8008e96:	e7c4      	b.n	8008e22 <_vfiprintf_r+0x156>
 8008e98:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e9c:	4604      	mov	r4, r0
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	e7f0      	b.n	8008e84 <_vfiprintf_r+0x1b8>
 8008ea2:	ab03      	add	r3, sp, #12
 8008ea4:	9300      	str	r3, [sp, #0]
 8008ea6:	462a      	mov	r2, r5
 8008ea8:	4b12      	ldr	r3, [pc, #72]	@ (8008ef4 <_vfiprintf_r+0x228>)
 8008eaa:	a904      	add	r1, sp, #16
 8008eac:	4630      	mov	r0, r6
 8008eae:	f7fd fe53 	bl	8006b58 <_printf_float>
 8008eb2:	4607      	mov	r7, r0
 8008eb4:	1c78      	adds	r0, r7, #1
 8008eb6:	d1d6      	bne.n	8008e66 <_vfiprintf_r+0x19a>
 8008eb8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008eba:	07d9      	lsls	r1, r3, #31
 8008ebc:	d405      	bmi.n	8008eca <_vfiprintf_r+0x1fe>
 8008ebe:	89ab      	ldrh	r3, [r5, #12]
 8008ec0:	059a      	lsls	r2, r3, #22
 8008ec2:	d402      	bmi.n	8008eca <_vfiprintf_r+0x1fe>
 8008ec4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008ec6:	f7fe fc75 	bl	80077b4 <__retarget_lock_release_recursive>
 8008eca:	89ab      	ldrh	r3, [r5, #12]
 8008ecc:	065b      	lsls	r3, r3, #25
 8008ece:	f53f af1f 	bmi.w	8008d10 <_vfiprintf_r+0x44>
 8008ed2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008ed4:	e71e      	b.n	8008d14 <_vfiprintf_r+0x48>
 8008ed6:	ab03      	add	r3, sp, #12
 8008ed8:	9300      	str	r3, [sp, #0]
 8008eda:	462a      	mov	r2, r5
 8008edc:	4b05      	ldr	r3, [pc, #20]	@ (8008ef4 <_vfiprintf_r+0x228>)
 8008ede:	a904      	add	r1, sp, #16
 8008ee0:	4630      	mov	r0, r6
 8008ee2:	f7fe f8c1 	bl	8007068 <_printf_i>
 8008ee6:	e7e4      	b.n	8008eb2 <_vfiprintf_r+0x1e6>
 8008ee8:	08009582 	.word	0x08009582
 8008eec:	0800958c 	.word	0x0800958c
 8008ef0:	08006b59 	.word	0x08006b59
 8008ef4:	08008ca7 	.word	0x08008ca7
 8008ef8:	08009588 	.word	0x08009588

08008efc <__sflush_r>:
 8008efc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f04:	0716      	lsls	r6, r2, #28
 8008f06:	4605      	mov	r5, r0
 8008f08:	460c      	mov	r4, r1
 8008f0a:	d454      	bmi.n	8008fb6 <__sflush_r+0xba>
 8008f0c:	684b      	ldr	r3, [r1, #4]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	dc02      	bgt.n	8008f18 <__sflush_r+0x1c>
 8008f12:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	dd48      	ble.n	8008faa <__sflush_r+0xae>
 8008f18:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008f1a:	2e00      	cmp	r6, #0
 8008f1c:	d045      	beq.n	8008faa <__sflush_r+0xae>
 8008f1e:	2300      	movs	r3, #0
 8008f20:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008f24:	682f      	ldr	r7, [r5, #0]
 8008f26:	6a21      	ldr	r1, [r4, #32]
 8008f28:	602b      	str	r3, [r5, #0]
 8008f2a:	d030      	beq.n	8008f8e <__sflush_r+0x92>
 8008f2c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008f2e:	89a3      	ldrh	r3, [r4, #12]
 8008f30:	0759      	lsls	r1, r3, #29
 8008f32:	d505      	bpl.n	8008f40 <__sflush_r+0x44>
 8008f34:	6863      	ldr	r3, [r4, #4]
 8008f36:	1ad2      	subs	r2, r2, r3
 8008f38:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008f3a:	b10b      	cbz	r3, 8008f40 <__sflush_r+0x44>
 8008f3c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008f3e:	1ad2      	subs	r2, r2, r3
 8008f40:	2300      	movs	r3, #0
 8008f42:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008f44:	6a21      	ldr	r1, [r4, #32]
 8008f46:	4628      	mov	r0, r5
 8008f48:	47b0      	blx	r6
 8008f4a:	1c43      	adds	r3, r0, #1
 8008f4c:	89a3      	ldrh	r3, [r4, #12]
 8008f4e:	d106      	bne.n	8008f5e <__sflush_r+0x62>
 8008f50:	6829      	ldr	r1, [r5, #0]
 8008f52:	291d      	cmp	r1, #29
 8008f54:	d82b      	bhi.n	8008fae <__sflush_r+0xb2>
 8008f56:	4a2a      	ldr	r2, [pc, #168]	@ (8009000 <__sflush_r+0x104>)
 8008f58:	40ca      	lsrs	r2, r1
 8008f5a:	07d6      	lsls	r6, r2, #31
 8008f5c:	d527      	bpl.n	8008fae <__sflush_r+0xb2>
 8008f5e:	2200      	movs	r2, #0
 8008f60:	6062      	str	r2, [r4, #4]
 8008f62:	04d9      	lsls	r1, r3, #19
 8008f64:	6922      	ldr	r2, [r4, #16]
 8008f66:	6022      	str	r2, [r4, #0]
 8008f68:	d504      	bpl.n	8008f74 <__sflush_r+0x78>
 8008f6a:	1c42      	adds	r2, r0, #1
 8008f6c:	d101      	bne.n	8008f72 <__sflush_r+0x76>
 8008f6e:	682b      	ldr	r3, [r5, #0]
 8008f70:	b903      	cbnz	r3, 8008f74 <__sflush_r+0x78>
 8008f72:	6560      	str	r0, [r4, #84]	@ 0x54
 8008f74:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008f76:	602f      	str	r7, [r5, #0]
 8008f78:	b1b9      	cbz	r1, 8008faa <__sflush_r+0xae>
 8008f7a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008f7e:	4299      	cmp	r1, r3
 8008f80:	d002      	beq.n	8008f88 <__sflush_r+0x8c>
 8008f82:	4628      	mov	r0, r5
 8008f84:	f7ff f9fe 	bl	8008384 <_free_r>
 8008f88:	2300      	movs	r3, #0
 8008f8a:	6363      	str	r3, [r4, #52]	@ 0x34
 8008f8c:	e00d      	b.n	8008faa <__sflush_r+0xae>
 8008f8e:	2301      	movs	r3, #1
 8008f90:	4628      	mov	r0, r5
 8008f92:	47b0      	blx	r6
 8008f94:	4602      	mov	r2, r0
 8008f96:	1c50      	adds	r0, r2, #1
 8008f98:	d1c9      	bne.n	8008f2e <__sflush_r+0x32>
 8008f9a:	682b      	ldr	r3, [r5, #0]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d0c6      	beq.n	8008f2e <__sflush_r+0x32>
 8008fa0:	2b1d      	cmp	r3, #29
 8008fa2:	d001      	beq.n	8008fa8 <__sflush_r+0xac>
 8008fa4:	2b16      	cmp	r3, #22
 8008fa6:	d11e      	bne.n	8008fe6 <__sflush_r+0xea>
 8008fa8:	602f      	str	r7, [r5, #0]
 8008faa:	2000      	movs	r0, #0
 8008fac:	e022      	b.n	8008ff4 <__sflush_r+0xf8>
 8008fae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008fb2:	b21b      	sxth	r3, r3
 8008fb4:	e01b      	b.n	8008fee <__sflush_r+0xf2>
 8008fb6:	690f      	ldr	r7, [r1, #16]
 8008fb8:	2f00      	cmp	r7, #0
 8008fba:	d0f6      	beq.n	8008faa <__sflush_r+0xae>
 8008fbc:	0793      	lsls	r3, r2, #30
 8008fbe:	680e      	ldr	r6, [r1, #0]
 8008fc0:	bf08      	it	eq
 8008fc2:	694b      	ldreq	r3, [r1, #20]
 8008fc4:	600f      	str	r7, [r1, #0]
 8008fc6:	bf18      	it	ne
 8008fc8:	2300      	movne	r3, #0
 8008fca:	eba6 0807 	sub.w	r8, r6, r7
 8008fce:	608b      	str	r3, [r1, #8]
 8008fd0:	f1b8 0f00 	cmp.w	r8, #0
 8008fd4:	dde9      	ble.n	8008faa <__sflush_r+0xae>
 8008fd6:	6a21      	ldr	r1, [r4, #32]
 8008fd8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008fda:	4643      	mov	r3, r8
 8008fdc:	463a      	mov	r2, r7
 8008fde:	4628      	mov	r0, r5
 8008fe0:	47b0      	blx	r6
 8008fe2:	2800      	cmp	r0, #0
 8008fe4:	dc08      	bgt.n	8008ff8 <__sflush_r+0xfc>
 8008fe6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008fee:	81a3      	strh	r3, [r4, #12]
 8008ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ff8:	4407      	add	r7, r0
 8008ffa:	eba8 0800 	sub.w	r8, r8, r0
 8008ffe:	e7e7      	b.n	8008fd0 <__sflush_r+0xd4>
 8009000:	20400001 	.word	0x20400001

08009004 <_fflush_r>:
 8009004:	b538      	push	{r3, r4, r5, lr}
 8009006:	690b      	ldr	r3, [r1, #16]
 8009008:	4605      	mov	r5, r0
 800900a:	460c      	mov	r4, r1
 800900c:	b913      	cbnz	r3, 8009014 <_fflush_r+0x10>
 800900e:	2500      	movs	r5, #0
 8009010:	4628      	mov	r0, r5
 8009012:	bd38      	pop	{r3, r4, r5, pc}
 8009014:	b118      	cbz	r0, 800901e <_fflush_r+0x1a>
 8009016:	6a03      	ldr	r3, [r0, #32]
 8009018:	b90b      	cbnz	r3, 800901e <_fflush_r+0x1a>
 800901a:	f7fe f9cf 	bl	80073bc <__sinit>
 800901e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d0f3      	beq.n	800900e <_fflush_r+0xa>
 8009026:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009028:	07d0      	lsls	r0, r2, #31
 800902a:	d404      	bmi.n	8009036 <_fflush_r+0x32>
 800902c:	0599      	lsls	r1, r3, #22
 800902e:	d402      	bmi.n	8009036 <_fflush_r+0x32>
 8009030:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009032:	f7fe fbbe 	bl	80077b2 <__retarget_lock_acquire_recursive>
 8009036:	4628      	mov	r0, r5
 8009038:	4621      	mov	r1, r4
 800903a:	f7ff ff5f 	bl	8008efc <__sflush_r>
 800903e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009040:	07da      	lsls	r2, r3, #31
 8009042:	4605      	mov	r5, r0
 8009044:	d4e4      	bmi.n	8009010 <_fflush_r+0xc>
 8009046:	89a3      	ldrh	r3, [r4, #12]
 8009048:	059b      	lsls	r3, r3, #22
 800904a:	d4e1      	bmi.n	8009010 <_fflush_r+0xc>
 800904c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800904e:	f7fe fbb1 	bl	80077b4 <__retarget_lock_release_recursive>
 8009052:	e7dd      	b.n	8009010 <_fflush_r+0xc>

08009054 <__swhatbuf_r>:
 8009054:	b570      	push	{r4, r5, r6, lr}
 8009056:	460c      	mov	r4, r1
 8009058:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800905c:	2900      	cmp	r1, #0
 800905e:	b096      	sub	sp, #88	@ 0x58
 8009060:	4615      	mov	r5, r2
 8009062:	461e      	mov	r6, r3
 8009064:	da0d      	bge.n	8009082 <__swhatbuf_r+0x2e>
 8009066:	89a3      	ldrh	r3, [r4, #12]
 8009068:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800906c:	f04f 0100 	mov.w	r1, #0
 8009070:	bf14      	ite	ne
 8009072:	2340      	movne	r3, #64	@ 0x40
 8009074:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009078:	2000      	movs	r0, #0
 800907a:	6031      	str	r1, [r6, #0]
 800907c:	602b      	str	r3, [r5, #0]
 800907e:	b016      	add	sp, #88	@ 0x58
 8009080:	bd70      	pop	{r4, r5, r6, pc}
 8009082:	466a      	mov	r2, sp
 8009084:	f000 f848 	bl	8009118 <_fstat_r>
 8009088:	2800      	cmp	r0, #0
 800908a:	dbec      	blt.n	8009066 <__swhatbuf_r+0x12>
 800908c:	9901      	ldr	r1, [sp, #4]
 800908e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009092:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009096:	4259      	negs	r1, r3
 8009098:	4159      	adcs	r1, r3
 800909a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800909e:	e7eb      	b.n	8009078 <__swhatbuf_r+0x24>

080090a0 <__smakebuf_r>:
 80090a0:	898b      	ldrh	r3, [r1, #12]
 80090a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80090a4:	079d      	lsls	r5, r3, #30
 80090a6:	4606      	mov	r6, r0
 80090a8:	460c      	mov	r4, r1
 80090aa:	d507      	bpl.n	80090bc <__smakebuf_r+0x1c>
 80090ac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80090b0:	6023      	str	r3, [r4, #0]
 80090b2:	6123      	str	r3, [r4, #16]
 80090b4:	2301      	movs	r3, #1
 80090b6:	6163      	str	r3, [r4, #20]
 80090b8:	b003      	add	sp, #12
 80090ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090bc:	ab01      	add	r3, sp, #4
 80090be:	466a      	mov	r2, sp
 80090c0:	f7ff ffc8 	bl	8009054 <__swhatbuf_r>
 80090c4:	9f00      	ldr	r7, [sp, #0]
 80090c6:	4605      	mov	r5, r0
 80090c8:	4639      	mov	r1, r7
 80090ca:	4630      	mov	r0, r6
 80090cc:	f7ff f9ce 	bl	800846c <_malloc_r>
 80090d0:	b948      	cbnz	r0, 80090e6 <__smakebuf_r+0x46>
 80090d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090d6:	059a      	lsls	r2, r3, #22
 80090d8:	d4ee      	bmi.n	80090b8 <__smakebuf_r+0x18>
 80090da:	f023 0303 	bic.w	r3, r3, #3
 80090de:	f043 0302 	orr.w	r3, r3, #2
 80090e2:	81a3      	strh	r3, [r4, #12]
 80090e4:	e7e2      	b.n	80090ac <__smakebuf_r+0xc>
 80090e6:	89a3      	ldrh	r3, [r4, #12]
 80090e8:	6020      	str	r0, [r4, #0]
 80090ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090ee:	81a3      	strh	r3, [r4, #12]
 80090f0:	9b01      	ldr	r3, [sp, #4]
 80090f2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80090f6:	b15b      	cbz	r3, 8009110 <__smakebuf_r+0x70>
 80090f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80090fc:	4630      	mov	r0, r6
 80090fe:	f000 f81d 	bl	800913c <_isatty_r>
 8009102:	b128      	cbz	r0, 8009110 <__smakebuf_r+0x70>
 8009104:	89a3      	ldrh	r3, [r4, #12]
 8009106:	f023 0303 	bic.w	r3, r3, #3
 800910a:	f043 0301 	orr.w	r3, r3, #1
 800910e:	81a3      	strh	r3, [r4, #12]
 8009110:	89a3      	ldrh	r3, [r4, #12]
 8009112:	431d      	orrs	r5, r3
 8009114:	81a5      	strh	r5, [r4, #12]
 8009116:	e7cf      	b.n	80090b8 <__smakebuf_r+0x18>

08009118 <_fstat_r>:
 8009118:	b538      	push	{r3, r4, r5, lr}
 800911a:	4d07      	ldr	r5, [pc, #28]	@ (8009138 <_fstat_r+0x20>)
 800911c:	2300      	movs	r3, #0
 800911e:	4604      	mov	r4, r0
 8009120:	4608      	mov	r0, r1
 8009122:	4611      	mov	r1, r2
 8009124:	602b      	str	r3, [r5, #0]
 8009126:	f7f8 fa1d 	bl	8001564 <_fstat>
 800912a:	1c43      	adds	r3, r0, #1
 800912c:	d102      	bne.n	8009134 <_fstat_r+0x1c>
 800912e:	682b      	ldr	r3, [r5, #0]
 8009130:	b103      	cbz	r3, 8009134 <_fstat_r+0x1c>
 8009132:	6023      	str	r3, [r4, #0]
 8009134:	bd38      	pop	{r3, r4, r5, pc}
 8009136:	bf00      	nop
 8009138:	24000578 	.word	0x24000578

0800913c <_isatty_r>:
 800913c:	b538      	push	{r3, r4, r5, lr}
 800913e:	4d06      	ldr	r5, [pc, #24]	@ (8009158 <_isatty_r+0x1c>)
 8009140:	2300      	movs	r3, #0
 8009142:	4604      	mov	r4, r0
 8009144:	4608      	mov	r0, r1
 8009146:	602b      	str	r3, [r5, #0]
 8009148:	f7f8 fa1c 	bl	8001584 <_isatty>
 800914c:	1c43      	adds	r3, r0, #1
 800914e:	d102      	bne.n	8009156 <_isatty_r+0x1a>
 8009150:	682b      	ldr	r3, [r5, #0]
 8009152:	b103      	cbz	r3, 8009156 <_isatty_r+0x1a>
 8009154:	6023      	str	r3, [r4, #0]
 8009156:	bd38      	pop	{r3, r4, r5, pc}
 8009158:	24000578 	.word	0x24000578

0800915c <_sbrk_r>:
 800915c:	b538      	push	{r3, r4, r5, lr}
 800915e:	4d06      	ldr	r5, [pc, #24]	@ (8009178 <_sbrk_r+0x1c>)
 8009160:	2300      	movs	r3, #0
 8009162:	4604      	mov	r4, r0
 8009164:	4608      	mov	r0, r1
 8009166:	602b      	str	r3, [r5, #0]
 8009168:	f7f8 fa24 	bl	80015b4 <_sbrk>
 800916c:	1c43      	adds	r3, r0, #1
 800916e:	d102      	bne.n	8009176 <_sbrk_r+0x1a>
 8009170:	682b      	ldr	r3, [r5, #0]
 8009172:	b103      	cbz	r3, 8009176 <_sbrk_r+0x1a>
 8009174:	6023      	str	r3, [r4, #0]
 8009176:	bd38      	pop	{r3, r4, r5, pc}
 8009178:	24000578 	.word	0x24000578

0800917c <memcpy>:
 800917c:	440a      	add	r2, r1
 800917e:	4291      	cmp	r1, r2
 8009180:	f100 33ff 	add.w	r3, r0, #4294967295
 8009184:	d100      	bne.n	8009188 <memcpy+0xc>
 8009186:	4770      	bx	lr
 8009188:	b510      	push	{r4, lr}
 800918a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800918e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009192:	4291      	cmp	r1, r2
 8009194:	d1f9      	bne.n	800918a <memcpy+0xe>
 8009196:	bd10      	pop	{r4, pc}

08009198 <__assert_func>:
 8009198:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800919a:	4614      	mov	r4, r2
 800919c:	461a      	mov	r2, r3
 800919e:	4b09      	ldr	r3, [pc, #36]	@ (80091c4 <__assert_func+0x2c>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	4605      	mov	r5, r0
 80091a4:	68d8      	ldr	r0, [r3, #12]
 80091a6:	b14c      	cbz	r4, 80091bc <__assert_func+0x24>
 80091a8:	4b07      	ldr	r3, [pc, #28]	@ (80091c8 <__assert_func+0x30>)
 80091aa:	9100      	str	r1, [sp, #0]
 80091ac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80091b0:	4906      	ldr	r1, [pc, #24]	@ (80091cc <__assert_func+0x34>)
 80091b2:	462b      	mov	r3, r5
 80091b4:	f000 f842 	bl	800923c <fiprintf>
 80091b8:	f000 f852 	bl	8009260 <abort>
 80091bc:	4b04      	ldr	r3, [pc, #16]	@ (80091d0 <__assert_func+0x38>)
 80091be:	461c      	mov	r4, r3
 80091c0:	e7f3      	b.n	80091aa <__assert_func+0x12>
 80091c2:	bf00      	nop
 80091c4:	2400003c 	.word	0x2400003c
 80091c8:	0800959d 	.word	0x0800959d
 80091cc:	080095aa 	.word	0x080095aa
 80091d0:	080095d8 	.word	0x080095d8

080091d4 <_calloc_r>:
 80091d4:	b570      	push	{r4, r5, r6, lr}
 80091d6:	fba1 5402 	umull	r5, r4, r1, r2
 80091da:	b934      	cbnz	r4, 80091ea <_calloc_r+0x16>
 80091dc:	4629      	mov	r1, r5
 80091de:	f7ff f945 	bl	800846c <_malloc_r>
 80091e2:	4606      	mov	r6, r0
 80091e4:	b928      	cbnz	r0, 80091f2 <_calloc_r+0x1e>
 80091e6:	4630      	mov	r0, r6
 80091e8:	bd70      	pop	{r4, r5, r6, pc}
 80091ea:	220c      	movs	r2, #12
 80091ec:	6002      	str	r2, [r0, #0]
 80091ee:	2600      	movs	r6, #0
 80091f0:	e7f9      	b.n	80091e6 <_calloc_r+0x12>
 80091f2:	462a      	mov	r2, r5
 80091f4:	4621      	mov	r1, r4
 80091f6:	f7fe fa5f 	bl	80076b8 <memset>
 80091fa:	e7f4      	b.n	80091e6 <_calloc_r+0x12>

080091fc <__ascii_mbtowc>:
 80091fc:	b082      	sub	sp, #8
 80091fe:	b901      	cbnz	r1, 8009202 <__ascii_mbtowc+0x6>
 8009200:	a901      	add	r1, sp, #4
 8009202:	b142      	cbz	r2, 8009216 <__ascii_mbtowc+0x1a>
 8009204:	b14b      	cbz	r3, 800921a <__ascii_mbtowc+0x1e>
 8009206:	7813      	ldrb	r3, [r2, #0]
 8009208:	600b      	str	r3, [r1, #0]
 800920a:	7812      	ldrb	r2, [r2, #0]
 800920c:	1e10      	subs	r0, r2, #0
 800920e:	bf18      	it	ne
 8009210:	2001      	movne	r0, #1
 8009212:	b002      	add	sp, #8
 8009214:	4770      	bx	lr
 8009216:	4610      	mov	r0, r2
 8009218:	e7fb      	b.n	8009212 <__ascii_mbtowc+0x16>
 800921a:	f06f 0001 	mvn.w	r0, #1
 800921e:	e7f8      	b.n	8009212 <__ascii_mbtowc+0x16>

08009220 <__ascii_wctomb>:
 8009220:	4603      	mov	r3, r0
 8009222:	4608      	mov	r0, r1
 8009224:	b141      	cbz	r1, 8009238 <__ascii_wctomb+0x18>
 8009226:	2aff      	cmp	r2, #255	@ 0xff
 8009228:	d904      	bls.n	8009234 <__ascii_wctomb+0x14>
 800922a:	228a      	movs	r2, #138	@ 0x8a
 800922c:	601a      	str	r2, [r3, #0]
 800922e:	f04f 30ff 	mov.w	r0, #4294967295
 8009232:	4770      	bx	lr
 8009234:	700a      	strb	r2, [r1, #0]
 8009236:	2001      	movs	r0, #1
 8009238:	4770      	bx	lr
	...

0800923c <fiprintf>:
 800923c:	b40e      	push	{r1, r2, r3}
 800923e:	b503      	push	{r0, r1, lr}
 8009240:	4601      	mov	r1, r0
 8009242:	ab03      	add	r3, sp, #12
 8009244:	4805      	ldr	r0, [pc, #20]	@ (800925c <fiprintf+0x20>)
 8009246:	f853 2b04 	ldr.w	r2, [r3], #4
 800924a:	6800      	ldr	r0, [r0, #0]
 800924c:	9301      	str	r3, [sp, #4]
 800924e:	f7ff fd3d 	bl	8008ccc <_vfiprintf_r>
 8009252:	b002      	add	sp, #8
 8009254:	f85d eb04 	ldr.w	lr, [sp], #4
 8009258:	b003      	add	sp, #12
 800925a:	4770      	bx	lr
 800925c:	2400003c 	.word	0x2400003c

08009260 <abort>:
 8009260:	b508      	push	{r3, lr}
 8009262:	2006      	movs	r0, #6
 8009264:	f000 f82c 	bl	80092c0 <raise>
 8009268:	2001      	movs	r0, #1
 800926a:	f7f8 f92b 	bl	80014c4 <_exit>

0800926e <_raise_r>:
 800926e:	291f      	cmp	r1, #31
 8009270:	b538      	push	{r3, r4, r5, lr}
 8009272:	4605      	mov	r5, r0
 8009274:	460c      	mov	r4, r1
 8009276:	d904      	bls.n	8009282 <_raise_r+0x14>
 8009278:	2316      	movs	r3, #22
 800927a:	6003      	str	r3, [r0, #0]
 800927c:	f04f 30ff 	mov.w	r0, #4294967295
 8009280:	bd38      	pop	{r3, r4, r5, pc}
 8009282:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009284:	b112      	cbz	r2, 800928c <_raise_r+0x1e>
 8009286:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800928a:	b94b      	cbnz	r3, 80092a0 <_raise_r+0x32>
 800928c:	4628      	mov	r0, r5
 800928e:	f000 f831 	bl	80092f4 <_getpid_r>
 8009292:	4622      	mov	r2, r4
 8009294:	4601      	mov	r1, r0
 8009296:	4628      	mov	r0, r5
 8009298:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800929c:	f000 b818 	b.w	80092d0 <_kill_r>
 80092a0:	2b01      	cmp	r3, #1
 80092a2:	d00a      	beq.n	80092ba <_raise_r+0x4c>
 80092a4:	1c59      	adds	r1, r3, #1
 80092a6:	d103      	bne.n	80092b0 <_raise_r+0x42>
 80092a8:	2316      	movs	r3, #22
 80092aa:	6003      	str	r3, [r0, #0]
 80092ac:	2001      	movs	r0, #1
 80092ae:	e7e7      	b.n	8009280 <_raise_r+0x12>
 80092b0:	2100      	movs	r1, #0
 80092b2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80092b6:	4620      	mov	r0, r4
 80092b8:	4798      	blx	r3
 80092ba:	2000      	movs	r0, #0
 80092bc:	e7e0      	b.n	8009280 <_raise_r+0x12>
	...

080092c0 <raise>:
 80092c0:	4b02      	ldr	r3, [pc, #8]	@ (80092cc <raise+0xc>)
 80092c2:	4601      	mov	r1, r0
 80092c4:	6818      	ldr	r0, [r3, #0]
 80092c6:	f7ff bfd2 	b.w	800926e <_raise_r>
 80092ca:	bf00      	nop
 80092cc:	2400003c 	.word	0x2400003c

080092d0 <_kill_r>:
 80092d0:	b538      	push	{r3, r4, r5, lr}
 80092d2:	4d07      	ldr	r5, [pc, #28]	@ (80092f0 <_kill_r+0x20>)
 80092d4:	2300      	movs	r3, #0
 80092d6:	4604      	mov	r4, r0
 80092d8:	4608      	mov	r0, r1
 80092da:	4611      	mov	r1, r2
 80092dc:	602b      	str	r3, [r5, #0]
 80092de:	f7f8 f8e1 	bl	80014a4 <_kill>
 80092e2:	1c43      	adds	r3, r0, #1
 80092e4:	d102      	bne.n	80092ec <_kill_r+0x1c>
 80092e6:	682b      	ldr	r3, [r5, #0]
 80092e8:	b103      	cbz	r3, 80092ec <_kill_r+0x1c>
 80092ea:	6023      	str	r3, [r4, #0]
 80092ec:	bd38      	pop	{r3, r4, r5, pc}
 80092ee:	bf00      	nop
 80092f0:	24000578 	.word	0x24000578

080092f4 <_getpid_r>:
 80092f4:	f7f8 b8ce 	b.w	8001494 <_getpid>

080092f8 <_init>:
 80092f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092fa:	bf00      	nop
 80092fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092fe:	bc08      	pop	{r3}
 8009300:	469e      	mov	lr, r3
 8009302:	4770      	bx	lr

08009304 <_fini>:
 8009304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009306:	bf00      	nop
 8009308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800930a:	bc08      	pop	{r3}
 800930c:	469e      	mov	lr, r3
 800930e:	4770      	bx	lr
