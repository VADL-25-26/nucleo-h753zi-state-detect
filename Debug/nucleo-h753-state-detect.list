
nucleo-h753-state-detect.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d21c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000750  0800d4c0  0800d4c0  0000e4c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800dc10  0800dc10  0000ec10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800dc18  0800dc18  0000ec18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800dc1c  0800dc1c  0000ec1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001f8  24000000  0800dc20  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000006cc  240001f8  0800de18  0000f1f8  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240008c4  0800de18  0000f8c4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000f1f8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001b0dd  00000000  00000000  0000f226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000035fd  00000000  00000000  0002a303  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000013e0  00000000  00000000  0002d900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000f6b  00000000  00000000  0002ece0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00004a06  00000000  00000000  0002fc4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001bbd5  00000000  00000000  00034651  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00169200  00000000  00000000  00050226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001b9426  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000061f8  00000000  00000000  001b946c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006a  00000000  00000000  001bf664  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001f8 	.word	0x240001f8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800d4a4 	.word	0x0800d4a4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001fc 	.word	0x240001fc
 80002dc:	0800d4a4 	.word	0x0800d4a4

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <FlightState_Init>:
static uint16_t consecutiveReadingsLanding = 0;
static float previousAltitude = 0.0f;


/* Init flight state machine */
void FlightState_Init(void) {
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
    currentState = FLIGHT_STATE_GROUND_IDLE;
 80006c0:	4b06      	ldr	r3, [pc, #24]	@ (80006dc <FlightState_Init+0x20>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	701a      	strb	r2, [r3, #0]
    groundAltitude = IMU_CalculateGroundAltitude();
 80006c6:	f000 fc25 	bl	8000f14 <IMU_CalculateGroundAltitude>
 80006ca:	ee07 0a90 	vmov	s15, r0
 80006ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006d2:	4b03      	ldr	r3, [pc, #12]	@ (80006e0 <FlightState_Init+0x24>)
 80006d4:	edc3 7a00 	vstr	s15, [r3]

}
 80006d8:	bf00      	nop
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	24000214 	.word	0x24000214
 80006e0:	24000218 	.word	0x24000218

080006e4 <FlightState_Update>:

void FlightState_Update(IMU_Data_t imuData) {
 80006e4:	b084      	sub	sp, #16
 80006e6:	b580      	push	{r7, lr}
 80006e8:	b084      	sub	sp, #16
 80006ea:	af00      	add	r7, sp, #0
 80006ec:	f107 0c18 	add.w	ip, r7, #24
 80006f0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
//	IMU_Data_t imuData;
//	imu_read(&imuData);

    float altitude = imuData.altitude;
 80006f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80006f6:	60fb      	str	r3, [r7, #12]
    float filteredAltitude, filteredVelocity;

    KalmanFilter_Update(altitude, &filteredAltitude, &filteredVelocity);
 80006f8:	1d3a      	adds	r2, r7, #4
 80006fa:	f107 0308 	add.w	r3, r7, #8
 80006fe:	4611      	mov	r1, r2
 8000700:	4618      	mov	r0, r3
 8000702:	ed97 0a03 	vldr	s0, [r7, #12]
 8000706:	f000 fc23 	bl	8000f50 <KalmanFilter_Update>

    /*Ground Logic*/
    if (currentState == FLIGHT_STATE_GROUND_IDLE) {
 800070a:	4b52      	ldr	r3, [pc, #328]	@ (8000854 <FlightState_Update+0x170>)
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d120      	bne.n	8000754 <FlightState_Update+0x70>
        if (fabsf(imuData.accelX) > LAUNCH_ACCELERATION_THRESHOLD) {
 8000712:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000716:	eef0 7ae7 	vabs.f32	s15, s15
 800071a:	eeb7 7a04 	vmov.f32	s14, #116	@ 0x3fa00000  1.250
 800071e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000726:	dd06      	ble.n	8000736 <FlightState_Update+0x52>
            consecutiveReadingsLaunch++;
 8000728:	4b4b      	ldr	r3, [pc, #300]	@ (8000858 <FlightState_Update+0x174>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	3301      	adds	r3, #1
 800072e:	b2da      	uxtb	r2, r3
 8000730:	4b49      	ldr	r3, [pc, #292]	@ (8000858 <FlightState_Update+0x174>)
 8000732:	701a      	strb	r2, [r3, #0]
 8000734:	e002      	b.n	800073c <FlightState_Update+0x58>
        } else {
            consecutiveReadingsLaunch = 0;
 8000736:	4b48      	ldr	r3, [pc, #288]	@ (8000858 <FlightState_Update+0x174>)
 8000738:	2200      	movs	r2, #0
 800073a:	701a      	strb	r2, [r3, #0]
        }

        if (consecutiveReadingsLaunch >= LAUNCH_DETECTION_COUNT) {
 800073c:	4b46      	ldr	r3, [pc, #280]	@ (8000858 <FlightState_Update+0x174>)
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	2b09      	cmp	r3, #9
 8000742:	d907      	bls.n	8000754 <FlightState_Update+0x70>
            currentState = FLIGHT_STATE_POWERED_FLIGHT;
 8000744:	4b43      	ldr	r3, [pc, #268]	@ (8000854 <FlightState_Update+0x170>)
 8000746:	2201      	movs	r2, #1
 8000748:	701a      	strb	r2, [r3, #0]
            launchTime = HAL_GetTick(); // or whatever function polls the RTS on the STM32
 800074a:	f001 fd2f 	bl	80021ac <HAL_GetTick>
 800074e:	4603      	mov	r3, r0
 8000750:	4a42      	ldr	r2, [pc, #264]	@ (800085c <FlightState_Update+0x178>)
 8000752:	6013      	str	r3, [r2, #0]
            // DataLogger_LogEvent("Launch Detected");
        }
    }

    /*Apogee Detection*/
    if (currentState == FLIGHT_STATE_POWERED_FLIGHT || currentState == FLIGHT_STATE_UNPOWERED_FLIGHT) {
 8000754:	4b3f      	ldr	r3, [pc, #252]	@ (8000854 <FlightState_Update+0x170>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	2b01      	cmp	r3, #1
 800075a:	d003      	beq.n	8000764 <FlightState_Update+0x80>
 800075c:	4b3d      	ldr	r3, [pc, #244]	@ (8000854 <FlightState_Update+0x170>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	2b02      	cmp	r3, #2
 8000762:	d13d      	bne.n	80007e0 <FlightState_Update+0xfc>

        /*State Change from powered to unpowered ascent*/
        if (currentState == FLIGHT_STATE_POWERED_FLIGHT &&
 8000764:	4b3b      	ldr	r3, [pc, #236]	@ (8000854 <FlightState_Update+0x170>)
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	2b01      	cmp	r3, #1
 800076a:	d10b      	bne.n	8000784 <FlightState_Update+0xa0>
            (HAL_GetTick() - launchTime) > MOTOR_BURN_TIME_MS)
 800076c:	f001 fd1e 	bl	80021ac <HAL_GetTick>
 8000770:	4602      	mov	r2, r0
 8000772:	4b3a      	ldr	r3, [pc, #232]	@ (800085c <FlightState_Update+0x178>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	1ad3      	subs	r3, r2, r3
        if (currentState == FLIGHT_STATE_POWERED_FLIGHT &&
 8000778:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800077c:	d902      	bls.n	8000784 <FlightState_Update+0xa0>
            currentState = FLIGHT_STATE_UNPOWERED_FLIGHT;
 800077e:	4b35      	ldr	r3, [pc, #212]	@ (8000854 <FlightState_Update+0x170>)
 8000780:	2202      	movs	r2, #2
 8000782:	701a      	strb	r2, [r3, #0]
            //DataLogger_LogEvent("Motor Burnout")

        /*Check for Apogee*/
        if (filteredVelocity < 0.0f && altitude > (groundAltitude + MIN_ALTITUDE_FOR_APOGEE)) {
 8000784:	edd7 7a01 	vldr	s15, [r7, #4]
 8000788:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800078c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000790:	d514      	bpl.n	80007bc <FlightState_Update+0xd8>
 8000792:	4b33      	ldr	r3, [pc, #204]	@ (8000860 <FlightState_Update+0x17c>)
 8000794:	edd3 7a00 	vldr	s15, [r3]
 8000798:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8000864 <FlightState_Update+0x180>
 800079c:	ee77 7a87 	vadd.f32	s15, s15, s14
 80007a0:	ed97 7a03 	vldr	s14, [r7, #12]
 80007a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80007a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007ac:	dd06      	ble.n	80007bc <FlightState_Update+0xd8>
            consecutiveReadingsApogee++;
 80007ae:	4b2e      	ldr	r3, [pc, #184]	@ (8000868 <FlightState_Update+0x184>)
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	3301      	adds	r3, #1
 80007b4:	b2da      	uxtb	r2, r3
 80007b6:	4b2c      	ldr	r3, [pc, #176]	@ (8000868 <FlightState_Update+0x184>)
 80007b8:	701a      	strb	r2, [r3, #0]
 80007ba:	e002      	b.n	80007c2 <FlightState_Update+0xde>
        } else {
            consecutiveReadingsApogee = 0;
 80007bc:	4b2a      	ldr	r3, [pc, #168]	@ (8000868 <FlightState_Update+0x184>)
 80007be:	2200      	movs	r2, #0
 80007c0:	701a      	strb	r2, [r3, #0]
        }

        if (consecutiveReadingsApogee >= APOGEE_DETECTION_COUNT) {
 80007c2:	4b29      	ldr	r3, [pc, #164]	@ (8000868 <FlightState_Update+0x184>)
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	2b31      	cmp	r3, #49	@ 0x31
 80007c8:	d90a      	bls.n	80007e0 <FlightState_Update+0xfc>
            currentState = FLIGHT_STATE_DESCENT;
 80007ca:	4b22      	ldr	r3, [pc, #136]	@ (8000854 <FlightState_Update+0x170>)
 80007cc:	2203      	movs	r2, #3
 80007ce:	701a      	strb	r2, [r3, #0]
            apogeeTime = HAL_GetTick();
 80007d0:	f001 fcec 	bl	80021ac <HAL_GetTick>
 80007d4:	4603      	mov	r3, r0
 80007d6:	4a25      	ldr	r2, [pc, #148]	@ (800086c <FlightState_Update+0x188>)
 80007d8:	6013      	str	r3, [r2, #0]
            //DataLogger_LogEvent("Apogee Detected");
            previousAltitude = altitude;
 80007da:	4a25      	ldr	r2, [pc, #148]	@ (8000870 <FlightState_Update+0x18c>)
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	6013      	str	r3, [r2, #0]
        }
    }

    /*Landing Detection*/
    if (currentState == FLIGHT_STATE_DESCENT) {
 80007e0:	4b1c      	ldr	r3, [pc, #112]	@ (8000854 <FlightState_Update+0x170>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	2b03      	cmp	r3, #3
 80007e6:	d12e      	bne.n	8000846 <FlightState_Update+0x162>
        //     currentState = FLIGHT_STATE_MAIN_DESCENT;
        //     //DataLogger_LogEvent("Main Descent Detected")
        // }

        /*Landed State Condition - No New Altitude in (x) Cycles. Altitude within delta of launch altitude.*/
        if (altitude < previousAltitude && fabsf(altitude - groundAltitude) < LAUNCH_LANDING_ALT_DELTA) {
 80007e8:	4b21      	ldr	r3, [pc, #132]	@ (8000870 <FlightState_Update+0x18c>)
 80007ea:	edd3 7a00 	vldr	s15, [r3]
 80007ee:	ed97 7a03 	vldr	s14, [r7, #12]
 80007f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80007f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007fa:	d516      	bpl.n	800082a <FlightState_Update+0x146>
 80007fc:	4b18      	ldr	r3, [pc, #96]	@ (8000860 <FlightState_Update+0x17c>)
 80007fe:	edd3 7a00 	vldr	s15, [r3]
 8000802:	ed97 7a03 	vldr	s14, [r7, #12]
 8000806:	ee77 7a67 	vsub.f32	s15, s14, s15
 800080a:	eef0 7ae7 	vabs.f32	s15, s15
 800080e:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8000874 <FlightState_Update+0x190>
 8000812:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800081a:	d506      	bpl.n	800082a <FlightState_Update+0x146>
            previousAltitude = altitude;
 800081c:	4a14      	ldr	r2, [pc, #80]	@ (8000870 <FlightState_Update+0x18c>)
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	6013      	str	r3, [r2, #0]
            consecutiveReadingsLanding = 0;
 8000822:	4b15      	ldr	r3, [pc, #84]	@ (8000878 <FlightState_Update+0x194>)
 8000824:	2200      	movs	r2, #0
 8000826:	801a      	strh	r2, [r3, #0]
 8000828:	e005      	b.n	8000836 <FlightState_Update+0x152>
        } else {
            consecutiveReadingsLanding++;
 800082a:	4b13      	ldr	r3, [pc, #76]	@ (8000878 <FlightState_Update+0x194>)
 800082c:	881b      	ldrh	r3, [r3, #0]
 800082e:	3301      	adds	r3, #1
 8000830:	b29a      	uxth	r2, r3
 8000832:	4b11      	ldr	r3, [pc, #68]	@ (8000878 <FlightState_Update+0x194>)
 8000834:	801a      	strh	r2, [r3, #0]
        }

        if (consecutiveReadingsLanding > LANDING_DETECTION_COUNT) {
 8000836:	4b10      	ldr	r3, [pc, #64]	@ (8000878 <FlightState_Update+0x194>)
 8000838:	881b      	ldrh	r3, [r3, #0]
 800083a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800083e:	d902      	bls.n	8000846 <FlightState_Update+0x162>
            currentState = FLIGHT_STATE_LANDED;
 8000840:	4b04      	ldr	r3, [pc, #16]	@ (8000854 <FlightState_Update+0x170>)
 8000842:	2204      	movs	r2, #4
 8000844:	701a      	strb	r2, [r3, #0]
            // PayloadActivate();
        }
    }

//    DataLogger_LogState(currentState, altitude, filteredAltitude, filteredVelocity);
}
 8000846:	bf00      	nop
 8000848:	3710      	adds	r7, #16
 800084a:	46bd      	mov	sp, r7
 800084c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000850:	b004      	add	sp, #16
 8000852:	4770      	bx	lr
 8000854:	24000214 	.word	0x24000214
 8000858:	24000224 	.word	0x24000224
 800085c:	2400021c 	.word	0x2400021c
 8000860:	24000218 	.word	0x24000218
 8000864:	42c80000 	.word	0x42c80000
 8000868:	24000225 	.word	0x24000225
 800086c:	24000220 	.word	0x24000220
 8000870:	24000228 	.word	0x24000228
 8000874:	42480000 	.word	0x42480000
 8000878:	24000226 	.word	0x24000226

0800087c <FlightState_GetCurrent>:

/* Get the current flight state */
FlightState_t FlightState_GetCurrent(void) {
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
    return currentState;
 8000880:	4b03      	ldr	r3, [pc, #12]	@ (8000890 <FlightState_GetCurrent+0x14>)
 8000882:	781b      	ldrb	r3, [r3, #0]
}
 8000884:	4618      	mov	r0, r3
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr
 800088e:	bf00      	nop
 8000890:	24000214 	.word	0x24000214

08000894 <vn_crc16>:

/*
 * Calculates Checksum, from VN100 datasheet
 */
static uint16_t vn_crc16(const uint8_t *data, uint32_t len)
{
 8000894:	b480      	push	{r7}
 8000896:	b085      	sub	sp, #20
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
 800089c:	6039      	str	r1, [r7, #0]
    uint16_t crc = 0;
 800089e:	2300      	movs	r3, #0
 80008a0:	81fb      	strh	r3, [r7, #14]
    for (uint32_t i = 0; i < len; ++i) {
 80008a2:	2300      	movs	r3, #0
 80008a4:	60bb      	str	r3, [r7, #8]
 80008a6:	e035      	b.n	8000914 <vn_crc16+0x80>
        crc = (crc >> 8) | ((crc << 8) & 0xFFFF);
 80008a8:	89fb      	ldrh	r3, [r7, #14]
 80008aa:	0a1b      	lsrs	r3, r3, #8
 80008ac:	b29b      	uxth	r3, r3
 80008ae:	b21a      	sxth	r2, r3
 80008b0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80008b4:	021b      	lsls	r3, r3, #8
 80008b6:	b21b      	sxth	r3, r3
 80008b8:	4313      	orrs	r3, r2
 80008ba:	b21b      	sxth	r3, r3
 80008bc:	81fb      	strh	r3, [r7, #14]
        crc ^= data[i];
 80008be:	687a      	ldr	r2, [r7, #4]
 80008c0:	68bb      	ldr	r3, [r7, #8]
 80008c2:	4413      	add	r3, r2
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	461a      	mov	r2, r3
 80008c8:	89fb      	ldrh	r3, [r7, #14]
 80008ca:	4053      	eors	r3, r2
 80008cc:	81fb      	strh	r3, [r7, #14]
        crc ^= (crc & 0xFF) >> 4;
 80008ce:	89fb      	ldrh	r3, [r7, #14]
 80008d0:	111b      	asrs	r3, r3, #4
 80008d2:	b21b      	sxth	r3, r3
 80008d4:	f003 030f 	and.w	r3, r3, #15
 80008d8:	b21a      	sxth	r2, r3
 80008da:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80008de:	4053      	eors	r3, r2
 80008e0:	b21b      	sxth	r3, r3
 80008e2:	81fb      	strh	r3, [r7, #14]
        crc ^= (crc << 12) & 0xFFFF;
 80008e4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80008e8:	031b      	lsls	r3, r3, #12
 80008ea:	b21a      	sxth	r2, r3
 80008ec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80008f0:	4053      	eors	r3, r2
 80008f2:	b21b      	sxth	r3, r3
 80008f4:	81fb      	strh	r3, [r7, #14]
        crc ^= ((crc & 0xFF) << 5) & 0xFFFF;
 80008f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80008fa:	015b      	lsls	r3, r3, #5
 80008fc:	b21b      	sxth	r3, r3
 80008fe:	f403 53ff 	and.w	r3, r3, #8160	@ 0x1fe0
 8000902:	b21a      	sxth	r2, r3
 8000904:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000908:	4053      	eors	r3, r2
 800090a:	b21b      	sxth	r3, r3
 800090c:	81fb      	strh	r3, [r7, #14]
    for (uint32_t i = 0; i < len; ++i) {
 800090e:	68bb      	ldr	r3, [r7, #8]
 8000910:	3301      	adds	r3, #1
 8000912:	60bb      	str	r3, [r7, #8]
 8000914:	68ba      	ldr	r2, [r7, #8]
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	429a      	cmp	r2, r3
 800091a:	d3c5      	bcc.n	80008a8 <vn_crc16+0x14>
    }
    return crc;
 800091c:	89fb      	ldrh	r3, [r7, #14]
}
 800091e:	4618      	mov	r0, r3
 8000920:	3714      	adds	r7, #20
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr

0800092a <little_endian_2_float>:

/*
 * Converts little endian (STM32 format) to float point
 */
static float little_endian_2_float(const uint8_t *p) { float f; memcpy(&f, p, 4); return f; }
 800092a:	b480      	push	{r7}
 800092c:	b085      	sub	sp, #20
 800092e:	af00      	add	r7, sp, #0
 8000930:	6078      	str	r0, [r7, #4]
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	60fb      	str	r3, [r7, #12]
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	ee07 3a90 	vmov	s15, r3
 800093e:	eeb0 0a67 	vmov.f32	s0, s15
 8000942:	3714      	adds	r7, #20
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr

0800094c <process_one_imu_frame>:

/*
 * Parse one frame of IMU data m
 */
static int process_one_imu_frame(const uint8_t *m, IMU_Data_t *out)
{
 800094c:	b5b0      	push	{r4, r5, r7, lr}
 800094e:	b08e      	sub	sp, #56	@ 0x38
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
 8000954:	6039      	str	r1, [r7, #0]
	// verify checksum
    uint16_t calc = vn_crc16(m, 33);
 8000956:	2121      	movs	r1, #33	@ 0x21
 8000958:	6878      	ldr	r0, [r7, #4]
 800095a:	f7ff ff9b 	bl	8000894 <vn_crc16>
 800095e:	4603      	mov	r3, r0
 8000960:	86fb      	strh	r3, [r7, #54]	@ 0x36
    uint16_t recv = (uint16_t)((m[33] << 8) | m[34]);
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	3321      	adds	r3, #33	@ 0x21
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	b21b      	sxth	r3, r3
 800096a:	021b      	lsls	r3, r3, #8
 800096c:	b21a      	sxth	r2, r3
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	3322      	adds	r3, #34	@ 0x22
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	b21b      	sxth	r3, r3
 8000976:	4313      	orrs	r3, r2
 8000978:	b21b      	sxth	r3, r3
 800097a:	86bb      	strh	r3, [r7, #52]	@ 0x34
    if (calc != recv) return 0;
 800097c:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800097e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8000980:	429a      	cmp	r2, r3
 8000982:	d001      	beq.n	8000988 <process_one_imu_frame+0x3c>
 8000984:	2300      	movs	r3, #0
 8000986:	e07b      	b.n	8000a80 <process_one_imu_frame+0x134>

    // parse and process data
    IMU_Data_t d;
    d.yaw   = little_endian_2_float(&m[5]);
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	3305      	adds	r3, #5
 800098c:	4618      	mov	r0, r3
 800098e:	f7ff ffcc 	bl	800092a <little_endian_2_float>
 8000992:	eef0 7a40 	vmov.f32	s15, s0
 8000996:	edc7 7a03 	vstr	s15, [r7, #12]
    d.pitch = little_endian_2_float(&m[9]);
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	3309      	adds	r3, #9
 800099e:	4618      	mov	r0, r3
 80009a0:	f7ff ffc3 	bl	800092a <little_endian_2_float>
 80009a4:	eef0 7a40 	vmov.f32	s15, s0
 80009a8:	edc7 7a04 	vstr	s15, [r7, #16]
    d.roll  = little_endian_2_float(&m[13]);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	330d      	adds	r3, #13
 80009b0:	4618      	mov	r0, r3
 80009b2:	f7ff ffba 	bl	800092a <little_endian_2_float>
 80009b6:	eef0 7a40 	vmov.f32	s15, s0
 80009ba:	edc7 7a05 	vstr	s15, [r7, #20]

    const float g = 9.80665f;
 80009be:	4b32      	ldr	r3, [pc, #200]	@ (8000a88 <process_one_imu_frame+0x13c>)
 80009c0:	633b      	str	r3, [r7, #48]	@ 0x30

    d.accelX = little_endian_2_float(&m[17]) / g;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	3311      	adds	r3, #17
 80009c6:	4618      	mov	r0, r3
 80009c8:	f7ff ffaf 	bl	800092a <little_endian_2_float>
 80009cc:	eef0 6a40 	vmov.f32	s13, s0
 80009d0:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80009d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80009d8:	edc7 7a06 	vstr	s15, [r7, #24]
    d.accelY = little_endian_2_float(&m[21]) / g;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	3315      	adds	r3, #21
 80009e0:	4618      	mov	r0, r3
 80009e2:	f7ff ffa2 	bl	800092a <little_endian_2_float>
 80009e6:	eef0 6a40 	vmov.f32	s13, s0
 80009ea:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80009ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80009f2:	edc7 7a07 	vstr	s15, [r7, #28]
    d.accelZ = little_endian_2_float(&m[25]) / g;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	3319      	adds	r3, #25
 80009fa:	4618      	mov	r0, r3
 80009fc:	f7ff ff95 	bl	800092a <little_endian_2_float>
 8000a00:	eef0 6a40 	vmov.f32	s13, s0
 8000a04:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8000a08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a0c:	edc7 7a08 	vstr	s15, [r7, #32]
    d.pressure = little_endian_2_float(&m[29]);
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	331d      	adds	r3, #29
 8000a14:	4618      	mov	r0, r3
 8000a16:	f7ff ff88 	bl	800092a <little_endian_2_float>
 8000a1a:	eef0 7a40 	vmov.f32	s15, s0
 8000a1e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    if (d.pressure <= 0.0f){
 8000a22:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000a26:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000a2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a2e:	d802      	bhi.n	8000a36 <process_one_imu_frame+0xea>
    	d.altitude = NAN;
 8000a30:	4b16      	ldr	r3, [pc, #88]	@ (8000a8c <process_one_imu_frame+0x140>)
 8000a32:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000a34:	e019      	b.n	8000a6a <process_one_imu_frame+0x11e>
    } else {
        float ratio = d.pressure / 101.325f;
 8000a36:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8000a3a:	eddf 6a15 	vldr	s13, [pc, #84]	@ 8000a90 <process_one_imu_frame+0x144>
 8000a3e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a42:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        //TODO: current altitude calibration (9/14/2025), may or may not require update, depends on testing
        d.altitude = 145366.45f * (1.0f - powf(ratio, 0.190284f));
 8000a46:	eddf 0a13 	vldr	s1, [pc, #76]	@ 8000a94 <process_one_imu_frame+0x148>
 8000a4a:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 8000a4e:	f00c fb7b 	bl	800d148 <powf>
 8000a52:	eef0 7a40 	vmov.f32	s15, s0
 8000a56:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000a5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a5e:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8000a98 <process_one_imu_frame+0x14c>
 8000a62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a66:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    }
    *out = d;
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	461d      	mov	r5, r3
 8000a6e:	f107 040c 	add.w	r4, r7, #12
 8000a72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a76:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000a7a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    return 1;
 8000a7e:	2301      	movs	r3, #1
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	3738      	adds	r7, #56	@ 0x38
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bdb0      	pop	{r4, r5, r7, pc}
 8000a88:	411ce80a 	.word	0x411ce80a
 8000a8c:	7fc00000 	.word	0x7fc00000
 8000a90:	42caa666 	.word	0x42caa666
 8000a94:	3e42d9cf 	.word	0x3e42d9cf
 8000a98:	480df59d 	.word	0x480df59d

08000a9c <dma_widx>:

/*
 * Find the current dma write index
 */
static inline uint32_t dma_widx(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
    uint32_t ndtr = __HAL_DMA_GET_COUNTER(s_uart->hdmarx);
 8000aa2:	4b4f      	ldr	r3, [pc, #316]	@ (8000be0 <dma_widx+0x144>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a4d      	ldr	r2, [pc, #308]	@ (8000be4 <dma_widx+0x148>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d077      	beq.n	8000ba2 <dma_widx+0x106>
 8000ab2:	4b4b      	ldr	r3, [pc, #300]	@ (8000be0 <dma_widx+0x144>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a4a      	ldr	r2, [pc, #296]	@ (8000be8 <dma_widx+0x14c>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d06f      	beq.n	8000ba2 <dma_widx+0x106>
 8000ac2:	4b47      	ldr	r3, [pc, #284]	@ (8000be0 <dma_widx+0x144>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a47      	ldr	r2, [pc, #284]	@ (8000bec <dma_widx+0x150>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d067      	beq.n	8000ba2 <dma_widx+0x106>
 8000ad2:	4b43      	ldr	r3, [pc, #268]	@ (8000be0 <dma_widx+0x144>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a44      	ldr	r2, [pc, #272]	@ (8000bf0 <dma_widx+0x154>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d05f      	beq.n	8000ba2 <dma_widx+0x106>
 8000ae2:	4b3f      	ldr	r3, [pc, #252]	@ (8000be0 <dma_widx+0x144>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a41      	ldr	r2, [pc, #260]	@ (8000bf4 <dma_widx+0x158>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d057      	beq.n	8000ba2 <dma_widx+0x106>
 8000af2:	4b3b      	ldr	r3, [pc, #236]	@ (8000be0 <dma_widx+0x144>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a3e      	ldr	r2, [pc, #248]	@ (8000bf8 <dma_widx+0x15c>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d04f      	beq.n	8000ba2 <dma_widx+0x106>
 8000b02:	4b37      	ldr	r3, [pc, #220]	@ (8000be0 <dma_widx+0x144>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a3b      	ldr	r2, [pc, #236]	@ (8000bfc <dma_widx+0x160>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d047      	beq.n	8000ba2 <dma_widx+0x106>
 8000b12:	4b33      	ldr	r3, [pc, #204]	@ (8000be0 <dma_widx+0x144>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a38      	ldr	r2, [pc, #224]	@ (8000c00 <dma_widx+0x164>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d03f      	beq.n	8000ba2 <dma_widx+0x106>
 8000b22:	4b2f      	ldr	r3, [pc, #188]	@ (8000be0 <dma_widx+0x144>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a35      	ldr	r2, [pc, #212]	@ (8000c04 <dma_widx+0x168>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d037      	beq.n	8000ba2 <dma_widx+0x106>
 8000b32:	4b2b      	ldr	r3, [pc, #172]	@ (8000be0 <dma_widx+0x144>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a32      	ldr	r2, [pc, #200]	@ (8000c08 <dma_widx+0x16c>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d02f      	beq.n	8000ba2 <dma_widx+0x106>
 8000b42:	4b27      	ldr	r3, [pc, #156]	@ (8000be0 <dma_widx+0x144>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a2f      	ldr	r2, [pc, #188]	@ (8000c0c <dma_widx+0x170>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d027      	beq.n	8000ba2 <dma_widx+0x106>
 8000b52:	4b23      	ldr	r3, [pc, #140]	@ (8000be0 <dma_widx+0x144>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a2c      	ldr	r2, [pc, #176]	@ (8000c10 <dma_widx+0x174>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d01f      	beq.n	8000ba2 <dma_widx+0x106>
 8000b62:	4b1f      	ldr	r3, [pc, #124]	@ (8000be0 <dma_widx+0x144>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a29      	ldr	r2, [pc, #164]	@ (8000c14 <dma_widx+0x178>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d017      	beq.n	8000ba2 <dma_widx+0x106>
 8000b72:	4b1b      	ldr	r3, [pc, #108]	@ (8000be0 <dma_widx+0x144>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a26      	ldr	r2, [pc, #152]	@ (8000c18 <dma_widx+0x17c>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d00f      	beq.n	8000ba2 <dma_widx+0x106>
 8000b82:	4b17      	ldr	r3, [pc, #92]	@ (8000be0 <dma_widx+0x144>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a23      	ldr	r2, [pc, #140]	@ (8000c1c <dma_widx+0x180>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d007      	beq.n	8000ba2 <dma_widx+0x106>
 8000b92:	4b13      	ldr	r3, [pc, #76]	@ (8000be0 <dma_widx+0x144>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a20      	ldr	r2, [pc, #128]	@ (8000c20 <dma_widx+0x184>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d106      	bne.n	8000bb0 <dma_widx+0x114>
 8000ba2:	4b0f      	ldr	r3, [pc, #60]	@ (8000be0 <dma_widx+0x144>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	685b      	ldr	r3, [r3, #4]
 8000bae:	e005      	b.n	8000bbc <dma_widx+0x120>
 8000bb0:	4b0b      	ldr	r3, [pc, #44]	@ (8000be0 <dma_widx+0x144>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	607b      	str	r3, [r7, #4]
    uint32_t idx  = IMU_RX_BUF_SIZE - ndtr;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8000bc4:	603b      	str	r3, [r7, #0]
    return (idx == IMU_RX_BUF_SIZE) ? 0 : idx;
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000bcc:	d001      	beq.n	8000bd2 <dma_widx+0x136>
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	e000      	b.n	8000bd4 <dma_widx+0x138>
 8000bd2:	2300      	movs	r3, #0
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	370c      	adds	r7, #12
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr
 8000be0:	2400022c 	.word	0x2400022c
 8000be4:	40020010 	.word	0x40020010
 8000be8:	40020028 	.word	0x40020028
 8000bec:	40020040 	.word	0x40020040
 8000bf0:	40020058 	.word	0x40020058
 8000bf4:	40020070 	.word	0x40020070
 8000bf8:	40020088 	.word	0x40020088
 8000bfc:	400200a0 	.word	0x400200a0
 8000c00:	400200b8 	.word	0x400200b8
 8000c04:	40020410 	.word	0x40020410
 8000c08:	40020428 	.word	0x40020428
 8000c0c:	40020440 	.word	0x40020440
 8000c10:	40020458 	.word	0x40020458
 8000c14:	40020470 	.word	0x40020470
 8000c18:	40020488 	.word	0x40020488
 8000c1c:	400204a0 	.word	0x400204a0
 8000c20:	400204b8 	.word	0x400204b8

08000c24 <process_rx>:

/*
 * Process data on RX line
 */
static void process_rx(void)
{
 8000c24:	b5b0      	push	{r4, r5, r7, lr}
 8000c26:	b096      	sub	sp, #88	@ 0x58
 8000c28:	af00      	add	r7, sp, #0
    uint32_t w = dma_widx(); //find current dma write index
 8000c2a:	f7ff ff37 	bl	8000a9c <dma_widx>
 8000c2e:	64b8      	str	r0, [r7, #72]	@ 0x48
    uint32_t i = s_dma_last;
 8000c30:	4b43      	ldr	r3, [pc, #268]	@ (8000d40 <process_rx+0x11c>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	657b      	str	r3, [r7, #84]	@ 0x54
    //calculate available bits
    uint32_t avail = (w >= i) ? (w - i) : (IMU_RX_BUF_SIZE - i + w);
 8000c36:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8000c38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000c3a:	429a      	cmp	r2, r3
 8000c3c:	d303      	bcc.n	8000c46 <process_rx+0x22>
 8000c3e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8000c40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000c42:	1ad3      	subs	r3, r2, r3
 8000c44:	e004      	b.n	8000c50 <process_rx+0x2c>
 8000c46:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8000c48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000c4a:	1ad3      	subs	r3, r2, r3
 8000c4c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000c50:	653b      	str	r3, [r7, #80]	@ 0x50

    while (avail) {
 8000c52:	e068      	b.n	8000d26 <process_rx+0x102>
    	//look for frame sync byte (0xFA), if current byte isn't a sync, skip and keep scanning
        if (s_rx[i] != IMU_FRAME_SYNC) {
 8000c54:	4a3b      	ldr	r2, [pc, #236]	@ (8000d44 <process_rx+0x120>)
 8000c56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000c58:	4413      	add	r3, r2
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	2bfa      	cmp	r3, #250	@ 0xfa
 8000c5e:	d008      	beq.n	8000c72 <process_rx+0x4e>
        	i = (i + 1) % IMU_RX_BUF_SIZE; //move to the next byte and wrap if needed
 8000c60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000c62:	3301      	adds	r3, #1
 8000c64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000c68:	657b      	str	r3, [r7, #84]	@ 0x54
        	--avail;
 8000c6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000c6c:	3b01      	subs	r3, #1
 8000c6e:	653b      	str	r3, [r7, #80]	@ 0x50
 8000c70:	e059      	b.n	8000d26 <process_rx+0x102>
        	continue;
        }

        //at this point we've found a potential frame
        if (avail < IMU_FRAME_TOTAL_LEN) break; //break if not enough bytes
 8000c72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000c74:	2b23      	cmp	r3, #35	@ 0x23
 8000c76:	d95a      	bls.n	8000d2e <process_rx+0x10a>

        uint8_t raw[IMU_FRAME_AFTERSYNC_LEN];

        //copy the next 35 bytes after sync byte (0xFA) into a linear temp array
        for (uint32_t j = 0; j < IMU_FRAME_AFTERSYNC_LEN; ++j)
 8000c78:	2300      	movs	r3, #0
 8000c7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000c7c:	e010      	b.n	8000ca0 <process_rx+0x7c>
            raw[j] = s_rx[(i + 1 + j) % IMU_RX_BUF_SIZE];
 8000c7e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8000c80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000c82:	4413      	add	r3, r2
 8000c84:	3301      	adds	r3, #1
 8000c86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000c8a:	4a2e      	ldr	r2, [pc, #184]	@ (8000d44 <process_rx+0x120>)
 8000c8c:	5cd1      	ldrb	r1, [r2, r3]
 8000c8e:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8000c92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000c94:	4413      	add	r3, r2
 8000c96:	460a      	mov	r2, r1
 8000c98:	701a      	strb	r2, [r3, #0]
        for (uint32_t j = 0; j < IMU_FRAME_AFTERSYNC_LEN; ++j)
 8000c9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000ca0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000ca2:	2b22      	cmp	r3, #34	@ 0x22
 8000ca4:	d9eb      	bls.n	8000c7e <process_rx+0x5a>

        //process one frame of data
        IMU_Data_t tmp;

        if (process_one_imu_frame(raw, &tmp)) {
 8000ca6:	1d3a      	adds	r2, r7, #4
 8000ca8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cac:	4611      	mov	r1, r2
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f7ff fe4c 	bl	800094c <process_one_imu_frame>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d02d      	beq.n	8000d16 <process_rx+0xf2>
            uint8_t back = 1u - s_front;
 8000cba:	4b23      	ldr	r3, [pc, #140]	@ (8000d48 <process_rx+0x124>)
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	f1c3 0301 	rsb	r3, r3, #1
 8000cc2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
            s_db[back] = tmp;  	// copy whole struct
 8000cc6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000cca:	4a20      	ldr	r2, [pc, #128]	@ (8000d4c <process_rx+0x128>)
 8000ccc:	015b      	lsls	r3, r3, #5
 8000cce:	4413      	add	r3, r2
 8000cd0:	461d      	mov	r5, r3
 8000cd2:	1d3c      	adds	r4, r7, #4
 8000cd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cd8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000cdc:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
            s_front = back; 	// flip front index (atomic publish)
 8000ce0:	4a19      	ldr	r2, [pc, #100]	@ (8000d48 <process_rx+0x124>)
 8000ce2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000ce6:	7013      	strb	r3, [r2, #0]
            s_has_new = 1;
 8000ce8:	4b19      	ldr	r3, [pc, #100]	@ (8000d50 <process_rx+0x12c>)
 8000cea:	2201      	movs	r2, #1
 8000cec:	701a      	strb	r2, [r3, #0]
            i = (i + IMU_FRAME_TOTAL_LEN) % IMU_RX_BUF_SIZE;
 8000cee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000cf0:	3324      	adds	r3, #36	@ 0x24
 8000cf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000cf6:	657b      	str	r3, [r7, #84]	@ 0x54
            avail = (w >= i) ? (w - i) : (IMU_RX_BUF_SIZE - i + w); //recalculate available bytes
 8000cf8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8000cfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	d303      	bcc.n	8000d08 <process_rx+0xe4>
 8000d00:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8000d02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000d04:	1ad3      	subs	r3, r2, r3
 8000d06:	e004      	b.n	8000d12 <process_rx+0xee>
 8000d08:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8000d0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000d0c:	1ad3      	subs	r3, r2, r3
 8000d0e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000d12:	653b      	str	r3, [r7, #80]	@ 0x50
 8000d14:	e007      	b.n	8000d26 <process_rx+0x102>
        } else {
            i = (i + 1) % IMU_RX_BUF_SIZE;
 8000d16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000d18:	3301      	adds	r3, #1
 8000d1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000d1e:	657b      	str	r3, [r7, #84]	@ 0x54
            --avail;
 8000d20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000d22:	3b01      	subs	r3, #1
 8000d24:	653b      	str	r3, [r7, #80]	@ 0x50
    while (avail) {
 8000d26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d193      	bne.n	8000c54 <process_rx+0x30>
 8000d2c:	e000      	b.n	8000d30 <process_rx+0x10c>
        if (avail < IMU_FRAME_TOTAL_LEN) break; //break if not enough bytes
 8000d2e:	bf00      	nop
        }
    }
    s_dma_last = i; //update index
 8000d30:	4a03      	ldr	r2, [pc, #12]	@ (8000d40 <process_rx+0x11c>)
 8000d32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000d34:	6013      	str	r3, [r2, #0]
}
 8000d36:	bf00      	nop
 8000d38:	3758      	adds	r7, #88	@ 0x58
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bdb0      	pop	{r4, r5, r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	24000430 	.word	0x24000430
 8000d44:	24000230 	.word	0x24000230
 8000d48:	24000474 	.word	0x24000474
 8000d4c:	24000434 	.word	0x24000434
 8000d50:	24000475 	.word	0x24000475

08000d54 <imu_send_init>:

/* ---- IMU commands ---- */
static void imu_send_init(void)
{
 8000d54:	b5b0      	push	{r4, r5, r7, lr}
 8000d56:	b088      	sub	sp, #32
 8000d58:	af00      	add	r7, sp, #0
    const char cmd[] = "$VNWRG,75,2,8,05,0108,0020*XX\r\n";
 8000d5a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d88 <imu_send_init+0x34>)
 8000d5c:	463c      	mov	r4, r7
 8000d5e:	461d      	mov	r5, r3
 8000d60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d64:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000d68:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		0108 	- selecting YPR and Acceleration from group 1. convert binary to hex
				   (see table 17)
		0020 	- selecting pres from group 3. convert binary to hex
				   (see table 17)
	 */
    HAL_UART_Transmit(s_uart, (uint8_t*)cmd, sizeof(cmd)-1, 50);
 8000d6c:	4b07      	ldr	r3, [pc, #28]	@ (8000d8c <imu_send_init+0x38>)
 8000d6e:	6818      	ldr	r0, [r3, #0]
 8000d70:	4639      	mov	r1, r7
 8000d72:	2332      	movs	r3, #50	@ 0x32
 8000d74:	221f      	movs	r2, #31
 8000d76:	f007 fdc9 	bl	800890c <HAL_UART_Transmit>
    HAL_Delay(20);
 8000d7a:	2014      	movs	r0, #20
 8000d7c:	f001 fa22 	bl	80021c4 <HAL_Delay>
}
 8000d80:	bf00      	nop
 8000d82:	3720      	adds	r7, #32
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bdb0      	pop	{r4, r5, r7, pc}
 8000d88:	0800d4c0 	.word	0x0800d4c0
 8000d8c:	2400022c 	.word	0x2400022c

08000d90 <imu_reset>:
static void imu_reset(void)
{
 8000d90:	b590      	push	{r4, r7, lr}
 8000d92:	b089      	sub	sp, #36	@ 0x24
 8000d94:	af00      	add	r7, sp, #0
    const char cmd_reset[] = "$VNRFS*XX\r\n"; //reset imu to factory
 8000d96:	4a13      	ldr	r2, [pc, #76]	@ (8000de4 <imu_reset+0x54>)
 8000d98:	f107 0314 	add.w	r3, r7, #20
 8000d9c:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d9e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    HAL_UART_Transmit(s_uart, (uint8_t*)cmd_reset, sizeof(cmd_reset)-1, 50);
 8000da2:	4b11      	ldr	r3, [pc, #68]	@ (8000de8 <imu_reset+0x58>)
 8000da4:	6818      	ldr	r0, [r3, #0]
 8000da6:	f107 0114 	add.w	r1, r7, #20
 8000daa:	2332      	movs	r3, #50	@ 0x32
 8000dac:	220b      	movs	r2, #11
 8000dae:	f007 fdad 	bl	800890c <HAL_UART_Transmit>
    HAL_Delay(500);
 8000db2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000db6:	f001 fa05 	bl	80021c4 <HAL_Delay>
    const char cmd_pause[] = "$VNASY,0*XX\r\n"; //pause default async reading after IMU factory reset
 8000dba:	4b0c      	ldr	r3, [pc, #48]	@ (8000dec <imu_reset+0x5c>)
 8000dbc:	1d3c      	adds	r4, r7, #4
 8000dbe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000dc0:	c407      	stmia	r4!, {r0, r1, r2}
 8000dc2:	8023      	strh	r3, [r4, #0]
    HAL_UART_Transmit(s_uart, (uint8_t*)cmd_pause, sizeof(cmd_pause)-1, 50);
 8000dc4:	4b08      	ldr	r3, [pc, #32]	@ (8000de8 <imu_reset+0x58>)
 8000dc6:	6818      	ldr	r0, [r3, #0]
 8000dc8:	1d39      	adds	r1, r7, #4
 8000dca:	2332      	movs	r3, #50	@ 0x32
 8000dcc:	220d      	movs	r2, #13
 8000dce:	f007 fd9d 	bl	800890c <HAL_UART_Transmit>
    HAL_Delay(500);
 8000dd2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000dd6:	f001 f9f5 	bl	80021c4 <HAL_Delay>
}
 8000dda:	bf00      	nop
 8000ddc:	3724      	adds	r7, #36	@ 0x24
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd90      	pop	{r4, r7, pc}
 8000de2:	bf00      	nop
 8000de4:	0800d4e0 	.word	0x0800d4e0
 8000de8:	2400022c 	.word	0x2400022c
 8000dec:	0800d4ec 	.word	0x0800d4ec

08000df0 <imu_setup>:

/* -------- Public API -------- */

int imu_setup(void *huart)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
    s_uart = (UART_HandleTypeDef*)huart;
 8000df8:	4a1a      	ldr	r2, [pc, #104]	@ (8000e64 <imu_setup+0x74>)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6013      	str	r3, [r2, #0]
    if (!s_uart) return -1;
 8000dfe:	4b19      	ldr	r3, [pc, #100]	@ (8000e64 <imu_setup+0x74>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d102      	bne.n	8000e0c <imu_setup+0x1c>
 8000e06:	f04f 33ff 	mov.w	r3, #4294967295
 8000e0a:	e027      	b.n	8000e5c <imu_setup+0x6c>

    /* Configure IMU and start RX DMA*/
    imu_reset();
 8000e0c:	f7ff ffc0 	bl	8000d90 <imu_reset>
    HAL_Delay(20);
 8000e10:	2014      	movs	r0, #20
 8000e12:	f001 f9d7 	bl	80021c4 <HAL_Delay>
    imu_send_init();
 8000e16:	f7ff ff9d 	bl	8000d54 <imu_send_init>
    HAL_Delay(20);
 8000e1a:	2014      	movs	r0, #20
 8000e1c:	f001 f9d2 	bl	80021c4 <HAL_Delay>

    // Start circular RX DMA + enable IDLE interrupt
	if (HAL_UART_Receive_DMA(s_uart, s_rx, IMU_RX_BUF_SIZE) != HAL_OK) return -1;
 8000e20:	4b10      	ldr	r3, [pc, #64]	@ (8000e64 <imu_setup+0x74>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e28:	490f      	ldr	r1, [pc, #60]	@ (8000e68 <imu_setup+0x78>)
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f007 fdfc 	bl	8008a28 <HAL_UART_Receive_DMA>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d002      	beq.n	8000e3c <imu_setup+0x4c>
 8000e36:	f04f 33ff 	mov.w	r3, #4294967295
 8000e3a:	e00f      	b.n	8000e5c <imu_setup+0x6c>
	__HAL_UART_CLEAR_FLAG(s_uart, UART_CLEAR_IDLEF);   // H7: clear via ICR
 8000e3c:	4b09      	ldr	r3, [pc, #36]	@ (8000e64 <imu_setup+0x74>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	2210      	movs	r2, #16
 8000e44:	621a      	str	r2, [r3, #32]
	__HAL_UART_ENABLE_IT(s_uart, UART_IT_IDLE);
 8000e46:	4b07      	ldr	r3, [pc, #28]	@ (8000e64 <imu_setup+0x74>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	4b05      	ldr	r3, [pc, #20]	@ (8000e64 <imu_setup+0x74>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f042 0210 	orr.w	r2, r2, #16
 8000e58:	601a      	str	r2, [r3, #0]
	return 0;
 8000e5a:	2300      	movs	r3, #0
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	3708      	adds	r7, #8
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	2400022c 	.word	0x2400022c
 8000e68:	24000230 	.word	0x24000230

08000e6c <imu_read>:

int imu_read(IMU_Data_t *out)
{
 8000e6c:	b4b0      	push	{r4, r5, r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
    if (!out) return 0;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d101      	bne.n	8000e7e <imu_read+0x12>
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	e017      	b.n	8000eae <imu_read+0x42>
    if (!s_has_new) return 0;
 8000e7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000eb8 <imu_read+0x4c>)
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d101      	bne.n	8000e8a <imu_read+0x1e>
 8000e86:	2300      	movs	r3, #0
 8000e88:	e011      	b.n	8000eae <imu_read+0x42>
    *out = s_db[s_front];
 8000e8a:	4b0c      	ldr	r3, [pc, #48]	@ (8000ebc <imu_read+0x50>)
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	6879      	ldr	r1, [r7, #4]
 8000e90:	4a0b      	ldr	r2, [pc, #44]	@ (8000ec0 <imu_read+0x54>)
 8000e92:	015b      	lsls	r3, r3, #5
 8000e94:	4413      	add	r3, r2
 8000e96:	460c      	mov	r4, r1
 8000e98:	461d      	mov	r5, r3
 8000e9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e9e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000ea2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    s_has_new = 0;
 8000ea6:	4b04      	ldr	r3, [pc, #16]	@ (8000eb8 <imu_read+0x4c>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	701a      	strb	r2, [r3, #0]
    return 1;
 8000eac:	2301      	movs	r3, #1
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	370c      	adds	r7, #12
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bcb0      	pop	{r4, r5, r7}
 8000eb6:	4770      	bx	lr
 8000eb8:	24000475 	.word	0x24000475
 8000ebc:	24000474 	.word	0x24000474
 8000ec0:	24000434 	.word	0x24000434

08000ec4 <imu_on_usart_irq>:

/* ===== IRQ hook (call from USARTx_IRQHandler) ===== */
void imu_on_usart_irq(void *huart) {
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
    if ((UART_HandleTypeDef*)huart != s_uart) return;
 8000ecc:	4b10      	ldr	r3, [pc, #64]	@ (8000f10 <imu_on_usart_irq+0x4c>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	687a      	ldr	r2, [r7, #4]
 8000ed2:	429a      	cmp	r2, r3
 8000ed4:	d117      	bne.n	8000f06 <imu_on_usart_irq+0x42>

    if (__HAL_UART_GET_FLAG(s_uart, UART_FLAG_IDLE) &&
 8000ed6:	4b0e      	ldr	r3, [pc, #56]	@ (8000f10 <imu_on_usart_irq+0x4c>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	69db      	ldr	r3, [r3, #28]
 8000ede:	f003 0310 	and.w	r3, r3, #16
 8000ee2:	2b10      	cmp	r3, #16
 8000ee4:	d110      	bne.n	8000f08 <imu_on_usart_irq+0x44>
        __HAL_UART_GET_IT_SOURCE(s_uart, UART_IT_IDLE)) {
 8000ee6:	4b0a      	ldr	r3, [pc, #40]	@ (8000f10 <imu_on_usart_irq+0x4c>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f003 0310 	and.w	r3, r3, #16
    if (__HAL_UART_GET_FLAG(s_uart, UART_FLAG_IDLE) &&
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d008      	beq.n	8000f08 <imu_on_usart_irq+0x44>
        __HAL_UART_CLEAR_FLAG(s_uart, UART_CLEAR_IDLEF);
 8000ef6:	4b06      	ldr	r3, [pc, #24]	@ (8000f10 <imu_on_usart_irq+0x4c>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	2210      	movs	r2, #16
 8000efe:	621a      	str	r2, [r3, #32]
        process_rx();
 8000f00:	f7ff fe90 	bl	8000c24 <process_rx>
 8000f04:	e000      	b.n	8000f08 <imu_on_usart_irq+0x44>
    if ((UART_HandleTypeDef*)huart != s_uart) return;
 8000f06:	bf00      	nop
    }
}
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	2400022c 	.word	0x2400022c

08000f14 <IMU_CalculateGroundAltitude>:
#include "imu.h"
//#include "imu_real.h"
#include "imu_source.h"

/* Calculate ground altitude */
float IMU_CalculateGroundAltitude(void) {
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
        // Use the simulated ground altitude
//        extern float IMU_Sim_CalculateGroundAltitude(void);
//        return IMU_Sim_CalculateGroundAltitude();
//    }
	extern float IMU_Sim_CalculateGroundAltitude(void);
	return IMU_Sim_CalculateGroundAltitude();
 8000f18:	f000 f806 	bl	8000f28 <IMU_Sim_CalculateGroundAltitude>
 8000f1c:	eef0 7a40 	vmov.f32	s15, s0
}
 8000f20:	eeb0 0a67 	vmov.f32	s0, s15
 8000f24:	bd80      	pop	{r7, pc}
	...

08000f28 <IMU_Sim_CalculateGroundAltitude>:
  g_latest.accelY = 0.0f;
  g_latest.accelZ = 1.0f;           // keep ~1g if you need it later
  g_latest.altitude = alt_ft;
}

float IMU_Sim_CalculateGroundAltitude(void) { ground_ft = 500.0f; return ground_ft; }
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	4b06      	ldr	r3, [pc, #24]	@ (8000f48 <IMU_Sim_CalculateGroundAltitude+0x20>)
 8000f2e:	4a07      	ldr	r2, [pc, #28]	@ (8000f4c <IMU_Sim_CalculateGroundAltitude+0x24>)
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	4b05      	ldr	r3, [pc, #20]	@ (8000f48 <IMU_Sim_CalculateGroundAltitude+0x20>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	ee07 3a90 	vmov	s15, r3
 8000f3a:	eeb0 0a67 	vmov.f32	s0, s15
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	24000478 	.word	0x24000478
 8000f4c:	43fa0000 	.word	0x43fa0000

08000f50 <KalmanFilter_Update>:
 */


#include "kalman.h"
static float prev_alt = 0.0f;
void KalmanFilter_Update(float z, float* zf, float* vf) {
 8000f50:	b480      	push	{r7}
 8000f52:	b085      	sub	sp, #20
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	ed87 0a03 	vstr	s0, [r7, #12]
 8000f5a:	60b8      	str	r0, [r7, #8]
 8000f5c:	6079      	str	r1, [r7, #4]
  static int first = 1;
  if (first) { prev_alt = z; first = 0; }
 8000f5e:	4b19      	ldr	r3, [pc, #100]	@ (8000fc4 <KalmanFilter_Update+0x74>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d005      	beq.n	8000f72 <KalmanFilter_Update+0x22>
 8000f66:	4a18      	ldr	r2, [pc, #96]	@ (8000fc8 <KalmanFilter_Update+0x78>)
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	6013      	str	r3, [r2, #0]
 8000f6c:	4b15      	ldr	r3, [pc, #84]	@ (8000fc4 <KalmanFilter_Update+0x74>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]
  *zf = 0.8f*prev_alt + 0.2f*z;      // light LPF
 8000f72:	4b15      	ldr	r3, [pc, #84]	@ (8000fc8 <KalmanFilter_Update+0x78>)
 8000f74:	edd3 7a00 	vldr	s15, [r3]
 8000f78:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8000fcc <KalmanFilter_Update+0x7c>
 8000f7c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000f80:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f84:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8000fd0 <KalmanFilter_Update+0x80>
 8000f88:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000f8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	edc3 7a00 	vstr	s15, [r3]
  *vf = (z - prev_alt) * 6.5617f;     // fake “ft/s” from delta(ft)/0.05s (≈ *20), scaled a bit calmer
 8000f96:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc8 <KalmanFilter_Update+0x78>)
 8000f98:	edd3 7a00 	vldr	s15, [r3]
 8000f9c:	ed97 7a03 	vldr	s14, [r7, #12]
 8000fa0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fa4:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8000fd4 <KalmanFilter_Update+0x84>
 8000fa8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	edc3 7a00 	vstr	s15, [r3]
  prev_alt = z;
 8000fb2:	4a05      	ldr	r2, [pc, #20]	@ (8000fc8 <KalmanFilter_Update+0x78>)
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	6013      	str	r3, [r2, #0]
}
 8000fb8:	bf00      	nop
 8000fba:	3714      	adds	r7, #20
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	24000000 	.word	0x24000000
 8000fc8:	2400047c 	.word	0x2400047c
 8000fcc:	3f4ccccd 	.word	0x3f4ccccd
 8000fd0:	3e4ccccd 	.word	0x3e4ccccd
 8000fd4:	40d1f972 	.word	0x40d1f972

08000fd8 <PrintState>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// UART print of state transitions using printf routed to COM1 by BSP
static char* PrintState(FlightState_t s) {
 8000fd8:	b480      	push	{r7}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	71fb      	strb	r3, [r7, #7]
	char *name = "UNK";
 8000fe2:	4b15      	ldr	r3, [pc, #84]	@ (8001038 <PrintState+0x60>)
 8000fe4:	60fb      	str	r3, [r7, #12]
	switch (s) {
 8000fe6:	79fb      	ldrb	r3, [r7, #7]
 8000fe8:	2b04      	cmp	r3, #4
 8000fea:	d81c      	bhi.n	8001026 <PrintState+0x4e>
 8000fec:	a201      	add	r2, pc, #4	@ (adr r2, 8000ff4 <PrintState+0x1c>)
 8000fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ff2:	bf00      	nop
 8000ff4:	08001009 	.word	0x08001009
 8000ff8:	0800100f 	.word	0x0800100f
 8000ffc:	08001015 	.word	0x08001015
 8001000:	0800101b 	.word	0x0800101b
 8001004:	08001021 	.word	0x08001021
	case FLIGHT_STATE_GROUND_IDLE:
		name = "GROUND";
 8001008:	4b0c      	ldr	r3, [pc, #48]	@ (800103c <PrintState+0x64>)
 800100a:	60fb      	str	r3, [r7, #12]
		break;
 800100c:	e00c      	b.n	8001028 <PrintState+0x50>
	case FLIGHT_STATE_POWERED_FLIGHT:
		name = "POWERED";
 800100e:	4b0c      	ldr	r3, [pc, #48]	@ (8001040 <PrintState+0x68>)
 8001010:	60fb      	str	r3, [r7, #12]
		break;
 8001012:	e009      	b.n	8001028 <PrintState+0x50>
	case FLIGHT_STATE_UNPOWERED_FLIGHT:
		name = "UNPOWERED";
 8001014:	4b0b      	ldr	r3, [pc, #44]	@ (8001044 <PrintState+0x6c>)
 8001016:	60fb      	str	r3, [r7, #12]
		break;
 8001018:	e006      	b.n	8001028 <PrintState+0x50>
	case FLIGHT_STATE_DESCENT:
		name = "DESCENT";
 800101a:	4b0b      	ldr	r3, [pc, #44]	@ (8001048 <PrintState+0x70>)
 800101c:	60fb      	str	r3, [r7, #12]
		break;
 800101e:	e003      	b.n	8001028 <PrintState+0x50>
	case FLIGHT_STATE_LANDED:
		name = "LANDED";
 8001020:	4b0a      	ldr	r3, [pc, #40]	@ (800104c <PrintState+0x74>)
 8001022:	60fb      	str	r3, [r7, #12]
		break;
 8001024:	e000      	b.n	8001028 <PrintState+0x50>
	default:
		break;
 8001026:	bf00      	nop
	}
//	printf("STATE CHANGE -> %s\r\n", name);
	return name;
 8001028:	68fb      	ldr	r3, [r7, #12]
}
 800102a:	4618      	mov	r0, r3
 800102c:	3714      	adds	r7, #20
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	0800d4fc 	.word	0x0800d4fc
 800103c:	0800d500 	.word	0x0800d500
 8001040:	0800d508 	.word	0x0800d508
 8001044:	0800d510 	.word	0x0800d510
 8001048:	0800d51c 	.word	0x0800d51c
 800104c:	0800d524 	.word	0x0800d524

08001050 <PrintIMUData>:

// Printing IMU data
static void PrintIMUData(IMU_Data_t data, char* state) {
 8001050:	b084      	sub	sp, #16
 8001052:	b580      	push	{r7, lr}
 8001054:	b086      	sub	sp, #24
 8001056:	af06      	add	r7, sp, #24
 8001058:	f107 0c08 	add.w	ip, r7, #8
 800105c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
//	printf("[%s] IMU: accel=%.2f,%.2f,%.2f g alt=%.1f ft\r\n", state, data.accelX,
//			data.accelY, data.accelZ, data.altitude);
	printf("[%s] IMU: accel, pitch, roll=%.2f,%.2f,%.2f g alt=%.1f ft\r\n", state, data.yaw,
 8001060:	edd7 7a02 	vldr	s15, [r7, #8]
 8001064:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
				data.accelX, data.roll, data.altitude);
 8001068:	edd7 7a05 	vldr	s15, [r7, #20]
	printf("[%s] IMU: accel, pitch, roll=%.2f,%.2f,%.2f g alt=%.1f ft\r\n", state, data.yaw,
 800106c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
				data.accelX, data.roll, data.altitude);
 8001070:	edd7 6a04 	vldr	s13, [r7, #16]
	printf("[%s] IMU: accel, pitch, roll=%.2f,%.2f,%.2f g alt=%.1f ft\r\n", state, data.yaw,
 8001074:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
				data.accelX, data.roll, data.altitude);
 8001078:	edd7 5a09 	vldr	s11, [r7, #36]	@ 0x24
	printf("[%s] IMU: accel, pitch, roll=%.2f,%.2f,%.2f g alt=%.1f ft\r\n", state, data.yaw,
 800107c:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 8001080:	ed8d 5b04 	vstr	d5, [sp, #16]
 8001084:	ed8d 6b02 	vstr	d6, [sp, #8]
 8001088:	ed8d 7b00 	vstr	d7, [sp]
 800108c:	ec53 2b14 	vmov	r2, r3, d4
 8001090:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001092:	4804      	ldr	r0, [pc, #16]	@ (80010a4 <PrintIMUData+0x54>)
 8001094:	f00a f8d8 	bl	800b248 <iprintf>
}
 8001098:	bf00      	nop
 800109a:	46bd      	mov	sp, r7
 800109c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80010a0:	b004      	add	sp, #16
 80010a2:	4770      	bx	lr
 80010a4:	0800d52c 	.word	0x0800d52c

080010a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010a8:	b590      	push	{r4, r7, lr}
 80010aa:	b091      	sub	sp, #68	@ 0x44
 80010ac:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010ae:	f001 f82d 	bl	800210c <HAL_Init>
  /* USER CODE BEGIN Init */
	// (nothing needed here)
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010b2:	f000 f8c1 	bl	8001238 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
	// (nothing needed here)
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010b6:	f000 fa17 	bl	80014e8 <MX_GPIO_Init>
  MX_DMA_Init();
 80010ba:	f000 f9f5 	bl	80014a8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80010be:	f000 f9a7 	bl	8001410 <MX_USART2_UART_Init>
  MX_TIM7_Init();
 80010c2:	f000 f923 	bl	800130c <MX_TIM7_Init>
  MX_USART1_UART_Init();
 80010c6:	f000 f957 	bl	8001378 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  imu_setup(&huart1);
 80010ca:	4855      	ldr	r0, [pc, #340]	@ (8001220 <main+0x178>)
 80010cc:	f7ff fe90 	bl	8000df0 <imu_setup>
	// Initialize legacy flight state machine; it will call IMU_CalculateGroundAltitude()
	FlightState_Init();
 80010d0:	f7ff faf4 	bl	80006bc <FlightState_Init>
	// Record initial state for transition prints
	g_last_state = FlightState_GetCurrent();
 80010d4:	f7ff fbd2 	bl	800087c <FlightState_GetCurrent>
 80010d8:	4603      	mov	r3, r0
 80010da:	461a      	mov	r2, r3
 80010dc:	4b51      	ldr	r3, [pc, #324]	@ (8001224 <main+0x17c>)
 80010de:	701a      	strb	r2, [r3, #0]
	PrintState(g_last_state);
 80010e0:	4b50      	ldr	r3, [pc, #320]	@ (8001224 <main+0x17c>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff ff77 	bl	8000fd8 <PrintState>
  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 80010ea:	2000      	movs	r0, #0
 80010ec:	f000 fe0c 	bl	8001d08 <BSP_LED_Init>
  BSP_LED_Init(LED_BLUE);
 80010f0:	2001      	movs	r0, #1
 80010f2:	f000 fe09 	bl	8001d08 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80010f6:	2002      	movs	r0, #2
 80010f8:	f000 fe06 	bl	8001d08 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80010fc:	2101      	movs	r1, #1
 80010fe:	2000      	movs	r0, #0
 8001100:	f000 fea2 	bl	8001e48 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8001104:	4b48      	ldr	r3, [pc, #288]	@ (8001228 <main+0x180>)
 8001106:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800110a:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 800110c:	4b46      	ldr	r3, [pc, #280]	@ (8001228 <main+0x180>)
 800110e:	2200      	movs	r2, #0
 8001110:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8001112:	4b45      	ldr	r3, [pc, #276]	@ (8001228 <main+0x180>)
 8001114:	2200      	movs	r2, #0
 8001116:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8001118:	4b43      	ldr	r3, [pc, #268]	@ (8001228 <main+0x180>)
 800111a:	2200      	movs	r2, #0
 800111c:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 800111e:	4b42      	ldr	r3, [pc, #264]	@ (8001228 <main+0x180>)
 8001120:	2200      	movs	r2, #0
 8001122:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8001124:	4940      	ldr	r1, [pc, #256]	@ (8001228 <main+0x180>)
 8001126:	2000      	movs	r0, #0
 8001128:	f000 ff12 	bl	8001f50 <BSP_COM_Init>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <main+0x8e>
  {
    Error_Handler();
 8001132:	f000 fa37 	bl	80015a4 <Error_Handler>
  }

  /* USER CODE BEGIN BSP */

	/* Initialize leds */
	BSP_LED_Init(LED_GREEN);
 8001136:	2000      	movs	r0, #0
 8001138:	f000 fde6 	bl	8001d08 <BSP_LED_Init>
	BSP_LED_Init(LED_BLUE);
 800113c:	2001      	movs	r0, #1
 800113e:	f000 fde3 	bl	8001d08 <BSP_LED_Init>
	BSP_LED_Init(LED_RED);
 8001142:	2002      	movs	r0, #2
 8001144:	f000 fde0 	bl	8001d08 <BSP_LED_Init>

	/* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
	BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8001148:	2101      	movs	r1, #1
 800114a:	2000      	movs	r0, #0
 800114c:	f000 fe7c 	bl	8001e48 <BSP_PB_Init>

	/* Initialize COM1 port so that it can be used with PuTTy (115200, 8 bits (7-bit data + 1 stop bit), no parity */
	BspCOMInit.BaudRate = 115200;
 8001150:	4b35      	ldr	r3, [pc, #212]	@ (8001228 <main+0x180>)
 8001152:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001156:	601a      	str	r2, [r3, #0]
	BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8001158:	4b33      	ldr	r3, [pc, #204]	@ (8001228 <main+0x180>)
 800115a:	2200      	movs	r2, #0
 800115c:	605a      	str	r2, [r3, #4]
	BspCOMInit.StopBits = COM_STOPBITS_1;
 800115e:	4b32      	ldr	r3, [pc, #200]	@ (8001228 <main+0x180>)
 8001160:	2200      	movs	r2, #0
 8001162:	811a      	strh	r2, [r3, #8]
	BspCOMInit.Parity = COM_PARITY_NONE;
 8001164:	4b30      	ldr	r3, [pc, #192]	@ (8001228 <main+0x180>)
 8001166:	2200      	movs	r2, #0
 8001168:	815a      	strh	r2, [r3, #10]
	BspCOMInit.HwFlowCtl = COM_HWCONTROL_NONE;
 800116a:	4b2f      	ldr	r3, [pc, #188]	@ (8001228 <main+0x180>)
 800116c:	2200      	movs	r2, #0
 800116e:	819a      	strh	r2, [r3, #12]
	if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE) {
 8001170:	492d      	ldr	r1, [pc, #180]	@ (8001228 <main+0x180>)
 8001172:	2000      	movs	r0, #0
 8001174:	f000 feec 	bl	8001f50 <BSP_COM_Init>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <main+0xda>
		Error_Handler();
 800117e:	f000 fa11 	bl	80015a4 <Error_Handler>
	}

	/* -- Sample board code to send message over COM1 port ---- */
	printf("\r\n\r\n*** IMU Simulator & Flight State Demo ***\r\n");
 8001182:	482a      	ldr	r0, [pc, #168]	@ (800122c <main+0x184>)
 8001184:	f00a f8c8 	bl	800b318 <puts>
	printf("Press USER button to start/stop simulation\r\n");
 8001188:	4829      	ldr	r0, [pc, #164]	@ (8001230 <main+0x188>)
 800118a:	f00a f8c5 	bl	800b318 <puts>

	/* -- Sample board code to switch on leds ---- */
	BSP_LED_On(LED_GREEN);
 800118e:	2000      	movs	r0, #0
 8001190:	f000 fe30 	bl	8001df4 <BSP_LED_On>
	BSP_LED_On(LED_BLUE);
 8001194:	2001      	movs	r0, #1
 8001196:	f000 fe2d 	bl	8001df4 <BSP_LED_On>
	BSP_LED_On(LED_RED);
 800119a:	2002      	movs	r0, #2
 800119c:	f000 fe2a 	bl	8001df4 <BSP_LED_On>
//				printf("\r\n *** SIMULATION STARTED ***\r\n");
//				extern volatile uint32_t t_ms;
//				t_ms = 0;
//				/* Reset flight state */
//				FlightState_Init();
				g_last_state = FlightState_GetCurrent();
 80011a0:	f7ff fb6c 	bl	800087c <FlightState_GetCurrent>
 80011a4:	4603      	mov	r3, r0
 80011a6:	461a      	mov	r2, r3
 80011a8:	4b1e      	ldr	r3, [pc, #120]	@ (8001224 <main+0x17c>)
 80011aa:	701a      	strb	r2, [r3, #0]
				PrintState(g_last_state);
 80011ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001224 <main+0x17c>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff ff11 	bl	8000fd8 <PrintState>
//			// If state changed, print and update LED pattern

//			DriveStateLED(now);

			IMU_Data_t imu_data; //get imu data
			imu_read(&imu_data);
 80011b6:	463b      	mov	r3, r7
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff fe57 	bl	8000e6c <imu_read>
			FlightState_Update(imu_data); //update imu data
 80011be:	466c      	mov	r4, sp
 80011c0:	f107 0310 	add.w	r3, r7, #16
 80011c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80011ca:	463b      	mov	r3, r7
 80011cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011ce:	f7ff fa89 	bl	80006e4 <FlightState_Update>
			FlightState_t now = FlightState_GetCurrent(); //find current state
 80011d2:	f7ff fb53 	bl	800087c <FlightState_GetCurrent>
 80011d6:	4603      	mov	r3, r0
 80011d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			char* curState = PrintState(now);
 80011dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff fef9 	bl	8000fd8 <PrintState>
 80011e6:	6238      	str	r0, [r7, #32]
			if (now != g_last_state) {
 80011e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001224 <main+0x17c>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d007      	beq.n	8001204 <main+0x15c>

				printf("STATE CHANGE -> %s\r\n", curState);
 80011f4:	6a39      	ldr	r1, [r7, #32]
 80011f6:	480f      	ldr	r0, [pc, #60]	@ (8001234 <main+0x18c>)
 80011f8:	f00a f826 	bl	800b248 <iprintf>
				g_last_state = now;
 80011fc:	4a09      	ldr	r2, [pc, #36]	@ (8001224 <main+0x17c>)
 80011fe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001202:	7013      	strb	r3, [r2, #0]
			}
			PrintIMUData(imu_data, curState);
 8001204:	6a3b      	ldr	r3, [r7, #32]
 8001206:	9304      	str	r3, [sp, #16]
 8001208:	466c      	mov	r4, sp
 800120a:	f107 0310 	add.w	r3, r7, #16
 800120e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001210:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001214:	463b      	mov	r3, r7
 8001216:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001218:	f7ff ff1a 	bl	8001050 <PrintIMUData>
	while (1) {
 800121c:	e7c0      	b.n	80011a0 <main+0xf8>
 800121e:	bf00      	nop
 8001220:	240004e0 	.word	0x240004e0
 8001224:	24000680 	.word	0x24000680
 8001228:	24000480 	.word	0x24000480
 800122c:	0800d568 	.word	0x0800d568
 8001230:	0800d598 	.word	0x0800d598
 8001234:	0800d5c4 	.word	0x0800d5c4

08001238 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b09c      	sub	sp, #112	@ 0x70
 800123c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800123e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001242:	224c      	movs	r2, #76	@ 0x4c
 8001244:	2100      	movs	r1, #0
 8001246:	4618      	mov	r0, r3
 8001248:	f00a f946 	bl	800b4d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800124c:	1d3b      	adds	r3, r7, #4
 800124e:	2220      	movs	r2, #32
 8001250:	2100      	movs	r1, #0
 8001252:	4618      	mov	r0, r3
 8001254:	f00a f940 	bl	800b4d8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001258:	2002      	movs	r0, #2
 800125a:	f004 f92d 	bl	80054b8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800125e:	2300      	movs	r3, #0
 8001260:	603b      	str	r3, [r7, #0]
 8001262:	4b28      	ldr	r3, [pc, #160]	@ (8001304 <SystemClock_Config+0xcc>)
 8001264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001266:	4a27      	ldr	r2, [pc, #156]	@ (8001304 <SystemClock_Config+0xcc>)
 8001268:	f023 0301 	bic.w	r3, r3, #1
 800126c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800126e:	4b25      	ldr	r3, [pc, #148]	@ (8001304 <SystemClock_Config+0xcc>)
 8001270:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001272:	f003 0301 	and.w	r3, r3, #1
 8001276:	603b      	str	r3, [r7, #0]
 8001278:	4b23      	ldr	r3, [pc, #140]	@ (8001308 <SystemClock_Config+0xd0>)
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001280:	4a21      	ldr	r2, [pc, #132]	@ (8001308 <SystemClock_Config+0xd0>)
 8001282:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001286:	6193      	str	r3, [r2, #24]
 8001288:	4b1f      	ldr	r3, [pc, #124]	@ (8001308 <SystemClock_Config+0xd0>)
 800128a:	699b      	ldr	r3, [r3, #24]
 800128c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001290:	603b      	str	r3, [r7, #0]
 8001292:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001294:	bf00      	nop
 8001296:	4b1c      	ldr	r3, [pc, #112]	@ (8001308 <SystemClock_Config+0xd0>)
 8001298:	699b      	ldr	r3, [r3, #24]
 800129a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800129e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80012a2:	d1f8      	bne.n	8001296 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012a4:	2302      	movs	r3, #2
 80012a6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80012a8:	2301      	movs	r3, #1
 80012aa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012ac:	2340      	movs	r3, #64	@ 0x40
 80012ae:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80012b0:	2300      	movs	r3, #0
 80012b2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012b8:	4618      	mov	r0, r3
 80012ba:	f004 f937 	bl	800552c <HAL_RCC_OscConfig>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80012c4:	f000 f96e 	bl	80015a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012c8:	233f      	movs	r3, #63	@ 0x3f
 80012ca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80012cc:	2300      	movs	r3, #0
 80012ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80012d0:	2300      	movs	r3, #0
 80012d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80012d4:	2300      	movs	r3, #0
 80012d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80012d8:	2300      	movs	r3, #0
 80012da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80012dc:	2300      	movs	r3, #0
 80012de:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80012e0:	2300      	movs	r3, #0
 80012e2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80012e4:	2300      	movs	r3, #0
 80012e6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80012e8:	1d3b      	adds	r3, r7, #4
 80012ea:	2101      	movs	r1, #1
 80012ec:	4618      	mov	r0, r3
 80012ee:	f004 fd77 	bl	8005de0 <HAL_RCC_ClockConfig>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80012f8:	f000 f954 	bl	80015a4 <Error_Handler>
  }
}
 80012fc:	bf00      	nop
 80012fe:	3770      	adds	r7, #112	@ 0x70
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	58000400 	.word	0x58000400
 8001308:	58024800 	.word	0x58024800

0800130c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001312:	1d3b      	adds	r3, r7, #4
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800131c:	4b14      	ldr	r3, [pc, #80]	@ (8001370 <MX_TIM7_Init+0x64>)
 800131e:	4a15      	ldr	r2, [pc, #84]	@ (8001374 <MX_TIM7_Init+0x68>)
 8001320:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8001322:	4b13      	ldr	r3, [pc, #76]	@ (8001370 <MX_TIM7_Init+0x64>)
 8001324:	2200      	movs	r2, #0
 8001326:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001328:	4b11      	ldr	r3, [pc, #68]	@ (8001370 <MX_TIM7_Init+0x64>)
 800132a:	2200      	movs	r2, #0
 800132c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 800132e:	4b10      	ldr	r3, [pc, #64]	@ (8001370 <MX_TIM7_Init+0x64>)
 8001330:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001334:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001336:	4b0e      	ldr	r3, [pc, #56]	@ (8001370 <MX_TIM7_Init+0x64>)
 8001338:	2200      	movs	r2, #0
 800133a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800133c:	480c      	ldr	r0, [pc, #48]	@ (8001370 <MX_TIM7_Init+0x64>)
 800133e:	f006 ff49 	bl	80081d4 <HAL_TIM_Base_Init>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001348:	f000 f92c 	bl	80015a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800134c:	2300      	movs	r3, #0
 800134e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001350:	2300      	movs	r3, #0
 8001352:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001354:	1d3b      	adds	r3, r7, #4
 8001356:	4619      	mov	r1, r3
 8001358:	4805      	ldr	r0, [pc, #20]	@ (8001370 <MX_TIM7_Init+0x64>)
 800135a:	f007 f9db 	bl	8008714 <HAL_TIMEx_MasterConfigSynchronization>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001364:	f000 f91e 	bl	80015a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001368:	bf00      	nop
 800136a:	3710      	adds	r7, #16
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	24000494 	.word	0x24000494
 8001374:	40001400 	.word	0x40001400

08001378 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800137c:	4b22      	ldr	r3, [pc, #136]	@ (8001408 <MX_USART1_UART_Init+0x90>)
 800137e:	4a23      	ldr	r2, [pc, #140]	@ (800140c <MX_USART1_UART_Init+0x94>)
 8001380:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001382:	4b21      	ldr	r3, [pc, #132]	@ (8001408 <MX_USART1_UART_Init+0x90>)
 8001384:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001388:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800138a:	4b1f      	ldr	r3, [pc, #124]	@ (8001408 <MX_USART1_UART_Init+0x90>)
 800138c:	2200      	movs	r2, #0
 800138e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001390:	4b1d      	ldr	r3, [pc, #116]	@ (8001408 <MX_USART1_UART_Init+0x90>)
 8001392:	2200      	movs	r2, #0
 8001394:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001396:	4b1c      	ldr	r3, [pc, #112]	@ (8001408 <MX_USART1_UART_Init+0x90>)
 8001398:	2200      	movs	r2, #0
 800139a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800139c:	4b1a      	ldr	r3, [pc, #104]	@ (8001408 <MX_USART1_UART_Init+0x90>)
 800139e:	220c      	movs	r2, #12
 80013a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013a2:	4b19      	ldr	r3, [pc, #100]	@ (8001408 <MX_USART1_UART_Init+0x90>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013a8:	4b17      	ldr	r3, [pc, #92]	@ (8001408 <MX_USART1_UART_Init+0x90>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013ae:	4b16      	ldr	r3, [pc, #88]	@ (8001408 <MX_USART1_UART_Init+0x90>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013b4:	4b14      	ldr	r3, [pc, #80]	@ (8001408 <MX_USART1_UART_Init+0x90>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013ba:	4b13      	ldr	r3, [pc, #76]	@ (8001408 <MX_USART1_UART_Init+0x90>)
 80013bc:	2200      	movs	r2, #0
 80013be:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013c0:	4811      	ldr	r0, [pc, #68]	@ (8001408 <MX_USART1_UART_Init+0x90>)
 80013c2:	f007 fa53 	bl	800886c <HAL_UART_Init>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80013cc:	f000 f8ea 	bl	80015a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013d0:	2100      	movs	r1, #0
 80013d2:	480d      	ldr	r0, [pc, #52]	@ (8001408 <MX_USART1_UART_Init+0x90>)
 80013d4:	f009 f975 	bl	800a6c2 <HAL_UARTEx_SetTxFifoThreshold>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80013de:	f000 f8e1 	bl	80015a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013e2:	2100      	movs	r1, #0
 80013e4:	4808      	ldr	r0, [pc, #32]	@ (8001408 <MX_USART1_UART_Init+0x90>)
 80013e6:	f009 f9aa 	bl	800a73e <HAL_UARTEx_SetRxFifoThreshold>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80013f0:	f000 f8d8 	bl	80015a4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80013f4:	4804      	ldr	r0, [pc, #16]	@ (8001408 <MX_USART1_UART_Init+0x90>)
 80013f6:	f009 f92b 	bl	800a650 <HAL_UARTEx_DisableFifoMode>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001400:	f000 f8d0 	bl	80015a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001404:	bf00      	nop
 8001406:	bd80      	pop	{r7, pc}
 8001408:	240004e0 	.word	0x240004e0
 800140c:	40011000 	.word	0x40011000

08001410 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001414:	4b22      	ldr	r3, [pc, #136]	@ (80014a0 <MX_USART2_UART_Init+0x90>)
 8001416:	4a23      	ldr	r2, [pc, #140]	@ (80014a4 <MX_USART2_UART_Init+0x94>)
 8001418:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800141a:	4b21      	ldr	r3, [pc, #132]	@ (80014a0 <MX_USART2_UART_Init+0x90>)
 800141c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001420:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001422:	4b1f      	ldr	r3, [pc, #124]	@ (80014a0 <MX_USART2_UART_Init+0x90>)
 8001424:	2200      	movs	r2, #0
 8001426:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001428:	4b1d      	ldr	r3, [pc, #116]	@ (80014a0 <MX_USART2_UART_Init+0x90>)
 800142a:	2200      	movs	r2, #0
 800142c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800142e:	4b1c      	ldr	r3, [pc, #112]	@ (80014a0 <MX_USART2_UART_Init+0x90>)
 8001430:	2200      	movs	r2, #0
 8001432:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001434:	4b1a      	ldr	r3, [pc, #104]	@ (80014a0 <MX_USART2_UART_Init+0x90>)
 8001436:	220c      	movs	r2, #12
 8001438:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800143a:	4b19      	ldr	r3, [pc, #100]	@ (80014a0 <MX_USART2_UART_Init+0x90>)
 800143c:	2200      	movs	r2, #0
 800143e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001440:	4b17      	ldr	r3, [pc, #92]	@ (80014a0 <MX_USART2_UART_Init+0x90>)
 8001442:	2200      	movs	r2, #0
 8001444:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001446:	4b16      	ldr	r3, [pc, #88]	@ (80014a0 <MX_USART2_UART_Init+0x90>)
 8001448:	2200      	movs	r2, #0
 800144a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800144c:	4b14      	ldr	r3, [pc, #80]	@ (80014a0 <MX_USART2_UART_Init+0x90>)
 800144e:	2200      	movs	r2, #0
 8001450:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001452:	4b13      	ldr	r3, [pc, #76]	@ (80014a0 <MX_USART2_UART_Init+0x90>)
 8001454:	2200      	movs	r2, #0
 8001456:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001458:	4811      	ldr	r0, [pc, #68]	@ (80014a0 <MX_USART2_UART_Init+0x90>)
 800145a:	f007 fa07 	bl	800886c <HAL_UART_Init>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001464:	f000 f89e 	bl	80015a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001468:	2100      	movs	r1, #0
 800146a:	480d      	ldr	r0, [pc, #52]	@ (80014a0 <MX_USART2_UART_Init+0x90>)
 800146c:	f009 f929 	bl	800a6c2 <HAL_UARTEx_SetTxFifoThreshold>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001476:	f000 f895 	bl	80015a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800147a:	2100      	movs	r1, #0
 800147c:	4808      	ldr	r0, [pc, #32]	@ (80014a0 <MX_USART2_UART_Init+0x90>)
 800147e:	f009 f95e 	bl	800a73e <HAL_UARTEx_SetRxFifoThreshold>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001488:	f000 f88c 	bl	80015a4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800148c:	4804      	ldr	r0, [pc, #16]	@ (80014a0 <MX_USART2_UART_Init+0x90>)
 800148e:	f009 f8df 	bl	800a650 <HAL_UARTEx_DisableFifoMode>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001498:	f000 f884 	bl	80015a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800149c:	bf00      	nop
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	24000574 	.word	0x24000574
 80014a4:	40004400 	.word	0x40004400

080014a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014ae:	4b0d      	ldr	r3, [pc, #52]	@ (80014e4 <MX_DMA_Init+0x3c>)
 80014b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80014b4:	4a0b      	ldr	r2, [pc, #44]	@ (80014e4 <MX_DMA_Init+0x3c>)
 80014b6:	f043 0301 	orr.w	r3, r3, #1
 80014ba:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80014be:	4b09      	ldr	r3, [pc, #36]	@ (80014e4 <MX_DMA_Init+0x3c>)
 80014c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80014c4:	f003 0301 	and.w	r3, r3, #1
 80014c8:	607b      	str	r3, [r7, #4]
 80014ca:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80014cc:	2200      	movs	r2, #0
 80014ce:	2100      	movs	r1, #0
 80014d0:	200b      	movs	r0, #11
 80014d2:	f000 ff5f 	bl	8002394 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80014d6:	200b      	movs	r0, #11
 80014d8:	f000 ff76 	bl	80023c8 <HAL_NVIC_EnableIRQ>

}
 80014dc:	bf00      	nop
 80014de:	3708      	adds	r7, #8
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	58024400 	.word	0x58024400

080014e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b085      	sub	sp, #20
 80014ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */
	// (CubeMX will generate GPIO inits for LEDs if you checked them; BSP can also handle LEDs)
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ee:	4b19      	ldr	r3, [pc, #100]	@ (8001554 <MX_GPIO_Init+0x6c>)
 80014f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014f4:	4a17      	ldr	r2, [pc, #92]	@ (8001554 <MX_GPIO_Init+0x6c>)
 80014f6:	f043 0304 	orr.w	r3, r3, #4
 80014fa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014fe:	4b15      	ldr	r3, [pc, #84]	@ (8001554 <MX_GPIO_Init+0x6c>)
 8001500:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001504:	f003 0304 	and.w	r3, r3, #4
 8001508:	60fb      	str	r3, [r7, #12]
 800150a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800150c:	4b11      	ldr	r3, [pc, #68]	@ (8001554 <MX_GPIO_Init+0x6c>)
 800150e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001512:	4a10      	ldr	r2, [pc, #64]	@ (8001554 <MX_GPIO_Init+0x6c>)
 8001514:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001518:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800151c:	4b0d      	ldr	r3, [pc, #52]	@ (8001554 <MX_GPIO_Init+0x6c>)
 800151e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001522:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001526:	60bb      	str	r3, [r7, #8]
 8001528:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800152a:	4b0a      	ldr	r3, [pc, #40]	@ (8001554 <MX_GPIO_Init+0x6c>)
 800152c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001530:	4a08      	ldr	r2, [pc, #32]	@ (8001554 <MX_GPIO_Init+0x6c>)
 8001532:	f043 0301 	orr.w	r3, r3, #1
 8001536:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800153a:	4b06      	ldr	r3, [pc, #24]	@ (8001554 <MX_GPIO_Init+0x6c>)
 800153c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001540:	f003 0301 	and.w	r3, r3, #1
 8001544:	607b      	str	r3, [r7, #4]
 8001546:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */
	// (no manual GPIO here; using BSP LEDs)
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001548:	bf00      	nop
 800154a:	3714      	adds	r7, #20
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr
 8001554:	58024400 	.word	0x58024400

08001558 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a04      	ldr	r2, [pc, #16]	@ (8001578 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d101      	bne.n	800156e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800156a:	f000 fe0b 	bl	8002184 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800156e:	bf00      	nop
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	40001000 	.word	0x40001000

0800157c <BSP_PB_Callback>:
  * @brief BSP Push Button callback
  * @param Button Specifies the pressed button
  * @retval None
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	4603      	mov	r3, r0
 8001584:	71fb      	strb	r3, [r7, #7]
  if (Button == BUTTON_USER)
 8001586:	79fb      	ldrb	r3, [r7, #7]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d102      	bne.n	8001592 <BSP_PB_Callback+0x16>
  {
    BspButtonState = BUTTON_PRESSED;
 800158c:	4b04      	ldr	r3, [pc, #16]	@ (80015a0 <BSP_PB_Callback+0x24>)
 800158e:	2201      	movs	r2, #1
 8001590:	601a      	str	r2, [r3, #0]
  }
}
 8001592:	bf00      	nop
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	24000490 	.word	0x24000490

080015a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015a8:	b672      	cpsid	i
}
 80015aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80015ac:	bf00      	nop
 80015ae:	e7fd      	b.n	80015ac <Error_Handler+0x8>

080015b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015b6:	4b0a      	ldr	r3, [pc, #40]	@ (80015e0 <HAL_MspInit+0x30>)
 80015b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80015bc:	4a08      	ldr	r2, [pc, #32]	@ (80015e0 <HAL_MspInit+0x30>)
 80015be:	f043 0302 	orr.w	r3, r3, #2
 80015c2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80015c6:	4b06      	ldr	r3, [pc, #24]	@ (80015e0 <HAL_MspInit+0x30>)
 80015c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80015cc:	f003 0302 	and.w	r3, r3, #2
 80015d0:	607b      	str	r3, [r7, #4]
 80015d2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015d4:	bf00      	nop
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr
 80015e0:	58024400 	.word	0x58024400

080015e4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a0e      	ldr	r2, [pc, #56]	@ (800162c <HAL_TIM_Base_MspInit+0x48>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d116      	bne.n	8001624 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM7_MspInit 0 */

    /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80015f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001630 <HAL_TIM_Base_MspInit+0x4c>)
 80015f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80015fc:	4a0c      	ldr	r2, [pc, #48]	@ (8001630 <HAL_TIM_Base_MspInit+0x4c>)
 80015fe:	f043 0320 	orr.w	r3, r3, #32
 8001602:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001606:	4b0a      	ldr	r3, [pc, #40]	@ (8001630 <HAL_TIM_Base_MspInit+0x4c>)
 8001608:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800160c:	f003 0320 	and.w	r3, r3, #32
 8001610:	60fb      	str	r3, [r7, #12]
 8001612:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001614:	2200      	movs	r2, #0
 8001616:	2100      	movs	r1, #0
 8001618:	2037      	movs	r0, #55	@ 0x37
 800161a:	f000 febb 	bl	8002394 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800161e:	2037      	movs	r0, #55	@ 0x37
 8001620:	f000 fed2 	bl	80023c8 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM7_MspInit 1 */

  }

}
 8001624:	bf00      	nop
 8001626:	3710      	adds	r7, #16
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	40001400 	.word	0x40001400
 8001630:	58024400 	.word	0x58024400

08001634 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b0bc      	sub	sp, #240	@ 0xf0
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800163c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	605a      	str	r2, [r3, #4]
 8001646:	609a      	str	r2, [r3, #8]
 8001648:	60da      	str	r2, [r3, #12]
 800164a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800164c:	f107 0318 	add.w	r3, r7, #24
 8001650:	22c0      	movs	r2, #192	@ 0xc0
 8001652:	2100      	movs	r1, #0
 8001654:	4618      	mov	r0, r3
 8001656:	f009 ff3f 	bl	800b4d8 <memset>
  if(huart->Instance==USART1)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a68      	ldr	r2, [pc, #416]	@ (8001800 <HAL_UART_MspInit+0x1cc>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d17e      	bne.n	8001762 <HAL_UART_MspInit+0x12e>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001664:	f04f 0201 	mov.w	r2, #1
 8001668:	f04f 0300 	mov.w	r3, #0
 800166c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001670:	2300      	movs	r3, #0
 8001672:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001676:	f107 0318 	add.w	r3, r7, #24
 800167a:	4618      	mov	r0, r3
 800167c:	f004 ff7e 	bl	800657c <HAL_RCCEx_PeriphCLKConfig>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001686:	f7ff ff8d 	bl	80015a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800168a:	4b5e      	ldr	r3, [pc, #376]	@ (8001804 <HAL_UART_MspInit+0x1d0>)
 800168c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001690:	4a5c      	ldr	r2, [pc, #368]	@ (8001804 <HAL_UART_MspInit+0x1d0>)
 8001692:	f043 0310 	orr.w	r3, r3, #16
 8001696:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800169a:	4b5a      	ldr	r3, [pc, #360]	@ (8001804 <HAL_UART_MspInit+0x1d0>)
 800169c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80016a0:	f003 0310 	and.w	r3, r3, #16
 80016a4:	617b      	str	r3, [r7, #20]
 80016a6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a8:	4b56      	ldr	r3, [pc, #344]	@ (8001804 <HAL_UART_MspInit+0x1d0>)
 80016aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016ae:	4a55      	ldr	r2, [pc, #340]	@ (8001804 <HAL_UART_MspInit+0x1d0>)
 80016b0:	f043 0301 	orr.w	r3, r3, #1
 80016b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016b8:	4b52      	ldr	r3, [pc, #328]	@ (8001804 <HAL_UART_MspInit+0x1d0>)
 80016ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	613b      	str	r3, [r7, #16]
 80016c4:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80016c6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80016ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ce:	2302      	movs	r3, #2
 80016d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d4:	2300      	movs	r3, #0
 80016d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016da:	2300      	movs	r3, #0
 80016dc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016e0:	2307      	movs	r3, #7
 80016e2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e6:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80016ea:	4619      	mov	r1, r3
 80016ec:	4846      	ldr	r0, [pc, #280]	@ (8001808 <HAL_UART_MspInit+0x1d4>)
 80016ee:	f003 fd19 	bl	8005124 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Stream0;
 80016f2:	4b46      	ldr	r3, [pc, #280]	@ (800180c <HAL_UART_MspInit+0x1d8>)
 80016f4:	4a46      	ldr	r2, [pc, #280]	@ (8001810 <HAL_UART_MspInit+0x1dc>)
 80016f6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80016f8:	4b44      	ldr	r3, [pc, #272]	@ (800180c <HAL_UART_MspInit+0x1d8>)
 80016fa:	2229      	movs	r2, #41	@ 0x29
 80016fc:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016fe:	4b43      	ldr	r3, [pc, #268]	@ (800180c <HAL_UART_MspInit+0x1d8>)
 8001700:	2200      	movs	r2, #0
 8001702:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001704:	4b41      	ldr	r3, [pc, #260]	@ (800180c <HAL_UART_MspInit+0x1d8>)
 8001706:	2200      	movs	r2, #0
 8001708:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800170a:	4b40      	ldr	r3, [pc, #256]	@ (800180c <HAL_UART_MspInit+0x1d8>)
 800170c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001710:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001712:	4b3e      	ldr	r3, [pc, #248]	@ (800180c <HAL_UART_MspInit+0x1d8>)
 8001714:	2200      	movs	r2, #0
 8001716:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001718:	4b3c      	ldr	r3, [pc, #240]	@ (800180c <HAL_UART_MspInit+0x1d8>)
 800171a:	2200      	movs	r2, #0
 800171c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800171e:	4b3b      	ldr	r3, [pc, #236]	@ (800180c <HAL_UART_MspInit+0x1d8>)
 8001720:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001724:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001726:	4b39      	ldr	r3, [pc, #228]	@ (800180c <HAL_UART_MspInit+0x1d8>)
 8001728:	2200      	movs	r2, #0
 800172a:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800172c:	4b37      	ldr	r3, [pc, #220]	@ (800180c <HAL_UART_MspInit+0x1d8>)
 800172e:	2200      	movs	r2, #0
 8001730:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001732:	4836      	ldr	r0, [pc, #216]	@ (800180c <HAL_UART_MspInit+0x1d8>)
 8001734:	f000 fe56 	bl	80023e4 <HAL_DMA_Init>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 800173e:	f7ff ff31 	bl	80015a4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4a31      	ldr	r2, [pc, #196]	@ (800180c <HAL_UART_MspInit+0x1d8>)
 8001746:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800174a:	4a30      	ldr	r2, [pc, #192]	@ (800180c <HAL_UART_MspInit+0x1d8>)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001750:	2200      	movs	r2, #0
 8001752:	2100      	movs	r1, #0
 8001754:	2025      	movs	r0, #37	@ 0x25
 8001756:	f000 fe1d 	bl	8002394 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800175a:	2025      	movs	r0, #37	@ 0x25
 800175c:	f000 fe34 	bl	80023c8 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8001760:	e04a      	b.n	80017f8 <HAL_UART_MspInit+0x1c4>
  else if(huart->Instance==USART2)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a2b      	ldr	r2, [pc, #172]	@ (8001814 <HAL_UART_MspInit+0x1e0>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d145      	bne.n	80017f8 <HAL_UART_MspInit+0x1c4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800176c:	f04f 0202 	mov.w	r2, #2
 8001770:	f04f 0300 	mov.w	r3, #0
 8001774:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001778:	2300      	movs	r3, #0
 800177a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800177e:	f107 0318 	add.w	r3, r7, #24
 8001782:	4618      	mov	r0, r3
 8001784:	f004 fefa 	bl	800657c <HAL_RCCEx_PeriphCLKConfig>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <HAL_UART_MspInit+0x15e>
      Error_Handler();
 800178e:	f7ff ff09 	bl	80015a4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001792:	4b1c      	ldr	r3, [pc, #112]	@ (8001804 <HAL_UART_MspInit+0x1d0>)
 8001794:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001798:	4a1a      	ldr	r2, [pc, #104]	@ (8001804 <HAL_UART_MspInit+0x1d0>)
 800179a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800179e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80017a2:	4b18      	ldr	r3, [pc, #96]	@ (8001804 <HAL_UART_MspInit+0x1d0>)
 80017a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80017a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ac:	60fb      	str	r3, [r7, #12]
 80017ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b0:	4b14      	ldr	r3, [pc, #80]	@ (8001804 <HAL_UART_MspInit+0x1d0>)
 80017b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017b6:	4a13      	ldr	r2, [pc, #76]	@ (8001804 <HAL_UART_MspInit+0x1d0>)
 80017b8:	f043 0301 	orr.w	r3, r3, #1
 80017bc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017c0:	4b10      	ldr	r3, [pc, #64]	@ (8001804 <HAL_UART_MspInit+0x1d0>)
 80017c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017c6:	f003 0301 	and.w	r3, r3, #1
 80017ca:	60bb      	str	r3, [r7, #8]
 80017cc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80017ce:	230c      	movs	r3, #12
 80017d0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d4:	2302      	movs	r3, #2
 80017d6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017da:	2300      	movs	r3, #0
 80017dc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e0:	2300      	movs	r3, #0
 80017e2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017e6:	2307      	movs	r3, #7
 80017e8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ec:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80017f0:	4619      	mov	r1, r3
 80017f2:	4805      	ldr	r0, [pc, #20]	@ (8001808 <HAL_UART_MspInit+0x1d4>)
 80017f4:	f003 fc96 	bl	8005124 <HAL_GPIO_Init>
}
 80017f8:	bf00      	nop
 80017fa:	37f0      	adds	r7, #240	@ 0xf0
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	40011000 	.word	0x40011000
 8001804:	58024400 	.word	0x58024400
 8001808:	58020000 	.word	0x58020000
 800180c:	24000608 	.word	0x24000608
 8001810:	40020010 	.word	0x40020010
 8001814:	40004400 	.word	0x40004400

08001818 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b090      	sub	sp, #64	@ 0x40
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2b0f      	cmp	r3, #15
 8001824:	d827      	bhi.n	8001876 <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001826:	2200      	movs	r2, #0
 8001828:	6879      	ldr	r1, [r7, #4]
 800182a:	2036      	movs	r0, #54	@ 0x36
 800182c:	f000 fdb2 	bl	8002394 <HAL_NVIC_SetPriority>

     /* Enable the TIM6 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001830:	2036      	movs	r0, #54	@ 0x36
 8001832:	f000 fdc9 	bl	80023c8 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8001836:	4a29      	ldr	r2, [pc, #164]	@ (80018dc <HAL_InitTick+0xc4>)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800183c:	4b28      	ldr	r3, [pc, #160]	@ (80018e0 <HAL_InitTick+0xc8>)
 800183e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001842:	4a27      	ldr	r2, [pc, #156]	@ (80018e0 <HAL_InitTick+0xc8>)
 8001844:	f043 0310 	orr.w	r3, r3, #16
 8001848:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800184c:	4b24      	ldr	r3, [pc, #144]	@ (80018e0 <HAL_InitTick+0xc8>)
 800184e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001852:	f003 0310 	and.w	r3, r3, #16
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800185a:	f107 0210 	add.w	r2, r7, #16
 800185e:	f107 0314 	add.w	r3, r7, #20
 8001862:	4611      	mov	r1, r2
 8001864:	4618      	mov	r0, r3
 8001866:	f004 fe47 	bl	80064f8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800186a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800186c:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800186e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001870:	2b00      	cmp	r3, #0
 8001872:	d106      	bne.n	8001882 <HAL_InitTick+0x6a>
 8001874:	e001      	b.n	800187a <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e02b      	b.n	80018d2 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800187a:	f004 fe11 	bl	80064a0 <HAL_RCC_GetPCLK1Freq>
 800187e:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8001880:	e004      	b.n	800188c <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001882:	f004 fe0d 	bl	80064a0 <HAL_RCC_GetPCLK1Freq>
 8001886:	4603      	mov	r3, r0
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800188c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800188e:	4a15      	ldr	r2, [pc, #84]	@ (80018e4 <HAL_InitTick+0xcc>)
 8001890:	fba2 2303 	umull	r2, r3, r2, r3
 8001894:	0c9b      	lsrs	r3, r3, #18
 8001896:	3b01      	subs	r3, #1
 8001898:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800189a:	4b13      	ldr	r3, [pc, #76]	@ (80018e8 <HAL_InitTick+0xd0>)
 800189c:	4a13      	ldr	r2, [pc, #76]	@ (80018ec <HAL_InitTick+0xd4>)
 800189e:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80018a0:	4b11      	ldr	r3, [pc, #68]	@ (80018e8 <HAL_InitTick+0xd0>)
 80018a2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80018a6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80018a8:	4a0f      	ldr	r2, [pc, #60]	@ (80018e8 <HAL_InitTick+0xd0>)
 80018aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018ac:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80018ae:	4b0e      	ldr	r3, [pc, #56]	@ (80018e8 <HAL_InitTick+0xd0>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018b4:	4b0c      	ldr	r3, [pc, #48]	@ (80018e8 <HAL_InitTick+0xd0>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80018ba:	480b      	ldr	r0, [pc, #44]	@ (80018e8 <HAL_InitTick+0xd0>)
 80018bc:	f006 fc8a 	bl	80081d4 <HAL_TIM_Base_Init>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d104      	bne.n	80018d0 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80018c6:	4808      	ldr	r0, [pc, #32]	@ (80018e8 <HAL_InitTick+0xd0>)
 80018c8:	f006 fcdc 	bl	8008284 <HAL_TIM_Base_Start_IT>
 80018cc:	4603      	mov	r3, r0
 80018ce:	e000      	b.n	80018d2 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3740      	adds	r7, #64	@ 0x40
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	24000028 	.word	0x24000028
 80018e0:	58024400 	.word	0x58024400
 80018e4:	431bde83 	.word	0x431bde83
 80018e8:	24000684 	.word	0x24000684
 80018ec:	40001000 	.word	0x40001000

080018f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018f4:	bf00      	nop
 80018f6:	e7fd      	b.n	80018f4 <NMI_Handler+0x4>

080018f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018fc:	bf00      	nop
 80018fe:	e7fd      	b.n	80018fc <HardFault_Handler+0x4>

08001900 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001904:	bf00      	nop
 8001906:	e7fd      	b.n	8001904 <MemManage_Handler+0x4>

08001908 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800190c:	bf00      	nop
 800190e:	e7fd      	b.n	800190c <BusFault_Handler+0x4>

08001910 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001914:	bf00      	nop
 8001916:	e7fd      	b.n	8001914 <UsageFault_Handler+0x4>

08001918 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800191c:	bf00      	nop
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr

08001926 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001926:	b480      	push	{r7}
 8001928:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800192a:	bf00      	nop
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001938:	bf00      	nop
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr

08001942 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001942:	b480      	push	{r7}
 8001944:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001946:	bf00      	nop
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr

08001950 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001954:	4802      	ldr	r0, [pc, #8]	@ (8001960 <DMA1_Stream0_IRQHandler+0x10>)
 8001956:	f002 f86f 	bl	8003a38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800195a:	bf00      	nop
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	24000608 	.word	0x24000608

08001964 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	 imu_on_usart_irq(&huart1);
 8001968:	4803      	ldr	r0, [pc, #12]	@ (8001978 <USART1_IRQHandler+0x14>)
 800196a:	f7ff faab 	bl	8000ec4 <imu_on_usart_irq>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800196e:	4802      	ldr	r0, [pc, #8]	@ (8001978 <USART1_IRQHandler+0x14>)
 8001970:	f007 f8a6 	bl	8008ac0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001974:	bf00      	nop
 8001976:	bd80      	pop	{r7, pc}
 8001978:	240004e0 	.word	0x240004e0

0800197c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8001980:	2000      	movs	r0, #0
 8001982:	f000 fad3 	bl	8001f2c <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001986:	bf00      	nop
 8001988:	bd80      	pop	{r7, pc}
	...

0800198c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001990:	4802      	ldr	r0, [pc, #8]	@ (800199c <TIM6_DAC_IRQHandler+0x10>)
 8001992:	f006 fcef 	bl	8008374 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001996:	bf00      	nop
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	24000684 	.word	0x24000684

080019a0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80019a4:	4802      	ldr	r0, [pc, #8]	@ (80019b0 <TIM7_IRQHandler+0x10>)
 80019a6:	f006 fce5 	bl	8008374 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80019aa:	bf00      	nop
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	24000494 	.word	0x24000494

080019b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  return 1;
 80019b8:	2301      	movs	r3, #1
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr

080019c4 <_kill>:

int _kill(int pid, int sig)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019ce:	f009 fdd5 	bl	800b57c <__errno>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2216      	movs	r2, #22
 80019d6:	601a      	str	r2, [r3, #0]
  return -1;
 80019d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3708      	adds	r7, #8
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <_exit>:

void _exit (int status)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80019ec:	f04f 31ff 	mov.w	r1, #4294967295
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f7ff ffe7 	bl	80019c4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80019f6:	bf00      	nop
 80019f8:	e7fd      	b.n	80019f6 <_exit+0x12>

080019fa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b086      	sub	sp, #24
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	60f8      	str	r0, [r7, #12]
 8001a02:	60b9      	str	r1, [r7, #8]
 8001a04:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a06:	2300      	movs	r3, #0
 8001a08:	617b      	str	r3, [r7, #20]
 8001a0a:	e00a      	b.n	8001a22 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a0c:	f3af 8000 	nop.w
 8001a10:	4601      	mov	r1, r0
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	1c5a      	adds	r2, r3, #1
 8001a16:	60ba      	str	r2, [r7, #8]
 8001a18:	b2ca      	uxtb	r2, r1
 8001a1a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	3301      	adds	r3, #1
 8001a20:	617b      	str	r3, [r7, #20]
 8001a22:	697a      	ldr	r2, [r7, #20]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	429a      	cmp	r2, r3
 8001a28:	dbf0      	blt.n	8001a0c <_read+0x12>
  }

  return len;
 8001a2a:	687b      	ldr	r3, [r7, #4]
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3718      	adds	r7, #24
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}

08001a34 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b086      	sub	sp, #24
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	60f8      	str	r0, [r7, #12]
 8001a3c:	60b9      	str	r1, [r7, #8]
 8001a3e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a40:	2300      	movs	r3, #0
 8001a42:	617b      	str	r3, [r7, #20]
 8001a44:	e009      	b.n	8001a5a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	1c5a      	adds	r2, r3, #1
 8001a4a:	60ba      	str	r2, [r7, #8]
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f000 fae0 	bl	8002014 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	3301      	adds	r3, #1
 8001a58:	617b      	str	r3, [r7, #20]
 8001a5a:	697a      	ldr	r2, [r7, #20]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	dbf1      	blt.n	8001a46 <_write+0x12>
  }
  return len;
 8001a62:	687b      	ldr	r3, [r7, #4]
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3718      	adds	r7, #24
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}

08001a6c <_close>:

int _close(int file)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a74:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a94:	605a      	str	r2, [r3, #4]
  return 0;
 8001a96:	2300      	movs	r3, #0
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <_isatty>:

int _isatty(int file)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001aac:	2301      	movs	r3, #1
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr

08001aba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001aba:	b480      	push	{r7}
 8001abc:	b085      	sub	sp, #20
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	60f8      	str	r0, [r7, #12]
 8001ac2:	60b9      	str	r1, [r7, #8]
 8001ac4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ac6:	2300      	movs	r3, #0
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3714      	adds	r7, #20
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b086      	sub	sp, #24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001adc:	4a14      	ldr	r2, [pc, #80]	@ (8001b30 <_sbrk+0x5c>)
 8001ade:	4b15      	ldr	r3, [pc, #84]	@ (8001b34 <_sbrk+0x60>)
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ae8:	4b13      	ldr	r3, [pc, #76]	@ (8001b38 <_sbrk+0x64>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d102      	bne.n	8001af6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001af0:	4b11      	ldr	r3, [pc, #68]	@ (8001b38 <_sbrk+0x64>)
 8001af2:	4a12      	ldr	r2, [pc, #72]	@ (8001b3c <_sbrk+0x68>)
 8001af4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001af6:	4b10      	ldr	r3, [pc, #64]	@ (8001b38 <_sbrk+0x64>)
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4413      	add	r3, r2
 8001afe:	693a      	ldr	r2, [r7, #16]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d207      	bcs.n	8001b14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b04:	f009 fd3a 	bl	800b57c <__errno>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	220c      	movs	r2, #12
 8001b0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b12:	e009      	b.n	8001b28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b14:	4b08      	ldr	r3, [pc, #32]	@ (8001b38 <_sbrk+0x64>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b1a:	4b07      	ldr	r3, [pc, #28]	@ (8001b38 <_sbrk+0x64>)
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4413      	add	r3, r2
 8001b22:	4a05      	ldr	r2, [pc, #20]	@ (8001b38 <_sbrk+0x64>)
 8001b24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b26:	68fb      	ldr	r3, [r7, #12]
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3718      	adds	r7, #24
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	24080000 	.word	0x24080000
 8001b34:	00000400 	.word	0x00000400
 8001b38:	240006d0 	.word	0x240006d0
 8001b3c:	240008c8 	.word	0x240008c8

08001b40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001b44:	4b43      	ldr	r3, [pc, #268]	@ (8001c54 <SystemInit+0x114>)
 8001b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b4a:	4a42      	ldr	r2, [pc, #264]	@ (8001c54 <SystemInit+0x114>)
 8001b4c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b50:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001b54:	4b40      	ldr	r3, [pc, #256]	@ (8001c58 <SystemInit+0x118>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 030f 	and.w	r3, r3, #15
 8001b5c:	2b06      	cmp	r3, #6
 8001b5e:	d807      	bhi.n	8001b70 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001b60:	4b3d      	ldr	r3, [pc, #244]	@ (8001c58 <SystemInit+0x118>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f023 030f 	bic.w	r3, r3, #15
 8001b68:	4a3b      	ldr	r2, [pc, #236]	@ (8001c58 <SystemInit+0x118>)
 8001b6a:	f043 0307 	orr.w	r3, r3, #7
 8001b6e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001b70:	4b3a      	ldr	r3, [pc, #232]	@ (8001c5c <SystemInit+0x11c>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a39      	ldr	r2, [pc, #228]	@ (8001c5c <SystemInit+0x11c>)
 8001b76:	f043 0301 	orr.w	r3, r3, #1
 8001b7a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001b7c:	4b37      	ldr	r3, [pc, #220]	@ (8001c5c <SystemInit+0x11c>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001b82:	4b36      	ldr	r3, [pc, #216]	@ (8001c5c <SystemInit+0x11c>)
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	4935      	ldr	r1, [pc, #212]	@ (8001c5c <SystemInit+0x11c>)
 8001b88:	4b35      	ldr	r3, [pc, #212]	@ (8001c60 <SystemInit+0x120>)
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001b8e:	4b32      	ldr	r3, [pc, #200]	@ (8001c58 <SystemInit+0x118>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0308 	and.w	r3, r3, #8
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d007      	beq.n	8001baa <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001b9a:	4b2f      	ldr	r3, [pc, #188]	@ (8001c58 <SystemInit+0x118>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f023 030f 	bic.w	r3, r3, #15
 8001ba2:	4a2d      	ldr	r2, [pc, #180]	@ (8001c58 <SystemInit+0x118>)
 8001ba4:	f043 0307 	orr.w	r3, r3, #7
 8001ba8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001baa:	4b2c      	ldr	r3, [pc, #176]	@ (8001c5c <SystemInit+0x11c>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001bb0:	4b2a      	ldr	r3, [pc, #168]	@ (8001c5c <SystemInit+0x11c>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001bb6:	4b29      	ldr	r3, [pc, #164]	@ (8001c5c <SystemInit+0x11c>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001bbc:	4b27      	ldr	r3, [pc, #156]	@ (8001c5c <SystemInit+0x11c>)
 8001bbe:	4a29      	ldr	r2, [pc, #164]	@ (8001c64 <SystemInit+0x124>)
 8001bc0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001bc2:	4b26      	ldr	r3, [pc, #152]	@ (8001c5c <SystemInit+0x11c>)
 8001bc4:	4a28      	ldr	r2, [pc, #160]	@ (8001c68 <SystemInit+0x128>)
 8001bc6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001bc8:	4b24      	ldr	r3, [pc, #144]	@ (8001c5c <SystemInit+0x11c>)
 8001bca:	4a28      	ldr	r2, [pc, #160]	@ (8001c6c <SystemInit+0x12c>)
 8001bcc:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001bce:	4b23      	ldr	r3, [pc, #140]	@ (8001c5c <SystemInit+0x11c>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001bd4:	4b21      	ldr	r3, [pc, #132]	@ (8001c5c <SystemInit+0x11c>)
 8001bd6:	4a25      	ldr	r2, [pc, #148]	@ (8001c6c <SystemInit+0x12c>)
 8001bd8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001bda:	4b20      	ldr	r3, [pc, #128]	@ (8001c5c <SystemInit+0x11c>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001be0:	4b1e      	ldr	r3, [pc, #120]	@ (8001c5c <SystemInit+0x11c>)
 8001be2:	4a22      	ldr	r2, [pc, #136]	@ (8001c6c <SystemInit+0x12c>)
 8001be4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001be6:	4b1d      	ldr	r3, [pc, #116]	@ (8001c5c <SystemInit+0x11c>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001bec:	4b1b      	ldr	r3, [pc, #108]	@ (8001c5c <SystemInit+0x11c>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a1a      	ldr	r2, [pc, #104]	@ (8001c5c <SystemInit+0x11c>)
 8001bf2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001bf6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001bf8:	4b18      	ldr	r3, [pc, #96]	@ (8001c5c <SystemInit+0x11c>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001bfe:	4b1c      	ldr	r3, [pc, #112]	@ (8001c70 <SystemInit+0x130>)
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	4b1c      	ldr	r3, [pc, #112]	@ (8001c74 <SystemInit+0x134>)
 8001c04:	4013      	ands	r3, r2
 8001c06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001c0a:	d202      	bcs.n	8001c12 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001c0c:	4b1a      	ldr	r3, [pc, #104]	@ (8001c78 <SystemInit+0x138>)
 8001c0e:	2201      	movs	r2, #1
 8001c10:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8001c12:	4b12      	ldr	r3, [pc, #72]	@ (8001c5c <SystemInit+0x11c>)
 8001c14:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001c18:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d113      	bne.n	8001c48 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001c20:	4b0e      	ldr	r3, [pc, #56]	@ (8001c5c <SystemInit+0x11c>)
 8001c22:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001c26:	4a0d      	ldr	r2, [pc, #52]	@ (8001c5c <SystemInit+0x11c>)
 8001c28:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c2c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001c30:	4b12      	ldr	r3, [pc, #72]	@ (8001c7c <SystemInit+0x13c>)
 8001c32:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001c36:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001c38:	4b08      	ldr	r3, [pc, #32]	@ (8001c5c <SystemInit+0x11c>)
 8001c3a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001c3e:	4a07      	ldr	r2, [pc, #28]	@ (8001c5c <SystemInit+0x11c>)
 8001c40:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001c44:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001c48:	bf00      	nop
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	e000ed00 	.word	0xe000ed00
 8001c58:	52002000 	.word	0x52002000
 8001c5c:	58024400 	.word	0x58024400
 8001c60:	eaf6ed7f 	.word	0xeaf6ed7f
 8001c64:	02020200 	.word	0x02020200
 8001c68:	01ff0000 	.word	0x01ff0000
 8001c6c:	01010280 	.word	0x01010280
 8001c70:	5c001000 	.word	0x5c001000
 8001c74:	ffff0000 	.word	0xffff0000
 8001c78:	51008108 	.word	0x51008108
 8001c7c:	52004000 	.word	0x52004000

08001c80 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8001c84:	4b09      	ldr	r3, [pc, #36]	@ (8001cac <ExitRun0Mode+0x2c>)
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	4a08      	ldr	r2, [pc, #32]	@ (8001cac <ExitRun0Mode+0x2c>)
 8001c8a:	f043 0302 	orr.w	r3, r3, #2
 8001c8e:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001c90:	bf00      	nop
 8001c92:	4b06      	ldr	r3, [pc, #24]	@ (8001cac <ExitRun0Mode+0x2c>)
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d0f9      	beq.n	8001c92 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8001c9e:	bf00      	nop
 8001ca0:	bf00      	nop
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	58024800 	.word	0x58024800

08001cb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001cb0:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001cec <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001cb4:	f7ff ffe4 	bl	8001c80 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001cb8:	f7ff ff42 	bl	8001b40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cbc:	480c      	ldr	r0, [pc, #48]	@ (8001cf0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001cbe:	490d      	ldr	r1, [pc, #52]	@ (8001cf4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001cc0:	4a0d      	ldr	r2, [pc, #52]	@ (8001cf8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001cc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cc4:	e002      	b.n	8001ccc <LoopCopyDataInit>

08001cc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cca:	3304      	adds	r3, #4

08001ccc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ccc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cd0:	d3f9      	bcc.n	8001cc6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cd2:	4a0a      	ldr	r2, [pc, #40]	@ (8001cfc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001cd4:	4c0a      	ldr	r4, [pc, #40]	@ (8001d00 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001cd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cd8:	e001      	b.n	8001cde <LoopFillZerobss>

08001cda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cdc:	3204      	adds	r2, #4

08001cde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ce0:	d3fb      	bcc.n	8001cda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ce2:	f009 fc51 	bl	800b588 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ce6:	f7ff f9df 	bl	80010a8 <main>
  bx  lr
 8001cea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001cec:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001cf0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001cf4:	240001f8 	.word	0x240001f8
  ldr r2, =_sidata
 8001cf8:	0800dc20 	.word	0x0800dc20
  ldr r2, =_sbss
 8001cfc:	240001f8 	.word	0x240001f8
  ldr r4, =_ebss
 8001d00:	240008c4 	.word	0x240008c4

08001d04 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d04:	e7fe      	b.n	8001d04 <ADC3_IRQHandler>
	...

08001d08 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b08c      	sub	sp, #48	@ 0x30
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	4603      	mov	r3, r0
 8001d10:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001d12:	2300      	movs	r3, #0
 8001d14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001d16:	79fb      	ldrb	r3, [r7, #7]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d009      	beq.n	8001d30 <BSP_LED_Init+0x28>
 8001d1c:	79fb      	ldrb	r3, [r7, #7]
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d006      	beq.n	8001d30 <BSP_LED_Init+0x28>
 8001d22:	79fb      	ldrb	r3, [r7, #7]
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d003      	beq.n	8001d30 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001d28:	f06f 0301 	mvn.w	r3, #1
 8001d2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d2e:	e055      	b.n	8001ddc <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8001d30:	79fb      	ldrb	r3, [r7, #7]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d10f      	bne.n	8001d56 <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 8001d36:	4b2c      	ldr	r3, [pc, #176]	@ (8001de8 <BSP_LED_Init+0xe0>)
 8001d38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d3c:	4a2a      	ldr	r2, [pc, #168]	@ (8001de8 <BSP_LED_Init+0xe0>)
 8001d3e:	f043 0302 	orr.w	r3, r3, #2
 8001d42:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d46:	4b28      	ldr	r3, [pc, #160]	@ (8001de8 <BSP_LED_Init+0xe0>)
 8001d48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d4c:	f003 0302 	and.w	r3, r3, #2
 8001d50:	617b      	str	r3, [r7, #20]
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	e021      	b.n	8001d9a <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 8001d56:	79fb      	ldrb	r3, [r7, #7]
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d10f      	bne.n	8001d7c <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8001d5c:	4b22      	ldr	r3, [pc, #136]	@ (8001de8 <BSP_LED_Init+0xe0>)
 8001d5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d62:	4a21      	ldr	r2, [pc, #132]	@ (8001de8 <BSP_LED_Init+0xe0>)
 8001d64:	f043 0302 	orr.w	r3, r3, #2
 8001d68:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d6c:	4b1e      	ldr	r3, [pc, #120]	@ (8001de8 <BSP_LED_Init+0xe0>)
 8001d6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d72:	f003 0302 	and.w	r3, r3, #2
 8001d76:	613b      	str	r3, [r7, #16]
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	e00e      	b.n	8001d9a <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8001d7c:	4b1a      	ldr	r3, [pc, #104]	@ (8001de8 <BSP_LED_Init+0xe0>)
 8001d7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d82:	4a19      	ldr	r2, [pc, #100]	@ (8001de8 <BSP_LED_Init+0xe0>)
 8001d84:	f043 0302 	orr.w	r3, r3, #2
 8001d88:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d8c:	4b16      	ldr	r3, [pc, #88]	@ (8001de8 <BSP_LED_Init+0xe0>)
 8001d8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d92:	f003 0302 	and.w	r3, r3, #2
 8001d96:	60fb      	str	r3, [r7, #12]
 8001d98:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8001d9a:	79fb      	ldrb	r3, [r7, #7]
 8001d9c:	4a13      	ldr	r2, [pc, #76]	@ (8001dec <BSP_LED_Init+0xe4>)
 8001d9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001da2:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001da4:	2301      	movs	r3, #1
 8001da6:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8001da8:	2300      	movs	r3, #0
 8001daa:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dac:	2303      	movs	r3, #3
 8001dae:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001db0:	79fb      	ldrb	r3, [r7, #7]
 8001db2:	4a0f      	ldr	r2, [pc, #60]	@ (8001df0 <BSP_LED_Init+0xe8>)
 8001db4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001db8:	f107 0218 	add.w	r2, r7, #24
 8001dbc:	4611      	mov	r1, r2
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f003 f9b0 	bl	8005124 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001dc4:	79fb      	ldrb	r3, [r7, #7]
 8001dc6:	4a0a      	ldr	r2, [pc, #40]	@ (8001df0 <BSP_LED_Init+0xe8>)
 8001dc8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001dcc:	79fb      	ldrb	r3, [r7, #7]
 8001dce:	4a07      	ldr	r2, [pc, #28]	@ (8001dec <BSP_LED_Init+0xe4>)
 8001dd0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	f003 fb54 	bl	8005484 <HAL_GPIO_WritePin>
  }

  return ret;
 8001ddc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3730      	adds	r7, #48	@ 0x30
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	58024400 	.word	0x58024400
 8001dec:	0800d5ec 	.word	0x0800d5ec
 8001df0:	24000010 	.word	0x24000010

08001df4 <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001e02:	79fb      	ldrb	r3, [r7, #7]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d009      	beq.n	8001e1c <BSP_LED_On+0x28>
 8001e08:	79fb      	ldrb	r3, [r7, #7]
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d006      	beq.n	8001e1c <BSP_LED_On+0x28>
 8001e0e:	79fb      	ldrb	r3, [r7, #7]
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d003      	beq.n	8001e1c <BSP_LED_On+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001e14:	f06f 0301 	mvn.w	r3, #1
 8001e18:	60fb      	str	r3, [r7, #12]
 8001e1a:	e00b      	b.n	8001e34 <BSP_LED_On+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8001e1c:	79fb      	ldrb	r3, [r7, #7]
 8001e1e:	4a08      	ldr	r2, [pc, #32]	@ (8001e40 <BSP_LED_On+0x4c>)
 8001e20:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001e24:	79fb      	ldrb	r3, [r7, #7]
 8001e26:	4a07      	ldr	r2, [pc, #28]	@ (8001e44 <BSP_LED_On+0x50>)
 8001e28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	4619      	mov	r1, r3
 8001e30:	f003 fb28 	bl	8005484 <HAL_GPIO_WritePin>
  }

  return ret;
 8001e34:	68fb      	ldr	r3, [r7, #12]
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3710      	adds	r7, #16
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	24000010 	.word	0x24000010
 8001e44:	0800d5ec 	.word	0x0800d5ec

08001e48 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b088      	sub	sp, #32
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	4603      	mov	r3, r0
 8001e50:	460a      	mov	r2, r1
 8001e52:	71fb      	strb	r3, [r7, #7]
 8001e54:	4613      	mov	r3, r2
 8001e56:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8001e58:	4b2e      	ldr	r3, [pc, #184]	@ (8001f14 <BSP_PB_Init+0xcc>)
 8001e5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e5e:	4a2d      	ldr	r2, [pc, #180]	@ (8001f14 <BSP_PB_Init+0xcc>)
 8001e60:	f043 0304 	orr.w	r3, r3, #4
 8001e64:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e68:	4b2a      	ldr	r3, [pc, #168]	@ (8001f14 <BSP_PB_Init+0xcc>)
 8001e6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e6e:	f003 0304 	and.w	r3, r3, #4
 8001e72:	60bb      	str	r3, [r7, #8]
 8001e74:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8001e76:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e7a:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e80:	2302      	movs	r3, #2
 8001e82:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8001e84:	79bb      	ldrb	r3, [r7, #6]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d10c      	bne.n	8001ea4 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8001e8e:	79fb      	ldrb	r3, [r7, #7]
 8001e90:	4a21      	ldr	r2, [pc, #132]	@ (8001f18 <BSP_PB_Init+0xd0>)
 8001e92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e96:	f107 020c 	add.w	r2, r7, #12
 8001e9a:	4611      	mov	r1, r2
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f003 f941 	bl	8005124 <HAL_GPIO_Init>
 8001ea2:	e031      	b.n	8001f08 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8001ea4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001ea8:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001eaa:	79fb      	ldrb	r3, [r7, #7]
 8001eac:	4a1a      	ldr	r2, [pc, #104]	@ (8001f18 <BSP_PB_Init+0xd0>)
 8001eae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eb2:	f107 020c 	add.w	r2, r7, #12
 8001eb6:	4611      	mov	r1, r2
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f003 f933 	bl	8005124 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8001ebe:	79fb      	ldrb	r3, [r7, #7]
 8001ec0:	00db      	lsls	r3, r3, #3
 8001ec2:	4a16      	ldr	r2, [pc, #88]	@ (8001f1c <BSP_PB_Init+0xd4>)
 8001ec4:	441a      	add	r2, r3
 8001ec6:	79fb      	ldrb	r3, [r7, #7]
 8001ec8:	4915      	ldr	r1, [pc, #84]	@ (8001f20 <BSP_PB_Init+0xd8>)
 8001eca:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001ece:	4619      	mov	r1, r3
 8001ed0:	4610      	mov	r0, r2
 8001ed2:	f003 f8e2 	bl	800509a <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8001ed6:	79fb      	ldrb	r3, [r7, #7]
 8001ed8:	00db      	lsls	r3, r3, #3
 8001eda:	4a10      	ldr	r2, [pc, #64]	@ (8001f1c <BSP_PB_Init+0xd4>)
 8001edc:	1898      	adds	r0, r3, r2
 8001ede:	79fb      	ldrb	r3, [r7, #7]
 8001ee0:	4a10      	ldr	r2, [pc, #64]	@ (8001f24 <BSP_PB_Init+0xdc>)
 8001ee2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	2100      	movs	r1, #0
 8001eea:	f003 f8b7 	bl	800505c <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001eee:	2028      	movs	r0, #40	@ 0x28
 8001ef0:	79fb      	ldrb	r3, [r7, #7]
 8001ef2:	4a0d      	ldr	r2, [pc, #52]	@ (8001f28 <BSP_PB_Init+0xe0>)
 8001ef4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	4619      	mov	r1, r3
 8001efc:	f000 fa4a 	bl	8002394 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001f00:	2328      	movs	r3, #40	@ 0x28
 8001f02:	4618      	mov	r0, r3
 8001f04:	f000 fa60 	bl	80023c8 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8001f08:	2300      	movs	r3, #0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3720      	adds	r7, #32
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	58024400 	.word	0x58024400
 8001f18:	2400001c 	.word	0x2400001c
 8001f1c:	240006d4 	.word	0x240006d4
 8001f20:	0800d5f4 	.word	0x0800d5f4
 8001f24:	24000020 	.word	0x24000020
 8001f28:	24000024 	.word	0x24000024

08001f2c <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	4603      	mov	r3, r0
 8001f34:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8001f36:	79fb      	ldrb	r3, [r7, #7]
 8001f38:	00db      	lsls	r3, r3, #3
 8001f3a:	4a04      	ldr	r2, [pc, #16]	@ (8001f4c <BSP_PB_IRQHandler+0x20>)
 8001f3c:	4413      	add	r3, r2
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f003 f8c0 	bl	80050c4 <HAL_EXTI_IRQHandler>
}
 8001f44:	bf00      	nop
 8001f46:	3708      	adds	r7, #8
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	240006d4 	.word	0x240006d4

08001f50 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	4603      	mov	r3, r0
 8001f58:	6039      	str	r1, [r7, #0]
 8001f5a:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 8001f60:	79fb      	ldrb	r3, [r7, #7]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d003      	beq.n	8001f6e <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001f66:	f06f 0301 	mvn.w	r3, #1
 8001f6a:	60fb      	str	r3, [r7, #12]
 8001f6c:	e018      	b.n	8001fa0 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8001f6e:	79fb      	ldrb	r3, [r7, #7]
 8001f70:	2294      	movs	r2, #148	@ 0x94
 8001f72:	fb02 f303 	mul.w	r3, r2, r3
 8001f76:	4a0d      	ldr	r2, [pc, #52]	@ (8001fac <BSP_COM_Init+0x5c>)
 8001f78:	4413      	add	r3, r2
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f000 f86e 	bl	800205c <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8001f80:	79fb      	ldrb	r3, [r7, #7]
 8001f82:	2294      	movs	r2, #148	@ 0x94
 8001f84:	fb02 f303 	mul.w	r3, r2, r3
 8001f88:	4a08      	ldr	r2, [pc, #32]	@ (8001fac <BSP_COM_Init+0x5c>)
 8001f8a:	4413      	add	r3, r2
 8001f8c:	6839      	ldr	r1, [r7, #0]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f000 f80e 	bl	8001fb0 <MX_USART3_Init>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d002      	beq.n	8001fa0 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001f9a:	f06f 0303 	mvn.w	r3, #3
 8001f9e:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3710      	adds	r7, #16
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	240006dc 	.word	0x240006dc

08001fb0 <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8001fba:	4b15      	ldr	r3, [pc, #84]	@ (8002010 <MX_USART3_Init+0x60>)
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	220c      	movs	r2, #12
 8001fce:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	895b      	ldrh	r3, [r3, #10]
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685a      	ldr	r2, [r3, #4]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	891b      	ldrh	r3, [r3, #8]
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	899b      	ldrh	r3, [r3, #12]
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001ffc:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f006 fc34 	bl	800886c <HAL_UART_Init>
 8002004:	4603      	mov	r3, r0
}
 8002006:	4618      	mov	r0, r3
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	2400000c 	.word	0x2400000c

08002014 <__io_putchar>:
 #ifdef __GNUC__
 int __io_putchar (int ch)
 #else
 int fputc (int ch, FILE *f)
 #endif /* __GNUC__ */
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit (&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 800201c:	4b09      	ldr	r3, [pc, #36]	@ (8002044 <__io_putchar+0x30>)
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	461a      	mov	r2, r3
 8002022:	2394      	movs	r3, #148	@ 0x94
 8002024:	fb02 f303 	mul.w	r3, r2, r3
 8002028:	4a07      	ldr	r2, [pc, #28]	@ (8002048 <__io_putchar+0x34>)
 800202a:	1898      	adds	r0, r3, r2
 800202c:	1d39      	adds	r1, r7, #4
 800202e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002032:	2201      	movs	r2, #1
 8002034:	f006 fc6a 	bl	800890c <HAL_UART_Transmit>
  return ch;
 8002038:	687b      	ldr	r3, [r7, #4]
}
 800203a:	4618      	mov	r0, r3
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	24000770 	.word	0x24000770
 8002048:	240006dc 	.word	0x240006dc

0800204c <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8002050:	2000      	movs	r0, #0
 8002052:	f7ff fa93 	bl	800157c <BSP_PB_Callback>
}
 8002056:	bf00      	nop
 8002058:	bd80      	pop	{r7, pc}
	...

0800205c <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b08a      	sub	sp, #40	@ 0x28
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8002064:	4b27      	ldr	r3, [pc, #156]	@ (8002104 <COM1_MspInit+0xa8>)
 8002066:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800206a:	4a26      	ldr	r2, [pc, #152]	@ (8002104 <COM1_MspInit+0xa8>)
 800206c:	f043 0308 	orr.w	r3, r3, #8
 8002070:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002074:	4b23      	ldr	r3, [pc, #140]	@ (8002104 <COM1_MspInit+0xa8>)
 8002076:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800207a:	f003 0308 	and.w	r3, r3, #8
 800207e:	613b      	str	r3, [r7, #16]
 8002080:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8002082:	4b20      	ldr	r3, [pc, #128]	@ (8002104 <COM1_MspInit+0xa8>)
 8002084:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002088:	4a1e      	ldr	r2, [pc, #120]	@ (8002104 <COM1_MspInit+0xa8>)
 800208a:	f043 0308 	orr.w	r3, r3, #8
 800208e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002092:	4b1c      	ldr	r3, [pc, #112]	@ (8002104 <COM1_MspInit+0xa8>)
 8002094:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002098:	f003 0308 	and.w	r3, r3, #8
 800209c:	60fb      	str	r3, [r7, #12]
 800209e:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 80020a0:	4b18      	ldr	r3, [pc, #96]	@ (8002104 <COM1_MspInit+0xa8>)
 80020a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80020a6:	4a17      	ldr	r2, [pc, #92]	@ (8002104 <COM1_MspInit+0xa8>)
 80020a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020ac:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80020b0:	4b14      	ldr	r3, [pc, #80]	@ (8002104 <COM1_MspInit+0xa8>)
 80020b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80020b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80020ba:	60bb      	str	r3, [r7, #8]
 80020bc:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 80020be:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80020c2:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80020c4:	2302      	movs	r3, #2
 80020c6:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80020c8:	2302      	movs	r3, #2
 80020ca:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80020cc:	2301      	movs	r3, #1
 80020ce:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 80020d0:	2307      	movs	r3, #7
 80020d2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 80020d4:	f107 0314 	add.w	r3, r7, #20
 80020d8:	4619      	mov	r1, r3
 80020da:	480b      	ldr	r0, [pc, #44]	@ (8002108 <COM1_MspInit+0xac>)
 80020dc:	f003 f822 	bl	8005124 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 80020e0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80020e4:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80020e6:	2302      	movs	r3, #2
 80020e8:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 80020ea:	2307      	movs	r3, #7
 80020ec:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 80020ee:	f107 0314 	add.w	r3, r7, #20
 80020f2:	4619      	mov	r1, r3
 80020f4:	4804      	ldr	r0, [pc, #16]	@ (8002108 <COM1_MspInit+0xac>)
 80020f6:	f003 f815 	bl	8005124 <HAL_GPIO_Init>
}
 80020fa:	bf00      	nop
 80020fc:	3728      	adds	r7, #40	@ 0x28
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	58024400 	.word	0x58024400
 8002108:	58020c00 	.word	0x58020c00

0800210c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002112:	2003      	movs	r0, #3
 8002114:	f000 f933 	bl	800237e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002118:	f004 f818 	bl	800614c <HAL_RCC_GetSysClockFreq>
 800211c:	4602      	mov	r2, r0
 800211e:	4b15      	ldr	r3, [pc, #84]	@ (8002174 <HAL_Init+0x68>)
 8002120:	699b      	ldr	r3, [r3, #24]
 8002122:	0a1b      	lsrs	r3, r3, #8
 8002124:	f003 030f 	and.w	r3, r3, #15
 8002128:	4913      	ldr	r1, [pc, #76]	@ (8002178 <HAL_Init+0x6c>)
 800212a:	5ccb      	ldrb	r3, [r1, r3]
 800212c:	f003 031f 	and.w	r3, r3, #31
 8002130:	fa22 f303 	lsr.w	r3, r2, r3
 8002134:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002136:	4b0f      	ldr	r3, [pc, #60]	@ (8002174 <HAL_Init+0x68>)
 8002138:	699b      	ldr	r3, [r3, #24]
 800213a:	f003 030f 	and.w	r3, r3, #15
 800213e:	4a0e      	ldr	r2, [pc, #56]	@ (8002178 <HAL_Init+0x6c>)
 8002140:	5cd3      	ldrb	r3, [r2, r3]
 8002142:	f003 031f 	and.w	r3, r3, #31
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	fa22 f303 	lsr.w	r3, r2, r3
 800214c:	4a0b      	ldr	r2, [pc, #44]	@ (800217c <HAL_Init+0x70>)
 800214e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002150:	4a0b      	ldr	r2, [pc, #44]	@ (8002180 <HAL_Init+0x74>)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002156:	200f      	movs	r0, #15
 8002158:	f7ff fb5e 	bl	8001818 <HAL_InitTick>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d001      	beq.n	8002166 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e002      	b.n	800216c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002166:	f7ff fa23 	bl	80015b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800216a:	2300      	movs	r3, #0
}
 800216c:	4618      	mov	r0, r3
 800216e:	3708      	adds	r7, #8
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	58024400 	.word	0x58024400
 8002178:	0800d5dc 	.word	0x0800d5dc
 800217c:	24000008 	.word	0x24000008
 8002180:	24000004 	.word	0x24000004

08002184 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002188:	4b06      	ldr	r3, [pc, #24]	@ (80021a4 <HAL_IncTick+0x20>)
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	461a      	mov	r2, r3
 800218e:	4b06      	ldr	r3, [pc, #24]	@ (80021a8 <HAL_IncTick+0x24>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4413      	add	r3, r2
 8002194:	4a04      	ldr	r2, [pc, #16]	@ (80021a8 <HAL_IncTick+0x24>)
 8002196:	6013      	str	r3, [r2, #0]
}
 8002198:	bf00      	nop
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	2400002c 	.word	0x2400002c
 80021a8:	24000774 	.word	0x24000774

080021ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
  return uwTick;
 80021b0:	4b03      	ldr	r3, [pc, #12]	@ (80021c0 <HAL_GetTick+0x14>)
 80021b2:	681b      	ldr	r3, [r3, #0]
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	24000774 	.word	0x24000774

080021c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021cc:	f7ff ffee 	bl	80021ac <HAL_GetTick>
 80021d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021dc:	d005      	beq.n	80021ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021de:	4b0a      	ldr	r3, [pc, #40]	@ (8002208 <HAL_Delay+0x44>)
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	461a      	mov	r2, r3
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	4413      	add	r3, r2
 80021e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80021ea:	bf00      	nop
 80021ec:	f7ff ffde 	bl	80021ac <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	68fa      	ldr	r2, [r7, #12]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d8f7      	bhi.n	80021ec <HAL_Delay+0x28>
  {
  }
}
 80021fc:	bf00      	nop
 80021fe:	bf00      	nop
 8002200:	3710      	adds	r7, #16
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	2400002c 	.word	0x2400002c

0800220c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002210:	4b03      	ldr	r3, [pc, #12]	@ (8002220 <HAL_GetREVID+0x14>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	0c1b      	lsrs	r3, r3, #16
}
 8002216:	4618      	mov	r0, r3
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr
 8002220:	5c001000 	.word	0x5c001000

08002224 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002224:	b480      	push	{r7}
 8002226:	b085      	sub	sp, #20
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f003 0307 	and.w	r3, r3, #7
 8002232:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002234:	4b0b      	ldr	r3, [pc, #44]	@ (8002264 <__NVIC_SetPriorityGrouping+0x40>)
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800223a:	68ba      	ldr	r2, [r7, #8]
 800223c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002240:	4013      	ands	r3, r2
 8002242:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800224c:	4b06      	ldr	r3, [pc, #24]	@ (8002268 <__NVIC_SetPriorityGrouping+0x44>)
 800224e:	4313      	orrs	r3, r2
 8002250:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002252:	4a04      	ldr	r2, [pc, #16]	@ (8002264 <__NVIC_SetPriorityGrouping+0x40>)
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	60d3      	str	r3, [r2, #12]
}
 8002258:	bf00      	nop
 800225a:	3714      	adds	r7, #20
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr
 8002264:	e000ed00 	.word	0xe000ed00
 8002268:	05fa0000 	.word	0x05fa0000

0800226c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002270:	4b04      	ldr	r3, [pc, #16]	@ (8002284 <__NVIC_GetPriorityGrouping+0x18>)
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	0a1b      	lsrs	r3, r3, #8
 8002276:	f003 0307 	and.w	r3, r3, #7
}
 800227a:	4618      	mov	r0, r3
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr
 8002284:	e000ed00 	.word	0xe000ed00

08002288 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	4603      	mov	r3, r0
 8002290:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002292:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002296:	2b00      	cmp	r3, #0
 8002298:	db0b      	blt.n	80022b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800229a:	88fb      	ldrh	r3, [r7, #6]
 800229c:	f003 021f 	and.w	r2, r3, #31
 80022a0:	4907      	ldr	r1, [pc, #28]	@ (80022c0 <__NVIC_EnableIRQ+0x38>)
 80022a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022a6:	095b      	lsrs	r3, r3, #5
 80022a8:	2001      	movs	r0, #1
 80022aa:	fa00 f202 	lsl.w	r2, r0, r2
 80022ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80022b2:	bf00      	nop
 80022b4:	370c      	adds	r7, #12
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	e000e100 	.word	0xe000e100

080022c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	4603      	mov	r3, r0
 80022cc:	6039      	str	r1, [r7, #0]
 80022ce:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80022d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	db0a      	blt.n	80022ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	b2da      	uxtb	r2, r3
 80022dc:	490c      	ldr	r1, [pc, #48]	@ (8002310 <__NVIC_SetPriority+0x4c>)
 80022de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022e2:	0112      	lsls	r2, r2, #4
 80022e4:	b2d2      	uxtb	r2, r2
 80022e6:	440b      	add	r3, r1
 80022e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022ec:	e00a      	b.n	8002304 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	b2da      	uxtb	r2, r3
 80022f2:	4908      	ldr	r1, [pc, #32]	@ (8002314 <__NVIC_SetPriority+0x50>)
 80022f4:	88fb      	ldrh	r3, [r7, #6]
 80022f6:	f003 030f 	and.w	r3, r3, #15
 80022fa:	3b04      	subs	r3, #4
 80022fc:	0112      	lsls	r2, r2, #4
 80022fe:	b2d2      	uxtb	r2, r2
 8002300:	440b      	add	r3, r1
 8002302:	761a      	strb	r2, [r3, #24]
}
 8002304:	bf00      	nop
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr
 8002310:	e000e100 	.word	0xe000e100
 8002314:	e000ed00 	.word	0xe000ed00

08002318 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002318:	b480      	push	{r7}
 800231a:	b089      	sub	sp, #36	@ 0x24
 800231c:	af00      	add	r7, sp, #0
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	60b9      	str	r1, [r7, #8]
 8002322:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f003 0307 	and.w	r3, r3, #7
 800232a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	f1c3 0307 	rsb	r3, r3, #7
 8002332:	2b04      	cmp	r3, #4
 8002334:	bf28      	it	cs
 8002336:	2304      	movcs	r3, #4
 8002338:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	3304      	adds	r3, #4
 800233e:	2b06      	cmp	r3, #6
 8002340:	d902      	bls.n	8002348 <NVIC_EncodePriority+0x30>
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	3b03      	subs	r3, #3
 8002346:	e000      	b.n	800234a <NVIC_EncodePriority+0x32>
 8002348:	2300      	movs	r3, #0
 800234a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800234c:	f04f 32ff 	mov.w	r2, #4294967295
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	fa02 f303 	lsl.w	r3, r2, r3
 8002356:	43da      	mvns	r2, r3
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	401a      	ands	r2, r3
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002360:	f04f 31ff 	mov.w	r1, #4294967295
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	fa01 f303 	lsl.w	r3, r1, r3
 800236a:	43d9      	mvns	r1, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002370:	4313      	orrs	r3, r2
         );
}
 8002372:	4618      	mov	r0, r3
 8002374:	3724      	adds	r7, #36	@ 0x24
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr

0800237e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800237e:	b580      	push	{r7, lr}
 8002380:	b082      	sub	sp, #8
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f7ff ff4c 	bl	8002224 <__NVIC_SetPriorityGrouping>
}
 800238c:	bf00      	nop
 800238e:	3708      	adds	r7, #8
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}

08002394 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b086      	sub	sp, #24
 8002398:	af00      	add	r7, sp, #0
 800239a:	4603      	mov	r3, r0
 800239c:	60b9      	str	r1, [r7, #8]
 800239e:	607a      	str	r2, [r7, #4]
 80023a0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80023a2:	f7ff ff63 	bl	800226c <__NVIC_GetPriorityGrouping>
 80023a6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	68b9      	ldr	r1, [r7, #8]
 80023ac:	6978      	ldr	r0, [r7, #20]
 80023ae:	f7ff ffb3 	bl	8002318 <NVIC_EncodePriority>
 80023b2:	4602      	mov	r2, r0
 80023b4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80023b8:	4611      	mov	r1, r2
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7ff ff82 	bl	80022c4 <__NVIC_SetPriority>
}
 80023c0:	bf00      	nop
 80023c2:	3718      	adds	r7, #24
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	4603      	mov	r3, r0
 80023d0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7ff ff56 	bl	8002288 <__NVIC_EnableIRQ>
}
 80023dc:	bf00      	nop
 80023de:	3708      	adds	r7, #8
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b086      	sub	sp, #24
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80023ec:	f7ff fede 	bl	80021ac <HAL_GetTick>
 80023f0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d101      	bne.n	80023fc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e316      	b.n	8002a2a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a66      	ldr	r2, [pc, #408]	@ (800259c <HAL_DMA_Init+0x1b8>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d04a      	beq.n	800249c <HAL_DMA_Init+0xb8>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a65      	ldr	r2, [pc, #404]	@ (80025a0 <HAL_DMA_Init+0x1bc>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d045      	beq.n	800249c <HAL_DMA_Init+0xb8>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a63      	ldr	r2, [pc, #396]	@ (80025a4 <HAL_DMA_Init+0x1c0>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d040      	beq.n	800249c <HAL_DMA_Init+0xb8>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a62      	ldr	r2, [pc, #392]	@ (80025a8 <HAL_DMA_Init+0x1c4>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d03b      	beq.n	800249c <HAL_DMA_Init+0xb8>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a60      	ldr	r2, [pc, #384]	@ (80025ac <HAL_DMA_Init+0x1c8>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d036      	beq.n	800249c <HAL_DMA_Init+0xb8>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a5f      	ldr	r2, [pc, #380]	@ (80025b0 <HAL_DMA_Init+0x1cc>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d031      	beq.n	800249c <HAL_DMA_Init+0xb8>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a5d      	ldr	r2, [pc, #372]	@ (80025b4 <HAL_DMA_Init+0x1d0>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d02c      	beq.n	800249c <HAL_DMA_Init+0xb8>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a5c      	ldr	r2, [pc, #368]	@ (80025b8 <HAL_DMA_Init+0x1d4>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d027      	beq.n	800249c <HAL_DMA_Init+0xb8>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a5a      	ldr	r2, [pc, #360]	@ (80025bc <HAL_DMA_Init+0x1d8>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d022      	beq.n	800249c <HAL_DMA_Init+0xb8>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a59      	ldr	r2, [pc, #356]	@ (80025c0 <HAL_DMA_Init+0x1dc>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d01d      	beq.n	800249c <HAL_DMA_Init+0xb8>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a57      	ldr	r2, [pc, #348]	@ (80025c4 <HAL_DMA_Init+0x1e0>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d018      	beq.n	800249c <HAL_DMA_Init+0xb8>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a56      	ldr	r2, [pc, #344]	@ (80025c8 <HAL_DMA_Init+0x1e4>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d013      	beq.n	800249c <HAL_DMA_Init+0xb8>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a54      	ldr	r2, [pc, #336]	@ (80025cc <HAL_DMA_Init+0x1e8>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d00e      	beq.n	800249c <HAL_DMA_Init+0xb8>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a53      	ldr	r2, [pc, #332]	@ (80025d0 <HAL_DMA_Init+0x1ec>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d009      	beq.n	800249c <HAL_DMA_Init+0xb8>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a51      	ldr	r2, [pc, #324]	@ (80025d4 <HAL_DMA_Init+0x1f0>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d004      	beq.n	800249c <HAL_DMA_Init+0xb8>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a50      	ldr	r2, [pc, #320]	@ (80025d8 <HAL_DMA_Init+0x1f4>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d101      	bne.n	80024a0 <HAL_DMA_Init+0xbc>
 800249c:	2301      	movs	r3, #1
 800249e:	e000      	b.n	80024a2 <HAL_DMA_Init+0xbe>
 80024a0:	2300      	movs	r3, #0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	f000 813b 	beq.w	800271e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2202      	movs	r2, #2
 80024ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2200      	movs	r2, #0
 80024b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a37      	ldr	r2, [pc, #220]	@ (800259c <HAL_DMA_Init+0x1b8>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d04a      	beq.n	8002558 <HAL_DMA_Init+0x174>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a36      	ldr	r2, [pc, #216]	@ (80025a0 <HAL_DMA_Init+0x1bc>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d045      	beq.n	8002558 <HAL_DMA_Init+0x174>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a34      	ldr	r2, [pc, #208]	@ (80025a4 <HAL_DMA_Init+0x1c0>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d040      	beq.n	8002558 <HAL_DMA_Init+0x174>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a33      	ldr	r2, [pc, #204]	@ (80025a8 <HAL_DMA_Init+0x1c4>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d03b      	beq.n	8002558 <HAL_DMA_Init+0x174>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a31      	ldr	r2, [pc, #196]	@ (80025ac <HAL_DMA_Init+0x1c8>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d036      	beq.n	8002558 <HAL_DMA_Init+0x174>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a30      	ldr	r2, [pc, #192]	@ (80025b0 <HAL_DMA_Init+0x1cc>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d031      	beq.n	8002558 <HAL_DMA_Init+0x174>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a2e      	ldr	r2, [pc, #184]	@ (80025b4 <HAL_DMA_Init+0x1d0>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d02c      	beq.n	8002558 <HAL_DMA_Init+0x174>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a2d      	ldr	r2, [pc, #180]	@ (80025b8 <HAL_DMA_Init+0x1d4>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d027      	beq.n	8002558 <HAL_DMA_Init+0x174>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a2b      	ldr	r2, [pc, #172]	@ (80025bc <HAL_DMA_Init+0x1d8>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d022      	beq.n	8002558 <HAL_DMA_Init+0x174>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a2a      	ldr	r2, [pc, #168]	@ (80025c0 <HAL_DMA_Init+0x1dc>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d01d      	beq.n	8002558 <HAL_DMA_Init+0x174>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a28      	ldr	r2, [pc, #160]	@ (80025c4 <HAL_DMA_Init+0x1e0>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d018      	beq.n	8002558 <HAL_DMA_Init+0x174>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a27      	ldr	r2, [pc, #156]	@ (80025c8 <HAL_DMA_Init+0x1e4>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d013      	beq.n	8002558 <HAL_DMA_Init+0x174>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a25      	ldr	r2, [pc, #148]	@ (80025cc <HAL_DMA_Init+0x1e8>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d00e      	beq.n	8002558 <HAL_DMA_Init+0x174>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a24      	ldr	r2, [pc, #144]	@ (80025d0 <HAL_DMA_Init+0x1ec>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d009      	beq.n	8002558 <HAL_DMA_Init+0x174>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a22      	ldr	r2, [pc, #136]	@ (80025d4 <HAL_DMA_Init+0x1f0>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d004      	beq.n	8002558 <HAL_DMA_Init+0x174>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a21      	ldr	r2, [pc, #132]	@ (80025d8 <HAL_DMA_Init+0x1f4>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d108      	bne.n	800256a <HAL_DMA_Init+0x186>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f022 0201 	bic.w	r2, r2, #1
 8002566:	601a      	str	r2, [r3, #0]
 8002568:	e007      	b.n	800257a <HAL_DMA_Init+0x196>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f022 0201 	bic.w	r2, r2, #1
 8002578:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800257a:	e02f      	b.n	80025dc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800257c:	f7ff fe16 	bl	80021ac <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	2b05      	cmp	r3, #5
 8002588:	d928      	bls.n	80025dc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2220      	movs	r2, #32
 800258e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2203      	movs	r2, #3
 8002594:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e246      	b.n	8002a2a <HAL_DMA_Init+0x646>
 800259c:	40020010 	.word	0x40020010
 80025a0:	40020028 	.word	0x40020028
 80025a4:	40020040 	.word	0x40020040
 80025a8:	40020058 	.word	0x40020058
 80025ac:	40020070 	.word	0x40020070
 80025b0:	40020088 	.word	0x40020088
 80025b4:	400200a0 	.word	0x400200a0
 80025b8:	400200b8 	.word	0x400200b8
 80025bc:	40020410 	.word	0x40020410
 80025c0:	40020428 	.word	0x40020428
 80025c4:	40020440 	.word	0x40020440
 80025c8:	40020458 	.word	0x40020458
 80025cc:	40020470 	.word	0x40020470
 80025d0:	40020488 	.word	0x40020488
 80025d4:	400204a0 	.word	0x400204a0
 80025d8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0301 	and.w	r3, r3, #1
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d1c8      	bne.n	800257c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80025f2:	697a      	ldr	r2, [r7, #20]
 80025f4:	4b83      	ldr	r3, [pc, #524]	@ (8002804 <HAL_DMA_Init+0x420>)
 80025f6:	4013      	ands	r3, r2
 80025f8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002602:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	691b      	ldr	r3, [r3, #16]
 8002608:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800260e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	699b      	ldr	r3, [r3, #24]
 8002614:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800261a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6a1b      	ldr	r3, [r3, #32]
 8002620:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002622:	697a      	ldr	r2, [r7, #20]
 8002624:	4313      	orrs	r3, r2
 8002626:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800262c:	2b04      	cmp	r3, #4
 800262e:	d107      	bne.n	8002640 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002638:	4313      	orrs	r3, r2
 800263a:	697a      	ldr	r2, [r7, #20]
 800263c:	4313      	orrs	r3, r2
 800263e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002640:	4b71      	ldr	r3, [pc, #452]	@ (8002808 <HAL_DMA_Init+0x424>)
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	4b71      	ldr	r3, [pc, #452]	@ (800280c <HAL_DMA_Init+0x428>)
 8002646:	4013      	ands	r3, r2
 8002648:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800264c:	d328      	bcc.n	80026a0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	2b28      	cmp	r3, #40	@ 0x28
 8002654:	d903      	bls.n	800265e <HAL_DMA_Init+0x27a>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	2b2e      	cmp	r3, #46	@ 0x2e
 800265c:	d917      	bls.n	800268e <HAL_DMA_Init+0x2aa>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	2b3e      	cmp	r3, #62	@ 0x3e
 8002664:	d903      	bls.n	800266e <HAL_DMA_Init+0x28a>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	2b42      	cmp	r3, #66	@ 0x42
 800266c:	d90f      	bls.n	800268e <HAL_DMA_Init+0x2aa>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	2b46      	cmp	r3, #70	@ 0x46
 8002674:	d903      	bls.n	800267e <HAL_DMA_Init+0x29a>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	2b48      	cmp	r3, #72	@ 0x48
 800267c:	d907      	bls.n	800268e <HAL_DMA_Init+0x2aa>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	2b4e      	cmp	r3, #78	@ 0x4e
 8002684:	d905      	bls.n	8002692 <HAL_DMA_Init+0x2ae>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	2b52      	cmp	r3, #82	@ 0x52
 800268c:	d801      	bhi.n	8002692 <HAL_DMA_Init+0x2ae>
 800268e:	2301      	movs	r3, #1
 8002690:	e000      	b.n	8002694 <HAL_DMA_Init+0x2b0>
 8002692:	2300      	movs	r3, #0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d003      	beq.n	80026a0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800269e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	697a      	ldr	r2, [r7, #20]
 80026a6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	695b      	ldr	r3, [r3, #20]
 80026ae:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	f023 0307 	bic.w	r3, r3, #7
 80026b6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026bc:	697a      	ldr	r2, [r7, #20]
 80026be:	4313      	orrs	r3, r2
 80026c0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026c6:	2b04      	cmp	r3, #4
 80026c8:	d117      	bne.n	80026fa <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026ce:	697a      	ldr	r2, [r7, #20]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d00e      	beq.n	80026fa <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f002 fb33 	bl	8004d48 <DMA_CheckFifoParam>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d008      	beq.n	80026fa <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2240      	movs	r2, #64	@ 0x40
 80026ec:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2201      	movs	r2, #1
 80026f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e197      	b.n	8002a2a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	697a      	ldr	r2, [r7, #20]
 8002700:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f002 fa6e 	bl	8004be4 <DMA_CalcBaseAndBitshift>
 8002708:	4603      	mov	r3, r0
 800270a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002710:	f003 031f 	and.w	r3, r3, #31
 8002714:	223f      	movs	r2, #63	@ 0x3f
 8002716:	409a      	lsls	r2, r3
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	609a      	str	r2, [r3, #8]
 800271c:	e0cd      	b.n	80028ba <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a3b      	ldr	r2, [pc, #236]	@ (8002810 <HAL_DMA_Init+0x42c>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d022      	beq.n	800276e <HAL_DMA_Init+0x38a>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a39      	ldr	r2, [pc, #228]	@ (8002814 <HAL_DMA_Init+0x430>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d01d      	beq.n	800276e <HAL_DMA_Init+0x38a>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a38      	ldr	r2, [pc, #224]	@ (8002818 <HAL_DMA_Init+0x434>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d018      	beq.n	800276e <HAL_DMA_Init+0x38a>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a36      	ldr	r2, [pc, #216]	@ (800281c <HAL_DMA_Init+0x438>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d013      	beq.n	800276e <HAL_DMA_Init+0x38a>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a35      	ldr	r2, [pc, #212]	@ (8002820 <HAL_DMA_Init+0x43c>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d00e      	beq.n	800276e <HAL_DMA_Init+0x38a>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a33      	ldr	r2, [pc, #204]	@ (8002824 <HAL_DMA_Init+0x440>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d009      	beq.n	800276e <HAL_DMA_Init+0x38a>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a32      	ldr	r2, [pc, #200]	@ (8002828 <HAL_DMA_Init+0x444>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d004      	beq.n	800276e <HAL_DMA_Init+0x38a>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a30      	ldr	r2, [pc, #192]	@ (800282c <HAL_DMA_Init+0x448>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d101      	bne.n	8002772 <HAL_DMA_Init+0x38e>
 800276e:	2301      	movs	r3, #1
 8002770:	e000      	b.n	8002774 <HAL_DMA_Init+0x390>
 8002772:	2300      	movs	r3, #0
 8002774:	2b00      	cmp	r3, #0
 8002776:	f000 8097 	beq.w	80028a8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a24      	ldr	r2, [pc, #144]	@ (8002810 <HAL_DMA_Init+0x42c>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d021      	beq.n	80027c8 <HAL_DMA_Init+0x3e4>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a22      	ldr	r2, [pc, #136]	@ (8002814 <HAL_DMA_Init+0x430>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d01c      	beq.n	80027c8 <HAL_DMA_Init+0x3e4>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a21      	ldr	r2, [pc, #132]	@ (8002818 <HAL_DMA_Init+0x434>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d017      	beq.n	80027c8 <HAL_DMA_Init+0x3e4>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a1f      	ldr	r2, [pc, #124]	@ (800281c <HAL_DMA_Init+0x438>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d012      	beq.n	80027c8 <HAL_DMA_Init+0x3e4>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a1e      	ldr	r2, [pc, #120]	@ (8002820 <HAL_DMA_Init+0x43c>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d00d      	beq.n	80027c8 <HAL_DMA_Init+0x3e4>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a1c      	ldr	r2, [pc, #112]	@ (8002824 <HAL_DMA_Init+0x440>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d008      	beq.n	80027c8 <HAL_DMA_Init+0x3e4>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a1b      	ldr	r2, [pc, #108]	@ (8002828 <HAL_DMA_Init+0x444>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d003      	beq.n	80027c8 <HAL_DMA_Init+0x3e4>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a19      	ldr	r2, [pc, #100]	@ (800282c <HAL_DMA_Init+0x448>)
 80027c6:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2202      	movs	r2, #2
 80027cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80027e0:	697a      	ldr	r2, [r7, #20]
 80027e2:	4b13      	ldr	r3, [pc, #76]	@ (8002830 <HAL_DMA_Init+0x44c>)
 80027e4:	4013      	ands	r3, r2
 80027e6:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	2b40      	cmp	r3, #64	@ 0x40
 80027ee:	d021      	beq.n	8002834 <HAL_DMA_Init+0x450>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	2b80      	cmp	r3, #128	@ 0x80
 80027f6:	d102      	bne.n	80027fe <HAL_DMA_Init+0x41a>
 80027f8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80027fc:	e01b      	b.n	8002836 <HAL_DMA_Init+0x452>
 80027fe:	2300      	movs	r3, #0
 8002800:	e019      	b.n	8002836 <HAL_DMA_Init+0x452>
 8002802:	bf00      	nop
 8002804:	fe10803f 	.word	0xfe10803f
 8002808:	5c001000 	.word	0x5c001000
 800280c:	ffff0000 	.word	0xffff0000
 8002810:	58025408 	.word	0x58025408
 8002814:	5802541c 	.word	0x5802541c
 8002818:	58025430 	.word	0x58025430
 800281c:	58025444 	.word	0x58025444
 8002820:	58025458 	.word	0x58025458
 8002824:	5802546c 	.word	0x5802546c
 8002828:	58025480 	.word	0x58025480
 800282c:	58025494 	.word	0x58025494
 8002830:	fffe000f 	.word	0xfffe000f
 8002834:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	68d2      	ldr	r2, [r2, #12]
 800283a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800283c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	691b      	ldr	r3, [r3, #16]
 8002842:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002844:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	695b      	ldr	r3, [r3, #20]
 800284a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800284c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	699b      	ldr	r3, [r3, #24]
 8002852:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002854:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	69db      	ldr	r3, [r3, #28]
 800285a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800285c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6a1b      	ldr	r3, [r3, #32]
 8002862:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002864:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002866:	697a      	ldr	r2, [r7, #20]
 8002868:	4313      	orrs	r3, r2
 800286a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	697a      	ldr	r2, [r7, #20]
 8002872:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	461a      	mov	r2, r3
 800287a:	4b6e      	ldr	r3, [pc, #440]	@ (8002a34 <HAL_DMA_Init+0x650>)
 800287c:	4413      	add	r3, r2
 800287e:	4a6e      	ldr	r2, [pc, #440]	@ (8002a38 <HAL_DMA_Init+0x654>)
 8002880:	fba2 2303 	umull	r2, r3, r2, r3
 8002884:	091b      	lsrs	r3, r3, #4
 8002886:	009a      	lsls	r2, r3, #2
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f002 f9a9 	bl	8004be4 <DMA_CalcBaseAndBitshift>
 8002892:	4603      	mov	r3, r0
 8002894:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800289a:	f003 031f 	and.w	r3, r3, #31
 800289e:	2201      	movs	r2, #1
 80028a0:	409a      	lsls	r2, r3
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	605a      	str	r2, [r3, #4]
 80028a6:	e008      	b.n	80028ba <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2240      	movs	r2, #64	@ 0x40
 80028ac:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2203      	movs	r2, #3
 80028b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e0b7      	b.n	8002a2a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a5f      	ldr	r2, [pc, #380]	@ (8002a3c <HAL_DMA_Init+0x658>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d072      	beq.n	80029aa <HAL_DMA_Init+0x5c6>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a5d      	ldr	r2, [pc, #372]	@ (8002a40 <HAL_DMA_Init+0x65c>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d06d      	beq.n	80029aa <HAL_DMA_Init+0x5c6>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a5c      	ldr	r2, [pc, #368]	@ (8002a44 <HAL_DMA_Init+0x660>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d068      	beq.n	80029aa <HAL_DMA_Init+0x5c6>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a5a      	ldr	r2, [pc, #360]	@ (8002a48 <HAL_DMA_Init+0x664>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d063      	beq.n	80029aa <HAL_DMA_Init+0x5c6>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a59      	ldr	r2, [pc, #356]	@ (8002a4c <HAL_DMA_Init+0x668>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d05e      	beq.n	80029aa <HAL_DMA_Init+0x5c6>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a57      	ldr	r2, [pc, #348]	@ (8002a50 <HAL_DMA_Init+0x66c>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d059      	beq.n	80029aa <HAL_DMA_Init+0x5c6>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a56      	ldr	r2, [pc, #344]	@ (8002a54 <HAL_DMA_Init+0x670>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d054      	beq.n	80029aa <HAL_DMA_Init+0x5c6>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a54      	ldr	r2, [pc, #336]	@ (8002a58 <HAL_DMA_Init+0x674>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d04f      	beq.n	80029aa <HAL_DMA_Init+0x5c6>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a53      	ldr	r2, [pc, #332]	@ (8002a5c <HAL_DMA_Init+0x678>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d04a      	beq.n	80029aa <HAL_DMA_Init+0x5c6>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a51      	ldr	r2, [pc, #324]	@ (8002a60 <HAL_DMA_Init+0x67c>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d045      	beq.n	80029aa <HAL_DMA_Init+0x5c6>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a50      	ldr	r2, [pc, #320]	@ (8002a64 <HAL_DMA_Init+0x680>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d040      	beq.n	80029aa <HAL_DMA_Init+0x5c6>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a4e      	ldr	r2, [pc, #312]	@ (8002a68 <HAL_DMA_Init+0x684>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d03b      	beq.n	80029aa <HAL_DMA_Init+0x5c6>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a4d      	ldr	r2, [pc, #308]	@ (8002a6c <HAL_DMA_Init+0x688>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d036      	beq.n	80029aa <HAL_DMA_Init+0x5c6>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a4b      	ldr	r2, [pc, #300]	@ (8002a70 <HAL_DMA_Init+0x68c>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d031      	beq.n	80029aa <HAL_DMA_Init+0x5c6>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a4a      	ldr	r2, [pc, #296]	@ (8002a74 <HAL_DMA_Init+0x690>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d02c      	beq.n	80029aa <HAL_DMA_Init+0x5c6>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a48      	ldr	r2, [pc, #288]	@ (8002a78 <HAL_DMA_Init+0x694>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d027      	beq.n	80029aa <HAL_DMA_Init+0x5c6>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a47      	ldr	r2, [pc, #284]	@ (8002a7c <HAL_DMA_Init+0x698>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d022      	beq.n	80029aa <HAL_DMA_Init+0x5c6>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a45      	ldr	r2, [pc, #276]	@ (8002a80 <HAL_DMA_Init+0x69c>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d01d      	beq.n	80029aa <HAL_DMA_Init+0x5c6>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a44      	ldr	r2, [pc, #272]	@ (8002a84 <HAL_DMA_Init+0x6a0>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d018      	beq.n	80029aa <HAL_DMA_Init+0x5c6>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a42      	ldr	r2, [pc, #264]	@ (8002a88 <HAL_DMA_Init+0x6a4>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d013      	beq.n	80029aa <HAL_DMA_Init+0x5c6>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a41      	ldr	r2, [pc, #260]	@ (8002a8c <HAL_DMA_Init+0x6a8>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d00e      	beq.n	80029aa <HAL_DMA_Init+0x5c6>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a3f      	ldr	r2, [pc, #252]	@ (8002a90 <HAL_DMA_Init+0x6ac>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d009      	beq.n	80029aa <HAL_DMA_Init+0x5c6>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a3e      	ldr	r2, [pc, #248]	@ (8002a94 <HAL_DMA_Init+0x6b0>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d004      	beq.n	80029aa <HAL_DMA_Init+0x5c6>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a3c      	ldr	r2, [pc, #240]	@ (8002a98 <HAL_DMA_Init+0x6b4>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d101      	bne.n	80029ae <HAL_DMA_Init+0x5ca>
 80029aa:	2301      	movs	r3, #1
 80029ac:	e000      	b.n	80029b0 <HAL_DMA_Init+0x5cc>
 80029ae:	2300      	movs	r3, #0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d032      	beq.n	8002a1a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f002 fa43 	bl	8004e40 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	2b80      	cmp	r3, #128	@ 0x80
 80029c0:	d102      	bne.n	80029c8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2200      	movs	r2, #0
 80029c6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	685a      	ldr	r2, [r3, #4]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029d0:	b2d2      	uxtb	r2, r2
 80029d2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80029dc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d010      	beq.n	8002a08 <HAL_DMA_Init+0x624>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	2b08      	cmp	r3, #8
 80029ec:	d80c      	bhi.n	8002a08 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f002 fac0 	bl	8004f74 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80029f8:	2200      	movs	r2, #0
 80029fa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002a04:	605a      	str	r2, [r3, #4]
 8002a06:	e008      	b.n	8002a1a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002a28:	2300      	movs	r3, #0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3718      	adds	r7, #24
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	a7fdabf8 	.word	0xa7fdabf8
 8002a38:	cccccccd 	.word	0xcccccccd
 8002a3c:	40020010 	.word	0x40020010
 8002a40:	40020028 	.word	0x40020028
 8002a44:	40020040 	.word	0x40020040
 8002a48:	40020058 	.word	0x40020058
 8002a4c:	40020070 	.word	0x40020070
 8002a50:	40020088 	.word	0x40020088
 8002a54:	400200a0 	.word	0x400200a0
 8002a58:	400200b8 	.word	0x400200b8
 8002a5c:	40020410 	.word	0x40020410
 8002a60:	40020428 	.word	0x40020428
 8002a64:	40020440 	.word	0x40020440
 8002a68:	40020458 	.word	0x40020458
 8002a6c:	40020470 	.word	0x40020470
 8002a70:	40020488 	.word	0x40020488
 8002a74:	400204a0 	.word	0x400204a0
 8002a78:	400204b8 	.word	0x400204b8
 8002a7c:	58025408 	.word	0x58025408
 8002a80:	5802541c 	.word	0x5802541c
 8002a84:	58025430 	.word	0x58025430
 8002a88:	58025444 	.word	0x58025444
 8002a8c:	58025458 	.word	0x58025458
 8002a90:	5802546c 	.word	0x5802546c
 8002a94:	58025480 	.word	0x58025480
 8002a98:	58025494 	.word	0x58025494

08002a9c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b086      	sub	sp, #24
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	60f8      	str	r0, [r7, #12]
 8002aa4:	60b9      	str	r1, [r7, #8]
 8002aa6:	607a      	str	r2, [r7, #4]
 8002aa8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d101      	bne.n	8002ab8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e226      	b.n	8002f06 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d101      	bne.n	8002ac6 <HAL_DMA_Start_IT+0x2a>
 8002ac2:	2302      	movs	r3, #2
 8002ac4:	e21f      	b.n	8002f06 <HAL_DMA_Start_IT+0x46a>
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2201      	movs	r2, #1
 8002aca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	f040 820a 	bne.w	8002ef0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2202      	movs	r2, #2
 8002ae0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a68      	ldr	r2, [pc, #416]	@ (8002c90 <HAL_DMA_Start_IT+0x1f4>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d04a      	beq.n	8002b8a <HAL_DMA_Start_IT+0xee>
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a66      	ldr	r2, [pc, #408]	@ (8002c94 <HAL_DMA_Start_IT+0x1f8>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d045      	beq.n	8002b8a <HAL_DMA_Start_IT+0xee>
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a65      	ldr	r2, [pc, #404]	@ (8002c98 <HAL_DMA_Start_IT+0x1fc>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d040      	beq.n	8002b8a <HAL_DMA_Start_IT+0xee>
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a63      	ldr	r2, [pc, #396]	@ (8002c9c <HAL_DMA_Start_IT+0x200>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d03b      	beq.n	8002b8a <HAL_DMA_Start_IT+0xee>
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a62      	ldr	r2, [pc, #392]	@ (8002ca0 <HAL_DMA_Start_IT+0x204>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d036      	beq.n	8002b8a <HAL_DMA_Start_IT+0xee>
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a60      	ldr	r2, [pc, #384]	@ (8002ca4 <HAL_DMA_Start_IT+0x208>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d031      	beq.n	8002b8a <HAL_DMA_Start_IT+0xee>
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a5f      	ldr	r2, [pc, #380]	@ (8002ca8 <HAL_DMA_Start_IT+0x20c>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d02c      	beq.n	8002b8a <HAL_DMA_Start_IT+0xee>
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a5d      	ldr	r2, [pc, #372]	@ (8002cac <HAL_DMA_Start_IT+0x210>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d027      	beq.n	8002b8a <HAL_DMA_Start_IT+0xee>
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a5c      	ldr	r2, [pc, #368]	@ (8002cb0 <HAL_DMA_Start_IT+0x214>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d022      	beq.n	8002b8a <HAL_DMA_Start_IT+0xee>
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a5a      	ldr	r2, [pc, #360]	@ (8002cb4 <HAL_DMA_Start_IT+0x218>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d01d      	beq.n	8002b8a <HAL_DMA_Start_IT+0xee>
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a59      	ldr	r2, [pc, #356]	@ (8002cb8 <HAL_DMA_Start_IT+0x21c>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d018      	beq.n	8002b8a <HAL_DMA_Start_IT+0xee>
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a57      	ldr	r2, [pc, #348]	@ (8002cbc <HAL_DMA_Start_IT+0x220>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d013      	beq.n	8002b8a <HAL_DMA_Start_IT+0xee>
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a56      	ldr	r2, [pc, #344]	@ (8002cc0 <HAL_DMA_Start_IT+0x224>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d00e      	beq.n	8002b8a <HAL_DMA_Start_IT+0xee>
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a54      	ldr	r2, [pc, #336]	@ (8002cc4 <HAL_DMA_Start_IT+0x228>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d009      	beq.n	8002b8a <HAL_DMA_Start_IT+0xee>
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a53      	ldr	r2, [pc, #332]	@ (8002cc8 <HAL_DMA_Start_IT+0x22c>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d004      	beq.n	8002b8a <HAL_DMA_Start_IT+0xee>
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a51      	ldr	r2, [pc, #324]	@ (8002ccc <HAL_DMA_Start_IT+0x230>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d108      	bne.n	8002b9c <HAL_DMA_Start_IT+0x100>
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f022 0201 	bic.w	r2, r2, #1
 8002b98:	601a      	str	r2, [r3, #0]
 8002b9a:	e007      	b.n	8002bac <HAL_DMA_Start_IT+0x110>
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f022 0201 	bic.w	r2, r2, #1
 8002baa:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	68b9      	ldr	r1, [r7, #8]
 8002bb2:	68f8      	ldr	r0, [r7, #12]
 8002bb4:	f001 fe6a 	bl	800488c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a34      	ldr	r2, [pc, #208]	@ (8002c90 <HAL_DMA_Start_IT+0x1f4>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d04a      	beq.n	8002c58 <HAL_DMA_Start_IT+0x1bc>
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a33      	ldr	r2, [pc, #204]	@ (8002c94 <HAL_DMA_Start_IT+0x1f8>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d045      	beq.n	8002c58 <HAL_DMA_Start_IT+0x1bc>
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a31      	ldr	r2, [pc, #196]	@ (8002c98 <HAL_DMA_Start_IT+0x1fc>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d040      	beq.n	8002c58 <HAL_DMA_Start_IT+0x1bc>
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a30      	ldr	r2, [pc, #192]	@ (8002c9c <HAL_DMA_Start_IT+0x200>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d03b      	beq.n	8002c58 <HAL_DMA_Start_IT+0x1bc>
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a2e      	ldr	r2, [pc, #184]	@ (8002ca0 <HAL_DMA_Start_IT+0x204>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d036      	beq.n	8002c58 <HAL_DMA_Start_IT+0x1bc>
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a2d      	ldr	r2, [pc, #180]	@ (8002ca4 <HAL_DMA_Start_IT+0x208>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d031      	beq.n	8002c58 <HAL_DMA_Start_IT+0x1bc>
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a2b      	ldr	r2, [pc, #172]	@ (8002ca8 <HAL_DMA_Start_IT+0x20c>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d02c      	beq.n	8002c58 <HAL_DMA_Start_IT+0x1bc>
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a2a      	ldr	r2, [pc, #168]	@ (8002cac <HAL_DMA_Start_IT+0x210>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d027      	beq.n	8002c58 <HAL_DMA_Start_IT+0x1bc>
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a28      	ldr	r2, [pc, #160]	@ (8002cb0 <HAL_DMA_Start_IT+0x214>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d022      	beq.n	8002c58 <HAL_DMA_Start_IT+0x1bc>
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a27      	ldr	r2, [pc, #156]	@ (8002cb4 <HAL_DMA_Start_IT+0x218>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d01d      	beq.n	8002c58 <HAL_DMA_Start_IT+0x1bc>
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a25      	ldr	r2, [pc, #148]	@ (8002cb8 <HAL_DMA_Start_IT+0x21c>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d018      	beq.n	8002c58 <HAL_DMA_Start_IT+0x1bc>
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a24      	ldr	r2, [pc, #144]	@ (8002cbc <HAL_DMA_Start_IT+0x220>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d013      	beq.n	8002c58 <HAL_DMA_Start_IT+0x1bc>
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a22      	ldr	r2, [pc, #136]	@ (8002cc0 <HAL_DMA_Start_IT+0x224>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d00e      	beq.n	8002c58 <HAL_DMA_Start_IT+0x1bc>
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a21      	ldr	r2, [pc, #132]	@ (8002cc4 <HAL_DMA_Start_IT+0x228>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d009      	beq.n	8002c58 <HAL_DMA_Start_IT+0x1bc>
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a1f      	ldr	r2, [pc, #124]	@ (8002cc8 <HAL_DMA_Start_IT+0x22c>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d004      	beq.n	8002c58 <HAL_DMA_Start_IT+0x1bc>
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a1e      	ldr	r2, [pc, #120]	@ (8002ccc <HAL_DMA_Start_IT+0x230>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d101      	bne.n	8002c5c <HAL_DMA_Start_IT+0x1c0>
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e000      	b.n	8002c5e <HAL_DMA_Start_IT+0x1c2>
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d036      	beq.n	8002cd0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f023 021e 	bic.w	r2, r3, #30
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f042 0216 	orr.w	r2, r2, #22
 8002c74:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d03e      	beq.n	8002cfc <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f042 0208 	orr.w	r2, r2, #8
 8002c8c:	601a      	str	r2, [r3, #0]
 8002c8e:	e035      	b.n	8002cfc <HAL_DMA_Start_IT+0x260>
 8002c90:	40020010 	.word	0x40020010
 8002c94:	40020028 	.word	0x40020028
 8002c98:	40020040 	.word	0x40020040
 8002c9c:	40020058 	.word	0x40020058
 8002ca0:	40020070 	.word	0x40020070
 8002ca4:	40020088 	.word	0x40020088
 8002ca8:	400200a0 	.word	0x400200a0
 8002cac:	400200b8 	.word	0x400200b8
 8002cb0:	40020410 	.word	0x40020410
 8002cb4:	40020428 	.word	0x40020428
 8002cb8:	40020440 	.word	0x40020440
 8002cbc:	40020458 	.word	0x40020458
 8002cc0:	40020470 	.word	0x40020470
 8002cc4:	40020488 	.word	0x40020488
 8002cc8:	400204a0 	.word	0x400204a0
 8002ccc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f023 020e 	bic.w	r2, r3, #14
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f042 020a 	orr.w	r2, r2, #10
 8002ce2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d007      	beq.n	8002cfc <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f042 0204 	orr.w	r2, r2, #4
 8002cfa:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a83      	ldr	r2, [pc, #524]	@ (8002f10 <HAL_DMA_Start_IT+0x474>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d072      	beq.n	8002dec <HAL_DMA_Start_IT+0x350>
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a82      	ldr	r2, [pc, #520]	@ (8002f14 <HAL_DMA_Start_IT+0x478>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d06d      	beq.n	8002dec <HAL_DMA_Start_IT+0x350>
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a80      	ldr	r2, [pc, #512]	@ (8002f18 <HAL_DMA_Start_IT+0x47c>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d068      	beq.n	8002dec <HAL_DMA_Start_IT+0x350>
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a7f      	ldr	r2, [pc, #508]	@ (8002f1c <HAL_DMA_Start_IT+0x480>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d063      	beq.n	8002dec <HAL_DMA_Start_IT+0x350>
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a7d      	ldr	r2, [pc, #500]	@ (8002f20 <HAL_DMA_Start_IT+0x484>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d05e      	beq.n	8002dec <HAL_DMA_Start_IT+0x350>
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a7c      	ldr	r2, [pc, #496]	@ (8002f24 <HAL_DMA_Start_IT+0x488>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d059      	beq.n	8002dec <HAL_DMA_Start_IT+0x350>
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a7a      	ldr	r2, [pc, #488]	@ (8002f28 <HAL_DMA_Start_IT+0x48c>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d054      	beq.n	8002dec <HAL_DMA_Start_IT+0x350>
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a79      	ldr	r2, [pc, #484]	@ (8002f2c <HAL_DMA_Start_IT+0x490>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d04f      	beq.n	8002dec <HAL_DMA_Start_IT+0x350>
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a77      	ldr	r2, [pc, #476]	@ (8002f30 <HAL_DMA_Start_IT+0x494>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d04a      	beq.n	8002dec <HAL_DMA_Start_IT+0x350>
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a76      	ldr	r2, [pc, #472]	@ (8002f34 <HAL_DMA_Start_IT+0x498>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d045      	beq.n	8002dec <HAL_DMA_Start_IT+0x350>
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a74      	ldr	r2, [pc, #464]	@ (8002f38 <HAL_DMA_Start_IT+0x49c>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d040      	beq.n	8002dec <HAL_DMA_Start_IT+0x350>
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a73      	ldr	r2, [pc, #460]	@ (8002f3c <HAL_DMA_Start_IT+0x4a0>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d03b      	beq.n	8002dec <HAL_DMA_Start_IT+0x350>
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a71      	ldr	r2, [pc, #452]	@ (8002f40 <HAL_DMA_Start_IT+0x4a4>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d036      	beq.n	8002dec <HAL_DMA_Start_IT+0x350>
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a70      	ldr	r2, [pc, #448]	@ (8002f44 <HAL_DMA_Start_IT+0x4a8>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d031      	beq.n	8002dec <HAL_DMA_Start_IT+0x350>
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a6e      	ldr	r2, [pc, #440]	@ (8002f48 <HAL_DMA_Start_IT+0x4ac>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d02c      	beq.n	8002dec <HAL_DMA_Start_IT+0x350>
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a6d      	ldr	r2, [pc, #436]	@ (8002f4c <HAL_DMA_Start_IT+0x4b0>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d027      	beq.n	8002dec <HAL_DMA_Start_IT+0x350>
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a6b      	ldr	r2, [pc, #428]	@ (8002f50 <HAL_DMA_Start_IT+0x4b4>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d022      	beq.n	8002dec <HAL_DMA_Start_IT+0x350>
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a6a      	ldr	r2, [pc, #424]	@ (8002f54 <HAL_DMA_Start_IT+0x4b8>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d01d      	beq.n	8002dec <HAL_DMA_Start_IT+0x350>
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a68      	ldr	r2, [pc, #416]	@ (8002f58 <HAL_DMA_Start_IT+0x4bc>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d018      	beq.n	8002dec <HAL_DMA_Start_IT+0x350>
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a67      	ldr	r2, [pc, #412]	@ (8002f5c <HAL_DMA_Start_IT+0x4c0>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d013      	beq.n	8002dec <HAL_DMA_Start_IT+0x350>
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a65      	ldr	r2, [pc, #404]	@ (8002f60 <HAL_DMA_Start_IT+0x4c4>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d00e      	beq.n	8002dec <HAL_DMA_Start_IT+0x350>
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a64      	ldr	r2, [pc, #400]	@ (8002f64 <HAL_DMA_Start_IT+0x4c8>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d009      	beq.n	8002dec <HAL_DMA_Start_IT+0x350>
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a62      	ldr	r2, [pc, #392]	@ (8002f68 <HAL_DMA_Start_IT+0x4cc>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d004      	beq.n	8002dec <HAL_DMA_Start_IT+0x350>
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a61      	ldr	r2, [pc, #388]	@ (8002f6c <HAL_DMA_Start_IT+0x4d0>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d101      	bne.n	8002df0 <HAL_DMA_Start_IT+0x354>
 8002dec:	2301      	movs	r3, #1
 8002dee:	e000      	b.n	8002df2 <HAL_DMA_Start_IT+0x356>
 8002df0:	2300      	movs	r3, #0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d01a      	beq.n	8002e2c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d007      	beq.n	8002e14 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e0e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e12:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d007      	beq.n	8002e2c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e26:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e2a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a37      	ldr	r2, [pc, #220]	@ (8002f10 <HAL_DMA_Start_IT+0x474>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d04a      	beq.n	8002ecc <HAL_DMA_Start_IT+0x430>
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a36      	ldr	r2, [pc, #216]	@ (8002f14 <HAL_DMA_Start_IT+0x478>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d045      	beq.n	8002ecc <HAL_DMA_Start_IT+0x430>
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a34      	ldr	r2, [pc, #208]	@ (8002f18 <HAL_DMA_Start_IT+0x47c>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d040      	beq.n	8002ecc <HAL_DMA_Start_IT+0x430>
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a33      	ldr	r2, [pc, #204]	@ (8002f1c <HAL_DMA_Start_IT+0x480>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d03b      	beq.n	8002ecc <HAL_DMA_Start_IT+0x430>
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a31      	ldr	r2, [pc, #196]	@ (8002f20 <HAL_DMA_Start_IT+0x484>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d036      	beq.n	8002ecc <HAL_DMA_Start_IT+0x430>
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a30      	ldr	r2, [pc, #192]	@ (8002f24 <HAL_DMA_Start_IT+0x488>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d031      	beq.n	8002ecc <HAL_DMA_Start_IT+0x430>
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a2e      	ldr	r2, [pc, #184]	@ (8002f28 <HAL_DMA_Start_IT+0x48c>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d02c      	beq.n	8002ecc <HAL_DMA_Start_IT+0x430>
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a2d      	ldr	r2, [pc, #180]	@ (8002f2c <HAL_DMA_Start_IT+0x490>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d027      	beq.n	8002ecc <HAL_DMA_Start_IT+0x430>
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a2b      	ldr	r2, [pc, #172]	@ (8002f30 <HAL_DMA_Start_IT+0x494>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d022      	beq.n	8002ecc <HAL_DMA_Start_IT+0x430>
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a2a      	ldr	r2, [pc, #168]	@ (8002f34 <HAL_DMA_Start_IT+0x498>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d01d      	beq.n	8002ecc <HAL_DMA_Start_IT+0x430>
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a28      	ldr	r2, [pc, #160]	@ (8002f38 <HAL_DMA_Start_IT+0x49c>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d018      	beq.n	8002ecc <HAL_DMA_Start_IT+0x430>
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a27      	ldr	r2, [pc, #156]	@ (8002f3c <HAL_DMA_Start_IT+0x4a0>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d013      	beq.n	8002ecc <HAL_DMA_Start_IT+0x430>
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a25      	ldr	r2, [pc, #148]	@ (8002f40 <HAL_DMA_Start_IT+0x4a4>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d00e      	beq.n	8002ecc <HAL_DMA_Start_IT+0x430>
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a24      	ldr	r2, [pc, #144]	@ (8002f44 <HAL_DMA_Start_IT+0x4a8>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d009      	beq.n	8002ecc <HAL_DMA_Start_IT+0x430>
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a22      	ldr	r2, [pc, #136]	@ (8002f48 <HAL_DMA_Start_IT+0x4ac>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d004      	beq.n	8002ecc <HAL_DMA_Start_IT+0x430>
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a21      	ldr	r2, [pc, #132]	@ (8002f4c <HAL_DMA_Start_IT+0x4b0>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d108      	bne.n	8002ede <HAL_DMA_Start_IT+0x442>
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f042 0201 	orr.w	r2, r2, #1
 8002eda:	601a      	str	r2, [r3, #0]
 8002edc:	e012      	b.n	8002f04 <HAL_DMA_Start_IT+0x468>
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f042 0201 	orr.w	r2, r2, #1
 8002eec:	601a      	str	r2, [r3, #0]
 8002eee:	e009      	b.n	8002f04 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002ef6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2200      	movs	r2, #0
 8002efc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002f04:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3718      	adds	r7, #24
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	40020010 	.word	0x40020010
 8002f14:	40020028 	.word	0x40020028
 8002f18:	40020040 	.word	0x40020040
 8002f1c:	40020058 	.word	0x40020058
 8002f20:	40020070 	.word	0x40020070
 8002f24:	40020088 	.word	0x40020088
 8002f28:	400200a0 	.word	0x400200a0
 8002f2c:	400200b8 	.word	0x400200b8
 8002f30:	40020410 	.word	0x40020410
 8002f34:	40020428 	.word	0x40020428
 8002f38:	40020440 	.word	0x40020440
 8002f3c:	40020458 	.word	0x40020458
 8002f40:	40020470 	.word	0x40020470
 8002f44:	40020488 	.word	0x40020488
 8002f48:	400204a0 	.word	0x400204a0
 8002f4c:	400204b8 	.word	0x400204b8
 8002f50:	58025408 	.word	0x58025408
 8002f54:	5802541c 	.word	0x5802541c
 8002f58:	58025430 	.word	0x58025430
 8002f5c:	58025444 	.word	0x58025444
 8002f60:	58025458 	.word	0x58025458
 8002f64:	5802546c 	.word	0x5802546c
 8002f68:	58025480 	.word	0x58025480
 8002f6c:	58025494 	.word	0x58025494

08002f70 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b086      	sub	sp, #24
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002f78:	f7ff f918 	bl	80021ac <HAL_GetTick>
 8002f7c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d101      	bne.n	8002f88 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e2dc      	b.n	8003542 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d008      	beq.n	8002fa6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2280      	movs	r2, #128	@ 0x80
 8002f98:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e2cd      	b.n	8003542 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a76      	ldr	r2, [pc, #472]	@ (8003184 <HAL_DMA_Abort+0x214>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d04a      	beq.n	8003046 <HAL_DMA_Abort+0xd6>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a74      	ldr	r2, [pc, #464]	@ (8003188 <HAL_DMA_Abort+0x218>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d045      	beq.n	8003046 <HAL_DMA_Abort+0xd6>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a73      	ldr	r2, [pc, #460]	@ (800318c <HAL_DMA_Abort+0x21c>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d040      	beq.n	8003046 <HAL_DMA_Abort+0xd6>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a71      	ldr	r2, [pc, #452]	@ (8003190 <HAL_DMA_Abort+0x220>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d03b      	beq.n	8003046 <HAL_DMA_Abort+0xd6>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a70      	ldr	r2, [pc, #448]	@ (8003194 <HAL_DMA_Abort+0x224>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d036      	beq.n	8003046 <HAL_DMA_Abort+0xd6>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a6e      	ldr	r2, [pc, #440]	@ (8003198 <HAL_DMA_Abort+0x228>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d031      	beq.n	8003046 <HAL_DMA_Abort+0xd6>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a6d      	ldr	r2, [pc, #436]	@ (800319c <HAL_DMA_Abort+0x22c>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d02c      	beq.n	8003046 <HAL_DMA_Abort+0xd6>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a6b      	ldr	r2, [pc, #428]	@ (80031a0 <HAL_DMA_Abort+0x230>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d027      	beq.n	8003046 <HAL_DMA_Abort+0xd6>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a6a      	ldr	r2, [pc, #424]	@ (80031a4 <HAL_DMA_Abort+0x234>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d022      	beq.n	8003046 <HAL_DMA_Abort+0xd6>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a68      	ldr	r2, [pc, #416]	@ (80031a8 <HAL_DMA_Abort+0x238>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d01d      	beq.n	8003046 <HAL_DMA_Abort+0xd6>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a67      	ldr	r2, [pc, #412]	@ (80031ac <HAL_DMA_Abort+0x23c>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d018      	beq.n	8003046 <HAL_DMA_Abort+0xd6>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a65      	ldr	r2, [pc, #404]	@ (80031b0 <HAL_DMA_Abort+0x240>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d013      	beq.n	8003046 <HAL_DMA_Abort+0xd6>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a64      	ldr	r2, [pc, #400]	@ (80031b4 <HAL_DMA_Abort+0x244>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d00e      	beq.n	8003046 <HAL_DMA_Abort+0xd6>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a62      	ldr	r2, [pc, #392]	@ (80031b8 <HAL_DMA_Abort+0x248>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d009      	beq.n	8003046 <HAL_DMA_Abort+0xd6>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a61      	ldr	r2, [pc, #388]	@ (80031bc <HAL_DMA_Abort+0x24c>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d004      	beq.n	8003046 <HAL_DMA_Abort+0xd6>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a5f      	ldr	r2, [pc, #380]	@ (80031c0 <HAL_DMA_Abort+0x250>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d101      	bne.n	800304a <HAL_DMA_Abort+0xda>
 8003046:	2301      	movs	r3, #1
 8003048:	e000      	b.n	800304c <HAL_DMA_Abort+0xdc>
 800304a:	2300      	movs	r3, #0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d013      	beq.n	8003078 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f022 021e 	bic.w	r2, r2, #30
 800305e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	695a      	ldr	r2, [r3, #20]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800306e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	617b      	str	r3, [r7, #20]
 8003076:	e00a      	b.n	800308e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f022 020e 	bic.w	r2, r2, #14
 8003086:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a3c      	ldr	r2, [pc, #240]	@ (8003184 <HAL_DMA_Abort+0x214>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d072      	beq.n	800317e <HAL_DMA_Abort+0x20e>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a3a      	ldr	r2, [pc, #232]	@ (8003188 <HAL_DMA_Abort+0x218>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d06d      	beq.n	800317e <HAL_DMA_Abort+0x20e>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a39      	ldr	r2, [pc, #228]	@ (800318c <HAL_DMA_Abort+0x21c>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d068      	beq.n	800317e <HAL_DMA_Abort+0x20e>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a37      	ldr	r2, [pc, #220]	@ (8003190 <HAL_DMA_Abort+0x220>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d063      	beq.n	800317e <HAL_DMA_Abort+0x20e>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a36      	ldr	r2, [pc, #216]	@ (8003194 <HAL_DMA_Abort+0x224>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d05e      	beq.n	800317e <HAL_DMA_Abort+0x20e>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a34      	ldr	r2, [pc, #208]	@ (8003198 <HAL_DMA_Abort+0x228>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d059      	beq.n	800317e <HAL_DMA_Abort+0x20e>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a33      	ldr	r2, [pc, #204]	@ (800319c <HAL_DMA_Abort+0x22c>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d054      	beq.n	800317e <HAL_DMA_Abort+0x20e>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a31      	ldr	r2, [pc, #196]	@ (80031a0 <HAL_DMA_Abort+0x230>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d04f      	beq.n	800317e <HAL_DMA_Abort+0x20e>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a30      	ldr	r2, [pc, #192]	@ (80031a4 <HAL_DMA_Abort+0x234>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d04a      	beq.n	800317e <HAL_DMA_Abort+0x20e>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a2e      	ldr	r2, [pc, #184]	@ (80031a8 <HAL_DMA_Abort+0x238>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d045      	beq.n	800317e <HAL_DMA_Abort+0x20e>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a2d      	ldr	r2, [pc, #180]	@ (80031ac <HAL_DMA_Abort+0x23c>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d040      	beq.n	800317e <HAL_DMA_Abort+0x20e>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a2b      	ldr	r2, [pc, #172]	@ (80031b0 <HAL_DMA_Abort+0x240>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d03b      	beq.n	800317e <HAL_DMA_Abort+0x20e>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a2a      	ldr	r2, [pc, #168]	@ (80031b4 <HAL_DMA_Abort+0x244>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d036      	beq.n	800317e <HAL_DMA_Abort+0x20e>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a28      	ldr	r2, [pc, #160]	@ (80031b8 <HAL_DMA_Abort+0x248>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d031      	beq.n	800317e <HAL_DMA_Abort+0x20e>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a27      	ldr	r2, [pc, #156]	@ (80031bc <HAL_DMA_Abort+0x24c>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d02c      	beq.n	800317e <HAL_DMA_Abort+0x20e>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a25      	ldr	r2, [pc, #148]	@ (80031c0 <HAL_DMA_Abort+0x250>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d027      	beq.n	800317e <HAL_DMA_Abort+0x20e>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a24      	ldr	r2, [pc, #144]	@ (80031c4 <HAL_DMA_Abort+0x254>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d022      	beq.n	800317e <HAL_DMA_Abort+0x20e>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a22      	ldr	r2, [pc, #136]	@ (80031c8 <HAL_DMA_Abort+0x258>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d01d      	beq.n	800317e <HAL_DMA_Abort+0x20e>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a21      	ldr	r2, [pc, #132]	@ (80031cc <HAL_DMA_Abort+0x25c>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d018      	beq.n	800317e <HAL_DMA_Abort+0x20e>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a1f      	ldr	r2, [pc, #124]	@ (80031d0 <HAL_DMA_Abort+0x260>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d013      	beq.n	800317e <HAL_DMA_Abort+0x20e>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a1e      	ldr	r2, [pc, #120]	@ (80031d4 <HAL_DMA_Abort+0x264>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d00e      	beq.n	800317e <HAL_DMA_Abort+0x20e>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a1c      	ldr	r2, [pc, #112]	@ (80031d8 <HAL_DMA_Abort+0x268>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d009      	beq.n	800317e <HAL_DMA_Abort+0x20e>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a1b      	ldr	r2, [pc, #108]	@ (80031dc <HAL_DMA_Abort+0x26c>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d004      	beq.n	800317e <HAL_DMA_Abort+0x20e>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a19      	ldr	r2, [pc, #100]	@ (80031e0 <HAL_DMA_Abort+0x270>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d132      	bne.n	80031e4 <HAL_DMA_Abort+0x274>
 800317e:	2301      	movs	r3, #1
 8003180:	e031      	b.n	80031e6 <HAL_DMA_Abort+0x276>
 8003182:	bf00      	nop
 8003184:	40020010 	.word	0x40020010
 8003188:	40020028 	.word	0x40020028
 800318c:	40020040 	.word	0x40020040
 8003190:	40020058 	.word	0x40020058
 8003194:	40020070 	.word	0x40020070
 8003198:	40020088 	.word	0x40020088
 800319c:	400200a0 	.word	0x400200a0
 80031a0:	400200b8 	.word	0x400200b8
 80031a4:	40020410 	.word	0x40020410
 80031a8:	40020428 	.word	0x40020428
 80031ac:	40020440 	.word	0x40020440
 80031b0:	40020458 	.word	0x40020458
 80031b4:	40020470 	.word	0x40020470
 80031b8:	40020488 	.word	0x40020488
 80031bc:	400204a0 	.word	0x400204a0
 80031c0:	400204b8 	.word	0x400204b8
 80031c4:	58025408 	.word	0x58025408
 80031c8:	5802541c 	.word	0x5802541c
 80031cc:	58025430 	.word	0x58025430
 80031d0:	58025444 	.word	0x58025444
 80031d4:	58025458 	.word	0x58025458
 80031d8:	5802546c 	.word	0x5802546c
 80031dc:	58025480 	.word	0x58025480
 80031e0:	58025494 	.word	0x58025494
 80031e4:	2300      	movs	r3, #0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d007      	beq.n	80031fa <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031f4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80031f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a6d      	ldr	r2, [pc, #436]	@ (80033b4 <HAL_DMA_Abort+0x444>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d04a      	beq.n	800329a <HAL_DMA_Abort+0x32a>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a6b      	ldr	r2, [pc, #428]	@ (80033b8 <HAL_DMA_Abort+0x448>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d045      	beq.n	800329a <HAL_DMA_Abort+0x32a>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a6a      	ldr	r2, [pc, #424]	@ (80033bc <HAL_DMA_Abort+0x44c>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d040      	beq.n	800329a <HAL_DMA_Abort+0x32a>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a68      	ldr	r2, [pc, #416]	@ (80033c0 <HAL_DMA_Abort+0x450>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d03b      	beq.n	800329a <HAL_DMA_Abort+0x32a>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a67      	ldr	r2, [pc, #412]	@ (80033c4 <HAL_DMA_Abort+0x454>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d036      	beq.n	800329a <HAL_DMA_Abort+0x32a>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a65      	ldr	r2, [pc, #404]	@ (80033c8 <HAL_DMA_Abort+0x458>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d031      	beq.n	800329a <HAL_DMA_Abort+0x32a>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a64      	ldr	r2, [pc, #400]	@ (80033cc <HAL_DMA_Abort+0x45c>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d02c      	beq.n	800329a <HAL_DMA_Abort+0x32a>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a62      	ldr	r2, [pc, #392]	@ (80033d0 <HAL_DMA_Abort+0x460>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d027      	beq.n	800329a <HAL_DMA_Abort+0x32a>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a61      	ldr	r2, [pc, #388]	@ (80033d4 <HAL_DMA_Abort+0x464>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d022      	beq.n	800329a <HAL_DMA_Abort+0x32a>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a5f      	ldr	r2, [pc, #380]	@ (80033d8 <HAL_DMA_Abort+0x468>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d01d      	beq.n	800329a <HAL_DMA_Abort+0x32a>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a5e      	ldr	r2, [pc, #376]	@ (80033dc <HAL_DMA_Abort+0x46c>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d018      	beq.n	800329a <HAL_DMA_Abort+0x32a>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a5c      	ldr	r2, [pc, #368]	@ (80033e0 <HAL_DMA_Abort+0x470>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d013      	beq.n	800329a <HAL_DMA_Abort+0x32a>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a5b      	ldr	r2, [pc, #364]	@ (80033e4 <HAL_DMA_Abort+0x474>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d00e      	beq.n	800329a <HAL_DMA_Abort+0x32a>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a59      	ldr	r2, [pc, #356]	@ (80033e8 <HAL_DMA_Abort+0x478>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d009      	beq.n	800329a <HAL_DMA_Abort+0x32a>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a58      	ldr	r2, [pc, #352]	@ (80033ec <HAL_DMA_Abort+0x47c>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d004      	beq.n	800329a <HAL_DMA_Abort+0x32a>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a56      	ldr	r2, [pc, #344]	@ (80033f0 <HAL_DMA_Abort+0x480>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d108      	bne.n	80032ac <HAL_DMA_Abort+0x33c>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f022 0201 	bic.w	r2, r2, #1
 80032a8:	601a      	str	r2, [r3, #0]
 80032aa:	e007      	b.n	80032bc <HAL_DMA_Abort+0x34c>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f022 0201 	bic.w	r2, r2, #1
 80032ba:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80032bc:	e013      	b.n	80032e6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80032be:	f7fe ff75 	bl	80021ac <HAL_GetTick>
 80032c2:	4602      	mov	r2, r0
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	2b05      	cmp	r3, #5
 80032ca:	d90c      	bls.n	80032e6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2220      	movs	r2, #32
 80032d0:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2203      	movs	r2, #3
 80032d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e12d      	b.n	8003542 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0301 	and.w	r3, r3, #1
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d1e5      	bne.n	80032be <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a2f      	ldr	r2, [pc, #188]	@ (80033b4 <HAL_DMA_Abort+0x444>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d04a      	beq.n	8003392 <HAL_DMA_Abort+0x422>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a2d      	ldr	r2, [pc, #180]	@ (80033b8 <HAL_DMA_Abort+0x448>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d045      	beq.n	8003392 <HAL_DMA_Abort+0x422>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a2c      	ldr	r2, [pc, #176]	@ (80033bc <HAL_DMA_Abort+0x44c>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d040      	beq.n	8003392 <HAL_DMA_Abort+0x422>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a2a      	ldr	r2, [pc, #168]	@ (80033c0 <HAL_DMA_Abort+0x450>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d03b      	beq.n	8003392 <HAL_DMA_Abort+0x422>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a29      	ldr	r2, [pc, #164]	@ (80033c4 <HAL_DMA_Abort+0x454>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d036      	beq.n	8003392 <HAL_DMA_Abort+0x422>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a27      	ldr	r2, [pc, #156]	@ (80033c8 <HAL_DMA_Abort+0x458>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d031      	beq.n	8003392 <HAL_DMA_Abort+0x422>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a26      	ldr	r2, [pc, #152]	@ (80033cc <HAL_DMA_Abort+0x45c>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d02c      	beq.n	8003392 <HAL_DMA_Abort+0x422>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a24      	ldr	r2, [pc, #144]	@ (80033d0 <HAL_DMA_Abort+0x460>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d027      	beq.n	8003392 <HAL_DMA_Abort+0x422>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a23      	ldr	r2, [pc, #140]	@ (80033d4 <HAL_DMA_Abort+0x464>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d022      	beq.n	8003392 <HAL_DMA_Abort+0x422>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a21      	ldr	r2, [pc, #132]	@ (80033d8 <HAL_DMA_Abort+0x468>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d01d      	beq.n	8003392 <HAL_DMA_Abort+0x422>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a20      	ldr	r2, [pc, #128]	@ (80033dc <HAL_DMA_Abort+0x46c>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d018      	beq.n	8003392 <HAL_DMA_Abort+0x422>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a1e      	ldr	r2, [pc, #120]	@ (80033e0 <HAL_DMA_Abort+0x470>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d013      	beq.n	8003392 <HAL_DMA_Abort+0x422>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a1d      	ldr	r2, [pc, #116]	@ (80033e4 <HAL_DMA_Abort+0x474>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d00e      	beq.n	8003392 <HAL_DMA_Abort+0x422>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a1b      	ldr	r2, [pc, #108]	@ (80033e8 <HAL_DMA_Abort+0x478>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d009      	beq.n	8003392 <HAL_DMA_Abort+0x422>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a1a      	ldr	r2, [pc, #104]	@ (80033ec <HAL_DMA_Abort+0x47c>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d004      	beq.n	8003392 <HAL_DMA_Abort+0x422>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a18      	ldr	r2, [pc, #96]	@ (80033f0 <HAL_DMA_Abort+0x480>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d101      	bne.n	8003396 <HAL_DMA_Abort+0x426>
 8003392:	2301      	movs	r3, #1
 8003394:	e000      	b.n	8003398 <HAL_DMA_Abort+0x428>
 8003396:	2300      	movs	r3, #0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d02b      	beq.n	80033f4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033a0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033a6:	f003 031f 	and.w	r3, r3, #31
 80033aa:	223f      	movs	r2, #63	@ 0x3f
 80033ac:	409a      	lsls	r2, r3
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	609a      	str	r2, [r3, #8]
 80033b2:	e02a      	b.n	800340a <HAL_DMA_Abort+0x49a>
 80033b4:	40020010 	.word	0x40020010
 80033b8:	40020028 	.word	0x40020028
 80033bc:	40020040 	.word	0x40020040
 80033c0:	40020058 	.word	0x40020058
 80033c4:	40020070 	.word	0x40020070
 80033c8:	40020088 	.word	0x40020088
 80033cc:	400200a0 	.word	0x400200a0
 80033d0:	400200b8 	.word	0x400200b8
 80033d4:	40020410 	.word	0x40020410
 80033d8:	40020428 	.word	0x40020428
 80033dc:	40020440 	.word	0x40020440
 80033e0:	40020458 	.word	0x40020458
 80033e4:	40020470 	.word	0x40020470
 80033e8:	40020488 	.word	0x40020488
 80033ec:	400204a0 	.word	0x400204a0
 80033f0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033f8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033fe:	f003 031f 	and.w	r3, r3, #31
 8003402:	2201      	movs	r2, #1
 8003404:	409a      	lsls	r2, r3
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a4f      	ldr	r2, [pc, #316]	@ (800354c <HAL_DMA_Abort+0x5dc>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d072      	beq.n	80034fa <HAL_DMA_Abort+0x58a>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a4d      	ldr	r2, [pc, #308]	@ (8003550 <HAL_DMA_Abort+0x5e0>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d06d      	beq.n	80034fa <HAL_DMA_Abort+0x58a>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a4c      	ldr	r2, [pc, #304]	@ (8003554 <HAL_DMA_Abort+0x5e4>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d068      	beq.n	80034fa <HAL_DMA_Abort+0x58a>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a4a      	ldr	r2, [pc, #296]	@ (8003558 <HAL_DMA_Abort+0x5e8>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d063      	beq.n	80034fa <HAL_DMA_Abort+0x58a>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a49      	ldr	r2, [pc, #292]	@ (800355c <HAL_DMA_Abort+0x5ec>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d05e      	beq.n	80034fa <HAL_DMA_Abort+0x58a>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a47      	ldr	r2, [pc, #284]	@ (8003560 <HAL_DMA_Abort+0x5f0>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d059      	beq.n	80034fa <HAL_DMA_Abort+0x58a>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a46      	ldr	r2, [pc, #280]	@ (8003564 <HAL_DMA_Abort+0x5f4>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d054      	beq.n	80034fa <HAL_DMA_Abort+0x58a>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a44      	ldr	r2, [pc, #272]	@ (8003568 <HAL_DMA_Abort+0x5f8>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d04f      	beq.n	80034fa <HAL_DMA_Abort+0x58a>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a43      	ldr	r2, [pc, #268]	@ (800356c <HAL_DMA_Abort+0x5fc>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d04a      	beq.n	80034fa <HAL_DMA_Abort+0x58a>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a41      	ldr	r2, [pc, #260]	@ (8003570 <HAL_DMA_Abort+0x600>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d045      	beq.n	80034fa <HAL_DMA_Abort+0x58a>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a40      	ldr	r2, [pc, #256]	@ (8003574 <HAL_DMA_Abort+0x604>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d040      	beq.n	80034fa <HAL_DMA_Abort+0x58a>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a3e      	ldr	r2, [pc, #248]	@ (8003578 <HAL_DMA_Abort+0x608>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d03b      	beq.n	80034fa <HAL_DMA_Abort+0x58a>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a3d      	ldr	r2, [pc, #244]	@ (800357c <HAL_DMA_Abort+0x60c>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d036      	beq.n	80034fa <HAL_DMA_Abort+0x58a>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a3b      	ldr	r2, [pc, #236]	@ (8003580 <HAL_DMA_Abort+0x610>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d031      	beq.n	80034fa <HAL_DMA_Abort+0x58a>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a3a      	ldr	r2, [pc, #232]	@ (8003584 <HAL_DMA_Abort+0x614>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d02c      	beq.n	80034fa <HAL_DMA_Abort+0x58a>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a38      	ldr	r2, [pc, #224]	@ (8003588 <HAL_DMA_Abort+0x618>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d027      	beq.n	80034fa <HAL_DMA_Abort+0x58a>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a37      	ldr	r2, [pc, #220]	@ (800358c <HAL_DMA_Abort+0x61c>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d022      	beq.n	80034fa <HAL_DMA_Abort+0x58a>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a35      	ldr	r2, [pc, #212]	@ (8003590 <HAL_DMA_Abort+0x620>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d01d      	beq.n	80034fa <HAL_DMA_Abort+0x58a>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a34      	ldr	r2, [pc, #208]	@ (8003594 <HAL_DMA_Abort+0x624>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d018      	beq.n	80034fa <HAL_DMA_Abort+0x58a>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a32      	ldr	r2, [pc, #200]	@ (8003598 <HAL_DMA_Abort+0x628>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d013      	beq.n	80034fa <HAL_DMA_Abort+0x58a>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a31      	ldr	r2, [pc, #196]	@ (800359c <HAL_DMA_Abort+0x62c>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d00e      	beq.n	80034fa <HAL_DMA_Abort+0x58a>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a2f      	ldr	r2, [pc, #188]	@ (80035a0 <HAL_DMA_Abort+0x630>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d009      	beq.n	80034fa <HAL_DMA_Abort+0x58a>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a2e      	ldr	r2, [pc, #184]	@ (80035a4 <HAL_DMA_Abort+0x634>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d004      	beq.n	80034fa <HAL_DMA_Abort+0x58a>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a2c      	ldr	r2, [pc, #176]	@ (80035a8 <HAL_DMA_Abort+0x638>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d101      	bne.n	80034fe <HAL_DMA_Abort+0x58e>
 80034fa:	2301      	movs	r3, #1
 80034fc:	e000      	b.n	8003500 <HAL_DMA_Abort+0x590>
 80034fe:	2300      	movs	r3, #0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d015      	beq.n	8003530 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800350c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003512:	2b00      	cmp	r3, #0
 8003514:	d00c      	beq.n	8003530 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003520:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003524:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800352e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8003540:	2300      	movs	r3, #0
}
 8003542:	4618      	mov	r0, r3
 8003544:	3718      	adds	r7, #24
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	40020010 	.word	0x40020010
 8003550:	40020028 	.word	0x40020028
 8003554:	40020040 	.word	0x40020040
 8003558:	40020058 	.word	0x40020058
 800355c:	40020070 	.word	0x40020070
 8003560:	40020088 	.word	0x40020088
 8003564:	400200a0 	.word	0x400200a0
 8003568:	400200b8 	.word	0x400200b8
 800356c:	40020410 	.word	0x40020410
 8003570:	40020428 	.word	0x40020428
 8003574:	40020440 	.word	0x40020440
 8003578:	40020458 	.word	0x40020458
 800357c:	40020470 	.word	0x40020470
 8003580:	40020488 	.word	0x40020488
 8003584:	400204a0 	.word	0x400204a0
 8003588:	400204b8 	.word	0x400204b8
 800358c:	58025408 	.word	0x58025408
 8003590:	5802541c 	.word	0x5802541c
 8003594:	58025430 	.word	0x58025430
 8003598:	58025444 	.word	0x58025444
 800359c:	58025458 	.word	0x58025458
 80035a0:	5802546c 	.word	0x5802546c
 80035a4:	58025480 	.word	0x58025480
 80035a8:	58025494 	.word	0x58025494

080035ac <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d101      	bne.n	80035be <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e237      	b.n	8003a2e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d004      	beq.n	80035d4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2280      	movs	r2, #128	@ 0x80
 80035ce:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e22c      	b.n	8003a2e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a5c      	ldr	r2, [pc, #368]	@ (800374c <HAL_DMA_Abort_IT+0x1a0>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d04a      	beq.n	8003674 <HAL_DMA_Abort_IT+0xc8>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a5b      	ldr	r2, [pc, #364]	@ (8003750 <HAL_DMA_Abort_IT+0x1a4>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d045      	beq.n	8003674 <HAL_DMA_Abort_IT+0xc8>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a59      	ldr	r2, [pc, #356]	@ (8003754 <HAL_DMA_Abort_IT+0x1a8>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d040      	beq.n	8003674 <HAL_DMA_Abort_IT+0xc8>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a58      	ldr	r2, [pc, #352]	@ (8003758 <HAL_DMA_Abort_IT+0x1ac>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d03b      	beq.n	8003674 <HAL_DMA_Abort_IT+0xc8>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a56      	ldr	r2, [pc, #344]	@ (800375c <HAL_DMA_Abort_IT+0x1b0>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d036      	beq.n	8003674 <HAL_DMA_Abort_IT+0xc8>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a55      	ldr	r2, [pc, #340]	@ (8003760 <HAL_DMA_Abort_IT+0x1b4>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d031      	beq.n	8003674 <HAL_DMA_Abort_IT+0xc8>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a53      	ldr	r2, [pc, #332]	@ (8003764 <HAL_DMA_Abort_IT+0x1b8>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d02c      	beq.n	8003674 <HAL_DMA_Abort_IT+0xc8>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a52      	ldr	r2, [pc, #328]	@ (8003768 <HAL_DMA_Abort_IT+0x1bc>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d027      	beq.n	8003674 <HAL_DMA_Abort_IT+0xc8>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a50      	ldr	r2, [pc, #320]	@ (800376c <HAL_DMA_Abort_IT+0x1c0>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d022      	beq.n	8003674 <HAL_DMA_Abort_IT+0xc8>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a4f      	ldr	r2, [pc, #316]	@ (8003770 <HAL_DMA_Abort_IT+0x1c4>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d01d      	beq.n	8003674 <HAL_DMA_Abort_IT+0xc8>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a4d      	ldr	r2, [pc, #308]	@ (8003774 <HAL_DMA_Abort_IT+0x1c8>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d018      	beq.n	8003674 <HAL_DMA_Abort_IT+0xc8>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a4c      	ldr	r2, [pc, #304]	@ (8003778 <HAL_DMA_Abort_IT+0x1cc>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d013      	beq.n	8003674 <HAL_DMA_Abort_IT+0xc8>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a4a      	ldr	r2, [pc, #296]	@ (800377c <HAL_DMA_Abort_IT+0x1d0>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d00e      	beq.n	8003674 <HAL_DMA_Abort_IT+0xc8>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a49      	ldr	r2, [pc, #292]	@ (8003780 <HAL_DMA_Abort_IT+0x1d4>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d009      	beq.n	8003674 <HAL_DMA_Abort_IT+0xc8>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a47      	ldr	r2, [pc, #284]	@ (8003784 <HAL_DMA_Abort_IT+0x1d8>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d004      	beq.n	8003674 <HAL_DMA_Abort_IT+0xc8>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a46      	ldr	r2, [pc, #280]	@ (8003788 <HAL_DMA_Abort_IT+0x1dc>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d101      	bne.n	8003678 <HAL_DMA_Abort_IT+0xcc>
 8003674:	2301      	movs	r3, #1
 8003676:	e000      	b.n	800367a <HAL_DMA_Abort_IT+0xce>
 8003678:	2300      	movs	r3, #0
 800367a:	2b00      	cmp	r3, #0
 800367c:	f000 8086 	beq.w	800378c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2204      	movs	r2, #4
 8003684:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a2f      	ldr	r2, [pc, #188]	@ (800374c <HAL_DMA_Abort_IT+0x1a0>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d04a      	beq.n	8003728 <HAL_DMA_Abort_IT+0x17c>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a2e      	ldr	r2, [pc, #184]	@ (8003750 <HAL_DMA_Abort_IT+0x1a4>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d045      	beq.n	8003728 <HAL_DMA_Abort_IT+0x17c>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a2c      	ldr	r2, [pc, #176]	@ (8003754 <HAL_DMA_Abort_IT+0x1a8>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d040      	beq.n	8003728 <HAL_DMA_Abort_IT+0x17c>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a2b      	ldr	r2, [pc, #172]	@ (8003758 <HAL_DMA_Abort_IT+0x1ac>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d03b      	beq.n	8003728 <HAL_DMA_Abort_IT+0x17c>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a29      	ldr	r2, [pc, #164]	@ (800375c <HAL_DMA_Abort_IT+0x1b0>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d036      	beq.n	8003728 <HAL_DMA_Abort_IT+0x17c>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a28      	ldr	r2, [pc, #160]	@ (8003760 <HAL_DMA_Abort_IT+0x1b4>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d031      	beq.n	8003728 <HAL_DMA_Abort_IT+0x17c>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a26      	ldr	r2, [pc, #152]	@ (8003764 <HAL_DMA_Abort_IT+0x1b8>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d02c      	beq.n	8003728 <HAL_DMA_Abort_IT+0x17c>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a25      	ldr	r2, [pc, #148]	@ (8003768 <HAL_DMA_Abort_IT+0x1bc>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d027      	beq.n	8003728 <HAL_DMA_Abort_IT+0x17c>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a23      	ldr	r2, [pc, #140]	@ (800376c <HAL_DMA_Abort_IT+0x1c0>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d022      	beq.n	8003728 <HAL_DMA_Abort_IT+0x17c>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a22      	ldr	r2, [pc, #136]	@ (8003770 <HAL_DMA_Abort_IT+0x1c4>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d01d      	beq.n	8003728 <HAL_DMA_Abort_IT+0x17c>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a20      	ldr	r2, [pc, #128]	@ (8003774 <HAL_DMA_Abort_IT+0x1c8>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d018      	beq.n	8003728 <HAL_DMA_Abort_IT+0x17c>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a1f      	ldr	r2, [pc, #124]	@ (8003778 <HAL_DMA_Abort_IT+0x1cc>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d013      	beq.n	8003728 <HAL_DMA_Abort_IT+0x17c>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a1d      	ldr	r2, [pc, #116]	@ (800377c <HAL_DMA_Abort_IT+0x1d0>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d00e      	beq.n	8003728 <HAL_DMA_Abort_IT+0x17c>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a1c      	ldr	r2, [pc, #112]	@ (8003780 <HAL_DMA_Abort_IT+0x1d4>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d009      	beq.n	8003728 <HAL_DMA_Abort_IT+0x17c>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a1a      	ldr	r2, [pc, #104]	@ (8003784 <HAL_DMA_Abort_IT+0x1d8>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d004      	beq.n	8003728 <HAL_DMA_Abort_IT+0x17c>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a19      	ldr	r2, [pc, #100]	@ (8003788 <HAL_DMA_Abort_IT+0x1dc>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d108      	bne.n	800373a <HAL_DMA_Abort_IT+0x18e>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f022 0201 	bic.w	r2, r2, #1
 8003736:	601a      	str	r2, [r3, #0]
 8003738:	e178      	b.n	8003a2c <HAL_DMA_Abort_IT+0x480>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f022 0201 	bic.w	r2, r2, #1
 8003748:	601a      	str	r2, [r3, #0]
 800374a:	e16f      	b.n	8003a2c <HAL_DMA_Abort_IT+0x480>
 800374c:	40020010 	.word	0x40020010
 8003750:	40020028 	.word	0x40020028
 8003754:	40020040 	.word	0x40020040
 8003758:	40020058 	.word	0x40020058
 800375c:	40020070 	.word	0x40020070
 8003760:	40020088 	.word	0x40020088
 8003764:	400200a0 	.word	0x400200a0
 8003768:	400200b8 	.word	0x400200b8
 800376c:	40020410 	.word	0x40020410
 8003770:	40020428 	.word	0x40020428
 8003774:	40020440 	.word	0x40020440
 8003778:	40020458 	.word	0x40020458
 800377c:	40020470 	.word	0x40020470
 8003780:	40020488 	.word	0x40020488
 8003784:	400204a0 	.word	0x400204a0
 8003788:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f022 020e 	bic.w	r2, r2, #14
 800379a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a6c      	ldr	r2, [pc, #432]	@ (8003954 <HAL_DMA_Abort_IT+0x3a8>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d04a      	beq.n	800383c <HAL_DMA_Abort_IT+0x290>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a6b      	ldr	r2, [pc, #428]	@ (8003958 <HAL_DMA_Abort_IT+0x3ac>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d045      	beq.n	800383c <HAL_DMA_Abort_IT+0x290>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a69      	ldr	r2, [pc, #420]	@ (800395c <HAL_DMA_Abort_IT+0x3b0>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d040      	beq.n	800383c <HAL_DMA_Abort_IT+0x290>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a68      	ldr	r2, [pc, #416]	@ (8003960 <HAL_DMA_Abort_IT+0x3b4>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d03b      	beq.n	800383c <HAL_DMA_Abort_IT+0x290>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a66      	ldr	r2, [pc, #408]	@ (8003964 <HAL_DMA_Abort_IT+0x3b8>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d036      	beq.n	800383c <HAL_DMA_Abort_IT+0x290>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a65      	ldr	r2, [pc, #404]	@ (8003968 <HAL_DMA_Abort_IT+0x3bc>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d031      	beq.n	800383c <HAL_DMA_Abort_IT+0x290>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a63      	ldr	r2, [pc, #396]	@ (800396c <HAL_DMA_Abort_IT+0x3c0>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d02c      	beq.n	800383c <HAL_DMA_Abort_IT+0x290>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a62      	ldr	r2, [pc, #392]	@ (8003970 <HAL_DMA_Abort_IT+0x3c4>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d027      	beq.n	800383c <HAL_DMA_Abort_IT+0x290>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a60      	ldr	r2, [pc, #384]	@ (8003974 <HAL_DMA_Abort_IT+0x3c8>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d022      	beq.n	800383c <HAL_DMA_Abort_IT+0x290>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a5f      	ldr	r2, [pc, #380]	@ (8003978 <HAL_DMA_Abort_IT+0x3cc>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d01d      	beq.n	800383c <HAL_DMA_Abort_IT+0x290>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a5d      	ldr	r2, [pc, #372]	@ (800397c <HAL_DMA_Abort_IT+0x3d0>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d018      	beq.n	800383c <HAL_DMA_Abort_IT+0x290>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a5c      	ldr	r2, [pc, #368]	@ (8003980 <HAL_DMA_Abort_IT+0x3d4>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d013      	beq.n	800383c <HAL_DMA_Abort_IT+0x290>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a5a      	ldr	r2, [pc, #360]	@ (8003984 <HAL_DMA_Abort_IT+0x3d8>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d00e      	beq.n	800383c <HAL_DMA_Abort_IT+0x290>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a59      	ldr	r2, [pc, #356]	@ (8003988 <HAL_DMA_Abort_IT+0x3dc>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d009      	beq.n	800383c <HAL_DMA_Abort_IT+0x290>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a57      	ldr	r2, [pc, #348]	@ (800398c <HAL_DMA_Abort_IT+0x3e0>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d004      	beq.n	800383c <HAL_DMA_Abort_IT+0x290>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a56      	ldr	r2, [pc, #344]	@ (8003990 <HAL_DMA_Abort_IT+0x3e4>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d108      	bne.n	800384e <HAL_DMA_Abort_IT+0x2a2>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f022 0201 	bic.w	r2, r2, #1
 800384a:	601a      	str	r2, [r3, #0]
 800384c:	e007      	b.n	800385e <HAL_DMA_Abort_IT+0x2b2>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f022 0201 	bic.w	r2, r2, #1
 800385c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a3c      	ldr	r2, [pc, #240]	@ (8003954 <HAL_DMA_Abort_IT+0x3a8>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d072      	beq.n	800394e <HAL_DMA_Abort_IT+0x3a2>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a3a      	ldr	r2, [pc, #232]	@ (8003958 <HAL_DMA_Abort_IT+0x3ac>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d06d      	beq.n	800394e <HAL_DMA_Abort_IT+0x3a2>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a39      	ldr	r2, [pc, #228]	@ (800395c <HAL_DMA_Abort_IT+0x3b0>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d068      	beq.n	800394e <HAL_DMA_Abort_IT+0x3a2>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a37      	ldr	r2, [pc, #220]	@ (8003960 <HAL_DMA_Abort_IT+0x3b4>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d063      	beq.n	800394e <HAL_DMA_Abort_IT+0x3a2>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a36      	ldr	r2, [pc, #216]	@ (8003964 <HAL_DMA_Abort_IT+0x3b8>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d05e      	beq.n	800394e <HAL_DMA_Abort_IT+0x3a2>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a34      	ldr	r2, [pc, #208]	@ (8003968 <HAL_DMA_Abort_IT+0x3bc>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d059      	beq.n	800394e <HAL_DMA_Abort_IT+0x3a2>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a33      	ldr	r2, [pc, #204]	@ (800396c <HAL_DMA_Abort_IT+0x3c0>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d054      	beq.n	800394e <HAL_DMA_Abort_IT+0x3a2>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a31      	ldr	r2, [pc, #196]	@ (8003970 <HAL_DMA_Abort_IT+0x3c4>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d04f      	beq.n	800394e <HAL_DMA_Abort_IT+0x3a2>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a30      	ldr	r2, [pc, #192]	@ (8003974 <HAL_DMA_Abort_IT+0x3c8>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d04a      	beq.n	800394e <HAL_DMA_Abort_IT+0x3a2>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a2e      	ldr	r2, [pc, #184]	@ (8003978 <HAL_DMA_Abort_IT+0x3cc>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d045      	beq.n	800394e <HAL_DMA_Abort_IT+0x3a2>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a2d      	ldr	r2, [pc, #180]	@ (800397c <HAL_DMA_Abort_IT+0x3d0>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d040      	beq.n	800394e <HAL_DMA_Abort_IT+0x3a2>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a2b      	ldr	r2, [pc, #172]	@ (8003980 <HAL_DMA_Abort_IT+0x3d4>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d03b      	beq.n	800394e <HAL_DMA_Abort_IT+0x3a2>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a2a      	ldr	r2, [pc, #168]	@ (8003984 <HAL_DMA_Abort_IT+0x3d8>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d036      	beq.n	800394e <HAL_DMA_Abort_IT+0x3a2>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a28      	ldr	r2, [pc, #160]	@ (8003988 <HAL_DMA_Abort_IT+0x3dc>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d031      	beq.n	800394e <HAL_DMA_Abort_IT+0x3a2>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a27      	ldr	r2, [pc, #156]	@ (800398c <HAL_DMA_Abort_IT+0x3e0>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d02c      	beq.n	800394e <HAL_DMA_Abort_IT+0x3a2>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a25      	ldr	r2, [pc, #148]	@ (8003990 <HAL_DMA_Abort_IT+0x3e4>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d027      	beq.n	800394e <HAL_DMA_Abort_IT+0x3a2>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a24      	ldr	r2, [pc, #144]	@ (8003994 <HAL_DMA_Abort_IT+0x3e8>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d022      	beq.n	800394e <HAL_DMA_Abort_IT+0x3a2>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a22      	ldr	r2, [pc, #136]	@ (8003998 <HAL_DMA_Abort_IT+0x3ec>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d01d      	beq.n	800394e <HAL_DMA_Abort_IT+0x3a2>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a21      	ldr	r2, [pc, #132]	@ (800399c <HAL_DMA_Abort_IT+0x3f0>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d018      	beq.n	800394e <HAL_DMA_Abort_IT+0x3a2>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a1f      	ldr	r2, [pc, #124]	@ (80039a0 <HAL_DMA_Abort_IT+0x3f4>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d013      	beq.n	800394e <HAL_DMA_Abort_IT+0x3a2>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a1e      	ldr	r2, [pc, #120]	@ (80039a4 <HAL_DMA_Abort_IT+0x3f8>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d00e      	beq.n	800394e <HAL_DMA_Abort_IT+0x3a2>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a1c      	ldr	r2, [pc, #112]	@ (80039a8 <HAL_DMA_Abort_IT+0x3fc>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d009      	beq.n	800394e <HAL_DMA_Abort_IT+0x3a2>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a1b      	ldr	r2, [pc, #108]	@ (80039ac <HAL_DMA_Abort_IT+0x400>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d004      	beq.n	800394e <HAL_DMA_Abort_IT+0x3a2>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a19      	ldr	r2, [pc, #100]	@ (80039b0 <HAL_DMA_Abort_IT+0x404>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d132      	bne.n	80039b4 <HAL_DMA_Abort_IT+0x408>
 800394e:	2301      	movs	r3, #1
 8003950:	e031      	b.n	80039b6 <HAL_DMA_Abort_IT+0x40a>
 8003952:	bf00      	nop
 8003954:	40020010 	.word	0x40020010
 8003958:	40020028 	.word	0x40020028
 800395c:	40020040 	.word	0x40020040
 8003960:	40020058 	.word	0x40020058
 8003964:	40020070 	.word	0x40020070
 8003968:	40020088 	.word	0x40020088
 800396c:	400200a0 	.word	0x400200a0
 8003970:	400200b8 	.word	0x400200b8
 8003974:	40020410 	.word	0x40020410
 8003978:	40020428 	.word	0x40020428
 800397c:	40020440 	.word	0x40020440
 8003980:	40020458 	.word	0x40020458
 8003984:	40020470 	.word	0x40020470
 8003988:	40020488 	.word	0x40020488
 800398c:	400204a0 	.word	0x400204a0
 8003990:	400204b8 	.word	0x400204b8
 8003994:	58025408 	.word	0x58025408
 8003998:	5802541c 	.word	0x5802541c
 800399c:	58025430 	.word	0x58025430
 80039a0:	58025444 	.word	0x58025444
 80039a4:	58025458 	.word	0x58025458
 80039a8:	5802546c 	.word	0x5802546c
 80039ac:	58025480 	.word	0x58025480
 80039b0:	58025494 	.word	0x58025494
 80039b4:	2300      	movs	r3, #0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d028      	beq.n	8003a0c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039c4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80039c8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039ce:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039d4:	f003 031f 	and.w	r3, r3, #31
 80039d8:	2201      	movs	r2, #1
 80039da:	409a      	lsls	r2, r3
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80039e8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d00c      	beq.n	8003a0c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003a00:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003a0a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d003      	beq.n	8003a2c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3710      	adds	r7, #16
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop

08003a38 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b08a      	sub	sp, #40	@ 0x28
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003a40:	2300      	movs	r3, #0
 8003a42:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003a44:	4b67      	ldr	r3, [pc, #412]	@ (8003be4 <HAL_DMA_IRQHandler+0x1ac>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a67      	ldr	r2, [pc, #412]	@ (8003be8 <HAL_DMA_IRQHandler+0x1b0>)
 8003a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a4e:	0a9b      	lsrs	r3, r3, #10
 8003a50:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a56:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a5c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003a5e:	6a3b      	ldr	r3, [r7, #32]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a5f      	ldr	r2, [pc, #380]	@ (8003bec <HAL_DMA_IRQHandler+0x1b4>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d04a      	beq.n	8003b0a <HAL_DMA_IRQHandler+0xd2>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a5d      	ldr	r2, [pc, #372]	@ (8003bf0 <HAL_DMA_IRQHandler+0x1b8>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d045      	beq.n	8003b0a <HAL_DMA_IRQHandler+0xd2>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a5c      	ldr	r2, [pc, #368]	@ (8003bf4 <HAL_DMA_IRQHandler+0x1bc>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d040      	beq.n	8003b0a <HAL_DMA_IRQHandler+0xd2>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a5a      	ldr	r2, [pc, #360]	@ (8003bf8 <HAL_DMA_IRQHandler+0x1c0>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d03b      	beq.n	8003b0a <HAL_DMA_IRQHandler+0xd2>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a59      	ldr	r2, [pc, #356]	@ (8003bfc <HAL_DMA_IRQHandler+0x1c4>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d036      	beq.n	8003b0a <HAL_DMA_IRQHandler+0xd2>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a57      	ldr	r2, [pc, #348]	@ (8003c00 <HAL_DMA_IRQHandler+0x1c8>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d031      	beq.n	8003b0a <HAL_DMA_IRQHandler+0xd2>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a56      	ldr	r2, [pc, #344]	@ (8003c04 <HAL_DMA_IRQHandler+0x1cc>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d02c      	beq.n	8003b0a <HAL_DMA_IRQHandler+0xd2>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a54      	ldr	r2, [pc, #336]	@ (8003c08 <HAL_DMA_IRQHandler+0x1d0>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d027      	beq.n	8003b0a <HAL_DMA_IRQHandler+0xd2>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a53      	ldr	r2, [pc, #332]	@ (8003c0c <HAL_DMA_IRQHandler+0x1d4>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d022      	beq.n	8003b0a <HAL_DMA_IRQHandler+0xd2>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a51      	ldr	r2, [pc, #324]	@ (8003c10 <HAL_DMA_IRQHandler+0x1d8>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d01d      	beq.n	8003b0a <HAL_DMA_IRQHandler+0xd2>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a50      	ldr	r2, [pc, #320]	@ (8003c14 <HAL_DMA_IRQHandler+0x1dc>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d018      	beq.n	8003b0a <HAL_DMA_IRQHandler+0xd2>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a4e      	ldr	r2, [pc, #312]	@ (8003c18 <HAL_DMA_IRQHandler+0x1e0>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d013      	beq.n	8003b0a <HAL_DMA_IRQHandler+0xd2>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a4d      	ldr	r2, [pc, #308]	@ (8003c1c <HAL_DMA_IRQHandler+0x1e4>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d00e      	beq.n	8003b0a <HAL_DMA_IRQHandler+0xd2>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a4b      	ldr	r2, [pc, #300]	@ (8003c20 <HAL_DMA_IRQHandler+0x1e8>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d009      	beq.n	8003b0a <HAL_DMA_IRQHandler+0xd2>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a4a      	ldr	r2, [pc, #296]	@ (8003c24 <HAL_DMA_IRQHandler+0x1ec>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d004      	beq.n	8003b0a <HAL_DMA_IRQHandler+0xd2>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a48      	ldr	r2, [pc, #288]	@ (8003c28 <HAL_DMA_IRQHandler+0x1f0>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d101      	bne.n	8003b0e <HAL_DMA_IRQHandler+0xd6>
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e000      	b.n	8003b10 <HAL_DMA_IRQHandler+0xd8>
 8003b0e:	2300      	movs	r3, #0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	f000 842b 	beq.w	800436c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b1a:	f003 031f 	and.w	r3, r3, #31
 8003b1e:	2208      	movs	r2, #8
 8003b20:	409a      	lsls	r2, r3
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	4013      	ands	r3, r2
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	f000 80a2 	beq.w	8003c70 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a2e      	ldr	r2, [pc, #184]	@ (8003bec <HAL_DMA_IRQHandler+0x1b4>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d04a      	beq.n	8003bcc <HAL_DMA_IRQHandler+0x194>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a2d      	ldr	r2, [pc, #180]	@ (8003bf0 <HAL_DMA_IRQHandler+0x1b8>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d045      	beq.n	8003bcc <HAL_DMA_IRQHandler+0x194>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a2b      	ldr	r2, [pc, #172]	@ (8003bf4 <HAL_DMA_IRQHandler+0x1bc>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d040      	beq.n	8003bcc <HAL_DMA_IRQHandler+0x194>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a2a      	ldr	r2, [pc, #168]	@ (8003bf8 <HAL_DMA_IRQHandler+0x1c0>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d03b      	beq.n	8003bcc <HAL_DMA_IRQHandler+0x194>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a28      	ldr	r2, [pc, #160]	@ (8003bfc <HAL_DMA_IRQHandler+0x1c4>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d036      	beq.n	8003bcc <HAL_DMA_IRQHandler+0x194>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a27      	ldr	r2, [pc, #156]	@ (8003c00 <HAL_DMA_IRQHandler+0x1c8>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d031      	beq.n	8003bcc <HAL_DMA_IRQHandler+0x194>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a25      	ldr	r2, [pc, #148]	@ (8003c04 <HAL_DMA_IRQHandler+0x1cc>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d02c      	beq.n	8003bcc <HAL_DMA_IRQHandler+0x194>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a24      	ldr	r2, [pc, #144]	@ (8003c08 <HAL_DMA_IRQHandler+0x1d0>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d027      	beq.n	8003bcc <HAL_DMA_IRQHandler+0x194>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a22      	ldr	r2, [pc, #136]	@ (8003c0c <HAL_DMA_IRQHandler+0x1d4>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d022      	beq.n	8003bcc <HAL_DMA_IRQHandler+0x194>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a21      	ldr	r2, [pc, #132]	@ (8003c10 <HAL_DMA_IRQHandler+0x1d8>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d01d      	beq.n	8003bcc <HAL_DMA_IRQHandler+0x194>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a1f      	ldr	r2, [pc, #124]	@ (8003c14 <HAL_DMA_IRQHandler+0x1dc>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d018      	beq.n	8003bcc <HAL_DMA_IRQHandler+0x194>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a1e      	ldr	r2, [pc, #120]	@ (8003c18 <HAL_DMA_IRQHandler+0x1e0>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d013      	beq.n	8003bcc <HAL_DMA_IRQHandler+0x194>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a1c      	ldr	r2, [pc, #112]	@ (8003c1c <HAL_DMA_IRQHandler+0x1e4>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d00e      	beq.n	8003bcc <HAL_DMA_IRQHandler+0x194>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a1b      	ldr	r2, [pc, #108]	@ (8003c20 <HAL_DMA_IRQHandler+0x1e8>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d009      	beq.n	8003bcc <HAL_DMA_IRQHandler+0x194>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a19      	ldr	r2, [pc, #100]	@ (8003c24 <HAL_DMA_IRQHandler+0x1ec>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d004      	beq.n	8003bcc <HAL_DMA_IRQHandler+0x194>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a18      	ldr	r2, [pc, #96]	@ (8003c28 <HAL_DMA_IRQHandler+0x1f0>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d12f      	bne.n	8003c2c <HAL_DMA_IRQHandler+0x1f4>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 0304 	and.w	r3, r3, #4
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	bf14      	ite	ne
 8003bda:	2301      	movne	r3, #1
 8003bdc:	2300      	moveq	r3, #0
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	e02e      	b.n	8003c40 <HAL_DMA_IRQHandler+0x208>
 8003be2:	bf00      	nop
 8003be4:	24000004 	.word	0x24000004
 8003be8:	1b4e81b5 	.word	0x1b4e81b5
 8003bec:	40020010 	.word	0x40020010
 8003bf0:	40020028 	.word	0x40020028
 8003bf4:	40020040 	.word	0x40020040
 8003bf8:	40020058 	.word	0x40020058
 8003bfc:	40020070 	.word	0x40020070
 8003c00:	40020088 	.word	0x40020088
 8003c04:	400200a0 	.word	0x400200a0
 8003c08:	400200b8 	.word	0x400200b8
 8003c0c:	40020410 	.word	0x40020410
 8003c10:	40020428 	.word	0x40020428
 8003c14:	40020440 	.word	0x40020440
 8003c18:	40020458 	.word	0x40020458
 8003c1c:	40020470 	.word	0x40020470
 8003c20:	40020488 	.word	0x40020488
 8003c24:	400204a0 	.word	0x400204a0
 8003c28:	400204b8 	.word	0x400204b8
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0308 	and.w	r3, r3, #8
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	bf14      	ite	ne
 8003c3a:	2301      	movne	r3, #1
 8003c3c:	2300      	moveq	r3, #0
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d015      	beq.n	8003c70 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f022 0204 	bic.w	r2, r2, #4
 8003c52:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c58:	f003 031f 	and.w	r3, r3, #31
 8003c5c:	2208      	movs	r2, #8
 8003c5e:	409a      	lsls	r2, r3
 8003c60:	6a3b      	ldr	r3, [r7, #32]
 8003c62:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c68:	f043 0201 	orr.w	r2, r3, #1
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c74:	f003 031f 	and.w	r3, r3, #31
 8003c78:	69ba      	ldr	r2, [r7, #24]
 8003c7a:	fa22 f303 	lsr.w	r3, r2, r3
 8003c7e:	f003 0301 	and.w	r3, r3, #1
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d06e      	beq.n	8003d64 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a69      	ldr	r2, [pc, #420]	@ (8003e30 <HAL_DMA_IRQHandler+0x3f8>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d04a      	beq.n	8003d26 <HAL_DMA_IRQHandler+0x2ee>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a67      	ldr	r2, [pc, #412]	@ (8003e34 <HAL_DMA_IRQHandler+0x3fc>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d045      	beq.n	8003d26 <HAL_DMA_IRQHandler+0x2ee>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a66      	ldr	r2, [pc, #408]	@ (8003e38 <HAL_DMA_IRQHandler+0x400>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d040      	beq.n	8003d26 <HAL_DMA_IRQHandler+0x2ee>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a64      	ldr	r2, [pc, #400]	@ (8003e3c <HAL_DMA_IRQHandler+0x404>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d03b      	beq.n	8003d26 <HAL_DMA_IRQHandler+0x2ee>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a63      	ldr	r2, [pc, #396]	@ (8003e40 <HAL_DMA_IRQHandler+0x408>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d036      	beq.n	8003d26 <HAL_DMA_IRQHandler+0x2ee>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a61      	ldr	r2, [pc, #388]	@ (8003e44 <HAL_DMA_IRQHandler+0x40c>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d031      	beq.n	8003d26 <HAL_DMA_IRQHandler+0x2ee>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a60      	ldr	r2, [pc, #384]	@ (8003e48 <HAL_DMA_IRQHandler+0x410>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d02c      	beq.n	8003d26 <HAL_DMA_IRQHandler+0x2ee>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a5e      	ldr	r2, [pc, #376]	@ (8003e4c <HAL_DMA_IRQHandler+0x414>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d027      	beq.n	8003d26 <HAL_DMA_IRQHandler+0x2ee>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a5d      	ldr	r2, [pc, #372]	@ (8003e50 <HAL_DMA_IRQHandler+0x418>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d022      	beq.n	8003d26 <HAL_DMA_IRQHandler+0x2ee>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a5b      	ldr	r2, [pc, #364]	@ (8003e54 <HAL_DMA_IRQHandler+0x41c>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d01d      	beq.n	8003d26 <HAL_DMA_IRQHandler+0x2ee>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a5a      	ldr	r2, [pc, #360]	@ (8003e58 <HAL_DMA_IRQHandler+0x420>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d018      	beq.n	8003d26 <HAL_DMA_IRQHandler+0x2ee>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a58      	ldr	r2, [pc, #352]	@ (8003e5c <HAL_DMA_IRQHandler+0x424>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d013      	beq.n	8003d26 <HAL_DMA_IRQHandler+0x2ee>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a57      	ldr	r2, [pc, #348]	@ (8003e60 <HAL_DMA_IRQHandler+0x428>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d00e      	beq.n	8003d26 <HAL_DMA_IRQHandler+0x2ee>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a55      	ldr	r2, [pc, #340]	@ (8003e64 <HAL_DMA_IRQHandler+0x42c>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d009      	beq.n	8003d26 <HAL_DMA_IRQHandler+0x2ee>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a54      	ldr	r2, [pc, #336]	@ (8003e68 <HAL_DMA_IRQHandler+0x430>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d004      	beq.n	8003d26 <HAL_DMA_IRQHandler+0x2ee>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a52      	ldr	r2, [pc, #328]	@ (8003e6c <HAL_DMA_IRQHandler+0x434>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d10a      	bne.n	8003d3c <HAL_DMA_IRQHandler+0x304>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	695b      	ldr	r3, [r3, #20]
 8003d2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	bf14      	ite	ne
 8003d34:	2301      	movne	r3, #1
 8003d36:	2300      	moveq	r3, #0
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	e003      	b.n	8003d44 <HAL_DMA_IRQHandler+0x30c>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	2300      	movs	r3, #0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d00d      	beq.n	8003d64 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d4c:	f003 031f 	and.w	r3, r3, #31
 8003d50:	2201      	movs	r2, #1
 8003d52:	409a      	lsls	r2, r3
 8003d54:	6a3b      	ldr	r3, [r7, #32]
 8003d56:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d5c:	f043 0202 	orr.w	r2, r3, #2
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d68:	f003 031f 	and.w	r3, r3, #31
 8003d6c:	2204      	movs	r2, #4
 8003d6e:	409a      	lsls	r2, r3
 8003d70:	69bb      	ldr	r3, [r7, #24]
 8003d72:	4013      	ands	r3, r2
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	f000 808f 	beq.w	8003e98 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a2c      	ldr	r2, [pc, #176]	@ (8003e30 <HAL_DMA_IRQHandler+0x3f8>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d04a      	beq.n	8003e1a <HAL_DMA_IRQHandler+0x3e2>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a2a      	ldr	r2, [pc, #168]	@ (8003e34 <HAL_DMA_IRQHandler+0x3fc>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d045      	beq.n	8003e1a <HAL_DMA_IRQHandler+0x3e2>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a29      	ldr	r2, [pc, #164]	@ (8003e38 <HAL_DMA_IRQHandler+0x400>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d040      	beq.n	8003e1a <HAL_DMA_IRQHandler+0x3e2>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a27      	ldr	r2, [pc, #156]	@ (8003e3c <HAL_DMA_IRQHandler+0x404>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d03b      	beq.n	8003e1a <HAL_DMA_IRQHandler+0x3e2>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a26      	ldr	r2, [pc, #152]	@ (8003e40 <HAL_DMA_IRQHandler+0x408>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d036      	beq.n	8003e1a <HAL_DMA_IRQHandler+0x3e2>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a24      	ldr	r2, [pc, #144]	@ (8003e44 <HAL_DMA_IRQHandler+0x40c>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d031      	beq.n	8003e1a <HAL_DMA_IRQHandler+0x3e2>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a23      	ldr	r2, [pc, #140]	@ (8003e48 <HAL_DMA_IRQHandler+0x410>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d02c      	beq.n	8003e1a <HAL_DMA_IRQHandler+0x3e2>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a21      	ldr	r2, [pc, #132]	@ (8003e4c <HAL_DMA_IRQHandler+0x414>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d027      	beq.n	8003e1a <HAL_DMA_IRQHandler+0x3e2>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a20      	ldr	r2, [pc, #128]	@ (8003e50 <HAL_DMA_IRQHandler+0x418>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d022      	beq.n	8003e1a <HAL_DMA_IRQHandler+0x3e2>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a1e      	ldr	r2, [pc, #120]	@ (8003e54 <HAL_DMA_IRQHandler+0x41c>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d01d      	beq.n	8003e1a <HAL_DMA_IRQHandler+0x3e2>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a1d      	ldr	r2, [pc, #116]	@ (8003e58 <HAL_DMA_IRQHandler+0x420>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d018      	beq.n	8003e1a <HAL_DMA_IRQHandler+0x3e2>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a1b      	ldr	r2, [pc, #108]	@ (8003e5c <HAL_DMA_IRQHandler+0x424>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d013      	beq.n	8003e1a <HAL_DMA_IRQHandler+0x3e2>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a1a      	ldr	r2, [pc, #104]	@ (8003e60 <HAL_DMA_IRQHandler+0x428>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d00e      	beq.n	8003e1a <HAL_DMA_IRQHandler+0x3e2>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a18      	ldr	r2, [pc, #96]	@ (8003e64 <HAL_DMA_IRQHandler+0x42c>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d009      	beq.n	8003e1a <HAL_DMA_IRQHandler+0x3e2>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a17      	ldr	r2, [pc, #92]	@ (8003e68 <HAL_DMA_IRQHandler+0x430>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d004      	beq.n	8003e1a <HAL_DMA_IRQHandler+0x3e2>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a15      	ldr	r2, [pc, #84]	@ (8003e6c <HAL_DMA_IRQHandler+0x434>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d12a      	bne.n	8003e70 <HAL_DMA_IRQHandler+0x438>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0302 	and.w	r3, r3, #2
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	bf14      	ite	ne
 8003e28:	2301      	movne	r3, #1
 8003e2a:	2300      	moveq	r3, #0
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	e023      	b.n	8003e78 <HAL_DMA_IRQHandler+0x440>
 8003e30:	40020010 	.word	0x40020010
 8003e34:	40020028 	.word	0x40020028
 8003e38:	40020040 	.word	0x40020040
 8003e3c:	40020058 	.word	0x40020058
 8003e40:	40020070 	.word	0x40020070
 8003e44:	40020088 	.word	0x40020088
 8003e48:	400200a0 	.word	0x400200a0
 8003e4c:	400200b8 	.word	0x400200b8
 8003e50:	40020410 	.word	0x40020410
 8003e54:	40020428 	.word	0x40020428
 8003e58:	40020440 	.word	0x40020440
 8003e5c:	40020458 	.word	0x40020458
 8003e60:	40020470 	.word	0x40020470
 8003e64:	40020488 	.word	0x40020488
 8003e68:	400204a0 	.word	0x400204a0
 8003e6c:	400204b8 	.word	0x400204b8
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	2300      	movs	r3, #0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d00d      	beq.n	8003e98 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e80:	f003 031f 	and.w	r3, r3, #31
 8003e84:	2204      	movs	r2, #4
 8003e86:	409a      	lsls	r2, r3
 8003e88:	6a3b      	ldr	r3, [r7, #32]
 8003e8a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e90:	f043 0204 	orr.w	r2, r3, #4
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e9c:	f003 031f 	and.w	r3, r3, #31
 8003ea0:	2210      	movs	r2, #16
 8003ea2:	409a      	lsls	r2, r3
 8003ea4:	69bb      	ldr	r3, [r7, #24]
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	f000 80a6 	beq.w	8003ffa <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a85      	ldr	r2, [pc, #532]	@ (80040c8 <HAL_DMA_IRQHandler+0x690>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d04a      	beq.n	8003f4e <HAL_DMA_IRQHandler+0x516>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a83      	ldr	r2, [pc, #524]	@ (80040cc <HAL_DMA_IRQHandler+0x694>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d045      	beq.n	8003f4e <HAL_DMA_IRQHandler+0x516>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a82      	ldr	r2, [pc, #520]	@ (80040d0 <HAL_DMA_IRQHandler+0x698>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d040      	beq.n	8003f4e <HAL_DMA_IRQHandler+0x516>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a80      	ldr	r2, [pc, #512]	@ (80040d4 <HAL_DMA_IRQHandler+0x69c>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d03b      	beq.n	8003f4e <HAL_DMA_IRQHandler+0x516>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a7f      	ldr	r2, [pc, #508]	@ (80040d8 <HAL_DMA_IRQHandler+0x6a0>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d036      	beq.n	8003f4e <HAL_DMA_IRQHandler+0x516>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a7d      	ldr	r2, [pc, #500]	@ (80040dc <HAL_DMA_IRQHandler+0x6a4>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d031      	beq.n	8003f4e <HAL_DMA_IRQHandler+0x516>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a7c      	ldr	r2, [pc, #496]	@ (80040e0 <HAL_DMA_IRQHandler+0x6a8>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d02c      	beq.n	8003f4e <HAL_DMA_IRQHandler+0x516>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a7a      	ldr	r2, [pc, #488]	@ (80040e4 <HAL_DMA_IRQHandler+0x6ac>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d027      	beq.n	8003f4e <HAL_DMA_IRQHandler+0x516>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a79      	ldr	r2, [pc, #484]	@ (80040e8 <HAL_DMA_IRQHandler+0x6b0>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d022      	beq.n	8003f4e <HAL_DMA_IRQHandler+0x516>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a77      	ldr	r2, [pc, #476]	@ (80040ec <HAL_DMA_IRQHandler+0x6b4>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d01d      	beq.n	8003f4e <HAL_DMA_IRQHandler+0x516>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a76      	ldr	r2, [pc, #472]	@ (80040f0 <HAL_DMA_IRQHandler+0x6b8>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d018      	beq.n	8003f4e <HAL_DMA_IRQHandler+0x516>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a74      	ldr	r2, [pc, #464]	@ (80040f4 <HAL_DMA_IRQHandler+0x6bc>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d013      	beq.n	8003f4e <HAL_DMA_IRQHandler+0x516>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a73      	ldr	r2, [pc, #460]	@ (80040f8 <HAL_DMA_IRQHandler+0x6c0>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d00e      	beq.n	8003f4e <HAL_DMA_IRQHandler+0x516>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a71      	ldr	r2, [pc, #452]	@ (80040fc <HAL_DMA_IRQHandler+0x6c4>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d009      	beq.n	8003f4e <HAL_DMA_IRQHandler+0x516>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a70      	ldr	r2, [pc, #448]	@ (8004100 <HAL_DMA_IRQHandler+0x6c8>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d004      	beq.n	8003f4e <HAL_DMA_IRQHandler+0x516>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a6e      	ldr	r2, [pc, #440]	@ (8004104 <HAL_DMA_IRQHandler+0x6cc>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d10a      	bne.n	8003f64 <HAL_DMA_IRQHandler+0x52c>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0308 	and.w	r3, r3, #8
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	bf14      	ite	ne
 8003f5c:	2301      	movne	r3, #1
 8003f5e:	2300      	moveq	r3, #0
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	e009      	b.n	8003f78 <HAL_DMA_IRQHandler+0x540>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0304 	and.w	r3, r3, #4
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	bf14      	ite	ne
 8003f72:	2301      	movne	r3, #1
 8003f74:	2300      	moveq	r3, #0
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d03e      	beq.n	8003ffa <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f80:	f003 031f 	and.w	r3, r3, #31
 8003f84:	2210      	movs	r2, #16
 8003f86:	409a      	lsls	r2, r3
 8003f88:	6a3b      	ldr	r3, [r7, #32]
 8003f8a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d018      	beq.n	8003fcc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d108      	bne.n	8003fba <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d024      	beq.n	8003ffa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	4798      	blx	r3
 8003fb8:	e01f      	b.n	8003ffa <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d01b      	beq.n	8003ffa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	4798      	blx	r3
 8003fca:	e016      	b.n	8003ffa <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d107      	bne.n	8003fea <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f022 0208 	bic.w	r2, r2, #8
 8003fe8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d003      	beq.n	8003ffa <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ffe:	f003 031f 	and.w	r3, r3, #31
 8004002:	2220      	movs	r2, #32
 8004004:	409a      	lsls	r2, r3
 8004006:	69bb      	ldr	r3, [r7, #24]
 8004008:	4013      	ands	r3, r2
 800400a:	2b00      	cmp	r3, #0
 800400c:	f000 8110 	beq.w	8004230 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a2c      	ldr	r2, [pc, #176]	@ (80040c8 <HAL_DMA_IRQHandler+0x690>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d04a      	beq.n	80040b0 <HAL_DMA_IRQHandler+0x678>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a2b      	ldr	r2, [pc, #172]	@ (80040cc <HAL_DMA_IRQHandler+0x694>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d045      	beq.n	80040b0 <HAL_DMA_IRQHandler+0x678>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a29      	ldr	r2, [pc, #164]	@ (80040d0 <HAL_DMA_IRQHandler+0x698>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d040      	beq.n	80040b0 <HAL_DMA_IRQHandler+0x678>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a28      	ldr	r2, [pc, #160]	@ (80040d4 <HAL_DMA_IRQHandler+0x69c>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d03b      	beq.n	80040b0 <HAL_DMA_IRQHandler+0x678>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a26      	ldr	r2, [pc, #152]	@ (80040d8 <HAL_DMA_IRQHandler+0x6a0>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d036      	beq.n	80040b0 <HAL_DMA_IRQHandler+0x678>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a25      	ldr	r2, [pc, #148]	@ (80040dc <HAL_DMA_IRQHandler+0x6a4>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d031      	beq.n	80040b0 <HAL_DMA_IRQHandler+0x678>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a23      	ldr	r2, [pc, #140]	@ (80040e0 <HAL_DMA_IRQHandler+0x6a8>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d02c      	beq.n	80040b0 <HAL_DMA_IRQHandler+0x678>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a22      	ldr	r2, [pc, #136]	@ (80040e4 <HAL_DMA_IRQHandler+0x6ac>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d027      	beq.n	80040b0 <HAL_DMA_IRQHandler+0x678>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a20      	ldr	r2, [pc, #128]	@ (80040e8 <HAL_DMA_IRQHandler+0x6b0>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d022      	beq.n	80040b0 <HAL_DMA_IRQHandler+0x678>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a1f      	ldr	r2, [pc, #124]	@ (80040ec <HAL_DMA_IRQHandler+0x6b4>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d01d      	beq.n	80040b0 <HAL_DMA_IRQHandler+0x678>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a1d      	ldr	r2, [pc, #116]	@ (80040f0 <HAL_DMA_IRQHandler+0x6b8>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d018      	beq.n	80040b0 <HAL_DMA_IRQHandler+0x678>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a1c      	ldr	r2, [pc, #112]	@ (80040f4 <HAL_DMA_IRQHandler+0x6bc>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d013      	beq.n	80040b0 <HAL_DMA_IRQHandler+0x678>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a1a      	ldr	r2, [pc, #104]	@ (80040f8 <HAL_DMA_IRQHandler+0x6c0>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d00e      	beq.n	80040b0 <HAL_DMA_IRQHandler+0x678>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a19      	ldr	r2, [pc, #100]	@ (80040fc <HAL_DMA_IRQHandler+0x6c4>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d009      	beq.n	80040b0 <HAL_DMA_IRQHandler+0x678>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a17      	ldr	r2, [pc, #92]	@ (8004100 <HAL_DMA_IRQHandler+0x6c8>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d004      	beq.n	80040b0 <HAL_DMA_IRQHandler+0x678>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a16      	ldr	r2, [pc, #88]	@ (8004104 <HAL_DMA_IRQHandler+0x6cc>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d12b      	bne.n	8004108 <HAL_DMA_IRQHandler+0x6d0>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0310 	and.w	r3, r3, #16
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	bf14      	ite	ne
 80040be:	2301      	movne	r3, #1
 80040c0:	2300      	moveq	r3, #0
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	e02a      	b.n	800411c <HAL_DMA_IRQHandler+0x6e4>
 80040c6:	bf00      	nop
 80040c8:	40020010 	.word	0x40020010
 80040cc:	40020028 	.word	0x40020028
 80040d0:	40020040 	.word	0x40020040
 80040d4:	40020058 	.word	0x40020058
 80040d8:	40020070 	.word	0x40020070
 80040dc:	40020088 	.word	0x40020088
 80040e0:	400200a0 	.word	0x400200a0
 80040e4:	400200b8 	.word	0x400200b8
 80040e8:	40020410 	.word	0x40020410
 80040ec:	40020428 	.word	0x40020428
 80040f0:	40020440 	.word	0x40020440
 80040f4:	40020458 	.word	0x40020458
 80040f8:	40020470 	.word	0x40020470
 80040fc:	40020488 	.word	0x40020488
 8004100:	400204a0 	.word	0x400204a0
 8004104:	400204b8 	.word	0x400204b8
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0302 	and.w	r3, r3, #2
 8004112:	2b00      	cmp	r3, #0
 8004114:	bf14      	ite	ne
 8004116:	2301      	movne	r3, #1
 8004118:	2300      	moveq	r3, #0
 800411a:	b2db      	uxtb	r3, r3
 800411c:	2b00      	cmp	r3, #0
 800411e:	f000 8087 	beq.w	8004230 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004126:	f003 031f 	and.w	r3, r3, #31
 800412a:	2220      	movs	r2, #32
 800412c:	409a      	lsls	r2, r3
 800412e:	6a3b      	ldr	r3, [r7, #32]
 8004130:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004138:	b2db      	uxtb	r3, r3
 800413a:	2b04      	cmp	r3, #4
 800413c:	d139      	bne.n	80041b2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f022 0216 	bic.w	r2, r2, #22
 800414c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	695a      	ldr	r2, [r3, #20]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800415c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004162:	2b00      	cmp	r3, #0
 8004164:	d103      	bne.n	800416e <HAL_DMA_IRQHandler+0x736>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800416a:	2b00      	cmp	r3, #0
 800416c:	d007      	beq.n	800417e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f022 0208 	bic.w	r2, r2, #8
 800417c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004182:	f003 031f 	and.w	r3, r3, #31
 8004186:	223f      	movs	r2, #63	@ 0x3f
 8004188:	409a      	lsls	r2, r3
 800418a:	6a3b      	ldr	r3, [r7, #32]
 800418c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2201      	movs	r2, #1
 8004192:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2200      	movs	r2, #0
 800419a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	f000 834a 	beq.w	800483c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	4798      	blx	r3
          }
          return;
 80041b0:	e344      	b.n	800483c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d018      	beq.n	80041f2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d108      	bne.n	80041e0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d02c      	beq.n	8004230 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	4798      	blx	r3
 80041de:	e027      	b.n	8004230 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d023      	beq.n	8004230 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	4798      	blx	r3
 80041f0:	e01e      	b.n	8004230 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d10f      	bne.n	8004220 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f022 0210 	bic.w	r2, r2, #16
 800420e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2201      	movs	r2, #1
 8004214:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2200      	movs	r2, #0
 800421c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004224:	2b00      	cmp	r3, #0
 8004226:	d003      	beq.n	8004230 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004234:	2b00      	cmp	r3, #0
 8004236:	f000 8306 	beq.w	8004846 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800423e:	f003 0301 	and.w	r3, r3, #1
 8004242:	2b00      	cmp	r3, #0
 8004244:	f000 8088 	beq.w	8004358 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2204      	movs	r2, #4
 800424c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a7a      	ldr	r2, [pc, #488]	@ (8004440 <HAL_DMA_IRQHandler+0xa08>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d04a      	beq.n	80042f0 <HAL_DMA_IRQHandler+0x8b8>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a79      	ldr	r2, [pc, #484]	@ (8004444 <HAL_DMA_IRQHandler+0xa0c>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d045      	beq.n	80042f0 <HAL_DMA_IRQHandler+0x8b8>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a77      	ldr	r2, [pc, #476]	@ (8004448 <HAL_DMA_IRQHandler+0xa10>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d040      	beq.n	80042f0 <HAL_DMA_IRQHandler+0x8b8>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a76      	ldr	r2, [pc, #472]	@ (800444c <HAL_DMA_IRQHandler+0xa14>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d03b      	beq.n	80042f0 <HAL_DMA_IRQHandler+0x8b8>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a74      	ldr	r2, [pc, #464]	@ (8004450 <HAL_DMA_IRQHandler+0xa18>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d036      	beq.n	80042f0 <HAL_DMA_IRQHandler+0x8b8>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a73      	ldr	r2, [pc, #460]	@ (8004454 <HAL_DMA_IRQHandler+0xa1c>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d031      	beq.n	80042f0 <HAL_DMA_IRQHandler+0x8b8>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a71      	ldr	r2, [pc, #452]	@ (8004458 <HAL_DMA_IRQHandler+0xa20>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d02c      	beq.n	80042f0 <HAL_DMA_IRQHandler+0x8b8>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a70      	ldr	r2, [pc, #448]	@ (800445c <HAL_DMA_IRQHandler+0xa24>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d027      	beq.n	80042f0 <HAL_DMA_IRQHandler+0x8b8>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a6e      	ldr	r2, [pc, #440]	@ (8004460 <HAL_DMA_IRQHandler+0xa28>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d022      	beq.n	80042f0 <HAL_DMA_IRQHandler+0x8b8>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a6d      	ldr	r2, [pc, #436]	@ (8004464 <HAL_DMA_IRQHandler+0xa2c>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d01d      	beq.n	80042f0 <HAL_DMA_IRQHandler+0x8b8>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a6b      	ldr	r2, [pc, #428]	@ (8004468 <HAL_DMA_IRQHandler+0xa30>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d018      	beq.n	80042f0 <HAL_DMA_IRQHandler+0x8b8>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a6a      	ldr	r2, [pc, #424]	@ (800446c <HAL_DMA_IRQHandler+0xa34>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d013      	beq.n	80042f0 <HAL_DMA_IRQHandler+0x8b8>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a68      	ldr	r2, [pc, #416]	@ (8004470 <HAL_DMA_IRQHandler+0xa38>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d00e      	beq.n	80042f0 <HAL_DMA_IRQHandler+0x8b8>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a67      	ldr	r2, [pc, #412]	@ (8004474 <HAL_DMA_IRQHandler+0xa3c>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d009      	beq.n	80042f0 <HAL_DMA_IRQHandler+0x8b8>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a65      	ldr	r2, [pc, #404]	@ (8004478 <HAL_DMA_IRQHandler+0xa40>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d004      	beq.n	80042f0 <HAL_DMA_IRQHandler+0x8b8>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a64      	ldr	r2, [pc, #400]	@ (800447c <HAL_DMA_IRQHandler+0xa44>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d108      	bne.n	8004302 <HAL_DMA_IRQHandler+0x8ca>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f022 0201 	bic.w	r2, r2, #1
 80042fe:	601a      	str	r2, [r3, #0]
 8004300:	e007      	b.n	8004312 <HAL_DMA_IRQHandler+0x8da>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f022 0201 	bic.w	r2, r2, #1
 8004310:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	3301      	adds	r3, #1
 8004316:	60fb      	str	r3, [r7, #12]
 8004318:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800431a:	429a      	cmp	r2, r3
 800431c:	d307      	bcc.n	800432e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0301 	and.w	r3, r3, #1
 8004328:	2b00      	cmp	r3, #0
 800432a:	d1f2      	bne.n	8004312 <HAL_DMA_IRQHandler+0x8da>
 800432c:	e000      	b.n	8004330 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800432e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0301 	and.w	r3, r3, #1
 800433a:	2b00      	cmp	r3, #0
 800433c:	d004      	beq.n	8004348 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2203      	movs	r2, #3
 8004342:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8004346:	e003      	b.n	8004350 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2200      	movs	r2, #0
 8004354:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800435c:	2b00      	cmp	r3, #0
 800435e:	f000 8272 	beq.w	8004846 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	4798      	blx	r3
 800436a:	e26c      	b.n	8004846 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a43      	ldr	r2, [pc, #268]	@ (8004480 <HAL_DMA_IRQHandler+0xa48>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d022      	beq.n	80043bc <HAL_DMA_IRQHandler+0x984>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a42      	ldr	r2, [pc, #264]	@ (8004484 <HAL_DMA_IRQHandler+0xa4c>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d01d      	beq.n	80043bc <HAL_DMA_IRQHandler+0x984>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a40      	ldr	r2, [pc, #256]	@ (8004488 <HAL_DMA_IRQHandler+0xa50>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d018      	beq.n	80043bc <HAL_DMA_IRQHandler+0x984>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a3f      	ldr	r2, [pc, #252]	@ (800448c <HAL_DMA_IRQHandler+0xa54>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d013      	beq.n	80043bc <HAL_DMA_IRQHandler+0x984>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a3d      	ldr	r2, [pc, #244]	@ (8004490 <HAL_DMA_IRQHandler+0xa58>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d00e      	beq.n	80043bc <HAL_DMA_IRQHandler+0x984>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a3c      	ldr	r2, [pc, #240]	@ (8004494 <HAL_DMA_IRQHandler+0xa5c>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d009      	beq.n	80043bc <HAL_DMA_IRQHandler+0x984>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a3a      	ldr	r2, [pc, #232]	@ (8004498 <HAL_DMA_IRQHandler+0xa60>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d004      	beq.n	80043bc <HAL_DMA_IRQHandler+0x984>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a39      	ldr	r2, [pc, #228]	@ (800449c <HAL_DMA_IRQHandler+0xa64>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d101      	bne.n	80043c0 <HAL_DMA_IRQHandler+0x988>
 80043bc:	2301      	movs	r3, #1
 80043be:	e000      	b.n	80043c2 <HAL_DMA_IRQHandler+0x98a>
 80043c0:	2300      	movs	r3, #0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	f000 823f 	beq.w	8004846 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043d4:	f003 031f 	and.w	r3, r3, #31
 80043d8:	2204      	movs	r2, #4
 80043da:	409a      	lsls	r2, r3
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	4013      	ands	r3, r2
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	f000 80cd 	beq.w	8004580 <HAL_DMA_IRQHandler+0xb48>
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	f003 0304 	and.w	r3, r3, #4
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	f000 80c7 	beq.w	8004580 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043f6:	f003 031f 	and.w	r3, r3, #31
 80043fa:	2204      	movs	r2, #4
 80043fc:	409a      	lsls	r2, r3
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004408:	2b00      	cmp	r3, #0
 800440a:	d049      	beq.n	80044a0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d109      	bne.n	800442a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800441a:	2b00      	cmp	r3, #0
 800441c:	f000 8210 	beq.w	8004840 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004428:	e20a      	b.n	8004840 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800442e:	2b00      	cmp	r3, #0
 8004430:	f000 8206 	beq.w	8004840 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800443c:	e200      	b.n	8004840 <HAL_DMA_IRQHandler+0xe08>
 800443e:	bf00      	nop
 8004440:	40020010 	.word	0x40020010
 8004444:	40020028 	.word	0x40020028
 8004448:	40020040 	.word	0x40020040
 800444c:	40020058 	.word	0x40020058
 8004450:	40020070 	.word	0x40020070
 8004454:	40020088 	.word	0x40020088
 8004458:	400200a0 	.word	0x400200a0
 800445c:	400200b8 	.word	0x400200b8
 8004460:	40020410 	.word	0x40020410
 8004464:	40020428 	.word	0x40020428
 8004468:	40020440 	.word	0x40020440
 800446c:	40020458 	.word	0x40020458
 8004470:	40020470 	.word	0x40020470
 8004474:	40020488 	.word	0x40020488
 8004478:	400204a0 	.word	0x400204a0
 800447c:	400204b8 	.word	0x400204b8
 8004480:	58025408 	.word	0x58025408
 8004484:	5802541c 	.word	0x5802541c
 8004488:	58025430 	.word	0x58025430
 800448c:	58025444 	.word	0x58025444
 8004490:	58025458 	.word	0x58025458
 8004494:	5802546c 	.word	0x5802546c
 8004498:	58025480 	.word	0x58025480
 800449c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	f003 0320 	and.w	r3, r3, #32
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d160      	bne.n	800456c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a7f      	ldr	r2, [pc, #508]	@ (80046ac <HAL_DMA_IRQHandler+0xc74>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d04a      	beq.n	800454a <HAL_DMA_IRQHandler+0xb12>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a7d      	ldr	r2, [pc, #500]	@ (80046b0 <HAL_DMA_IRQHandler+0xc78>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d045      	beq.n	800454a <HAL_DMA_IRQHandler+0xb12>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a7c      	ldr	r2, [pc, #496]	@ (80046b4 <HAL_DMA_IRQHandler+0xc7c>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d040      	beq.n	800454a <HAL_DMA_IRQHandler+0xb12>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a7a      	ldr	r2, [pc, #488]	@ (80046b8 <HAL_DMA_IRQHandler+0xc80>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d03b      	beq.n	800454a <HAL_DMA_IRQHandler+0xb12>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a79      	ldr	r2, [pc, #484]	@ (80046bc <HAL_DMA_IRQHandler+0xc84>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d036      	beq.n	800454a <HAL_DMA_IRQHandler+0xb12>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a77      	ldr	r2, [pc, #476]	@ (80046c0 <HAL_DMA_IRQHandler+0xc88>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d031      	beq.n	800454a <HAL_DMA_IRQHandler+0xb12>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a76      	ldr	r2, [pc, #472]	@ (80046c4 <HAL_DMA_IRQHandler+0xc8c>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d02c      	beq.n	800454a <HAL_DMA_IRQHandler+0xb12>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a74      	ldr	r2, [pc, #464]	@ (80046c8 <HAL_DMA_IRQHandler+0xc90>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d027      	beq.n	800454a <HAL_DMA_IRQHandler+0xb12>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a73      	ldr	r2, [pc, #460]	@ (80046cc <HAL_DMA_IRQHandler+0xc94>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d022      	beq.n	800454a <HAL_DMA_IRQHandler+0xb12>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a71      	ldr	r2, [pc, #452]	@ (80046d0 <HAL_DMA_IRQHandler+0xc98>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d01d      	beq.n	800454a <HAL_DMA_IRQHandler+0xb12>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a70      	ldr	r2, [pc, #448]	@ (80046d4 <HAL_DMA_IRQHandler+0xc9c>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d018      	beq.n	800454a <HAL_DMA_IRQHandler+0xb12>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a6e      	ldr	r2, [pc, #440]	@ (80046d8 <HAL_DMA_IRQHandler+0xca0>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d013      	beq.n	800454a <HAL_DMA_IRQHandler+0xb12>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a6d      	ldr	r2, [pc, #436]	@ (80046dc <HAL_DMA_IRQHandler+0xca4>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d00e      	beq.n	800454a <HAL_DMA_IRQHandler+0xb12>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a6b      	ldr	r2, [pc, #428]	@ (80046e0 <HAL_DMA_IRQHandler+0xca8>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d009      	beq.n	800454a <HAL_DMA_IRQHandler+0xb12>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a6a      	ldr	r2, [pc, #424]	@ (80046e4 <HAL_DMA_IRQHandler+0xcac>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d004      	beq.n	800454a <HAL_DMA_IRQHandler+0xb12>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a68      	ldr	r2, [pc, #416]	@ (80046e8 <HAL_DMA_IRQHandler+0xcb0>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d108      	bne.n	800455c <HAL_DMA_IRQHandler+0xb24>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f022 0208 	bic.w	r2, r2, #8
 8004558:	601a      	str	r2, [r3, #0]
 800455a:	e007      	b.n	800456c <HAL_DMA_IRQHandler+0xb34>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f022 0204 	bic.w	r2, r2, #4
 800456a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004570:	2b00      	cmp	r3, #0
 8004572:	f000 8165 	beq.w	8004840 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800457e:	e15f      	b.n	8004840 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004584:	f003 031f 	and.w	r3, r3, #31
 8004588:	2202      	movs	r2, #2
 800458a:	409a      	lsls	r2, r3
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	4013      	ands	r3, r2
 8004590:	2b00      	cmp	r3, #0
 8004592:	f000 80c5 	beq.w	8004720 <HAL_DMA_IRQHandler+0xce8>
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	f003 0302 	and.w	r3, r3, #2
 800459c:	2b00      	cmp	r3, #0
 800459e:	f000 80bf 	beq.w	8004720 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045a6:	f003 031f 	and.w	r3, r3, #31
 80045aa:	2202      	movs	r2, #2
 80045ac:	409a      	lsls	r2, r3
 80045ae:	69fb      	ldr	r3, [r7, #28]
 80045b0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d018      	beq.n	80045ee <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d109      	bne.n	80045da <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	f000 813a 	beq.w	8004844 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80045d8:	e134      	b.n	8004844 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045de:	2b00      	cmp	r3, #0
 80045e0:	f000 8130 	beq.w	8004844 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80045ec:	e12a      	b.n	8004844 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	f003 0320 	and.w	r3, r3, #32
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	f040 8089 	bne.w	800470c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a2b      	ldr	r2, [pc, #172]	@ (80046ac <HAL_DMA_IRQHandler+0xc74>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d04a      	beq.n	800469a <HAL_DMA_IRQHandler+0xc62>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a29      	ldr	r2, [pc, #164]	@ (80046b0 <HAL_DMA_IRQHandler+0xc78>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d045      	beq.n	800469a <HAL_DMA_IRQHandler+0xc62>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a28      	ldr	r2, [pc, #160]	@ (80046b4 <HAL_DMA_IRQHandler+0xc7c>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d040      	beq.n	800469a <HAL_DMA_IRQHandler+0xc62>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a26      	ldr	r2, [pc, #152]	@ (80046b8 <HAL_DMA_IRQHandler+0xc80>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d03b      	beq.n	800469a <HAL_DMA_IRQHandler+0xc62>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a25      	ldr	r2, [pc, #148]	@ (80046bc <HAL_DMA_IRQHandler+0xc84>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d036      	beq.n	800469a <HAL_DMA_IRQHandler+0xc62>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a23      	ldr	r2, [pc, #140]	@ (80046c0 <HAL_DMA_IRQHandler+0xc88>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d031      	beq.n	800469a <HAL_DMA_IRQHandler+0xc62>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a22      	ldr	r2, [pc, #136]	@ (80046c4 <HAL_DMA_IRQHandler+0xc8c>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d02c      	beq.n	800469a <HAL_DMA_IRQHandler+0xc62>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a20      	ldr	r2, [pc, #128]	@ (80046c8 <HAL_DMA_IRQHandler+0xc90>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d027      	beq.n	800469a <HAL_DMA_IRQHandler+0xc62>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a1f      	ldr	r2, [pc, #124]	@ (80046cc <HAL_DMA_IRQHandler+0xc94>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d022      	beq.n	800469a <HAL_DMA_IRQHandler+0xc62>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a1d      	ldr	r2, [pc, #116]	@ (80046d0 <HAL_DMA_IRQHandler+0xc98>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d01d      	beq.n	800469a <HAL_DMA_IRQHandler+0xc62>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a1c      	ldr	r2, [pc, #112]	@ (80046d4 <HAL_DMA_IRQHandler+0xc9c>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d018      	beq.n	800469a <HAL_DMA_IRQHandler+0xc62>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a1a      	ldr	r2, [pc, #104]	@ (80046d8 <HAL_DMA_IRQHandler+0xca0>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d013      	beq.n	800469a <HAL_DMA_IRQHandler+0xc62>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a19      	ldr	r2, [pc, #100]	@ (80046dc <HAL_DMA_IRQHandler+0xca4>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d00e      	beq.n	800469a <HAL_DMA_IRQHandler+0xc62>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a17      	ldr	r2, [pc, #92]	@ (80046e0 <HAL_DMA_IRQHandler+0xca8>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d009      	beq.n	800469a <HAL_DMA_IRQHandler+0xc62>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a16      	ldr	r2, [pc, #88]	@ (80046e4 <HAL_DMA_IRQHandler+0xcac>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d004      	beq.n	800469a <HAL_DMA_IRQHandler+0xc62>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a14      	ldr	r2, [pc, #80]	@ (80046e8 <HAL_DMA_IRQHandler+0xcb0>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d128      	bne.n	80046ec <HAL_DMA_IRQHandler+0xcb4>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f022 0214 	bic.w	r2, r2, #20
 80046a8:	601a      	str	r2, [r3, #0]
 80046aa:	e027      	b.n	80046fc <HAL_DMA_IRQHandler+0xcc4>
 80046ac:	40020010 	.word	0x40020010
 80046b0:	40020028 	.word	0x40020028
 80046b4:	40020040 	.word	0x40020040
 80046b8:	40020058 	.word	0x40020058
 80046bc:	40020070 	.word	0x40020070
 80046c0:	40020088 	.word	0x40020088
 80046c4:	400200a0 	.word	0x400200a0
 80046c8:	400200b8 	.word	0x400200b8
 80046cc:	40020410 	.word	0x40020410
 80046d0:	40020428 	.word	0x40020428
 80046d4:	40020440 	.word	0x40020440
 80046d8:	40020458 	.word	0x40020458
 80046dc:	40020470 	.word	0x40020470
 80046e0:	40020488 	.word	0x40020488
 80046e4:	400204a0 	.word	0x400204a0
 80046e8:	400204b8 	.word	0x400204b8
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f022 020a 	bic.w	r2, r2, #10
 80046fa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2200      	movs	r2, #0
 8004708:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004710:	2b00      	cmp	r3, #0
 8004712:	f000 8097 	beq.w	8004844 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800471e:	e091      	b.n	8004844 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004724:	f003 031f 	and.w	r3, r3, #31
 8004728:	2208      	movs	r2, #8
 800472a:	409a      	lsls	r2, r3
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	4013      	ands	r3, r2
 8004730:	2b00      	cmp	r3, #0
 8004732:	f000 8088 	beq.w	8004846 <HAL_DMA_IRQHandler+0xe0e>
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	f003 0308 	and.w	r3, r3, #8
 800473c:	2b00      	cmp	r3, #0
 800473e:	f000 8082 	beq.w	8004846 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a41      	ldr	r2, [pc, #260]	@ (800484c <HAL_DMA_IRQHandler+0xe14>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d04a      	beq.n	80047e2 <HAL_DMA_IRQHandler+0xdaa>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a3f      	ldr	r2, [pc, #252]	@ (8004850 <HAL_DMA_IRQHandler+0xe18>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d045      	beq.n	80047e2 <HAL_DMA_IRQHandler+0xdaa>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a3e      	ldr	r2, [pc, #248]	@ (8004854 <HAL_DMA_IRQHandler+0xe1c>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d040      	beq.n	80047e2 <HAL_DMA_IRQHandler+0xdaa>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a3c      	ldr	r2, [pc, #240]	@ (8004858 <HAL_DMA_IRQHandler+0xe20>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d03b      	beq.n	80047e2 <HAL_DMA_IRQHandler+0xdaa>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a3b      	ldr	r2, [pc, #236]	@ (800485c <HAL_DMA_IRQHandler+0xe24>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d036      	beq.n	80047e2 <HAL_DMA_IRQHandler+0xdaa>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a39      	ldr	r2, [pc, #228]	@ (8004860 <HAL_DMA_IRQHandler+0xe28>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d031      	beq.n	80047e2 <HAL_DMA_IRQHandler+0xdaa>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a38      	ldr	r2, [pc, #224]	@ (8004864 <HAL_DMA_IRQHandler+0xe2c>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d02c      	beq.n	80047e2 <HAL_DMA_IRQHandler+0xdaa>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a36      	ldr	r2, [pc, #216]	@ (8004868 <HAL_DMA_IRQHandler+0xe30>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d027      	beq.n	80047e2 <HAL_DMA_IRQHandler+0xdaa>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a35      	ldr	r2, [pc, #212]	@ (800486c <HAL_DMA_IRQHandler+0xe34>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d022      	beq.n	80047e2 <HAL_DMA_IRQHandler+0xdaa>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a33      	ldr	r2, [pc, #204]	@ (8004870 <HAL_DMA_IRQHandler+0xe38>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d01d      	beq.n	80047e2 <HAL_DMA_IRQHandler+0xdaa>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a32      	ldr	r2, [pc, #200]	@ (8004874 <HAL_DMA_IRQHandler+0xe3c>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d018      	beq.n	80047e2 <HAL_DMA_IRQHandler+0xdaa>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a30      	ldr	r2, [pc, #192]	@ (8004878 <HAL_DMA_IRQHandler+0xe40>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d013      	beq.n	80047e2 <HAL_DMA_IRQHandler+0xdaa>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a2f      	ldr	r2, [pc, #188]	@ (800487c <HAL_DMA_IRQHandler+0xe44>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d00e      	beq.n	80047e2 <HAL_DMA_IRQHandler+0xdaa>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a2d      	ldr	r2, [pc, #180]	@ (8004880 <HAL_DMA_IRQHandler+0xe48>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d009      	beq.n	80047e2 <HAL_DMA_IRQHandler+0xdaa>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a2c      	ldr	r2, [pc, #176]	@ (8004884 <HAL_DMA_IRQHandler+0xe4c>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d004      	beq.n	80047e2 <HAL_DMA_IRQHandler+0xdaa>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a2a      	ldr	r2, [pc, #168]	@ (8004888 <HAL_DMA_IRQHandler+0xe50>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d108      	bne.n	80047f4 <HAL_DMA_IRQHandler+0xdbc>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f022 021c 	bic.w	r2, r2, #28
 80047f0:	601a      	str	r2, [r3, #0]
 80047f2:	e007      	b.n	8004804 <HAL_DMA_IRQHandler+0xdcc>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f022 020e 	bic.w	r2, r2, #14
 8004802:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004808:	f003 031f 	and.w	r3, r3, #31
 800480c:	2201      	movs	r2, #1
 800480e:	409a      	lsls	r2, r3
 8004810:	69fb      	ldr	r3, [r7, #28]
 8004812:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2201      	movs	r2, #1
 800481e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800482e:	2b00      	cmp	r3, #0
 8004830:	d009      	beq.n	8004846 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	4798      	blx	r3
 800483a:	e004      	b.n	8004846 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800483c:	bf00      	nop
 800483e:	e002      	b.n	8004846 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004840:	bf00      	nop
 8004842:	e000      	b.n	8004846 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004844:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004846:	3728      	adds	r7, #40	@ 0x28
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}
 800484c:	40020010 	.word	0x40020010
 8004850:	40020028 	.word	0x40020028
 8004854:	40020040 	.word	0x40020040
 8004858:	40020058 	.word	0x40020058
 800485c:	40020070 	.word	0x40020070
 8004860:	40020088 	.word	0x40020088
 8004864:	400200a0 	.word	0x400200a0
 8004868:	400200b8 	.word	0x400200b8
 800486c:	40020410 	.word	0x40020410
 8004870:	40020428 	.word	0x40020428
 8004874:	40020440 	.word	0x40020440
 8004878:	40020458 	.word	0x40020458
 800487c:	40020470 	.word	0x40020470
 8004880:	40020488 	.word	0x40020488
 8004884:	400204a0 	.word	0x400204a0
 8004888:	400204b8 	.word	0x400204b8

0800488c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800488c:	b480      	push	{r7}
 800488e:	b087      	sub	sp, #28
 8004890:	af00      	add	r7, sp, #0
 8004892:	60f8      	str	r0, [r7, #12]
 8004894:	60b9      	str	r1, [r7, #8]
 8004896:	607a      	str	r2, [r7, #4]
 8004898:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800489e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048a4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a7f      	ldr	r2, [pc, #508]	@ (8004aa8 <DMA_SetConfig+0x21c>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d072      	beq.n	8004996 <DMA_SetConfig+0x10a>
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a7d      	ldr	r2, [pc, #500]	@ (8004aac <DMA_SetConfig+0x220>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d06d      	beq.n	8004996 <DMA_SetConfig+0x10a>
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a7c      	ldr	r2, [pc, #496]	@ (8004ab0 <DMA_SetConfig+0x224>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d068      	beq.n	8004996 <DMA_SetConfig+0x10a>
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a7a      	ldr	r2, [pc, #488]	@ (8004ab4 <DMA_SetConfig+0x228>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d063      	beq.n	8004996 <DMA_SetConfig+0x10a>
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a79      	ldr	r2, [pc, #484]	@ (8004ab8 <DMA_SetConfig+0x22c>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d05e      	beq.n	8004996 <DMA_SetConfig+0x10a>
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a77      	ldr	r2, [pc, #476]	@ (8004abc <DMA_SetConfig+0x230>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d059      	beq.n	8004996 <DMA_SetConfig+0x10a>
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a76      	ldr	r2, [pc, #472]	@ (8004ac0 <DMA_SetConfig+0x234>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d054      	beq.n	8004996 <DMA_SetConfig+0x10a>
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a74      	ldr	r2, [pc, #464]	@ (8004ac4 <DMA_SetConfig+0x238>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d04f      	beq.n	8004996 <DMA_SetConfig+0x10a>
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a73      	ldr	r2, [pc, #460]	@ (8004ac8 <DMA_SetConfig+0x23c>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d04a      	beq.n	8004996 <DMA_SetConfig+0x10a>
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a71      	ldr	r2, [pc, #452]	@ (8004acc <DMA_SetConfig+0x240>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d045      	beq.n	8004996 <DMA_SetConfig+0x10a>
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a70      	ldr	r2, [pc, #448]	@ (8004ad0 <DMA_SetConfig+0x244>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d040      	beq.n	8004996 <DMA_SetConfig+0x10a>
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a6e      	ldr	r2, [pc, #440]	@ (8004ad4 <DMA_SetConfig+0x248>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d03b      	beq.n	8004996 <DMA_SetConfig+0x10a>
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a6d      	ldr	r2, [pc, #436]	@ (8004ad8 <DMA_SetConfig+0x24c>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d036      	beq.n	8004996 <DMA_SetConfig+0x10a>
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a6b      	ldr	r2, [pc, #428]	@ (8004adc <DMA_SetConfig+0x250>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d031      	beq.n	8004996 <DMA_SetConfig+0x10a>
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a6a      	ldr	r2, [pc, #424]	@ (8004ae0 <DMA_SetConfig+0x254>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d02c      	beq.n	8004996 <DMA_SetConfig+0x10a>
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a68      	ldr	r2, [pc, #416]	@ (8004ae4 <DMA_SetConfig+0x258>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d027      	beq.n	8004996 <DMA_SetConfig+0x10a>
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a67      	ldr	r2, [pc, #412]	@ (8004ae8 <DMA_SetConfig+0x25c>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d022      	beq.n	8004996 <DMA_SetConfig+0x10a>
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a65      	ldr	r2, [pc, #404]	@ (8004aec <DMA_SetConfig+0x260>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d01d      	beq.n	8004996 <DMA_SetConfig+0x10a>
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a64      	ldr	r2, [pc, #400]	@ (8004af0 <DMA_SetConfig+0x264>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d018      	beq.n	8004996 <DMA_SetConfig+0x10a>
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a62      	ldr	r2, [pc, #392]	@ (8004af4 <DMA_SetConfig+0x268>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d013      	beq.n	8004996 <DMA_SetConfig+0x10a>
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a61      	ldr	r2, [pc, #388]	@ (8004af8 <DMA_SetConfig+0x26c>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d00e      	beq.n	8004996 <DMA_SetConfig+0x10a>
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a5f      	ldr	r2, [pc, #380]	@ (8004afc <DMA_SetConfig+0x270>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d009      	beq.n	8004996 <DMA_SetConfig+0x10a>
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a5e      	ldr	r2, [pc, #376]	@ (8004b00 <DMA_SetConfig+0x274>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d004      	beq.n	8004996 <DMA_SetConfig+0x10a>
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a5c      	ldr	r2, [pc, #368]	@ (8004b04 <DMA_SetConfig+0x278>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d101      	bne.n	800499a <DMA_SetConfig+0x10e>
 8004996:	2301      	movs	r3, #1
 8004998:	e000      	b.n	800499c <DMA_SetConfig+0x110>
 800499a:	2300      	movs	r3, #0
 800499c:	2b00      	cmp	r3, #0
 800499e:	d00d      	beq.n	80049bc <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80049a4:	68fa      	ldr	r2, [r7, #12]
 80049a6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80049a8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d004      	beq.n	80049bc <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049b6:	68fa      	ldr	r2, [r7, #12]
 80049b8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80049ba:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a39      	ldr	r2, [pc, #228]	@ (8004aa8 <DMA_SetConfig+0x21c>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d04a      	beq.n	8004a5c <DMA_SetConfig+0x1d0>
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a38      	ldr	r2, [pc, #224]	@ (8004aac <DMA_SetConfig+0x220>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d045      	beq.n	8004a5c <DMA_SetConfig+0x1d0>
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a36      	ldr	r2, [pc, #216]	@ (8004ab0 <DMA_SetConfig+0x224>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d040      	beq.n	8004a5c <DMA_SetConfig+0x1d0>
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a35      	ldr	r2, [pc, #212]	@ (8004ab4 <DMA_SetConfig+0x228>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d03b      	beq.n	8004a5c <DMA_SetConfig+0x1d0>
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a33      	ldr	r2, [pc, #204]	@ (8004ab8 <DMA_SetConfig+0x22c>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d036      	beq.n	8004a5c <DMA_SetConfig+0x1d0>
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a32      	ldr	r2, [pc, #200]	@ (8004abc <DMA_SetConfig+0x230>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d031      	beq.n	8004a5c <DMA_SetConfig+0x1d0>
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a30      	ldr	r2, [pc, #192]	@ (8004ac0 <DMA_SetConfig+0x234>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d02c      	beq.n	8004a5c <DMA_SetConfig+0x1d0>
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a2f      	ldr	r2, [pc, #188]	@ (8004ac4 <DMA_SetConfig+0x238>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d027      	beq.n	8004a5c <DMA_SetConfig+0x1d0>
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a2d      	ldr	r2, [pc, #180]	@ (8004ac8 <DMA_SetConfig+0x23c>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d022      	beq.n	8004a5c <DMA_SetConfig+0x1d0>
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a2c      	ldr	r2, [pc, #176]	@ (8004acc <DMA_SetConfig+0x240>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d01d      	beq.n	8004a5c <DMA_SetConfig+0x1d0>
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a2a      	ldr	r2, [pc, #168]	@ (8004ad0 <DMA_SetConfig+0x244>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d018      	beq.n	8004a5c <DMA_SetConfig+0x1d0>
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a29      	ldr	r2, [pc, #164]	@ (8004ad4 <DMA_SetConfig+0x248>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d013      	beq.n	8004a5c <DMA_SetConfig+0x1d0>
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a27      	ldr	r2, [pc, #156]	@ (8004ad8 <DMA_SetConfig+0x24c>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d00e      	beq.n	8004a5c <DMA_SetConfig+0x1d0>
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a26      	ldr	r2, [pc, #152]	@ (8004adc <DMA_SetConfig+0x250>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d009      	beq.n	8004a5c <DMA_SetConfig+0x1d0>
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a24      	ldr	r2, [pc, #144]	@ (8004ae0 <DMA_SetConfig+0x254>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d004      	beq.n	8004a5c <DMA_SetConfig+0x1d0>
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a23      	ldr	r2, [pc, #140]	@ (8004ae4 <DMA_SetConfig+0x258>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d101      	bne.n	8004a60 <DMA_SetConfig+0x1d4>
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e000      	b.n	8004a62 <DMA_SetConfig+0x1d6>
 8004a60:	2300      	movs	r3, #0
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d059      	beq.n	8004b1a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a6a:	f003 031f 	and.w	r3, r3, #31
 8004a6e:	223f      	movs	r2, #63	@ 0x3f
 8004a70:	409a      	lsls	r2, r3
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004a84:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	683a      	ldr	r2, [r7, #0]
 8004a8c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	2b40      	cmp	r3, #64	@ 0x40
 8004a94:	d138      	bne.n	8004b08 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	68ba      	ldr	r2, [r7, #8]
 8004aa4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004aa6:	e086      	b.n	8004bb6 <DMA_SetConfig+0x32a>
 8004aa8:	40020010 	.word	0x40020010
 8004aac:	40020028 	.word	0x40020028
 8004ab0:	40020040 	.word	0x40020040
 8004ab4:	40020058 	.word	0x40020058
 8004ab8:	40020070 	.word	0x40020070
 8004abc:	40020088 	.word	0x40020088
 8004ac0:	400200a0 	.word	0x400200a0
 8004ac4:	400200b8 	.word	0x400200b8
 8004ac8:	40020410 	.word	0x40020410
 8004acc:	40020428 	.word	0x40020428
 8004ad0:	40020440 	.word	0x40020440
 8004ad4:	40020458 	.word	0x40020458
 8004ad8:	40020470 	.word	0x40020470
 8004adc:	40020488 	.word	0x40020488
 8004ae0:	400204a0 	.word	0x400204a0
 8004ae4:	400204b8 	.word	0x400204b8
 8004ae8:	58025408 	.word	0x58025408
 8004aec:	5802541c 	.word	0x5802541c
 8004af0:	58025430 	.word	0x58025430
 8004af4:	58025444 	.word	0x58025444
 8004af8:	58025458 	.word	0x58025458
 8004afc:	5802546c 	.word	0x5802546c
 8004b00:	58025480 	.word	0x58025480
 8004b04:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	68ba      	ldr	r2, [r7, #8]
 8004b0e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	60da      	str	r2, [r3, #12]
}
 8004b18:	e04d      	b.n	8004bb6 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a29      	ldr	r2, [pc, #164]	@ (8004bc4 <DMA_SetConfig+0x338>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d022      	beq.n	8004b6a <DMA_SetConfig+0x2de>
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a27      	ldr	r2, [pc, #156]	@ (8004bc8 <DMA_SetConfig+0x33c>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d01d      	beq.n	8004b6a <DMA_SetConfig+0x2de>
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a26      	ldr	r2, [pc, #152]	@ (8004bcc <DMA_SetConfig+0x340>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d018      	beq.n	8004b6a <DMA_SetConfig+0x2de>
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a24      	ldr	r2, [pc, #144]	@ (8004bd0 <DMA_SetConfig+0x344>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d013      	beq.n	8004b6a <DMA_SetConfig+0x2de>
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a23      	ldr	r2, [pc, #140]	@ (8004bd4 <DMA_SetConfig+0x348>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d00e      	beq.n	8004b6a <DMA_SetConfig+0x2de>
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a21      	ldr	r2, [pc, #132]	@ (8004bd8 <DMA_SetConfig+0x34c>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d009      	beq.n	8004b6a <DMA_SetConfig+0x2de>
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a20      	ldr	r2, [pc, #128]	@ (8004bdc <DMA_SetConfig+0x350>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d004      	beq.n	8004b6a <DMA_SetConfig+0x2de>
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a1e      	ldr	r2, [pc, #120]	@ (8004be0 <DMA_SetConfig+0x354>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d101      	bne.n	8004b6e <DMA_SetConfig+0x2e2>
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e000      	b.n	8004b70 <DMA_SetConfig+0x2e4>
 8004b6e:	2300      	movs	r3, #0
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d020      	beq.n	8004bb6 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b78:	f003 031f 	and.w	r3, r3, #31
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	409a      	lsls	r2, r3
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	683a      	ldr	r2, [r7, #0]
 8004b8a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	2b40      	cmp	r3, #64	@ 0x40
 8004b92:	d108      	bne.n	8004ba6 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	68ba      	ldr	r2, [r7, #8]
 8004ba2:	60da      	str	r2, [r3, #12]
}
 8004ba4:	e007      	b.n	8004bb6 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	68ba      	ldr	r2, [r7, #8]
 8004bac:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	60da      	str	r2, [r3, #12]
}
 8004bb6:	bf00      	nop
 8004bb8:	371c      	adds	r7, #28
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr
 8004bc2:	bf00      	nop
 8004bc4:	58025408 	.word	0x58025408
 8004bc8:	5802541c 	.word	0x5802541c
 8004bcc:	58025430 	.word	0x58025430
 8004bd0:	58025444 	.word	0x58025444
 8004bd4:	58025458 	.word	0x58025458
 8004bd8:	5802546c 	.word	0x5802546c
 8004bdc:	58025480 	.word	0x58025480
 8004be0:	58025494 	.word	0x58025494

08004be4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b085      	sub	sp, #20
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a42      	ldr	r2, [pc, #264]	@ (8004cfc <DMA_CalcBaseAndBitshift+0x118>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d04a      	beq.n	8004c8c <DMA_CalcBaseAndBitshift+0xa8>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a41      	ldr	r2, [pc, #260]	@ (8004d00 <DMA_CalcBaseAndBitshift+0x11c>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d045      	beq.n	8004c8c <DMA_CalcBaseAndBitshift+0xa8>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a3f      	ldr	r2, [pc, #252]	@ (8004d04 <DMA_CalcBaseAndBitshift+0x120>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d040      	beq.n	8004c8c <DMA_CalcBaseAndBitshift+0xa8>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a3e      	ldr	r2, [pc, #248]	@ (8004d08 <DMA_CalcBaseAndBitshift+0x124>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d03b      	beq.n	8004c8c <DMA_CalcBaseAndBitshift+0xa8>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a3c      	ldr	r2, [pc, #240]	@ (8004d0c <DMA_CalcBaseAndBitshift+0x128>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d036      	beq.n	8004c8c <DMA_CalcBaseAndBitshift+0xa8>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a3b      	ldr	r2, [pc, #236]	@ (8004d10 <DMA_CalcBaseAndBitshift+0x12c>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d031      	beq.n	8004c8c <DMA_CalcBaseAndBitshift+0xa8>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a39      	ldr	r2, [pc, #228]	@ (8004d14 <DMA_CalcBaseAndBitshift+0x130>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d02c      	beq.n	8004c8c <DMA_CalcBaseAndBitshift+0xa8>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a38      	ldr	r2, [pc, #224]	@ (8004d18 <DMA_CalcBaseAndBitshift+0x134>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d027      	beq.n	8004c8c <DMA_CalcBaseAndBitshift+0xa8>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a36      	ldr	r2, [pc, #216]	@ (8004d1c <DMA_CalcBaseAndBitshift+0x138>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d022      	beq.n	8004c8c <DMA_CalcBaseAndBitshift+0xa8>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a35      	ldr	r2, [pc, #212]	@ (8004d20 <DMA_CalcBaseAndBitshift+0x13c>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d01d      	beq.n	8004c8c <DMA_CalcBaseAndBitshift+0xa8>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a33      	ldr	r2, [pc, #204]	@ (8004d24 <DMA_CalcBaseAndBitshift+0x140>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d018      	beq.n	8004c8c <DMA_CalcBaseAndBitshift+0xa8>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a32      	ldr	r2, [pc, #200]	@ (8004d28 <DMA_CalcBaseAndBitshift+0x144>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d013      	beq.n	8004c8c <DMA_CalcBaseAndBitshift+0xa8>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a30      	ldr	r2, [pc, #192]	@ (8004d2c <DMA_CalcBaseAndBitshift+0x148>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d00e      	beq.n	8004c8c <DMA_CalcBaseAndBitshift+0xa8>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a2f      	ldr	r2, [pc, #188]	@ (8004d30 <DMA_CalcBaseAndBitshift+0x14c>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d009      	beq.n	8004c8c <DMA_CalcBaseAndBitshift+0xa8>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a2d      	ldr	r2, [pc, #180]	@ (8004d34 <DMA_CalcBaseAndBitshift+0x150>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d004      	beq.n	8004c8c <DMA_CalcBaseAndBitshift+0xa8>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a2c      	ldr	r2, [pc, #176]	@ (8004d38 <DMA_CalcBaseAndBitshift+0x154>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d101      	bne.n	8004c90 <DMA_CalcBaseAndBitshift+0xac>
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	e000      	b.n	8004c92 <DMA_CalcBaseAndBitshift+0xae>
 8004c90:	2300      	movs	r3, #0
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d024      	beq.n	8004ce0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	b2db      	uxtb	r3, r3
 8004c9c:	3b10      	subs	r3, #16
 8004c9e:	4a27      	ldr	r2, [pc, #156]	@ (8004d3c <DMA_CalcBaseAndBitshift+0x158>)
 8004ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ca4:	091b      	lsrs	r3, r3, #4
 8004ca6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f003 0307 	and.w	r3, r3, #7
 8004cae:	4a24      	ldr	r2, [pc, #144]	@ (8004d40 <DMA_CalcBaseAndBitshift+0x15c>)
 8004cb0:	5cd3      	ldrb	r3, [r2, r3]
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2b03      	cmp	r3, #3
 8004cbc:	d908      	bls.n	8004cd0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	4b1f      	ldr	r3, [pc, #124]	@ (8004d44 <DMA_CalcBaseAndBitshift+0x160>)
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	1d1a      	adds	r2, r3, #4
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	659a      	str	r2, [r3, #88]	@ 0x58
 8004cce:	e00d      	b.n	8004cec <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	4b1b      	ldr	r3, [pc, #108]	@ (8004d44 <DMA_CalcBaseAndBitshift+0x160>)
 8004cd8:	4013      	ands	r3, r2
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	6593      	str	r3, [r2, #88]	@ 0x58
 8004cde:	e005      	b.n	8004cec <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3714      	adds	r7, #20
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr
 8004cfc:	40020010 	.word	0x40020010
 8004d00:	40020028 	.word	0x40020028
 8004d04:	40020040 	.word	0x40020040
 8004d08:	40020058 	.word	0x40020058
 8004d0c:	40020070 	.word	0x40020070
 8004d10:	40020088 	.word	0x40020088
 8004d14:	400200a0 	.word	0x400200a0
 8004d18:	400200b8 	.word	0x400200b8
 8004d1c:	40020410 	.word	0x40020410
 8004d20:	40020428 	.word	0x40020428
 8004d24:	40020440 	.word	0x40020440
 8004d28:	40020458 	.word	0x40020458
 8004d2c:	40020470 	.word	0x40020470
 8004d30:	40020488 	.word	0x40020488
 8004d34:	400204a0 	.word	0x400204a0
 8004d38:	400204b8 	.word	0x400204b8
 8004d3c:	aaaaaaab 	.word	0xaaaaaaab
 8004d40:	0800d5f8 	.word	0x0800d5f8
 8004d44:	fffffc00 	.word	0xfffffc00

08004d48 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b085      	sub	sp, #20
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d50:	2300      	movs	r3, #0
 8004d52:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	699b      	ldr	r3, [r3, #24]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d120      	bne.n	8004d9e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d60:	2b03      	cmp	r3, #3
 8004d62:	d858      	bhi.n	8004e16 <DMA_CheckFifoParam+0xce>
 8004d64:	a201      	add	r2, pc, #4	@ (adr r2, 8004d6c <DMA_CheckFifoParam+0x24>)
 8004d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d6a:	bf00      	nop
 8004d6c:	08004d7d 	.word	0x08004d7d
 8004d70:	08004d8f 	.word	0x08004d8f
 8004d74:	08004d7d 	.word	0x08004d7d
 8004d78:	08004e17 	.word	0x08004e17
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d80:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d048      	beq.n	8004e1a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004d8c:	e045      	b.n	8004e1a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d92:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004d96:	d142      	bne.n	8004e1e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004d9c:	e03f      	b.n	8004e1e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	699b      	ldr	r3, [r3, #24]
 8004da2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004da6:	d123      	bne.n	8004df0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dac:	2b03      	cmp	r3, #3
 8004dae:	d838      	bhi.n	8004e22 <DMA_CheckFifoParam+0xda>
 8004db0:	a201      	add	r2, pc, #4	@ (adr r2, 8004db8 <DMA_CheckFifoParam+0x70>)
 8004db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004db6:	bf00      	nop
 8004db8:	08004dc9 	.word	0x08004dc9
 8004dbc:	08004dcf 	.word	0x08004dcf
 8004dc0:	08004dc9 	.word	0x08004dc9
 8004dc4:	08004de1 	.word	0x08004de1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	73fb      	strb	r3, [r7, #15]
        break;
 8004dcc:	e030      	b.n	8004e30 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dd2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d025      	beq.n	8004e26 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004dde:	e022      	b.n	8004e26 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004de4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004de8:	d11f      	bne.n	8004e2a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004dee:	e01c      	b.n	8004e2a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004df4:	2b02      	cmp	r3, #2
 8004df6:	d902      	bls.n	8004dfe <DMA_CheckFifoParam+0xb6>
 8004df8:	2b03      	cmp	r3, #3
 8004dfa:	d003      	beq.n	8004e04 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004dfc:	e018      	b.n	8004e30 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	73fb      	strb	r3, [r7, #15]
        break;
 8004e02:	e015      	b.n	8004e30 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e08:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d00e      	beq.n	8004e2e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	73fb      	strb	r3, [r7, #15]
    break;
 8004e14:	e00b      	b.n	8004e2e <DMA_CheckFifoParam+0xe6>
        break;
 8004e16:	bf00      	nop
 8004e18:	e00a      	b.n	8004e30 <DMA_CheckFifoParam+0xe8>
        break;
 8004e1a:	bf00      	nop
 8004e1c:	e008      	b.n	8004e30 <DMA_CheckFifoParam+0xe8>
        break;
 8004e1e:	bf00      	nop
 8004e20:	e006      	b.n	8004e30 <DMA_CheckFifoParam+0xe8>
        break;
 8004e22:	bf00      	nop
 8004e24:	e004      	b.n	8004e30 <DMA_CheckFifoParam+0xe8>
        break;
 8004e26:	bf00      	nop
 8004e28:	e002      	b.n	8004e30 <DMA_CheckFifoParam+0xe8>
        break;
 8004e2a:	bf00      	nop
 8004e2c:	e000      	b.n	8004e30 <DMA_CheckFifoParam+0xe8>
    break;
 8004e2e:	bf00      	nop
    }
  }

  return status;
 8004e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3714      	adds	r7, #20
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr
 8004e3e:	bf00      	nop

08004e40 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b085      	sub	sp, #20
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a38      	ldr	r2, [pc, #224]	@ (8004f34 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d022      	beq.n	8004e9e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a36      	ldr	r2, [pc, #216]	@ (8004f38 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d01d      	beq.n	8004e9e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a35      	ldr	r2, [pc, #212]	@ (8004f3c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d018      	beq.n	8004e9e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a33      	ldr	r2, [pc, #204]	@ (8004f40 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d013      	beq.n	8004e9e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a32      	ldr	r2, [pc, #200]	@ (8004f44 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d00e      	beq.n	8004e9e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a30      	ldr	r2, [pc, #192]	@ (8004f48 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d009      	beq.n	8004e9e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a2f      	ldr	r2, [pc, #188]	@ (8004f4c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d004      	beq.n	8004e9e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a2d      	ldr	r2, [pc, #180]	@ (8004f50 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d101      	bne.n	8004ea2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e000      	b.n	8004ea4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d01a      	beq.n	8004ede <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	3b08      	subs	r3, #8
 8004eb0:	4a28      	ldr	r2, [pc, #160]	@ (8004f54 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8004eb6:	091b      	lsrs	r3, r3, #4
 8004eb8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004eba:	68fa      	ldr	r2, [r7, #12]
 8004ebc:	4b26      	ldr	r3, [pc, #152]	@ (8004f58 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004ebe:	4413      	add	r3, r2
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	4a24      	ldr	r2, [pc, #144]	@ (8004f5c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004ecc:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	f003 031f 	and.w	r3, r3, #31
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	409a      	lsls	r2, r3
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004edc:	e024      	b.n	8004f28 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	3b10      	subs	r3, #16
 8004ee6:	4a1e      	ldr	r2, [pc, #120]	@ (8004f60 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8004eec:	091b      	lsrs	r3, r3, #4
 8004eee:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	4a1c      	ldr	r2, [pc, #112]	@ (8004f64 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d806      	bhi.n	8004f06 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	4a1b      	ldr	r2, [pc, #108]	@ (8004f68 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d902      	bls.n	8004f06 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	3308      	adds	r3, #8
 8004f04:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004f06:	68fa      	ldr	r2, [r7, #12]
 8004f08:	4b18      	ldr	r3, [pc, #96]	@ (8004f6c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004f0a:	4413      	add	r3, r2
 8004f0c:	009b      	lsls	r3, r3, #2
 8004f0e:	461a      	mov	r2, r3
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	4a16      	ldr	r2, [pc, #88]	@ (8004f70 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004f18:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	f003 031f 	and.w	r3, r3, #31
 8004f20:	2201      	movs	r2, #1
 8004f22:	409a      	lsls	r2, r3
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004f28:	bf00      	nop
 8004f2a:	3714      	adds	r7, #20
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr
 8004f34:	58025408 	.word	0x58025408
 8004f38:	5802541c 	.word	0x5802541c
 8004f3c:	58025430 	.word	0x58025430
 8004f40:	58025444 	.word	0x58025444
 8004f44:	58025458 	.word	0x58025458
 8004f48:	5802546c 	.word	0x5802546c
 8004f4c:	58025480 	.word	0x58025480
 8004f50:	58025494 	.word	0x58025494
 8004f54:	cccccccd 	.word	0xcccccccd
 8004f58:	16009600 	.word	0x16009600
 8004f5c:	58025880 	.word	0x58025880
 8004f60:	aaaaaaab 	.word	0xaaaaaaab
 8004f64:	400204b8 	.word	0x400204b8
 8004f68:	4002040f 	.word	0x4002040f
 8004f6c:	10008200 	.word	0x10008200
 8004f70:	40020880 	.word	0x40020880

08004f74 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b085      	sub	sp, #20
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d04a      	beq.n	8005020 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2b08      	cmp	r3, #8
 8004f8e:	d847      	bhi.n	8005020 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a25      	ldr	r2, [pc, #148]	@ (800502c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d022      	beq.n	8004fe0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a24      	ldr	r2, [pc, #144]	@ (8005030 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d01d      	beq.n	8004fe0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a22      	ldr	r2, [pc, #136]	@ (8005034 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d018      	beq.n	8004fe0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a21      	ldr	r2, [pc, #132]	@ (8005038 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d013      	beq.n	8004fe0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a1f      	ldr	r2, [pc, #124]	@ (800503c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d00e      	beq.n	8004fe0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a1e      	ldr	r2, [pc, #120]	@ (8005040 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d009      	beq.n	8004fe0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a1c      	ldr	r2, [pc, #112]	@ (8005044 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d004      	beq.n	8004fe0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a1b      	ldr	r2, [pc, #108]	@ (8005048 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d101      	bne.n	8004fe4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e000      	b.n	8004fe6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d00a      	beq.n	8005000 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004fea:	68fa      	ldr	r2, [r7, #12]
 8004fec:	4b17      	ldr	r3, [pc, #92]	@ (800504c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004fee:	4413      	add	r3, r2
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	4a15      	ldr	r2, [pc, #84]	@ (8005050 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004ffc:	671a      	str	r2, [r3, #112]	@ 0x70
 8004ffe:	e009      	b.n	8005014 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005000:	68fa      	ldr	r2, [r7, #12]
 8005002:	4b14      	ldr	r3, [pc, #80]	@ (8005054 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005004:	4413      	add	r3, r2
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	461a      	mov	r2, r3
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a11      	ldr	r2, [pc, #68]	@ (8005058 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005012:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	3b01      	subs	r3, #1
 8005018:	2201      	movs	r2, #1
 800501a:	409a      	lsls	r2, r3
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8005020:	bf00      	nop
 8005022:	3714      	adds	r7, #20
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr
 800502c:	58025408 	.word	0x58025408
 8005030:	5802541c 	.word	0x5802541c
 8005034:	58025430 	.word	0x58025430
 8005038:	58025444 	.word	0x58025444
 800503c:	58025458 	.word	0x58025458
 8005040:	5802546c 	.word	0x5802546c
 8005044:	58025480 	.word	0x58025480
 8005048:	58025494 	.word	0x58025494
 800504c:	1600963f 	.word	0x1600963f
 8005050:	58025940 	.word	0x58025940
 8005054:	1000823f 	.word	0x1000823f
 8005058:	40020940 	.word	0x40020940

0800505c <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800505c:	b480      	push	{r7}
 800505e:	b087      	sub	sp, #28
 8005060:	af00      	add	r7, sp, #0
 8005062:	60f8      	str	r0, [r7, #12]
 8005064:	460b      	mov	r3, r1
 8005066:	607a      	str	r2, [r7, #4]
 8005068:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800506a:	2300      	movs	r3, #0
 800506c:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d101      	bne.n	8005078 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	e00a      	b.n	800508e <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8005078:	7afb      	ldrb	r3, [r7, #11]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d103      	bne.n	8005086 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	687a      	ldr	r2, [r7, #4]
 8005082:	605a      	str	r2, [r3, #4]
      break;
 8005084:	e002      	b.n	800508c <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	75fb      	strb	r3, [r7, #23]
      break;
 800508a:	bf00      	nop
  }

  return status;
 800508c:	7dfb      	ldrb	r3, [r7, #23]
}
 800508e:	4618      	mov	r0, r3
 8005090:	371c      	adds	r7, #28
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr

0800509a <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800509a:	b480      	push	{r7}
 800509c:	b083      	sub	sp, #12
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
 80050a2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d101      	bne.n	80050ae <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	e003      	b.n	80050b6 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	683a      	ldr	r2, [r7, #0]
 80050b2:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80050b4:	2300      	movs	r3, #0
  }
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	370c      	adds	r7, #12
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr
	...

080050c4 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b086      	sub	sp, #24
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	0c1b      	lsrs	r3, r3, #16
 80050d2:	f003 0303 	and.w	r3, r3, #3
 80050d6:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 031f 	and.w	r3, r3, #31
 80050e0:	2201      	movs	r2, #1
 80050e2:	fa02 f303 	lsl.w	r3, r2, r3
 80050e6:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	011a      	lsls	r2, r3, #4
 80050ec:	4b0c      	ldr	r3, [pc, #48]	@ (8005120 <HAL_EXTI_IRQHandler+0x5c>)
 80050ee:	4413      	add	r3, r2
 80050f0:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	693a      	ldr	r2, [r7, #16]
 80050f8:	4013      	ands	r3, r2
 80050fa:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d009      	beq.n	8005116 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	693a      	ldr	r2, [r7, #16]
 8005106:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d002      	beq.n	8005116 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	4798      	blx	r3
    }
  }
}
 8005116:	bf00      	nop
 8005118:	3718      	adds	r7, #24
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}
 800511e:	bf00      	nop
 8005120:	58000088 	.word	0x58000088

08005124 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8005124:	b480      	push	{r7}
 8005126:	b089      	sub	sp, #36	@ 0x24
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800512e:	2300      	movs	r3, #0
 8005130:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005132:	4b89      	ldr	r3, [pc, #548]	@ (8005358 <HAL_GPIO_Init+0x234>)
 8005134:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005136:	e194      	b.n	8005462 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	2101      	movs	r1, #1
 800513e:	69fb      	ldr	r3, [r7, #28]
 8005140:	fa01 f303 	lsl.w	r3, r1, r3
 8005144:	4013      	ands	r3, r2
 8005146:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	2b00      	cmp	r3, #0
 800514c:	f000 8186 	beq.w	800545c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	f003 0303 	and.w	r3, r3, #3
 8005158:	2b01      	cmp	r3, #1
 800515a:	d005      	beq.n	8005168 <HAL_GPIO_Init+0x44>
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	f003 0303 	and.w	r3, r3, #3
 8005164:	2b02      	cmp	r3, #2
 8005166:	d130      	bne.n	80051ca <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800516e:	69fb      	ldr	r3, [r7, #28]
 8005170:	005b      	lsls	r3, r3, #1
 8005172:	2203      	movs	r2, #3
 8005174:	fa02 f303 	lsl.w	r3, r2, r3
 8005178:	43db      	mvns	r3, r3
 800517a:	69ba      	ldr	r2, [r7, #24]
 800517c:	4013      	ands	r3, r2
 800517e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	68da      	ldr	r2, [r3, #12]
 8005184:	69fb      	ldr	r3, [r7, #28]
 8005186:	005b      	lsls	r3, r3, #1
 8005188:	fa02 f303 	lsl.w	r3, r2, r3
 800518c:	69ba      	ldr	r2, [r7, #24]
 800518e:	4313      	orrs	r3, r2
 8005190:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	69ba      	ldr	r2, [r7, #24]
 8005196:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800519e:	2201      	movs	r2, #1
 80051a0:	69fb      	ldr	r3, [r7, #28]
 80051a2:	fa02 f303 	lsl.w	r3, r2, r3
 80051a6:	43db      	mvns	r3, r3
 80051a8:	69ba      	ldr	r2, [r7, #24]
 80051aa:	4013      	ands	r3, r2
 80051ac:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	091b      	lsrs	r3, r3, #4
 80051b4:	f003 0201 	and.w	r2, r3, #1
 80051b8:	69fb      	ldr	r3, [r7, #28]
 80051ba:	fa02 f303 	lsl.w	r3, r2, r3
 80051be:	69ba      	ldr	r2, [r7, #24]
 80051c0:	4313      	orrs	r3, r2
 80051c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	69ba      	ldr	r2, [r7, #24]
 80051c8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	f003 0303 	and.w	r3, r3, #3
 80051d2:	2b03      	cmp	r3, #3
 80051d4:	d017      	beq.n	8005206 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80051dc:	69fb      	ldr	r3, [r7, #28]
 80051de:	005b      	lsls	r3, r3, #1
 80051e0:	2203      	movs	r2, #3
 80051e2:	fa02 f303 	lsl.w	r3, r2, r3
 80051e6:	43db      	mvns	r3, r3
 80051e8:	69ba      	ldr	r2, [r7, #24]
 80051ea:	4013      	ands	r3, r2
 80051ec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	689a      	ldr	r2, [r3, #8]
 80051f2:	69fb      	ldr	r3, [r7, #28]
 80051f4:	005b      	lsls	r3, r3, #1
 80051f6:	fa02 f303 	lsl.w	r3, r2, r3
 80051fa:	69ba      	ldr	r2, [r7, #24]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	69ba      	ldr	r2, [r7, #24]
 8005204:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	f003 0303 	and.w	r3, r3, #3
 800520e:	2b02      	cmp	r3, #2
 8005210:	d123      	bne.n	800525a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005212:	69fb      	ldr	r3, [r7, #28]
 8005214:	08da      	lsrs	r2, r3, #3
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	3208      	adds	r2, #8
 800521a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800521e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005220:	69fb      	ldr	r3, [r7, #28]
 8005222:	f003 0307 	and.w	r3, r3, #7
 8005226:	009b      	lsls	r3, r3, #2
 8005228:	220f      	movs	r2, #15
 800522a:	fa02 f303 	lsl.w	r3, r2, r3
 800522e:	43db      	mvns	r3, r3
 8005230:	69ba      	ldr	r2, [r7, #24]
 8005232:	4013      	ands	r3, r2
 8005234:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	691a      	ldr	r2, [r3, #16]
 800523a:	69fb      	ldr	r3, [r7, #28]
 800523c:	f003 0307 	and.w	r3, r3, #7
 8005240:	009b      	lsls	r3, r3, #2
 8005242:	fa02 f303 	lsl.w	r3, r2, r3
 8005246:	69ba      	ldr	r2, [r7, #24]
 8005248:	4313      	orrs	r3, r2
 800524a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	08da      	lsrs	r2, r3, #3
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	3208      	adds	r2, #8
 8005254:	69b9      	ldr	r1, [r7, #24]
 8005256:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005260:	69fb      	ldr	r3, [r7, #28]
 8005262:	005b      	lsls	r3, r3, #1
 8005264:	2203      	movs	r2, #3
 8005266:	fa02 f303 	lsl.w	r3, r2, r3
 800526a:	43db      	mvns	r3, r3
 800526c:	69ba      	ldr	r2, [r7, #24]
 800526e:	4013      	ands	r3, r2
 8005270:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	f003 0203 	and.w	r2, r3, #3
 800527a:	69fb      	ldr	r3, [r7, #28]
 800527c:	005b      	lsls	r3, r3, #1
 800527e:	fa02 f303 	lsl.w	r3, r2, r3
 8005282:	69ba      	ldr	r2, [r7, #24]
 8005284:	4313      	orrs	r3, r2
 8005286:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	69ba      	ldr	r2, [r7, #24]
 800528c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005296:	2b00      	cmp	r3, #0
 8005298:	f000 80e0 	beq.w	800545c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800529c:	4b2f      	ldr	r3, [pc, #188]	@ (800535c <HAL_GPIO_Init+0x238>)
 800529e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80052a2:	4a2e      	ldr	r2, [pc, #184]	@ (800535c <HAL_GPIO_Init+0x238>)
 80052a4:	f043 0302 	orr.w	r3, r3, #2
 80052a8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80052ac:	4b2b      	ldr	r3, [pc, #172]	@ (800535c <HAL_GPIO_Init+0x238>)
 80052ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80052b2:	f003 0302 	and.w	r3, r3, #2
 80052b6:	60fb      	str	r3, [r7, #12]
 80052b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80052ba:	4a29      	ldr	r2, [pc, #164]	@ (8005360 <HAL_GPIO_Init+0x23c>)
 80052bc:	69fb      	ldr	r3, [r7, #28]
 80052be:	089b      	lsrs	r3, r3, #2
 80052c0:	3302      	adds	r3, #2
 80052c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80052c8:	69fb      	ldr	r3, [r7, #28]
 80052ca:	f003 0303 	and.w	r3, r3, #3
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	220f      	movs	r2, #15
 80052d2:	fa02 f303 	lsl.w	r3, r2, r3
 80052d6:	43db      	mvns	r3, r3
 80052d8:	69ba      	ldr	r2, [r7, #24]
 80052da:	4013      	ands	r3, r2
 80052dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4a20      	ldr	r2, [pc, #128]	@ (8005364 <HAL_GPIO_Init+0x240>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d052      	beq.n	800538c <HAL_GPIO_Init+0x268>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4a1f      	ldr	r2, [pc, #124]	@ (8005368 <HAL_GPIO_Init+0x244>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d031      	beq.n	8005352 <HAL_GPIO_Init+0x22e>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4a1e      	ldr	r2, [pc, #120]	@ (800536c <HAL_GPIO_Init+0x248>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d02b      	beq.n	800534e <HAL_GPIO_Init+0x22a>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4a1d      	ldr	r2, [pc, #116]	@ (8005370 <HAL_GPIO_Init+0x24c>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d025      	beq.n	800534a <HAL_GPIO_Init+0x226>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4a1c      	ldr	r2, [pc, #112]	@ (8005374 <HAL_GPIO_Init+0x250>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d01f      	beq.n	8005346 <HAL_GPIO_Init+0x222>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a1b      	ldr	r2, [pc, #108]	@ (8005378 <HAL_GPIO_Init+0x254>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d019      	beq.n	8005342 <HAL_GPIO_Init+0x21e>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4a1a      	ldr	r2, [pc, #104]	@ (800537c <HAL_GPIO_Init+0x258>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d013      	beq.n	800533e <HAL_GPIO_Init+0x21a>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4a19      	ldr	r2, [pc, #100]	@ (8005380 <HAL_GPIO_Init+0x25c>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d00d      	beq.n	800533a <HAL_GPIO_Init+0x216>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a18      	ldr	r2, [pc, #96]	@ (8005384 <HAL_GPIO_Init+0x260>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d007      	beq.n	8005336 <HAL_GPIO_Init+0x212>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	4a17      	ldr	r2, [pc, #92]	@ (8005388 <HAL_GPIO_Init+0x264>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d101      	bne.n	8005332 <HAL_GPIO_Init+0x20e>
 800532e:	2309      	movs	r3, #9
 8005330:	e02d      	b.n	800538e <HAL_GPIO_Init+0x26a>
 8005332:	230a      	movs	r3, #10
 8005334:	e02b      	b.n	800538e <HAL_GPIO_Init+0x26a>
 8005336:	2308      	movs	r3, #8
 8005338:	e029      	b.n	800538e <HAL_GPIO_Init+0x26a>
 800533a:	2307      	movs	r3, #7
 800533c:	e027      	b.n	800538e <HAL_GPIO_Init+0x26a>
 800533e:	2306      	movs	r3, #6
 8005340:	e025      	b.n	800538e <HAL_GPIO_Init+0x26a>
 8005342:	2305      	movs	r3, #5
 8005344:	e023      	b.n	800538e <HAL_GPIO_Init+0x26a>
 8005346:	2304      	movs	r3, #4
 8005348:	e021      	b.n	800538e <HAL_GPIO_Init+0x26a>
 800534a:	2303      	movs	r3, #3
 800534c:	e01f      	b.n	800538e <HAL_GPIO_Init+0x26a>
 800534e:	2302      	movs	r3, #2
 8005350:	e01d      	b.n	800538e <HAL_GPIO_Init+0x26a>
 8005352:	2301      	movs	r3, #1
 8005354:	e01b      	b.n	800538e <HAL_GPIO_Init+0x26a>
 8005356:	bf00      	nop
 8005358:	58000080 	.word	0x58000080
 800535c:	58024400 	.word	0x58024400
 8005360:	58000400 	.word	0x58000400
 8005364:	58020000 	.word	0x58020000
 8005368:	58020400 	.word	0x58020400
 800536c:	58020800 	.word	0x58020800
 8005370:	58020c00 	.word	0x58020c00
 8005374:	58021000 	.word	0x58021000
 8005378:	58021400 	.word	0x58021400
 800537c:	58021800 	.word	0x58021800
 8005380:	58021c00 	.word	0x58021c00
 8005384:	58022000 	.word	0x58022000
 8005388:	58022400 	.word	0x58022400
 800538c:	2300      	movs	r3, #0
 800538e:	69fa      	ldr	r2, [r7, #28]
 8005390:	f002 0203 	and.w	r2, r2, #3
 8005394:	0092      	lsls	r2, r2, #2
 8005396:	4093      	lsls	r3, r2
 8005398:	69ba      	ldr	r2, [r7, #24]
 800539a:	4313      	orrs	r3, r2
 800539c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800539e:	4938      	ldr	r1, [pc, #224]	@ (8005480 <HAL_GPIO_Init+0x35c>)
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	089b      	lsrs	r3, r3, #2
 80053a4:	3302      	adds	r3, #2
 80053a6:	69ba      	ldr	r2, [r7, #24]
 80053a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80053ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	43db      	mvns	r3, r3
 80053b8:	69ba      	ldr	r2, [r7, #24]
 80053ba:	4013      	ands	r3, r2
 80053bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d003      	beq.n	80053d2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80053ca:	69ba      	ldr	r2, [r7, #24]
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80053d2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80053d6:	69bb      	ldr	r3, [r7, #24]
 80053d8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80053da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	43db      	mvns	r3, r3
 80053e6:	69ba      	ldr	r2, [r7, #24]
 80053e8:	4013      	ands	r3, r2
 80053ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d003      	beq.n	8005400 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80053f8:	69ba      	ldr	r2, [r7, #24]
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	4313      	orrs	r3, r2
 80053fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005400:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005404:	69bb      	ldr	r3, [r7, #24]
 8005406:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	43db      	mvns	r3, r3
 8005412:	69ba      	ldr	r2, [r7, #24]
 8005414:	4013      	ands	r3, r2
 8005416:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005420:	2b00      	cmp	r3, #0
 8005422:	d003      	beq.n	800542c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005424:	69ba      	ldr	r2, [r7, #24]
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	4313      	orrs	r3, r2
 800542a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	69ba      	ldr	r2, [r7, #24]
 8005430:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	43db      	mvns	r3, r3
 800543c:	69ba      	ldr	r2, [r7, #24]
 800543e:	4013      	ands	r3, r2
 8005440:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800544a:	2b00      	cmp	r3, #0
 800544c:	d003      	beq.n	8005456 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800544e:	69ba      	ldr	r2, [r7, #24]
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	4313      	orrs	r3, r2
 8005454:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	69ba      	ldr	r2, [r7, #24]
 800545a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800545c:	69fb      	ldr	r3, [r7, #28]
 800545e:	3301      	adds	r3, #1
 8005460:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	69fb      	ldr	r3, [r7, #28]
 8005468:	fa22 f303 	lsr.w	r3, r2, r3
 800546c:	2b00      	cmp	r3, #0
 800546e:	f47f ae63 	bne.w	8005138 <HAL_GPIO_Init+0x14>
  }
}
 8005472:	bf00      	nop
 8005474:	bf00      	nop
 8005476:	3724      	adds	r7, #36	@ 0x24
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr
 8005480:	58000400 	.word	0x58000400

08005484 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005484:	b480      	push	{r7}
 8005486:	b083      	sub	sp, #12
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	460b      	mov	r3, r1
 800548e:	807b      	strh	r3, [r7, #2]
 8005490:	4613      	mov	r3, r2
 8005492:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005494:	787b      	ldrb	r3, [r7, #1]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d003      	beq.n	80054a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800549a:	887a      	ldrh	r2, [r7, #2]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80054a0:	e003      	b.n	80054aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80054a2:	887b      	ldrh	r3, [r7, #2]
 80054a4:	041a      	lsls	r2, r3, #16
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	619a      	str	r2, [r3, #24]
}
 80054aa:	bf00      	nop
 80054ac:	370c      	adds	r7, #12
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr
	...

080054b8 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b084      	sub	sp, #16
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80054c0:	4b19      	ldr	r3, [pc, #100]	@ (8005528 <HAL_PWREx_ConfigSupply+0x70>)
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	f003 0304 	and.w	r3, r3, #4
 80054c8:	2b04      	cmp	r3, #4
 80054ca:	d00a      	beq.n	80054e2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80054cc:	4b16      	ldr	r3, [pc, #88]	@ (8005528 <HAL_PWREx_ConfigSupply+0x70>)
 80054ce:	68db      	ldr	r3, [r3, #12]
 80054d0:	f003 0307 	and.w	r3, r3, #7
 80054d4:	687a      	ldr	r2, [r7, #4]
 80054d6:	429a      	cmp	r2, r3
 80054d8:	d001      	beq.n	80054de <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	e01f      	b.n	800551e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80054de:	2300      	movs	r3, #0
 80054e0:	e01d      	b.n	800551e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80054e2:	4b11      	ldr	r3, [pc, #68]	@ (8005528 <HAL_PWREx_ConfigSupply+0x70>)
 80054e4:	68db      	ldr	r3, [r3, #12]
 80054e6:	f023 0207 	bic.w	r2, r3, #7
 80054ea:	490f      	ldr	r1, [pc, #60]	@ (8005528 <HAL_PWREx_ConfigSupply+0x70>)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	4313      	orrs	r3, r2
 80054f0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80054f2:	f7fc fe5b 	bl	80021ac <HAL_GetTick>
 80054f6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80054f8:	e009      	b.n	800550e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80054fa:	f7fc fe57 	bl	80021ac <HAL_GetTick>
 80054fe:	4602      	mov	r2, r0
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	1ad3      	subs	r3, r2, r3
 8005504:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005508:	d901      	bls.n	800550e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	e007      	b.n	800551e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800550e:	4b06      	ldr	r3, [pc, #24]	@ (8005528 <HAL_PWREx_ConfigSupply+0x70>)
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005516:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800551a:	d1ee      	bne.n	80054fa <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800551c:	2300      	movs	r3, #0
}
 800551e:	4618      	mov	r0, r3
 8005520:	3710      	adds	r7, #16
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
 8005526:	bf00      	nop
 8005528:	58024800 	.word	0x58024800

0800552c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b08c      	sub	sp, #48	@ 0x30
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d102      	bne.n	8005540 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	f000 bc48 	b.w	8005dd0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f003 0301 	and.w	r3, r3, #1
 8005548:	2b00      	cmp	r3, #0
 800554a:	f000 8088 	beq.w	800565e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800554e:	4b99      	ldr	r3, [pc, #612]	@ (80057b4 <HAL_RCC_OscConfig+0x288>)
 8005550:	691b      	ldr	r3, [r3, #16]
 8005552:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005556:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005558:	4b96      	ldr	r3, [pc, #600]	@ (80057b4 <HAL_RCC_OscConfig+0x288>)
 800555a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800555c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800555e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005560:	2b10      	cmp	r3, #16
 8005562:	d007      	beq.n	8005574 <HAL_RCC_OscConfig+0x48>
 8005564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005566:	2b18      	cmp	r3, #24
 8005568:	d111      	bne.n	800558e <HAL_RCC_OscConfig+0x62>
 800556a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800556c:	f003 0303 	and.w	r3, r3, #3
 8005570:	2b02      	cmp	r3, #2
 8005572:	d10c      	bne.n	800558e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005574:	4b8f      	ldr	r3, [pc, #572]	@ (80057b4 <HAL_RCC_OscConfig+0x288>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800557c:	2b00      	cmp	r3, #0
 800557e:	d06d      	beq.n	800565c <HAL_RCC_OscConfig+0x130>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d169      	bne.n	800565c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	f000 bc21 	b.w	8005dd0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005596:	d106      	bne.n	80055a6 <HAL_RCC_OscConfig+0x7a>
 8005598:	4b86      	ldr	r3, [pc, #536]	@ (80057b4 <HAL_RCC_OscConfig+0x288>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a85      	ldr	r2, [pc, #532]	@ (80057b4 <HAL_RCC_OscConfig+0x288>)
 800559e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055a2:	6013      	str	r3, [r2, #0]
 80055a4:	e02e      	b.n	8005604 <HAL_RCC_OscConfig+0xd8>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d10c      	bne.n	80055c8 <HAL_RCC_OscConfig+0x9c>
 80055ae:	4b81      	ldr	r3, [pc, #516]	@ (80057b4 <HAL_RCC_OscConfig+0x288>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a80      	ldr	r2, [pc, #512]	@ (80057b4 <HAL_RCC_OscConfig+0x288>)
 80055b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055b8:	6013      	str	r3, [r2, #0]
 80055ba:	4b7e      	ldr	r3, [pc, #504]	@ (80057b4 <HAL_RCC_OscConfig+0x288>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a7d      	ldr	r2, [pc, #500]	@ (80057b4 <HAL_RCC_OscConfig+0x288>)
 80055c0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80055c4:	6013      	str	r3, [r2, #0]
 80055c6:	e01d      	b.n	8005604 <HAL_RCC_OscConfig+0xd8>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80055d0:	d10c      	bne.n	80055ec <HAL_RCC_OscConfig+0xc0>
 80055d2:	4b78      	ldr	r3, [pc, #480]	@ (80057b4 <HAL_RCC_OscConfig+0x288>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a77      	ldr	r2, [pc, #476]	@ (80057b4 <HAL_RCC_OscConfig+0x288>)
 80055d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80055dc:	6013      	str	r3, [r2, #0]
 80055de:	4b75      	ldr	r3, [pc, #468]	@ (80057b4 <HAL_RCC_OscConfig+0x288>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a74      	ldr	r2, [pc, #464]	@ (80057b4 <HAL_RCC_OscConfig+0x288>)
 80055e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055e8:	6013      	str	r3, [r2, #0]
 80055ea:	e00b      	b.n	8005604 <HAL_RCC_OscConfig+0xd8>
 80055ec:	4b71      	ldr	r3, [pc, #452]	@ (80057b4 <HAL_RCC_OscConfig+0x288>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a70      	ldr	r2, [pc, #448]	@ (80057b4 <HAL_RCC_OscConfig+0x288>)
 80055f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055f6:	6013      	str	r3, [r2, #0]
 80055f8:	4b6e      	ldr	r3, [pc, #440]	@ (80057b4 <HAL_RCC_OscConfig+0x288>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a6d      	ldr	r2, [pc, #436]	@ (80057b4 <HAL_RCC_OscConfig+0x288>)
 80055fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005602:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d013      	beq.n	8005634 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800560c:	f7fc fdce 	bl	80021ac <HAL_GetTick>
 8005610:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005612:	e008      	b.n	8005626 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005614:	f7fc fdca 	bl	80021ac <HAL_GetTick>
 8005618:	4602      	mov	r2, r0
 800561a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800561c:	1ad3      	subs	r3, r2, r3
 800561e:	2b64      	cmp	r3, #100	@ 0x64
 8005620:	d901      	bls.n	8005626 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005622:	2303      	movs	r3, #3
 8005624:	e3d4      	b.n	8005dd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005626:	4b63      	ldr	r3, [pc, #396]	@ (80057b4 <HAL_RCC_OscConfig+0x288>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800562e:	2b00      	cmp	r3, #0
 8005630:	d0f0      	beq.n	8005614 <HAL_RCC_OscConfig+0xe8>
 8005632:	e014      	b.n	800565e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005634:	f7fc fdba 	bl	80021ac <HAL_GetTick>
 8005638:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800563a:	e008      	b.n	800564e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800563c:	f7fc fdb6 	bl	80021ac <HAL_GetTick>
 8005640:	4602      	mov	r2, r0
 8005642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005644:	1ad3      	subs	r3, r2, r3
 8005646:	2b64      	cmp	r3, #100	@ 0x64
 8005648:	d901      	bls.n	800564e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800564a:	2303      	movs	r3, #3
 800564c:	e3c0      	b.n	8005dd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800564e:	4b59      	ldr	r3, [pc, #356]	@ (80057b4 <HAL_RCC_OscConfig+0x288>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005656:	2b00      	cmp	r3, #0
 8005658:	d1f0      	bne.n	800563c <HAL_RCC_OscConfig+0x110>
 800565a:	e000      	b.n	800565e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800565c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f003 0302 	and.w	r3, r3, #2
 8005666:	2b00      	cmp	r3, #0
 8005668:	f000 80ca 	beq.w	8005800 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800566c:	4b51      	ldr	r3, [pc, #324]	@ (80057b4 <HAL_RCC_OscConfig+0x288>)
 800566e:	691b      	ldr	r3, [r3, #16]
 8005670:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005674:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005676:	4b4f      	ldr	r3, [pc, #316]	@ (80057b4 <HAL_RCC_OscConfig+0x288>)
 8005678:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800567a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800567c:	6a3b      	ldr	r3, [r7, #32]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d007      	beq.n	8005692 <HAL_RCC_OscConfig+0x166>
 8005682:	6a3b      	ldr	r3, [r7, #32]
 8005684:	2b18      	cmp	r3, #24
 8005686:	d156      	bne.n	8005736 <HAL_RCC_OscConfig+0x20a>
 8005688:	69fb      	ldr	r3, [r7, #28]
 800568a:	f003 0303 	and.w	r3, r3, #3
 800568e:	2b00      	cmp	r3, #0
 8005690:	d151      	bne.n	8005736 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005692:	4b48      	ldr	r3, [pc, #288]	@ (80057b4 <HAL_RCC_OscConfig+0x288>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f003 0304 	and.w	r3, r3, #4
 800569a:	2b00      	cmp	r3, #0
 800569c:	d005      	beq.n	80056aa <HAL_RCC_OscConfig+0x17e>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	68db      	ldr	r3, [r3, #12]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d101      	bne.n	80056aa <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	e392      	b.n	8005dd0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80056aa:	4b42      	ldr	r3, [pc, #264]	@ (80057b4 <HAL_RCC_OscConfig+0x288>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f023 0219 	bic.w	r2, r3, #25
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	68db      	ldr	r3, [r3, #12]
 80056b6:	493f      	ldr	r1, [pc, #252]	@ (80057b4 <HAL_RCC_OscConfig+0x288>)
 80056b8:	4313      	orrs	r3, r2
 80056ba:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056bc:	f7fc fd76 	bl	80021ac <HAL_GetTick>
 80056c0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80056c2:	e008      	b.n	80056d6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056c4:	f7fc fd72 	bl	80021ac <HAL_GetTick>
 80056c8:	4602      	mov	r2, r0
 80056ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056cc:	1ad3      	subs	r3, r2, r3
 80056ce:	2b02      	cmp	r3, #2
 80056d0:	d901      	bls.n	80056d6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80056d2:	2303      	movs	r3, #3
 80056d4:	e37c      	b.n	8005dd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80056d6:	4b37      	ldr	r3, [pc, #220]	@ (80057b4 <HAL_RCC_OscConfig+0x288>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f003 0304 	and.w	r3, r3, #4
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d0f0      	beq.n	80056c4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056e2:	f7fc fd93 	bl	800220c <HAL_GetREVID>
 80056e6:	4603      	mov	r3, r0
 80056e8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d817      	bhi.n	8005720 <HAL_RCC_OscConfig+0x1f4>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	691b      	ldr	r3, [r3, #16]
 80056f4:	2b40      	cmp	r3, #64	@ 0x40
 80056f6:	d108      	bne.n	800570a <HAL_RCC_OscConfig+0x1de>
 80056f8:	4b2e      	ldr	r3, [pc, #184]	@ (80057b4 <HAL_RCC_OscConfig+0x288>)
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005700:	4a2c      	ldr	r2, [pc, #176]	@ (80057b4 <HAL_RCC_OscConfig+0x288>)
 8005702:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005706:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005708:	e07a      	b.n	8005800 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800570a:	4b2a      	ldr	r3, [pc, #168]	@ (80057b4 <HAL_RCC_OscConfig+0x288>)
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	691b      	ldr	r3, [r3, #16]
 8005716:	031b      	lsls	r3, r3, #12
 8005718:	4926      	ldr	r1, [pc, #152]	@ (80057b4 <HAL_RCC_OscConfig+0x288>)
 800571a:	4313      	orrs	r3, r2
 800571c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800571e:	e06f      	b.n	8005800 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005720:	4b24      	ldr	r3, [pc, #144]	@ (80057b4 <HAL_RCC_OscConfig+0x288>)
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	691b      	ldr	r3, [r3, #16]
 800572c:	061b      	lsls	r3, r3, #24
 800572e:	4921      	ldr	r1, [pc, #132]	@ (80057b4 <HAL_RCC_OscConfig+0x288>)
 8005730:	4313      	orrs	r3, r2
 8005732:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005734:	e064      	b.n	8005800 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d047      	beq.n	80057ce <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800573e:	4b1d      	ldr	r3, [pc, #116]	@ (80057b4 <HAL_RCC_OscConfig+0x288>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f023 0219 	bic.w	r2, r3, #25
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	491a      	ldr	r1, [pc, #104]	@ (80057b4 <HAL_RCC_OscConfig+0x288>)
 800574c:	4313      	orrs	r3, r2
 800574e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005750:	f7fc fd2c 	bl	80021ac <HAL_GetTick>
 8005754:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005756:	e008      	b.n	800576a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005758:	f7fc fd28 	bl	80021ac <HAL_GetTick>
 800575c:	4602      	mov	r2, r0
 800575e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005760:	1ad3      	subs	r3, r2, r3
 8005762:	2b02      	cmp	r3, #2
 8005764:	d901      	bls.n	800576a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005766:	2303      	movs	r3, #3
 8005768:	e332      	b.n	8005dd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800576a:	4b12      	ldr	r3, [pc, #72]	@ (80057b4 <HAL_RCC_OscConfig+0x288>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f003 0304 	and.w	r3, r3, #4
 8005772:	2b00      	cmp	r3, #0
 8005774:	d0f0      	beq.n	8005758 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005776:	f7fc fd49 	bl	800220c <HAL_GetREVID>
 800577a:	4603      	mov	r3, r0
 800577c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005780:	4293      	cmp	r3, r2
 8005782:	d819      	bhi.n	80057b8 <HAL_RCC_OscConfig+0x28c>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	691b      	ldr	r3, [r3, #16]
 8005788:	2b40      	cmp	r3, #64	@ 0x40
 800578a:	d108      	bne.n	800579e <HAL_RCC_OscConfig+0x272>
 800578c:	4b09      	ldr	r3, [pc, #36]	@ (80057b4 <HAL_RCC_OscConfig+0x288>)
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005794:	4a07      	ldr	r2, [pc, #28]	@ (80057b4 <HAL_RCC_OscConfig+0x288>)
 8005796:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800579a:	6053      	str	r3, [r2, #4]
 800579c:	e030      	b.n	8005800 <HAL_RCC_OscConfig+0x2d4>
 800579e:	4b05      	ldr	r3, [pc, #20]	@ (80057b4 <HAL_RCC_OscConfig+0x288>)
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	691b      	ldr	r3, [r3, #16]
 80057aa:	031b      	lsls	r3, r3, #12
 80057ac:	4901      	ldr	r1, [pc, #4]	@ (80057b4 <HAL_RCC_OscConfig+0x288>)
 80057ae:	4313      	orrs	r3, r2
 80057b0:	604b      	str	r3, [r1, #4]
 80057b2:	e025      	b.n	8005800 <HAL_RCC_OscConfig+0x2d4>
 80057b4:	58024400 	.word	0x58024400
 80057b8:	4b9a      	ldr	r3, [pc, #616]	@ (8005a24 <HAL_RCC_OscConfig+0x4f8>)
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	691b      	ldr	r3, [r3, #16]
 80057c4:	061b      	lsls	r3, r3, #24
 80057c6:	4997      	ldr	r1, [pc, #604]	@ (8005a24 <HAL_RCC_OscConfig+0x4f8>)
 80057c8:	4313      	orrs	r3, r2
 80057ca:	604b      	str	r3, [r1, #4]
 80057cc:	e018      	b.n	8005800 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80057ce:	4b95      	ldr	r3, [pc, #596]	@ (8005a24 <HAL_RCC_OscConfig+0x4f8>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a94      	ldr	r2, [pc, #592]	@ (8005a24 <HAL_RCC_OscConfig+0x4f8>)
 80057d4:	f023 0301 	bic.w	r3, r3, #1
 80057d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057da:	f7fc fce7 	bl	80021ac <HAL_GetTick>
 80057de:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80057e0:	e008      	b.n	80057f4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057e2:	f7fc fce3 	bl	80021ac <HAL_GetTick>
 80057e6:	4602      	mov	r2, r0
 80057e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ea:	1ad3      	subs	r3, r2, r3
 80057ec:	2b02      	cmp	r3, #2
 80057ee:	d901      	bls.n	80057f4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80057f0:	2303      	movs	r3, #3
 80057f2:	e2ed      	b.n	8005dd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80057f4:	4b8b      	ldr	r3, [pc, #556]	@ (8005a24 <HAL_RCC_OscConfig+0x4f8>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f003 0304 	and.w	r3, r3, #4
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d1f0      	bne.n	80057e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f003 0310 	and.w	r3, r3, #16
 8005808:	2b00      	cmp	r3, #0
 800580a:	f000 80a9 	beq.w	8005960 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800580e:	4b85      	ldr	r3, [pc, #532]	@ (8005a24 <HAL_RCC_OscConfig+0x4f8>)
 8005810:	691b      	ldr	r3, [r3, #16]
 8005812:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005816:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005818:	4b82      	ldr	r3, [pc, #520]	@ (8005a24 <HAL_RCC_OscConfig+0x4f8>)
 800581a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800581c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800581e:	69bb      	ldr	r3, [r7, #24]
 8005820:	2b08      	cmp	r3, #8
 8005822:	d007      	beq.n	8005834 <HAL_RCC_OscConfig+0x308>
 8005824:	69bb      	ldr	r3, [r7, #24]
 8005826:	2b18      	cmp	r3, #24
 8005828:	d13a      	bne.n	80058a0 <HAL_RCC_OscConfig+0x374>
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	f003 0303 	and.w	r3, r3, #3
 8005830:	2b01      	cmp	r3, #1
 8005832:	d135      	bne.n	80058a0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005834:	4b7b      	ldr	r3, [pc, #492]	@ (8005a24 <HAL_RCC_OscConfig+0x4f8>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800583c:	2b00      	cmp	r3, #0
 800583e:	d005      	beq.n	800584c <HAL_RCC_OscConfig+0x320>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	69db      	ldr	r3, [r3, #28]
 8005844:	2b80      	cmp	r3, #128	@ 0x80
 8005846:	d001      	beq.n	800584c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005848:	2301      	movs	r3, #1
 800584a:	e2c1      	b.n	8005dd0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800584c:	f7fc fcde 	bl	800220c <HAL_GetREVID>
 8005850:	4603      	mov	r3, r0
 8005852:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005856:	4293      	cmp	r3, r2
 8005858:	d817      	bhi.n	800588a <HAL_RCC_OscConfig+0x35e>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6a1b      	ldr	r3, [r3, #32]
 800585e:	2b20      	cmp	r3, #32
 8005860:	d108      	bne.n	8005874 <HAL_RCC_OscConfig+0x348>
 8005862:	4b70      	ldr	r3, [pc, #448]	@ (8005a24 <HAL_RCC_OscConfig+0x4f8>)
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800586a:	4a6e      	ldr	r2, [pc, #440]	@ (8005a24 <HAL_RCC_OscConfig+0x4f8>)
 800586c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005870:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005872:	e075      	b.n	8005960 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005874:	4b6b      	ldr	r3, [pc, #428]	@ (8005a24 <HAL_RCC_OscConfig+0x4f8>)
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6a1b      	ldr	r3, [r3, #32]
 8005880:	069b      	lsls	r3, r3, #26
 8005882:	4968      	ldr	r1, [pc, #416]	@ (8005a24 <HAL_RCC_OscConfig+0x4f8>)
 8005884:	4313      	orrs	r3, r2
 8005886:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005888:	e06a      	b.n	8005960 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800588a:	4b66      	ldr	r3, [pc, #408]	@ (8005a24 <HAL_RCC_OscConfig+0x4f8>)
 800588c:	68db      	ldr	r3, [r3, #12]
 800588e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6a1b      	ldr	r3, [r3, #32]
 8005896:	061b      	lsls	r3, r3, #24
 8005898:	4962      	ldr	r1, [pc, #392]	@ (8005a24 <HAL_RCC_OscConfig+0x4f8>)
 800589a:	4313      	orrs	r3, r2
 800589c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800589e:	e05f      	b.n	8005960 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	69db      	ldr	r3, [r3, #28]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d042      	beq.n	800592e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80058a8:	4b5e      	ldr	r3, [pc, #376]	@ (8005a24 <HAL_RCC_OscConfig+0x4f8>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a5d      	ldr	r2, [pc, #372]	@ (8005a24 <HAL_RCC_OscConfig+0x4f8>)
 80058ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058b4:	f7fc fc7a 	bl	80021ac <HAL_GetTick>
 80058b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80058ba:	e008      	b.n	80058ce <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80058bc:	f7fc fc76 	bl	80021ac <HAL_GetTick>
 80058c0:	4602      	mov	r2, r0
 80058c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058c4:	1ad3      	subs	r3, r2, r3
 80058c6:	2b02      	cmp	r3, #2
 80058c8:	d901      	bls.n	80058ce <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80058ca:	2303      	movs	r3, #3
 80058cc:	e280      	b.n	8005dd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80058ce:	4b55      	ldr	r3, [pc, #340]	@ (8005a24 <HAL_RCC_OscConfig+0x4f8>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d0f0      	beq.n	80058bc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80058da:	f7fc fc97 	bl	800220c <HAL_GetREVID>
 80058de:	4603      	mov	r3, r0
 80058e0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d817      	bhi.n	8005918 <HAL_RCC_OscConfig+0x3ec>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6a1b      	ldr	r3, [r3, #32]
 80058ec:	2b20      	cmp	r3, #32
 80058ee:	d108      	bne.n	8005902 <HAL_RCC_OscConfig+0x3d6>
 80058f0:	4b4c      	ldr	r3, [pc, #304]	@ (8005a24 <HAL_RCC_OscConfig+0x4f8>)
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80058f8:	4a4a      	ldr	r2, [pc, #296]	@ (8005a24 <HAL_RCC_OscConfig+0x4f8>)
 80058fa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80058fe:	6053      	str	r3, [r2, #4]
 8005900:	e02e      	b.n	8005960 <HAL_RCC_OscConfig+0x434>
 8005902:	4b48      	ldr	r3, [pc, #288]	@ (8005a24 <HAL_RCC_OscConfig+0x4f8>)
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6a1b      	ldr	r3, [r3, #32]
 800590e:	069b      	lsls	r3, r3, #26
 8005910:	4944      	ldr	r1, [pc, #272]	@ (8005a24 <HAL_RCC_OscConfig+0x4f8>)
 8005912:	4313      	orrs	r3, r2
 8005914:	604b      	str	r3, [r1, #4]
 8005916:	e023      	b.n	8005960 <HAL_RCC_OscConfig+0x434>
 8005918:	4b42      	ldr	r3, [pc, #264]	@ (8005a24 <HAL_RCC_OscConfig+0x4f8>)
 800591a:	68db      	ldr	r3, [r3, #12]
 800591c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6a1b      	ldr	r3, [r3, #32]
 8005924:	061b      	lsls	r3, r3, #24
 8005926:	493f      	ldr	r1, [pc, #252]	@ (8005a24 <HAL_RCC_OscConfig+0x4f8>)
 8005928:	4313      	orrs	r3, r2
 800592a:	60cb      	str	r3, [r1, #12]
 800592c:	e018      	b.n	8005960 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800592e:	4b3d      	ldr	r3, [pc, #244]	@ (8005a24 <HAL_RCC_OscConfig+0x4f8>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a3c      	ldr	r2, [pc, #240]	@ (8005a24 <HAL_RCC_OscConfig+0x4f8>)
 8005934:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005938:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800593a:	f7fc fc37 	bl	80021ac <HAL_GetTick>
 800593e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005940:	e008      	b.n	8005954 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005942:	f7fc fc33 	bl	80021ac <HAL_GetTick>
 8005946:	4602      	mov	r2, r0
 8005948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800594a:	1ad3      	subs	r3, r2, r3
 800594c:	2b02      	cmp	r3, #2
 800594e:	d901      	bls.n	8005954 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005950:	2303      	movs	r3, #3
 8005952:	e23d      	b.n	8005dd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005954:	4b33      	ldr	r3, [pc, #204]	@ (8005a24 <HAL_RCC_OscConfig+0x4f8>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800595c:	2b00      	cmp	r3, #0
 800595e:	d1f0      	bne.n	8005942 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f003 0308 	and.w	r3, r3, #8
 8005968:	2b00      	cmp	r3, #0
 800596a:	d036      	beq.n	80059da <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	695b      	ldr	r3, [r3, #20]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d019      	beq.n	80059a8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005974:	4b2b      	ldr	r3, [pc, #172]	@ (8005a24 <HAL_RCC_OscConfig+0x4f8>)
 8005976:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005978:	4a2a      	ldr	r2, [pc, #168]	@ (8005a24 <HAL_RCC_OscConfig+0x4f8>)
 800597a:	f043 0301 	orr.w	r3, r3, #1
 800597e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005980:	f7fc fc14 	bl	80021ac <HAL_GetTick>
 8005984:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005986:	e008      	b.n	800599a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005988:	f7fc fc10 	bl	80021ac <HAL_GetTick>
 800598c:	4602      	mov	r2, r0
 800598e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005990:	1ad3      	subs	r3, r2, r3
 8005992:	2b02      	cmp	r3, #2
 8005994:	d901      	bls.n	800599a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005996:	2303      	movs	r3, #3
 8005998:	e21a      	b.n	8005dd0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800599a:	4b22      	ldr	r3, [pc, #136]	@ (8005a24 <HAL_RCC_OscConfig+0x4f8>)
 800599c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800599e:	f003 0302 	and.w	r3, r3, #2
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d0f0      	beq.n	8005988 <HAL_RCC_OscConfig+0x45c>
 80059a6:	e018      	b.n	80059da <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80059a8:	4b1e      	ldr	r3, [pc, #120]	@ (8005a24 <HAL_RCC_OscConfig+0x4f8>)
 80059aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059ac:	4a1d      	ldr	r2, [pc, #116]	@ (8005a24 <HAL_RCC_OscConfig+0x4f8>)
 80059ae:	f023 0301 	bic.w	r3, r3, #1
 80059b2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059b4:	f7fc fbfa 	bl	80021ac <HAL_GetTick>
 80059b8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80059ba:	e008      	b.n	80059ce <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059bc:	f7fc fbf6 	bl	80021ac <HAL_GetTick>
 80059c0:	4602      	mov	r2, r0
 80059c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059c4:	1ad3      	subs	r3, r2, r3
 80059c6:	2b02      	cmp	r3, #2
 80059c8:	d901      	bls.n	80059ce <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80059ca:	2303      	movs	r3, #3
 80059cc:	e200      	b.n	8005dd0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80059ce:	4b15      	ldr	r3, [pc, #84]	@ (8005a24 <HAL_RCC_OscConfig+0x4f8>)
 80059d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059d2:	f003 0302 	and.w	r3, r3, #2
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d1f0      	bne.n	80059bc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f003 0320 	and.w	r3, r3, #32
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d039      	beq.n	8005a5a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	699b      	ldr	r3, [r3, #24]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d01c      	beq.n	8005a28 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80059ee:	4b0d      	ldr	r3, [pc, #52]	@ (8005a24 <HAL_RCC_OscConfig+0x4f8>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a0c      	ldr	r2, [pc, #48]	@ (8005a24 <HAL_RCC_OscConfig+0x4f8>)
 80059f4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80059f8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80059fa:	f7fc fbd7 	bl	80021ac <HAL_GetTick>
 80059fe:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005a00:	e008      	b.n	8005a14 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005a02:	f7fc fbd3 	bl	80021ac <HAL_GetTick>
 8005a06:	4602      	mov	r2, r0
 8005a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a0a:	1ad3      	subs	r3, r2, r3
 8005a0c:	2b02      	cmp	r3, #2
 8005a0e:	d901      	bls.n	8005a14 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005a10:	2303      	movs	r3, #3
 8005a12:	e1dd      	b.n	8005dd0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005a14:	4b03      	ldr	r3, [pc, #12]	@ (8005a24 <HAL_RCC_OscConfig+0x4f8>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d0f0      	beq.n	8005a02 <HAL_RCC_OscConfig+0x4d6>
 8005a20:	e01b      	b.n	8005a5a <HAL_RCC_OscConfig+0x52e>
 8005a22:	bf00      	nop
 8005a24:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005a28:	4b9b      	ldr	r3, [pc, #620]	@ (8005c98 <HAL_RCC_OscConfig+0x76c>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a9a      	ldr	r2, [pc, #616]	@ (8005c98 <HAL_RCC_OscConfig+0x76c>)
 8005a2e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005a32:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005a34:	f7fc fbba 	bl	80021ac <HAL_GetTick>
 8005a38:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005a3a:	e008      	b.n	8005a4e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005a3c:	f7fc fbb6 	bl	80021ac <HAL_GetTick>
 8005a40:	4602      	mov	r2, r0
 8005a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a44:	1ad3      	subs	r3, r2, r3
 8005a46:	2b02      	cmp	r3, #2
 8005a48:	d901      	bls.n	8005a4e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8005a4a:	2303      	movs	r3, #3
 8005a4c:	e1c0      	b.n	8005dd0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005a4e:	4b92      	ldr	r3, [pc, #584]	@ (8005c98 <HAL_RCC_OscConfig+0x76c>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d1f0      	bne.n	8005a3c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f003 0304 	and.w	r3, r3, #4
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	f000 8081 	beq.w	8005b6a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005a68:	4b8c      	ldr	r3, [pc, #560]	@ (8005c9c <HAL_RCC_OscConfig+0x770>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a8b      	ldr	r2, [pc, #556]	@ (8005c9c <HAL_RCC_OscConfig+0x770>)
 8005a6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a72:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005a74:	f7fc fb9a 	bl	80021ac <HAL_GetTick>
 8005a78:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005a7a:	e008      	b.n	8005a8e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a7c:	f7fc fb96 	bl	80021ac <HAL_GetTick>
 8005a80:	4602      	mov	r2, r0
 8005a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a84:	1ad3      	subs	r3, r2, r3
 8005a86:	2b64      	cmp	r3, #100	@ 0x64
 8005a88:	d901      	bls.n	8005a8e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8005a8a:	2303      	movs	r3, #3
 8005a8c:	e1a0      	b.n	8005dd0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005a8e:	4b83      	ldr	r3, [pc, #524]	@ (8005c9c <HAL_RCC_OscConfig+0x770>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d0f0      	beq.n	8005a7c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d106      	bne.n	8005ab0 <HAL_RCC_OscConfig+0x584>
 8005aa2:	4b7d      	ldr	r3, [pc, #500]	@ (8005c98 <HAL_RCC_OscConfig+0x76c>)
 8005aa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005aa6:	4a7c      	ldr	r2, [pc, #496]	@ (8005c98 <HAL_RCC_OscConfig+0x76c>)
 8005aa8:	f043 0301 	orr.w	r3, r3, #1
 8005aac:	6713      	str	r3, [r2, #112]	@ 0x70
 8005aae:	e02d      	b.n	8005b0c <HAL_RCC_OscConfig+0x5e0>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d10c      	bne.n	8005ad2 <HAL_RCC_OscConfig+0x5a6>
 8005ab8:	4b77      	ldr	r3, [pc, #476]	@ (8005c98 <HAL_RCC_OscConfig+0x76c>)
 8005aba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005abc:	4a76      	ldr	r2, [pc, #472]	@ (8005c98 <HAL_RCC_OscConfig+0x76c>)
 8005abe:	f023 0301 	bic.w	r3, r3, #1
 8005ac2:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ac4:	4b74      	ldr	r3, [pc, #464]	@ (8005c98 <HAL_RCC_OscConfig+0x76c>)
 8005ac6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ac8:	4a73      	ldr	r2, [pc, #460]	@ (8005c98 <HAL_RCC_OscConfig+0x76c>)
 8005aca:	f023 0304 	bic.w	r3, r3, #4
 8005ace:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ad0:	e01c      	b.n	8005b0c <HAL_RCC_OscConfig+0x5e0>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	2b05      	cmp	r3, #5
 8005ad8:	d10c      	bne.n	8005af4 <HAL_RCC_OscConfig+0x5c8>
 8005ada:	4b6f      	ldr	r3, [pc, #444]	@ (8005c98 <HAL_RCC_OscConfig+0x76c>)
 8005adc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ade:	4a6e      	ldr	r2, [pc, #440]	@ (8005c98 <HAL_RCC_OscConfig+0x76c>)
 8005ae0:	f043 0304 	orr.w	r3, r3, #4
 8005ae4:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ae6:	4b6c      	ldr	r3, [pc, #432]	@ (8005c98 <HAL_RCC_OscConfig+0x76c>)
 8005ae8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005aea:	4a6b      	ldr	r2, [pc, #428]	@ (8005c98 <HAL_RCC_OscConfig+0x76c>)
 8005aec:	f043 0301 	orr.w	r3, r3, #1
 8005af0:	6713      	str	r3, [r2, #112]	@ 0x70
 8005af2:	e00b      	b.n	8005b0c <HAL_RCC_OscConfig+0x5e0>
 8005af4:	4b68      	ldr	r3, [pc, #416]	@ (8005c98 <HAL_RCC_OscConfig+0x76c>)
 8005af6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005af8:	4a67      	ldr	r2, [pc, #412]	@ (8005c98 <HAL_RCC_OscConfig+0x76c>)
 8005afa:	f023 0301 	bic.w	r3, r3, #1
 8005afe:	6713      	str	r3, [r2, #112]	@ 0x70
 8005b00:	4b65      	ldr	r3, [pc, #404]	@ (8005c98 <HAL_RCC_OscConfig+0x76c>)
 8005b02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b04:	4a64      	ldr	r2, [pc, #400]	@ (8005c98 <HAL_RCC_OscConfig+0x76c>)
 8005b06:	f023 0304 	bic.w	r3, r3, #4
 8005b0a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d015      	beq.n	8005b40 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b14:	f7fc fb4a 	bl	80021ac <HAL_GetTick>
 8005b18:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005b1a:	e00a      	b.n	8005b32 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b1c:	f7fc fb46 	bl	80021ac <HAL_GetTick>
 8005b20:	4602      	mov	r2, r0
 8005b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b24:	1ad3      	subs	r3, r2, r3
 8005b26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d901      	bls.n	8005b32 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8005b2e:	2303      	movs	r3, #3
 8005b30:	e14e      	b.n	8005dd0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005b32:	4b59      	ldr	r3, [pc, #356]	@ (8005c98 <HAL_RCC_OscConfig+0x76c>)
 8005b34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b36:	f003 0302 	and.w	r3, r3, #2
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d0ee      	beq.n	8005b1c <HAL_RCC_OscConfig+0x5f0>
 8005b3e:	e014      	b.n	8005b6a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b40:	f7fc fb34 	bl	80021ac <HAL_GetTick>
 8005b44:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005b46:	e00a      	b.n	8005b5e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b48:	f7fc fb30 	bl	80021ac <HAL_GetTick>
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b50:	1ad3      	subs	r3, r2, r3
 8005b52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d901      	bls.n	8005b5e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8005b5a:	2303      	movs	r3, #3
 8005b5c:	e138      	b.n	8005dd0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005b5e:	4b4e      	ldr	r3, [pc, #312]	@ (8005c98 <HAL_RCC_OscConfig+0x76c>)
 8005b60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b62:	f003 0302 	and.w	r3, r3, #2
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d1ee      	bne.n	8005b48 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	f000 812d 	beq.w	8005dce <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005b74:	4b48      	ldr	r3, [pc, #288]	@ (8005c98 <HAL_RCC_OscConfig+0x76c>)
 8005b76:	691b      	ldr	r3, [r3, #16]
 8005b78:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005b7c:	2b18      	cmp	r3, #24
 8005b7e:	f000 80bd 	beq.w	8005cfc <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b86:	2b02      	cmp	r3, #2
 8005b88:	f040 809e 	bne.w	8005cc8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b8c:	4b42      	ldr	r3, [pc, #264]	@ (8005c98 <HAL_RCC_OscConfig+0x76c>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a41      	ldr	r2, [pc, #260]	@ (8005c98 <HAL_RCC_OscConfig+0x76c>)
 8005b92:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005b96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b98:	f7fc fb08 	bl	80021ac <HAL_GetTick>
 8005b9c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005b9e:	e008      	b.n	8005bb2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ba0:	f7fc fb04 	bl	80021ac <HAL_GetTick>
 8005ba4:	4602      	mov	r2, r0
 8005ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ba8:	1ad3      	subs	r3, r2, r3
 8005baa:	2b02      	cmp	r3, #2
 8005bac:	d901      	bls.n	8005bb2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8005bae:	2303      	movs	r3, #3
 8005bb0:	e10e      	b.n	8005dd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005bb2:	4b39      	ldr	r3, [pc, #228]	@ (8005c98 <HAL_RCC_OscConfig+0x76c>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d1f0      	bne.n	8005ba0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005bbe:	4b36      	ldr	r3, [pc, #216]	@ (8005c98 <HAL_RCC_OscConfig+0x76c>)
 8005bc0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005bc2:	4b37      	ldr	r3, [pc, #220]	@ (8005ca0 <HAL_RCC_OscConfig+0x774>)
 8005bc4:	4013      	ands	r3, r2
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005bca:	687a      	ldr	r2, [r7, #4]
 8005bcc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005bce:	0112      	lsls	r2, r2, #4
 8005bd0:	430a      	orrs	r2, r1
 8005bd2:	4931      	ldr	r1, [pc, #196]	@ (8005c98 <HAL_RCC_OscConfig+0x76c>)
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	628b      	str	r3, [r1, #40]	@ 0x28
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bdc:	3b01      	subs	r3, #1
 8005bde:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005be6:	3b01      	subs	r3, #1
 8005be8:	025b      	lsls	r3, r3, #9
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	431a      	orrs	r2, r3
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bf2:	3b01      	subs	r3, #1
 8005bf4:	041b      	lsls	r3, r3, #16
 8005bf6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005bfa:	431a      	orrs	r2, r3
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c00:	3b01      	subs	r3, #1
 8005c02:	061b      	lsls	r3, r3, #24
 8005c04:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005c08:	4923      	ldr	r1, [pc, #140]	@ (8005c98 <HAL_RCC_OscConfig+0x76c>)
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005c0e:	4b22      	ldr	r3, [pc, #136]	@ (8005c98 <HAL_RCC_OscConfig+0x76c>)
 8005c10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c12:	4a21      	ldr	r2, [pc, #132]	@ (8005c98 <HAL_RCC_OscConfig+0x76c>)
 8005c14:	f023 0301 	bic.w	r3, r3, #1
 8005c18:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005c1a:	4b1f      	ldr	r3, [pc, #124]	@ (8005c98 <HAL_RCC_OscConfig+0x76c>)
 8005c1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005c1e:	4b21      	ldr	r3, [pc, #132]	@ (8005ca4 <HAL_RCC_OscConfig+0x778>)
 8005c20:	4013      	ands	r3, r2
 8005c22:	687a      	ldr	r2, [r7, #4]
 8005c24:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005c26:	00d2      	lsls	r2, r2, #3
 8005c28:	491b      	ldr	r1, [pc, #108]	@ (8005c98 <HAL_RCC_OscConfig+0x76c>)
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005c2e:	4b1a      	ldr	r3, [pc, #104]	@ (8005c98 <HAL_RCC_OscConfig+0x76c>)
 8005c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c32:	f023 020c 	bic.w	r2, r3, #12
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c3a:	4917      	ldr	r1, [pc, #92]	@ (8005c98 <HAL_RCC_OscConfig+0x76c>)
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005c40:	4b15      	ldr	r3, [pc, #84]	@ (8005c98 <HAL_RCC_OscConfig+0x76c>)
 8005c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c44:	f023 0202 	bic.w	r2, r3, #2
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c4c:	4912      	ldr	r1, [pc, #72]	@ (8005c98 <HAL_RCC_OscConfig+0x76c>)
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005c52:	4b11      	ldr	r3, [pc, #68]	@ (8005c98 <HAL_RCC_OscConfig+0x76c>)
 8005c54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c56:	4a10      	ldr	r2, [pc, #64]	@ (8005c98 <HAL_RCC_OscConfig+0x76c>)
 8005c58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c5e:	4b0e      	ldr	r3, [pc, #56]	@ (8005c98 <HAL_RCC_OscConfig+0x76c>)
 8005c60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c62:	4a0d      	ldr	r2, [pc, #52]	@ (8005c98 <HAL_RCC_OscConfig+0x76c>)
 8005c64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c68:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005c6a:	4b0b      	ldr	r3, [pc, #44]	@ (8005c98 <HAL_RCC_OscConfig+0x76c>)
 8005c6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c6e:	4a0a      	ldr	r2, [pc, #40]	@ (8005c98 <HAL_RCC_OscConfig+0x76c>)
 8005c70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005c74:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005c76:	4b08      	ldr	r3, [pc, #32]	@ (8005c98 <HAL_RCC_OscConfig+0x76c>)
 8005c78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c7a:	4a07      	ldr	r2, [pc, #28]	@ (8005c98 <HAL_RCC_OscConfig+0x76c>)
 8005c7c:	f043 0301 	orr.w	r3, r3, #1
 8005c80:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c82:	4b05      	ldr	r3, [pc, #20]	@ (8005c98 <HAL_RCC_OscConfig+0x76c>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a04      	ldr	r2, [pc, #16]	@ (8005c98 <HAL_RCC_OscConfig+0x76c>)
 8005c88:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005c8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c8e:	f7fc fa8d 	bl	80021ac <HAL_GetTick>
 8005c92:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005c94:	e011      	b.n	8005cba <HAL_RCC_OscConfig+0x78e>
 8005c96:	bf00      	nop
 8005c98:	58024400 	.word	0x58024400
 8005c9c:	58024800 	.word	0x58024800
 8005ca0:	fffffc0c 	.word	0xfffffc0c
 8005ca4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ca8:	f7fc fa80 	bl	80021ac <HAL_GetTick>
 8005cac:	4602      	mov	r2, r0
 8005cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cb0:	1ad3      	subs	r3, r2, r3
 8005cb2:	2b02      	cmp	r3, #2
 8005cb4:	d901      	bls.n	8005cba <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005cb6:	2303      	movs	r3, #3
 8005cb8:	e08a      	b.n	8005dd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005cba:	4b47      	ldr	r3, [pc, #284]	@ (8005dd8 <HAL_RCC_OscConfig+0x8ac>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d0f0      	beq.n	8005ca8 <HAL_RCC_OscConfig+0x77c>
 8005cc6:	e082      	b.n	8005dce <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cc8:	4b43      	ldr	r3, [pc, #268]	@ (8005dd8 <HAL_RCC_OscConfig+0x8ac>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a42      	ldr	r2, [pc, #264]	@ (8005dd8 <HAL_RCC_OscConfig+0x8ac>)
 8005cce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005cd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cd4:	f7fc fa6a 	bl	80021ac <HAL_GetTick>
 8005cd8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005cda:	e008      	b.n	8005cee <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cdc:	f7fc fa66 	bl	80021ac <HAL_GetTick>
 8005ce0:	4602      	mov	r2, r0
 8005ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ce4:	1ad3      	subs	r3, r2, r3
 8005ce6:	2b02      	cmp	r3, #2
 8005ce8:	d901      	bls.n	8005cee <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8005cea:	2303      	movs	r3, #3
 8005cec:	e070      	b.n	8005dd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005cee:	4b3a      	ldr	r3, [pc, #232]	@ (8005dd8 <HAL_RCC_OscConfig+0x8ac>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d1f0      	bne.n	8005cdc <HAL_RCC_OscConfig+0x7b0>
 8005cfa:	e068      	b.n	8005dce <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005cfc:	4b36      	ldr	r3, [pc, #216]	@ (8005dd8 <HAL_RCC_OscConfig+0x8ac>)
 8005cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d00:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005d02:	4b35      	ldr	r3, [pc, #212]	@ (8005dd8 <HAL_RCC_OscConfig+0x8ac>)
 8005d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d06:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d031      	beq.n	8005d74 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	f003 0203 	and.w	r2, r3, #3
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d1a:	429a      	cmp	r2, r3
 8005d1c:	d12a      	bne.n	8005d74 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	091b      	lsrs	r3, r3, #4
 8005d22:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	d122      	bne.n	8005d74 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d38:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	d11a      	bne.n	8005d74 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	0a5b      	lsrs	r3, r3, #9
 8005d42:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d4a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d111      	bne.n	8005d74 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	0c1b      	lsrs	r3, r3, #16
 8005d54:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d5c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d108      	bne.n	8005d74 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	0e1b      	lsrs	r3, r3, #24
 8005d66:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d6e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d001      	beq.n	8005d78 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005d74:	2301      	movs	r3, #1
 8005d76:	e02b      	b.n	8005dd0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005d78:	4b17      	ldr	r3, [pc, #92]	@ (8005dd8 <HAL_RCC_OscConfig+0x8ac>)
 8005d7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d7c:	08db      	lsrs	r3, r3, #3
 8005d7e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005d82:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d88:	693a      	ldr	r2, [r7, #16]
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d01f      	beq.n	8005dce <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005d8e:	4b12      	ldr	r3, [pc, #72]	@ (8005dd8 <HAL_RCC_OscConfig+0x8ac>)
 8005d90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d92:	4a11      	ldr	r2, [pc, #68]	@ (8005dd8 <HAL_RCC_OscConfig+0x8ac>)
 8005d94:	f023 0301 	bic.w	r3, r3, #1
 8005d98:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005d9a:	f7fc fa07 	bl	80021ac <HAL_GetTick>
 8005d9e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005da0:	bf00      	nop
 8005da2:	f7fc fa03 	bl	80021ac <HAL_GetTick>
 8005da6:	4602      	mov	r2, r0
 8005da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d0f9      	beq.n	8005da2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005dae:	4b0a      	ldr	r3, [pc, #40]	@ (8005dd8 <HAL_RCC_OscConfig+0x8ac>)
 8005db0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005db2:	4b0a      	ldr	r3, [pc, #40]	@ (8005ddc <HAL_RCC_OscConfig+0x8b0>)
 8005db4:	4013      	ands	r3, r2
 8005db6:	687a      	ldr	r2, [r7, #4]
 8005db8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005dba:	00d2      	lsls	r2, r2, #3
 8005dbc:	4906      	ldr	r1, [pc, #24]	@ (8005dd8 <HAL_RCC_OscConfig+0x8ac>)
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005dc2:	4b05      	ldr	r3, [pc, #20]	@ (8005dd8 <HAL_RCC_OscConfig+0x8ac>)
 8005dc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dc6:	4a04      	ldr	r2, [pc, #16]	@ (8005dd8 <HAL_RCC_OscConfig+0x8ac>)
 8005dc8:	f043 0301 	orr.w	r3, r3, #1
 8005dcc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005dce:	2300      	movs	r3, #0
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3730      	adds	r7, #48	@ 0x30
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}
 8005dd8:	58024400 	.word	0x58024400
 8005ddc:	ffff0007 	.word	0xffff0007

08005de0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b086      	sub	sp, #24
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
 8005de8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d101      	bne.n	8005df4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005df0:	2301      	movs	r3, #1
 8005df2:	e19c      	b.n	800612e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005df4:	4b8a      	ldr	r3, [pc, #552]	@ (8006020 <HAL_RCC_ClockConfig+0x240>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f003 030f 	and.w	r3, r3, #15
 8005dfc:	683a      	ldr	r2, [r7, #0]
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	d910      	bls.n	8005e24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e02:	4b87      	ldr	r3, [pc, #540]	@ (8006020 <HAL_RCC_ClockConfig+0x240>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f023 020f 	bic.w	r2, r3, #15
 8005e0a:	4985      	ldr	r1, [pc, #532]	@ (8006020 <HAL_RCC_ClockConfig+0x240>)
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e12:	4b83      	ldr	r3, [pc, #524]	@ (8006020 <HAL_RCC_ClockConfig+0x240>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f003 030f 	and.w	r3, r3, #15
 8005e1a:	683a      	ldr	r2, [r7, #0]
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d001      	beq.n	8005e24 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005e20:	2301      	movs	r3, #1
 8005e22:	e184      	b.n	800612e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f003 0304 	and.w	r3, r3, #4
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d010      	beq.n	8005e52 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	691a      	ldr	r2, [r3, #16]
 8005e34:	4b7b      	ldr	r3, [pc, #492]	@ (8006024 <HAL_RCC_ClockConfig+0x244>)
 8005e36:	699b      	ldr	r3, [r3, #24]
 8005e38:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d908      	bls.n	8005e52 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005e40:	4b78      	ldr	r3, [pc, #480]	@ (8006024 <HAL_RCC_ClockConfig+0x244>)
 8005e42:	699b      	ldr	r3, [r3, #24]
 8005e44:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	691b      	ldr	r3, [r3, #16]
 8005e4c:	4975      	ldr	r1, [pc, #468]	@ (8006024 <HAL_RCC_ClockConfig+0x244>)
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f003 0308 	and.w	r3, r3, #8
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d010      	beq.n	8005e80 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	695a      	ldr	r2, [r3, #20]
 8005e62:	4b70      	ldr	r3, [pc, #448]	@ (8006024 <HAL_RCC_ClockConfig+0x244>)
 8005e64:	69db      	ldr	r3, [r3, #28]
 8005e66:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005e6a:	429a      	cmp	r2, r3
 8005e6c:	d908      	bls.n	8005e80 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005e6e:	4b6d      	ldr	r3, [pc, #436]	@ (8006024 <HAL_RCC_ClockConfig+0x244>)
 8005e70:	69db      	ldr	r3, [r3, #28]
 8005e72:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	695b      	ldr	r3, [r3, #20]
 8005e7a:	496a      	ldr	r1, [pc, #424]	@ (8006024 <HAL_RCC_ClockConfig+0x244>)
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f003 0310 	and.w	r3, r3, #16
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d010      	beq.n	8005eae <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	699a      	ldr	r2, [r3, #24]
 8005e90:	4b64      	ldr	r3, [pc, #400]	@ (8006024 <HAL_RCC_ClockConfig+0x244>)
 8005e92:	69db      	ldr	r3, [r3, #28]
 8005e94:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005e98:	429a      	cmp	r2, r3
 8005e9a:	d908      	bls.n	8005eae <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005e9c:	4b61      	ldr	r3, [pc, #388]	@ (8006024 <HAL_RCC_ClockConfig+0x244>)
 8005e9e:	69db      	ldr	r3, [r3, #28]
 8005ea0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	699b      	ldr	r3, [r3, #24]
 8005ea8:	495e      	ldr	r1, [pc, #376]	@ (8006024 <HAL_RCC_ClockConfig+0x244>)
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f003 0320 	and.w	r3, r3, #32
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d010      	beq.n	8005edc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	69da      	ldr	r2, [r3, #28]
 8005ebe:	4b59      	ldr	r3, [pc, #356]	@ (8006024 <HAL_RCC_ClockConfig+0x244>)
 8005ec0:	6a1b      	ldr	r3, [r3, #32]
 8005ec2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005ec6:	429a      	cmp	r2, r3
 8005ec8:	d908      	bls.n	8005edc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005eca:	4b56      	ldr	r3, [pc, #344]	@ (8006024 <HAL_RCC_ClockConfig+0x244>)
 8005ecc:	6a1b      	ldr	r3, [r3, #32]
 8005ece:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	69db      	ldr	r3, [r3, #28]
 8005ed6:	4953      	ldr	r1, [pc, #332]	@ (8006024 <HAL_RCC_ClockConfig+0x244>)
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f003 0302 	and.w	r3, r3, #2
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d010      	beq.n	8005f0a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	68da      	ldr	r2, [r3, #12]
 8005eec:	4b4d      	ldr	r3, [pc, #308]	@ (8006024 <HAL_RCC_ClockConfig+0x244>)
 8005eee:	699b      	ldr	r3, [r3, #24]
 8005ef0:	f003 030f 	and.w	r3, r3, #15
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d908      	bls.n	8005f0a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ef8:	4b4a      	ldr	r3, [pc, #296]	@ (8006024 <HAL_RCC_ClockConfig+0x244>)
 8005efa:	699b      	ldr	r3, [r3, #24]
 8005efc:	f023 020f 	bic.w	r2, r3, #15
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	4947      	ldr	r1, [pc, #284]	@ (8006024 <HAL_RCC_ClockConfig+0x244>)
 8005f06:	4313      	orrs	r3, r2
 8005f08:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f003 0301 	and.w	r3, r3, #1
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d055      	beq.n	8005fc2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005f16:	4b43      	ldr	r3, [pc, #268]	@ (8006024 <HAL_RCC_ClockConfig+0x244>)
 8005f18:	699b      	ldr	r3, [r3, #24]
 8005f1a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	689b      	ldr	r3, [r3, #8]
 8005f22:	4940      	ldr	r1, [pc, #256]	@ (8006024 <HAL_RCC_ClockConfig+0x244>)
 8005f24:	4313      	orrs	r3, r2
 8005f26:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	2b02      	cmp	r3, #2
 8005f2e:	d107      	bne.n	8005f40 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005f30:	4b3c      	ldr	r3, [pc, #240]	@ (8006024 <HAL_RCC_ClockConfig+0x244>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d121      	bne.n	8005f80 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	e0f6      	b.n	800612e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	2b03      	cmp	r3, #3
 8005f46:	d107      	bne.n	8005f58 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005f48:	4b36      	ldr	r3, [pc, #216]	@ (8006024 <HAL_RCC_ClockConfig+0x244>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d115      	bne.n	8005f80 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005f54:	2301      	movs	r3, #1
 8005f56:	e0ea      	b.n	800612e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d107      	bne.n	8005f70 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005f60:	4b30      	ldr	r3, [pc, #192]	@ (8006024 <HAL_RCC_ClockConfig+0x244>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d109      	bne.n	8005f80 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	e0de      	b.n	800612e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005f70:	4b2c      	ldr	r3, [pc, #176]	@ (8006024 <HAL_RCC_ClockConfig+0x244>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f003 0304 	and.w	r3, r3, #4
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d101      	bne.n	8005f80 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	e0d6      	b.n	800612e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005f80:	4b28      	ldr	r3, [pc, #160]	@ (8006024 <HAL_RCC_ClockConfig+0x244>)
 8005f82:	691b      	ldr	r3, [r3, #16]
 8005f84:	f023 0207 	bic.w	r2, r3, #7
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	4925      	ldr	r1, [pc, #148]	@ (8006024 <HAL_RCC_ClockConfig+0x244>)
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f92:	f7fc f90b 	bl	80021ac <HAL_GetTick>
 8005f96:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f98:	e00a      	b.n	8005fb0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f9a:	f7fc f907 	bl	80021ac <HAL_GetTick>
 8005f9e:	4602      	mov	r2, r0
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	1ad3      	subs	r3, r2, r3
 8005fa4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d901      	bls.n	8005fb0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005fac:	2303      	movs	r3, #3
 8005fae:	e0be      	b.n	800612e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fb0:	4b1c      	ldr	r3, [pc, #112]	@ (8006024 <HAL_RCC_ClockConfig+0x244>)
 8005fb2:	691b      	ldr	r3, [r3, #16]
 8005fb4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	00db      	lsls	r3, r3, #3
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	d1eb      	bne.n	8005f9a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f003 0302 	and.w	r3, r3, #2
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d010      	beq.n	8005ff0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	68da      	ldr	r2, [r3, #12]
 8005fd2:	4b14      	ldr	r3, [pc, #80]	@ (8006024 <HAL_RCC_ClockConfig+0x244>)
 8005fd4:	699b      	ldr	r3, [r3, #24]
 8005fd6:	f003 030f 	and.w	r3, r3, #15
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	d208      	bcs.n	8005ff0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005fde:	4b11      	ldr	r3, [pc, #68]	@ (8006024 <HAL_RCC_ClockConfig+0x244>)
 8005fe0:	699b      	ldr	r3, [r3, #24]
 8005fe2:	f023 020f 	bic.w	r2, r3, #15
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	68db      	ldr	r3, [r3, #12]
 8005fea:	490e      	ldr	r1, [pc, #56]	@ (8006024 <HAL_RCC_ClockConfig+0x244>)
 8005fec:	4313      	orrs	r3, r2
 8005fee:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005ff0:	4b0b      	ldr	r3, [pc, #44]	@ (8006020 <HAL_RCC_ClockConfig+0x240>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f003 030f 	and.w	r3, r3, #15
 8005ff8:	683a      	ldr	r2, [r7, #0]
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	d214      	bcs.n	8006028 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ffe:	4b08      	ldr	r3, [pc, #32]	@ (8006020 <HAL_RCC_ClockConfig+0x240>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f023 020f 	bic.w	r2, r3, #15
 8006006:	4906      	ldr	r1, [pc, #24]	@ (8006020 <HAL_RCC_ClockConfig+0x240>)
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	4313      	orrs	r3, r2
 800600c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800600e:	4b04      	ldr	r3, [pc, #16]	@ (8006020 <HAL_RCC_ClockConfig+0x240>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f003 030f 	and.w	r3, r3, #15
 8006016:	683a      	ldr	r2, [r7, #0]
 8006018:	429a      	cmp	r2, r3
 800601a:	d005      	beq.n	8006028 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800601c:	2301      	movs	r3, #1
 800601e:	e086      	b.n	800612e <HAL_RCC_ClockConfig+0x34e>
 8006020:	52002000 	.word	0x52002000
 8006024:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f003 0304 	and.w	r3, r3, #4
 8006030:	2b00      	cmp	r3, #0
 8006032:	d010      	beq.n	8006056 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	691a      	ldr	r2, [r3, #16]
 8006038:	4b3f      	ldr	r3, [pc, #252]	@ (8006138 <HAL_RCC_ClockConfig+0x358>)
 800603a:	699b      	ldr	r3, [r3, #24]
 800603c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006040:	429a      	cmp	r2, r3
 8006042:	d208      	bcs.n	8006056 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006044:	4b3c      	ldr	r3, [pc, #240]	@ (8006138 <HAL_RCC_ClockConfig+0x358>)
 8006046:	699b      	ldr	r3, [r3, #24]
 8006048:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	691b      	ldr	r3, [r3, #16]
 8006050:	4939      	ldr	r1, [pc, #228]	@ (8006138 <HAL_RCC_ClockConfig+0x358>)
 8006052:	4313      	orrs	r3, r2
 8006054:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f003 0308 	and.w	r3, r3, #8
 800605e:	2b00      	cmp	r3, #0
 8006060:	d010      	beq.n	8006084 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	695a      	ldr	r2, [r3, #20]
 8006066:	4b34      	ldr	r3, [pc, #208]	@ (8006138 <HAL_RCC_ClockConfig+0x358>)
 8006068:	69db      	ldr	r3, [r3, #28]
 800606a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800606e:	429a      	cmp	r2, r3
 8006070:	d208      	bcs.n	8006084 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006072:	4b31      	ldr	r3, [pc, #196]	@ (8006138 <HAL_RCC_ClockConfig+0x358>)
 8006074:	69db      	ldr	r3, [r3, #28]
 8006076:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	695b      	ldr	r3, [r3, #20]
 800607e:	492e      	ldr	r1, [pc, #184]	@ (8006138 <HAL_RCC_ClockConfig+0x358>)
 8006080:	4313      	orrs	r3, r2
 8006082:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f003 0310 	and.w	r3, r3, #16
 800608c:	2b00      	cmp	r3, #0
 800608e:	d010      	beq.n	80060b2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	699a      	ldr	r2, [r3, #24]
 8006094:	4b28      	ldr	r3, [pc, #160]	@ (8006138 <HAL_RCC_ClockConfig+0x358>)
 8006096:	69db      	ldr	r3, [r3, #28]
 8006098:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800609c:	429a      	cmp	r2, r3
 800609e:	d208      	bcs.n	80060b2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80060a0:	4b25      	ldr	r3, [pc, #148]	@ (8006138 <HAL_RCC_ClockConfig+0x358>)
 80060a2:	69db      	ldr	r3, [r3, #28]
 80060a4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	699b      	ldr	r3, [r3, #24]
 80060ac:	4922      	ldr	r1, [pc, #136]	@ (8006138 <HAL_RCC_ClockConfig+0x358>)
 80060ae:	4313      	orrs	r3, r2
 80060b0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f003 0320 	and.w	r3, r3, #32
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d010      	beq.n	80060e0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	69da      	ldr	r2, [r3, #28]
 80060c2:	4b1d      	ldr	r3, [pc, #116]	@ (8006138 <HAL_RCC_ClockConfig+0x358>)
 80060c4:	6a1b      	ldr	r3, [r3, #32]
 80060c6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80060ca:	429a      	cmp	r2, r3
 80060cc:	d208      	bcs.n	80060e0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80060ce:	4b1a      	ldr	r3, [pc, #104]	@ (8006138 <HAL_RCC_ClockConfig+0x358>)
 80060d0:	6a1b      	ldr	r3, [r3, #32]
 80060d2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	69db      	ldr	r3, [r3, #28]
 80060da:	4917      	ldr	r1, [pc, #92]	@ (8006138 <HAL_RCC_ClockConfig+0x358>)
 80060dc:	4313      	orrs	r3, r2
 80060de:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80060e0:	f000 f834 	bl	800614c <HAL_RCC_GetSysClockFreq>
 80060e4:	4602      	mov	r2, r0
 80060e6:	4b14      	ldr	r3, [pc, #80]	@ (8006138 <HAL_RCC_ClockConfig+0x358>)
 80060e8:	699b      	ldr	r3, [r3, #24]
 80060ea:	0a1b      	lsrs	r3, r3, #8
 80060ec:	f003 030f 	and.w	r3, r3, #15
 80060f0:	4912      	ldr	r1, [pc, #72]	@ (800613c <HAL_RCC_ClockConfig+0x35c>)
 80060f2:	5ccb      	ldrb	r3, [r1, r3]
 80060f4:	f003 031f 	and.w	r3, r3, #31
 80060f8:	fa22 f303 	lsr.w	r3, r2, r3
 80060fc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80060fe:	4b0e      	ldr	r3, [pc, #56]	@ (8006138 <HAL_RCC_ClockConfig+0x358>)
 8006100:	699b      	ldr	r3, [r3, #24]
 8006102:	f003 030f 	and.w	r3, r3, #15
 8006106:	4a0d      	ldr	r2, [pc, #52]	@ (800613c <HAL_RCC_ClockConfig+0x35c>)
 8006108:	5cd3      	ldrb	r3, [r2, r3]
 800610a:	f003 031f 	and.w	r3, r3, #31
 800610e:	693a      	ldr	r2, [r7, #16]
 8006110:	fa22 f303 	lsr.w	r3, r2, r3
 8006114:	4a0a      	ldr	r2, [pc, #40]	@ (8006140 <HAL_RCC_ClockConfig+0x360>)
 8006116:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006118:	4a0a      	ldr	r2, [pc, #40]	@ (8006144 <HAL_RCC_ClockConfig+0x364>)
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800611e:	4b0a      	ldr	r3, [pc, #40]	@ (8006148 <HAL_RCC_ClockConfig+0x368>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4618      	mov	r0, r3
 8006124:	f7fb fb78 	bl	8001818 <HAL_InitTick>
 8006128:	4603      	mov	r3, r0
 800612a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800612c:	7bfb      	ldrb	r3, [r7, #15]
}
 800612e:	4618      	mov	r0, r3
 8006130:	3718      	adds	r7, #24
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}
 8006136:	bf00      	nop
 8006138:	58024400 	.word	0x58024400
 800613c:	0800d5dc 	.word	0x0800d5dc
 8006140:	24000008 	.word	0x24000008
 8006144:	24000004 	.word	0x24000004
 8006148:	24000028 	.word	0x24000028

0800614c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800614c:	b480      	push	{r7}
 800614e:	b089      	sub	sp, #36	@ 0x24
 8006150:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006152:	4bb3      	ldr	r3, [pc, #716]	@ (8006420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006154:	691b      	ldr	r3, [r3, #16]
 8006156:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800615a:	2b18      	cmp	r3, #24
 800615c:	f200 8155 	bhi.w	800640a <HAL_RCC_GetSysClockFreq+0x2be>
 8006160:	a201      	add	r2, pc, #4	@ (adr r2, 8006168 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006166:	bf00      	nop
 8006168:	080061cd 	.word	0x080061cd
 800616c:	0800640b 	.word	0x0800640b
 8006170:	0800640b 	.word	0x0800640b
 8006174:	0800640b 	.word	0x0800640b
 8006178:	0800640b 	.word	0x0800640b
 800617c:	0800640b 	.word	0x0800640b
 8006180:	0800640b 	.word	0x0800640b
 8006184:	0800640b 	.word	0x0800640b
 8006188:	080061f3 	.word	0x080061f3
 800618c:	0800640b 	.word	0x0800640b
 8006190:	0800640b 	.word	0x0800640b
 8006194:	0800640b 	.word	0x0800640b
 8006198:	0800640b 	.word	0x0800640b
 800619c:	0800640b 	.word	0x0800640b
 80061a0:	0800640b 	.word	0x0800640b
 80061a4:	0800640b 	.word	0x0800640b
 80061a8:	080061f9 	.word	0x080061f9
 80061ac:	0800640b 	.word	0x0800640b
 80061b0:	0800640b 	.word	0x0800640b
 80061b4:	0800640b 	.word	0x0800640b
 80061b8:	0800640b 	.word	0x0800640b
 80061bc:	0800640b 	.word	0x0800640b
 80061c0:	0800640b 	.word	0x0800640b
 80061c4:	0800640b 	.word	0x0800640b
 80061c8:	080061ff 	.word	0x080061ff
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80061cc:	4b94      	ldr	r3, [pc, #592]	@ (8006420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f003 0320 	and.w	r3, r3, #32
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d009      	beq.n	80061ec <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80061d8:	4b91      	ldr	r3, [pc, #580]	@ (8006420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	08db      	lsrs	r3, r3, #3
 80061de:	f003 0303 	and.w	r3, r3, #3
 80061e2:	4a90      	ldr	r2, [pc, #576]	@ (8006424 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80061e4:	fa22 f303 	lsr.w	r3, r2, r3
 80061e8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80061ea:	e111      	b.n	8006410 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80061ec:	4b8d      	ldr	r3, [pc, #564]	@ (8006424 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80061ee:	61bb      	str	r3, [r7, #24]
      break;
 80061f0:	e10e      	b.n	8006410 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80061f2:	4b8d      	ldr	r3, [pc, #564]	@ (8006428 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80061f4:	61bb      	str	r3, [r7, #24]
      break;
 80061f6:	e10b      	b.n	8006410 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80061f8:	4b8c      	ldr	r3, [pc, #560]	@ (800642c <HAL_RCC_GetSysClockFreq+0x2e0>)
 80061fa:	61bb      	str	r3, [r7, #24]
      break;
 80061fc:	e108      	b.n	8006410 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80061fe:	4b88      	ldr	r3, [pc, #544]	@ (8006420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006200:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006202:	f003 0303 	and.w	r3, r3, #3
 8006206:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006208:	4b85      	ldr	r3, [pc, #532]	@ (8006420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800620a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800620c:	091b      	lsrs	r3, r3, #4
 800620e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006212:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006214:	4b82      	ldr	r3, [pc, #520]	@ (8006420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006218:	f003 0301 	and.w	r3, r3, #1
 800621c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800621e:	4b80      	ldr	r3, [pc, #512]	@ (8006420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006220:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006222:	08db      	lsrs	r3, r3, #3
 8006224:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006228:	68fa      	ldr	r2, [r7, #12]
 800622a:	fb02 f303 	mul.w	r3, r2, r3
 800622e:	ee07 3a90 	vmov	s15, r3
 8006232:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006236:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	2b00      	cmp	r3, #0
 800623e:	f000 80e1 	beq.w	8006404 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	2b02      	cmp	r3, #2
 8006246:	f000 8083 	beq.w	8006350 <HAL_RCC_GetSysClockFreq+0x204>
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	2b02      	cmp	r3, #2
 800624e:	f200 80a1 	bhi.w	8006394 <HAL_RCC_GetSysClockFreq+0x248>
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d003      	beq.n	8006260 <HAL_RCC_GetSysClockFreq+0x114>
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	2b01      	cmp	r3, #1
 800625c:	d056      	beq.n	800630c <HAL_RCC_GetSysClockFreq+0x1c0>
 800625e:	e099      	b.n	8006394 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006260:	4b6f      	ldr	r3, [pc, #444]	@ (8006420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f003 0320 	and.w	r3, r3, #32
 8006268:	2b00      	cmp	r3, #0
 800626a:	d02d      	beq.n	80062c8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800626c:	4b6c      	ldr	r3, [pc, #432]	@ (8006420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	08db      	lsrs	r3, r3, #3
 8006272:	f003 0303 	and.w	r3, r3, #3
 8006276:	4a6b      	ldr	r2, [pc, #428]	@ (8006424 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006278:	fa22 f303 	lsr.w	r3, r2, r3
 800627c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	ee07 3a90 	vmov	s15, r3
 8006284:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	ee07 3a90 	vmov	s15, r3
 800628e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006292:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006296:	4b62      	ldr	r3, [pc, #392]	@ (8006420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800629a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800629e:	ee07 3a90 	vmov	s15, r3
 80062a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80062aa:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006430 <HAL_RCC_GetSysClockFreq+0x2e4>
 80062ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80062ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062c2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80062c6:	e087      	b.n	80063d8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	ee07 3a90 	vmov	s15, r3
 80062ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062d2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006434 <HAL_RCC_GetSysClockFreq+0x2e8>
 80062d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062da:	4b51      	ldr	r3, [pc, #324]	@ (8006420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062e2:	ee07 3a90 	vmov	s15, r3
 80062e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80062ee:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006430 <HAL_RCC_GetSysClockFreq+0x2e4>
 80062f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80062fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006302:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006306:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800630a:	e065      	b.n	80063d8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	ee07 3a90 	vmov	s15, r3
 8006312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006316:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006438 <HAL_RCC_GetSysClockFreq+0x2ec>
 800631a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800631e:	4b40      	ldr	r3, [pc, #256]	@ (8006420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006322:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006326:	ee07 3a90 	vmov	s15, r3
 800632a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800632e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006332:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006430 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006336:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800633a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800633e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006342:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006346:	ee67 7a27 	vmul.f32	s15, s14, s15
 800634a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800634e:	e043      	b.n	80063d8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	ee07 3a90 	vmov	s15, r3
 8006356:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800635a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800643c <HAL_RCC_GetSysClockFreq+0x2f0>
 800635e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006362:	4b2f      	ldr	r3, [pc, #188]	@ (8006420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006366:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800636a:	ee07 3a90 	vmov	s15, r3
 800636e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006372:	ed97 6a02 	vldr	s12, [r7, #8]
 8006376:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006430 <HAL_RCC_GetSysClockFreq+0x2e4>
 800637a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800637e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006382:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006386:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800638a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800638e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006392:	e021      	b.n	80063d8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	ee07 3a90 	vmov	s15, r3
 800639a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800639e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006438 <HAL_RCC_GetSysClockFreq+0x2ec>
 80063a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063a6:	4b1e      	ldr	r3, [pc, #120]	@ (8006420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063ae:	ee07 3a90 	vmov	s15, r3
 80063b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80063ba:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006430 <HAL_RCC_GetSysClockFreq+0x2e4>
 80063be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80063ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80063d6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80063d8:	4b11      	ldr	r3, [pc, #68]	@ (8006420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063dc:	0a5b      	lsrs	r3, r3, #9
 80063de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80063e2:	3301      	adds	r3, #1
 80063e4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	ee07 3a90 	vmov	s15, r3
 80063ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80063f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80063f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063fc:	ee17 3a90 	vmov	r3, s15
 8006400:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006402:	e005      	b.n	8006410 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006404:	2300      	movs	r3, #0
 8006406:	61bb      	str	r3, [r7, #24]
      break;
 8006408:	e002      	b.n	8006410 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800640a:	4b07      	ldr	r3, [pc, #28]	@ (8006428 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800640c:	61bb      	str	r3, [r7, #24]
      break;
 800640e:	bf00      	nop
  }

  return sysclockfreq;
 8006410:	69bb      	ldr	r3, [r7, #24]
}
 8006412:	4618      	mov	r0, r3
 8006414:	3724      	adds	r7, #36	@ 0x24
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr
 800641e:	bf00      	nop
 8006420:	58024400 	.word	0x58024400
 8006424:	03d09000 	.word	0x03d09000
 8006428:	003d0900 	.word	0x003d0900
 800642c:	007a1200 	.word	0x007a1200
 8006430:	46000000 	.word	0x46000000
 8006434:	4c742400 	.word	0x4c742400
 8006438:	4a742400 	.word	0x4a742400
 800643c:	4af42400 	.word	0x4af42400

08006440 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b082      	sub	sp, #8
 8006444:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006446:	f7ff fe81 	bl	800614c <HAL_RCC_GetSysClockFreq>
 800644a:	4602      	mov	r2, r0
 800644c:	4b10      	ldr	r3, [pc, #64]	@ (8006490 <HAL_RCC_GetHCLKFreq+0x50>)
 800644e:	699b      	ldr	r3, [r3, #24]
 8006450:	0a1b      	lsrs	r3, r3, #8
 8006452:	f003 030f 	and.w	r3, r3, #15
 8006456:	490f      	ldr	r1, [pc, #60]	@ (8006494 <HAL_RCC_GetHCLKFreq+0x54>)
 8006458:	5ccb      	ldrb	r3, [r1, r3]
 800645a:	f003 031f 	and.w	r3, r3, #31
 800645e:	fa22 f303 	lsr.w	r3, r2, r3
 8006462:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006464:	4b0a      	ldr	r3, [pc, #40]	@ (8006490 <HAL_RCC_GetHCLKFreq+0x50>)
 8006466:	699b      	ldr	r3, [r3, #24]
 8006468:	f003 030f 	and.w	r3, r3, #15
 800646c:	4a09      	ldr	r2, [pc, #36]	@ (8006494 <HAL_RCC_GetHCLKFreq+0x54>)
 800646e:	5cd3      	ldrb	r3, [r2, r3]
 8006470:	f003 031f 	and.w	r3, r3, #31
 8006474:	687a      	ldr	r2, [r7, #4]
 8006476:	fa22 f303 	lsr.w	r3, r2, r3
 800647a:	4a07      	ldr	r2, [pc, #28]	@ (8006498 <HAL_RCC_GetHCLKFreq+0x58>)
 800647c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800647e:	4a07      	ldr	r2, [pc, #28]	@ (800649c <HAL_RCC_GetHCLKFreq+0x5c>)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006484:	4b04      	ldr	r3, [pc, #16]	@ (8006498 <HAL_RCC_GetHCLKFreq+0x58>)
 8006486:	681b      	ldr	r3, [r3, #0]
}
 8006488:	4618      	mov	r0, r3
 800648a:	3708      	adds	r7, #8
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}
 8006490:	58024400 	.word	0x58024400
 8006494:	0800d5dc 	.word	0x0800d5dc
 8006498:	24000008 	.word	0x24000008
 800649c:	24000004 	.word	0x24000004

080064a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80064a4:	f7ff ffcc 	bl	8006440 <HAL_RCC_GetHCLKFreq>
 80064a8:	4602      	mov	r2, r0
 80064aa:	4b06      	ldr	r3, [pc, #24]	@ (80064c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80064ac:	69db      	ldr	r3, [r3, #28]
 80064ae:	091b      	lsrs	r3, r3, #4
 80064b0:	f003 0307 	and.w	r3, r3, #7
 80064b4:	4904      	ldr	r1, [pc, #16]	@ (80064c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80064b6:	5ccb      	ldrb	r3, [r1, r3]
 80064b8:	f003 031f 	and.w	r3, r3, #31
 80064bc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	bd80      	pop	{r7, pc}
 80064c4:	58024400 	.word	0x58024400
 80064c8:	0800d5dc 	.word	0x0800d5dc

080064cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80064d0:	f7ff ffb6 	bl	8006440 <HAL_RCC_GetHCLKFreq>
 80064d4:	4602      	mov	r2, r0
 80064d6:	4b06      	ldr	r3, [pc, #24]	@ (80064f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80064d8:	69db      	ldr	r3, [r3, #28]
 80064da:	0a1b      	lsrs	r3, r3, #8
 80064dc:	f003 0307 	and.w	r3, r3, #7
 80064e0:	4904      	ldr	r1, [pc, #16]	@ (80064f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80064e2:	5ccb      	ldrb	r3, [r1, r3]
 80064e4:	f003 031f 	and.w	r3, r3, #31
 80064e8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	bd80      	pop	{r7, pc}
 80064f0:	58024400 	.word	0x58024400
 80064f4:	0800d5dc 	.word	0x0800d5dc

080064f8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b083      	sub	sp, #12
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
 8006500:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	223f      	movs	r2, #63	@ 0x3f
 8006506:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006508:	4b1a      	ldr	r3, [pc, #104]	@ (8006574 <HAL_RCC_GetClockConfig+0x7c>)
 800650a:	691b      	ldr	r3, [r3, #16]
 800650c:	f003 0207 	and.w	r2, r3, #7
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8006514:	4b17      	ldr	r3, [pc, #92]	@ (8006574 <HAL_RCC_GetClockConfig+0x7c>)
 8006516:	699b      	ldr	r3, [r3, #24]
 8006518:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8006520:	4b14      	ldr	r3, [pc, #80]	@ (8006574 <HAL_RCC_GetClockConfig+0x7c>)
 8006522:	699b      	ldr	r3, [r3, #24]
 8006524:	f003 020f 	and.w	r2, r3, #15
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800652c:	4b11      	ldr	r3, [pc, #68]	@ (8006574 <HAL_RCC_GetClockConfig+0x7c>)
 800652e:	699b      	ldr	r3, [r3, #24]
 8006530:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8006538:	4b0e      	ldr	r3, [pc, #56]	@ (8006574 <HAL_RCC_GetClockConfig+0x7c>)
 800653a:	69db      	ldr	r3, [r3, #28]
 800653c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8006544:	4b0b      	ldr	r3, [pc, #44]	@ (8006574 <HAL_RCC_GetClockConfig+0x7c>)
 8006546:	69db      	ldr	r3, [r3, #28]
 8006548:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8006550:	4b08      	ldr	r3, [pc, #32]	@ (8006574 <HAL_RCC_GetClockConfig+0x7c>)
 8006552:	6a1b      	ldr	r3, [r3, #32]
 8006554:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800655c:	4b06      	ldr	r3, [pc, #24]	@ (8006578 <HAL_RCC_GetClockConfig+0x80>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f003 020f 	and.w	r2, r3, #15
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	601a      	str	r2, [r3, #0]
}
 8006568:	bf00      	nop
 800656a:	370c      	adds	r7, #12
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr
 8006574:	58024400 	.word	0x58024400
 8006578:	52002000 	.word	0x52002000

0800657c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800657c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006580:	b0ca      	sub	sp, #296	@ 0x128
 8006582:	af00      	add	r7, sp, #0
 8006584:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006588:	2300      	movs	r3, #0
 800658a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800658e:	2300      	movs	r3, #0
 8006590:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006594:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800659c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80065a0:	2500      	movs	r5, #0
 80065a2:	ea54 0305 	orrs.w	r3, r4, r5
 80065a6:	d049      	beq.n	800663c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80065a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80065ae:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80065b2:	d02f      	beq.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80065b4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80065b8:	d828      	bhi.n	800660c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80065ba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80065be:	d01a      	beq.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80065c0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80065c4:	d822      	bhi.n	800660c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d003      	beq.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80065ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80065ce:	d007      	beq.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80065d0:	e01c      	b.n	800660c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065d2:	4bb8      	ldr	r3, [pc, #736]	@ (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80065d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065d6:	4ab7      	ldr	r2, [pc, #732]	@ (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80065d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80065dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80065de:	e01a      	b.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80065e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065e4:	3308      	adds	r3, #8
 80065e6:	2102      	movs	r1, #2
 80065e8:	4618      	mov	r0, r3
 80065ea:	f001 fc8f 	bl	8007f0c <RCCEx_PLL2_Config>
 80065ee:	4603      	mov	r3, r0
 80065f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80065f4:	e00f      	b.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80065f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065fa:	3328      	adds	r3, #40	@ 0x28
 80065fc:	2102      	movs	r1, #2
 80065fe:	4618      	mov	r0, r3
 8006600:	f001 fd36 	bl	8008070 <RCCEx_PLL3_Config>
 8006604:	4603      	mov	r3, r0
 8006606:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800660a:	e004      	b.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800660c:	2301      	movs	r3, #1
 800660e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006612:	e000      	b.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006614:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006616:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800661a:	2b00      	cmp	r3, #0
 800661c:	d10a      	bne.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800661e:	4ba5      	ldr	r3, [pc, #660]	@ (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006620:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006622:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006626:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800662a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800662c:	4aa1      	ldr	r2, [pc, #644]	@ (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800662e:	430b      	orrs	r3, r1
 8006630:	6513      	str	r3, [r2, #80]	@ 0x50
 8006632:	e003      	b.n	800663c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006634:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006638:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800663c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006644:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006648:	f04f 0900 	mov.w	r9, #0
 800664c:	ea58 0309 	orrs.w	r3, r8, r9
 8006650:	d047      	beq.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006652:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006656:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006658:	2b04      	cmp	r3, #4
 800665a:	d82a      	bhi.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800665c:	a201      	add	r2, pc, #4	@ (adr r2, 8006664 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800665e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006662:	bf00      	nop
 8006664:	08006679 	.word	0x08006679
 8006668:	08006687 	.word	0x08006687
 800666c:	0800669d 	.word	0x0800669d
 8006670:	080066bb 	.word	0x080066bb
 8006674:	080066bb 	.word	0x080066bb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006678:	4b8e      	ldr	r3, [pc, #568]	@ (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800667a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800667c:	4a8d      	ldr	r2, [pc, #564]	@ (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800667e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006682:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006684:	e01a      	b.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006686:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800668a:	3308      	adds	r3, #8
 800668c:	2100      	movs	r1, #0
 800668e:	4618      	mov	r0, r3
 8006690:	f001 fc3c 	bl	8007f0c <RCCEx_PLL2_Config>
 8006694:	4603      	mov	r3, r0
 8006696:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800669a:	e00f      	b.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800669c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066a0:	3328      	adds	r3, #40	@ 0x28
 80066a2:	2100      	movs	r1, #0
 80066a4:	4618      	mov	r0, r3
 80066a6:	f001 fce3 	bl	8008070 <RCCEx_PLL3_Config>
 80066aa:	4603      	mov	r3, r0
 80066ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80066b0:	e004      	b.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066b2:	2301      	movs	r3, #1
 80066b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80066b8:	e000      	b.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80066ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d10a      	bne.n	80066da <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80066c4:	4b7b      	ldr	r3, [pc, #492]	@ (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80066c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066c8:	f023 0107 	bic.w	r1, r3, #7
 80066cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066d2:	4a78      	ldr	r2, [pc, #480]	@ (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80066d4:	430b      	orrs	r3, r1
 80066d6:	6513      	str	r3, [r2, #80]	@ 0x50
 80066d8:	e003      	b.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80066e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ea:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80066ee:	f04f 0b00 	mov.w	fp, #0
 80066f2:	ea5a 030b 	orrs.w	r3, sl, fp
 80066f6:	d04c      	beq.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80066f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006702:	d030      	beq.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8006704:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006708:	d829      	bhi.n	800675e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800670a:	2bc0      	cmp	r3, #192	@ 0xc0
 800670c:	d02d      	beq.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800670e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006710:	d825      	bhi.n	800675e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006712:	2b80      	cmp	r3, #128	@ 0x80
 8006714:	d018      	beq.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006716:	2b80      	cmp	r3, #128	@ 0x80
 8006718:	d821      	bhi.n	800675e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800671a:	2b00      	cmp	r3, #0
 800671c:	d002      	beq.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800671e:	2b40      	cmp	r3, #64	@ 0x40
 8006720:	d007      	beq.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8006722:	e01c      	b.n	800675e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006724:	4b63      	ldr	r3, [pc, #396]	@ (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006728:	4a62      	ldr	r2, [pc, #392]	@ (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800672a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800672e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006730:	e01c      	b.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006732:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006736:	3308      	adds	r3, #8
 8006738:	2100      	movs	r1, #0
 800673a:	4618      	mov	r0, r3
 800673c:	f001 fbe6 	bl	8007f0c <RCCEx_PLL2_Config>
 8006740:	4603      	mov	r3, r0
 8006742:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006746:	e011      	b.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006748:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800674c:	3328      	adds	r3, #40	@ 0x28
 800674e:	2100      	movs	r1, #0
 8006750:	4618      	mov	r0, r3
 8006752:	f001 fc8d 	bl	8008070 <RCCEx_PLL3_Config>
 8006756:	4603      	mov	r3, r0
 8006758:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800675c:	e006      	b.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800675e:	2301      	movs	r3, #1
 8006760:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006764:	e002      	b.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006766:	bf00      	nop
 8006768:	e000      	b.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800676a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800676c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006770:	2b00      	cmp	r3, #0
 8006772:	d10a      	bne.n	800678a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006774:	4b4f      	ldr	r3, [pc, #316]	@ (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006776:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006778:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800677c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006780:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006782:	4a4c      	ldr	r2, [pc, #304]	@ (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006784:	430b      	orrs	r3, r1
 8006786:	6513      	str	r3, [r2, #80]	@ 0x50
 8006788:	e003      	b.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800678a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800678e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006792:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800679a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800679e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80067a2:	2300      	movs	r3, #0
 80067a4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80067a8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80067ac:	460b      	mov	r3, r1
 80067ae:	4313      	orrs	r3, r2
 80067b0:	d053      	beq.n	800685a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80067b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067b6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80067ba:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80067be:	d035      	beq.n	800682c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80067c0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80067c4:	d82e      	bhi.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80067c6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80067ca:	d031      	beq.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80067cc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80067d0:	d828      	bhi.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80067d2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80067d6:	d01a      	beq.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x292>
 80067d8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80067dc:	d822      	bhi.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d003      	beq.n	80067ea <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80067e2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80067e6:	d007      	beq.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80067e8:	e01c      	b.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067ea:	4b32      	ldr	r3, [pc, #200]	@ (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80067ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067ee:	4a31      	ldr	r2, [pc, #196]	@ (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80067f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80067f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80067f6:	e01c      	b.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80067f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067fc:	3308      	adds	r3, #8
 80067fe:	2100      	movs	r1, #0
 8006800:	4618      	mov	r0, r3
 8006802:	f001 fb83 	bl	8007f0c <RCCEx_PLL2_Config>
 8006806:	4603      	mov	r3, r0
 8006808:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800680c:	e011      	b.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800680e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006812:	3328      	adds	r3, #40	@ 0x28
 8006814:	2100      	movs	r1, #0
 8006816:	4618      	mov	r0, r3
 8006818:	f001 fc2a 	bl	8008070 <RCCEx_PLL3_Config>
 800681c:	4603      	mov	r3, r0
 800681e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006822:	e006      	b.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006824:	2301      	movs	r3, #1
 8006826:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800682a:	e002      	b.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800682c:	bf00      	nop
 800682e:	e000      	b.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006830:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006832:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006836:	2b00      	cmp	r3, #0
 8006838:	d10b      	bne.n	8006852 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800683a:	4b1e      	ldr	r3, [pc, #120]	@ (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800683c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800683e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8006842:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006846:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800684a:	4a1a      	ldr	r2, [pc, #104]	@ (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800684c:	430b      	orrs	r3, r1
 800684e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006850:	e003      	b.n	800685a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006852:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006856:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800685a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800685e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006862:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006866:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800686a:	2300      	movs	r3, #0
 800686c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006870:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8006874:	460b      	mov	r3, r1
 8006876:	4313      	orrs	r3, r2
 8006878:	d056      	beq.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800687a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800687e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006882:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006886:	d038      	beq.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006888:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800688c:	d831      	bhi.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800688e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006892:	d034      	beq.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0x382>
 8006894:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006898:	d82b      	bhi.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800689a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800689e:	d01d      	beq.n	80068dc <HAL_RCCEx_PeriphCLKConfig+0x360>
 80068a0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80068a4:	d825      	bhi.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d006      	beq.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80068aa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80068ae:	d00a      	beq.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80068b0:	e01f      	b.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80068b2:	bf00      	nop
 80068b4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068b8:	4ba2      	ldr	r3, [pc, #648]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80068ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068bc:	4aa1      	ldr	r2, [pc, #644]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80068be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80068c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80068c4:	e01c      	b.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80068c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068ca:	3308      	adds	r3, #8
 80068cc:	2100      	movs	r1, #0
 80068ce:	4618      	mov	r0, r3
 80068d0:	f001 fb1c 	bl	8007f0c <RCCEx_PLL2_Config>
 80068d4:	4603      	mov	r3, r0
 80068d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80068da:	e011      	b.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80068dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068e0:	3328      	adds	r3, #40	@ 0x28
 80068e2:	2100      	movs	r1, #0
 80068e4:	4618      	mov	r0, r3
 80068e6:	f001 fbc3 	bl	8008070 <RCCEx_PLL3_Config>
 80068ea:	4603      	mov	r3, r0
 80068ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80068f0:	e006      	b.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80068f2:	2301      	movs	r3, #1
 80068f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80068f8:	e002      	b.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80068fa:	bf00      	nop
 80068fc:	e000      	b.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80068fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006900:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006904:	2b00      	cmp	r3, #0
 8006906:	d10b      	bne.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006908:	4b8e      	ldr	r3, [pc, #568]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800690a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800690c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006910:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006914:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006918:	4a8a      	ldr	r2, [pc, #552]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800691a:	430b      	orrs	r3, r1
 800691c:	6593      	str	r3, [r2, #88]	@ 0x58
 800691e:	e003      	b.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006920:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006924:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006928:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800692c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006930:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006934:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006938:	2300      	movs	r3, #0
 800693a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800693e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8006942:	460b      	mov	r3, r1
 8006944:	4313      	orrs	r3, r2
 8006946:	d03a      	beq.n	80069be <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8006948:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800694c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800694e:	2b30      	cmp	r3, #48	@ 0x30
 8006950:	d01f      	beq.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8006952:	2b30      	cmp	r3, #48	@ 0x30
 8006954:	d819      	bhi.n	800698a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006956:	2b20      	cmp	r3, #32
 8006958:	d00c      	beq.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800695a:	2b20      	cmp	r3, #32
 800695c:	d815      	bhi.n	800698a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800695e:	2b00      	cmp	r3, #0
 8006960:	d019      	beq.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006962:	2b10      	cmp	r3, #16
 8006964:	d111      	bne.n	800698a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006966:	4b77      	ldr	r3, [pc, #476]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800696a:	4a76      	ldr	r2, [pc, #472]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800696c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006970:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006972:	e011      	b.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006974:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006978:	3308      	adds	r3, #8
 800697a:	2102      	movs	r1, #2
 800697c:	4618      	mov	r0, r3
 800697e:	f001 fac5 	bl	8007f0c <RCCEx_PLL2_Config>
 8006982:	4603      	mov	r3, r0
 8006984:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006988:	e006      	b.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800698a:	2301      	movs	r3, #1
 800698c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006990:	e002      	b.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006992:	bf00      	nop
 8006994:	e000      	b.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006996:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006998:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800699c:	2b00      	cmp	r3, #0
 800699e:	d10a      	bne.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80069a0:	4b68      	ldr	r3, [pc, #416]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80069a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80069a4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80069a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80069ae:	4a65      	ldr	r2, [pc, #404]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80069b0:	430b      	orrs	r3, r1
 80069b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80069b4:	e003      	b.n	80069be <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80069be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069c6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80069ca:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80069ce:	2300      	movs	r3, #0
 80069d0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80069d4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80069d8:	460b      	mov	r3, r1
 80069da:	4313      	orrs	r3, r2
 80069dc:	d051      	beq.n	8006a82 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80069de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80069e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80069e8:	d035      	beq.n	8006a56 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80069ea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80069ee:	d82e      	bhi.n	8006a4e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80069f0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80069f4:	d031      	beq.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80069f6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80069fa:	d828      	bhi.n	8006a4e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80069fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a00:	d01a      	beq.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8006a02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a06:	d822      	bhi.n	8006a4e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d003      	beq.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8006a0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a10:	d007      	beq.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8006a12:	e01c      	b.n	8006a4e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a14:	4b4b      	ldr	r3, [pc, #300]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a18:	4a4a      	ldr	r2, [pc, #296]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006a1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006a20:	e01c      	b.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006a22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a26:	3308      	adds	r3, #8
 8006a28:	2100      	movs	r1, #0
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f001 fa6e 	bl	8007f0c <RCCEx_PLL2_Config>
 8006a30:	4603      	mov	r3, r0
 8006a32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006a36:	e011      	b.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006a38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a3c:	3328      	adds	r3, #40	@ 0x28
 8006a3e:	2100      	movs	r1, #0
 8006a40:	4618      	mov	r0, r3
 8006a42:	f001 fb15 	bl	8008070 <RCCEx_PLL3_Config>
 8006a46:	4603      	mov	r3, r0
 8006a48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006a4c:	e006      	b.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a4e:	2301      	movs	r3, #1
 8006a50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006a54:	e002      	b.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006a56:	bf00      	nop
 8006a58:	e000      	b.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006a5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d10a      	bne.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006a64:	4b37      	ldr	r3, [pc, #220]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006a66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a68:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006a6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a72:	4a34      	ldr	r2, [pc, #208]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006a74:	430b      	orrs	r3, r1
 8006a76:	6513      	str	r3, [r2, #80]	@ 0x50
 8006a78:	e003      	b.n	8006a82 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a7e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006a82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a8a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006a8e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006a92:	2300      	movs	r3, #0
 8006a94:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006a98:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006a9c:	460b      	mov	r3, r1
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	d056      	beq.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006aa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006aa6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006aa8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006aac:	d033      	beq.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8006aae:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006ab2:	d82c      	bhi.n	8006b0e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006ab4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006ab8:	d02f      	beq.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8006aba:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006abe:	d826      	bhi.n	8006b0e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006ac0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006ac4:	d02b      	beq.n	8006b1e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8006ac6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006aca:	d820      	bhi.n	8006b0e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006acc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ad0:	d012      	beq.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8006ad2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ad6:	d81a      	bhi.n	8006b0e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d022      	beq.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006adc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ae0:	d115      	bne.n	8006b0e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006ae2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ae6:	3308      	adds	r3, #8
 8006ae8:	2101      	movs	r1, #1
 8006aea:	4618      	mov	r0, r3
 8006aec:	f001 fa0e 	bl	8007f0c <RCCEx_PLL2_Config>
 8006af0:	4603      	mov	r3, r0
 8006af2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006af6:	e015      	b.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006af8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006afc:	3328      	adds	r3, #40	@ 0x28
 8006afe:	2101      	movs	r1, #1
 8006b00:	4618      	mov	r0, r3
 8006b02:	f001 fab5 	bl	8008070 <RCCEx_PLL3_Config>
 8006b06:	4603      	mov	r3, r0
 8006b08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006b0c:	e00a      	b.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b0e:	2301      	movs	r3, #1
 8006b10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006b14:	e006      	b.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006b16:	bf00      	nop
 8006b18:	e004      	b.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006b1a:	bf00      	nop
 8006b1c:	e002      	b.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006b1e:	bf00      	nop
 8006b20:	e000      	b.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006b22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d10d      	bne.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006b2c:	4b05      	ldr	r3, [pc, #20]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006b2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b30:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006b34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b38:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b3a:	4a02      	ldr	r2, [pc, #8]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006b3c:	430b      	orrs	r3, r1
 8006b3e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006b40:	e006      	b.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006b42:	bf00      	nop
 8006b44:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b4c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006b50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b58:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006b5c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006b60:	2300      	movs	r3, #0
 8006b62:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006b66:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006b6a:	460b      	mov	r3, r1
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	d055      	beq.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006b70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b74:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006b78:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006b7c:	d033      	beq.n	8006be6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8006b7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006b82:	d82c      	bhi.n	8006bde <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006b84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b88:	d02f      	beq.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8006b8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b8e:	d826      	bhi.n	8006bde <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006b90:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006b94:	d02b      	beq.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0x672>
 8006b96:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006b9a:	d820      	bhi.n	8006bde <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006b9c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ba0:	d012      	beq.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8006ba2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ba6:	d81a      	bhi.n	8006bde <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d022      	beq.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8006bac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006bb0:	d115      	bne.n	8006bde <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006bb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bb6:	3308      	adds	r3, #8
 8006bb8:	2101      	movs	r1, #1
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f001 f9a6 	bl	8007f0c <RCCEx_PLL2_Config>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006bc6:	e015      	b.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006bc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bcc:	3328      	adds	r3, #40	@ 0x28
 8006bce:	2101      	movs	r1, #1
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	f001 fa4d 	bl	8008070 <RCCEx_PLL3_Config>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006bdc:	e00a      	b.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006bde:	2301      	movs	r3, #1
 8006be0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006be4:	e006      	b.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006be6:	bf00      	nop
 8006be8:	e004      	b.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006bea:	bf00      	nop
 8006bec:	e002      	b.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006bee:	bf00      	nop
 8006bf0:	e000      	b.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006bf2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bf4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d10b      	bne.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006bfc:	4ba3      	ldr	r3, [pc, #652]	@ (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006bfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c00:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006c04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c08:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006c0c:	4a9f      	ldr	r2, [pc, #636]	@ (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006c0e:	430b      	orrs	r3, r1
 8006c10:	6593      	str	r3, [r2, #88]	@ 0x58
 8006c12:	e003      	b.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c18:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006c1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c24:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006c28:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006c32:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006c36:	460b      	mov	r3, r1
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	d037      	beq.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006c3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c42:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c46:	d00e      	beq.n	8006c66 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8006c48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c4c:	d816      	bhi.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x700>
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d018      	beq.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8006c52:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006c56:	d111      	bne.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c58:	4b8c      	ldr	r3, [pc, #560]	@ (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c5c:	4a8b      	ldr	r2, [pc, #556]	@ (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006c5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006c64:	e00f      	b.n	8006c86 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006c66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c6a:	3308      	adds	r3, #8
 8006c6c:	2101      	movs	r1, #1
 8006c6e:	4618      	mov	r0, r3
 8006c70:	f001 f94c 	bl	8007f0c <RCCEx_PLL2_Config>
 8006c74:	4603      	mov	r3, r0
 8006c76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006c7a:	e004      	b.n	8006c86 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006c82:	e000      	b.n	8006c86 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8006c84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d10a      	bne.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006c8e:	4b7f      	ldr	r3, [pc, #508]	@ (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006c90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c92:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006c96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c9c:	4a7b      	ldr	r2, [pc, #492]	@ (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006c9e:	430b      	orrs	r3, r1
 8006ca0:	6513      	str	r3, [r2, #80]	@ 0x50
 8006ca2:	e003      	b.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ca4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ca8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006cac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cb4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006cb8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006cc2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8006cc6:	460b      	mov	r3, r1
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	d039      	beq.n	8006d40 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006ccc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cd0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006cd2:	2b03      	cmp	r3, #3
 8006cd4:	d81c      	bhi.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8006cd6:	a201      	add	r2, pc, #4	@ (adr r2, 8006cdc <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8006cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cdc:	08006d19 	.word	0x08006d19
 8006ce0:	08006ced 	.word	0x08006ced
 8006ce4:	08006cfb 	.word	0x08006cfb
 8006ce8:	08006d19 	.word	0x08006d19
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006cec:	4b67      	ldr	r3, [pc, #412]	@ (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cf0:	4a66      	ldr	r2, [pc, #408]	@ (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006cf2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006cf6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006cf8:	e00f      	b.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006cfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cfe:	3308      	adds	r3, #8
 8006d00:	2102      	movs	r1, #2
 8006d02:	4618      	mov	r0, r3
 8006d04:	f001 f902 	bl	8007f0c <RCCEx_PLL2_Config>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006d0e:	e004      	b.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006d10:	2301      	movs	r3, #1
 8006d12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006d16:	e000      	b.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8006d18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d10a      	bne.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006d22:	4b5a      	ldr	r3, [pc, #360]	@ (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006d24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d26:	f023 0103 	bic.w	r1, r3, #3
 8006d2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d30:	4a56      	ldr	r2, [pc, #344]	@ (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006d32:	430b      	orrs	r3, r1
 8006d34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006d36:	e003      	b.n	8006d40 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d3c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006d40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d48:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006d4c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006d50:	2300      	movs	r3, #0
 8006d52:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006d56:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006d5a:	460b      	mov	r3, r1
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	f000 809f 	beq.w	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006d62:	4b4b      	ldr	r3, [pc, #300]	@ (8006e90 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4a4a      	ldr	r2, [pc, #296]	@ (8006e90 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006d68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d6c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006d6e:	f7fb fa1d 	bl	80021ac <HAL_GetTick>
 8006d72:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006d76:	e00b      	b.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d78:	f7fb fa18 	bl	80021ac <HAL_GetTick>
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006d82:	1ad3      	subs	r3, r2, r3
 8006d84:	2b64      	cmp	r3, #100	@ 0x64
 8006d86:	d903      	bls.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8006d88:	2303      	movs	r3, #3
 8006d8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006d8e:	e005      	b.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006d90:	4b3f      	ldr	r3, [pc, #252]	@ (8006e90 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d0ed      	beq.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8006d9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d179      	bne.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006da4:	4b39      	ldr	r3, [pc, #228]	@ (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006da6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006da8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dac:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006db0:	4053      	eors	r3, r2
 8006db2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d015      	beq.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006dba:	4b34      	ldr	r3, [pc, #208]	@ (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006dbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dbe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006dc2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006dc6:	4b31      	ldr	r3, [pc, #196]	@ (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006dc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dca:	4a30      	ldr	r2, [pc, #192]	@ (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006dcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006dd0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006dd2:	4b2e      	ldr	r3, [pc, #184]	@ (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006dd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dd6:	4a2d      	ldr	r2, [pc, #180]	@ (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006dd8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006ddc:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006dde:	4a2b      	ldr	r2, [pc, #172]	@ (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006de0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006de4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006de6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006dee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006df2:	d118      	bne.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006df4:	f7fb f9da 	bl	80021ac <HAL_GetTick>
 8006df8:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006dfc:	e00d      	b.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006dfe:	f7fb f9d5 	bl	80021ac <HAL_GetTick>
 8006e02:	4602      	mov	r2, r0
 8006e04:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006e08:	1ad2      	subs	r2, r2, r3
 8006e0a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006e0e:	429a      	cmp	r2, r3
 8006e10:	d903      	bls.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8006e12:	2303      	movs	r3, #3
 8006e14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8006e18:	e005      	b.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006e1a:	4b1c      	ldr	r3, [pc, #112]	@ (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e1e:	f003 0302 	and.w	r3, r3, #2
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d0eb      	beq.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8006e26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d129      	bne.n	8006e82 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006e2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e32:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006e36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e3a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006e3e:	d10e      	bne.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8006e40:	4b12      	ldr	r3, [pc, #72]	@ (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e42:	691b      	ldr	r3, [r3, #16]
 8006e44:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006e48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e4c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006e50:	091a      	lsrs	r2, r3, #4
 8006e52:	4b10      	ldr	r3, [pc, #64]	@ (8006e94 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8006e54:	4013      	ands	r3, r2
 8006e56:	4a0d      	ldr	r2, [pc, #52]	@ (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e58:	430b      	orrs	r3, r1
 8006e5a:	6113      	str	r3, [r2, #16]
 8006e5c:	e005      	b.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8006e5e:	4b0b      	ldr	r3, [pc, #44]	@ (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e60:	691b      	ldr	r3, [r3, #16]
 8006e62:	4a0a      	ldr	r2, [pc, #40]	@ (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e64:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006e68:	6113      	str	r3, [r2, #16]
 8006e6a:	4b08      	ldr	r3, [pc, #32]	@ (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e6c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8006e6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e72:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006e76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e7a:	4a04      	ldr	r2, [pc, #16]	@ (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e7c:	430b      	orrs	r3, r1
 8006e7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e80:	e00e      	b.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006e82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e86:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8006e8a:	e009      	b.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8006e8c:	58024400 	.word	0x58024400
 8006e90:	58024800 	.word	0x58024800
 8006e94:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e9c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006ea0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ea8:	f002 0301 	and.w	r3, r2, #1
 8006eac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006eb6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006eba:	460b      	mov	r3, r1
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	f000 8089 	beq.w	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006ec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ec6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006ec8:	2b28      	cmp	r3, #40	@ 0x28
 8006eca:	d86b      	bhi.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8006ecc:	a201      	add	r2, pc, #4	@ (adr r2, 8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ed2:	bf00      	nop
 8006ed4:	08006fad 	.word	0x08006fad
 8006ed8:	08006fa5 	.word	0x08006fa5
 8006edc:	08006fa5 	.word	0x08006fa5
 8006ee0:	08006fa5 	.word	0x08006fa5
 8006ee4:	08006fa5 	.word	0x08006fa5
 8006ee8:	08006fa5 	.word	0x08006fa5
 8006eec:	08006fa5 	.word	0x08006fa5
 8006ef0:	08006fa5 	.word	0x08006fa5
 8006ef4:	08006f79 	.word	0x08006f79
 8006ef8:	08006fa5 	.word	0x08006fa5
 8006efc:	08006fa5 	.word	0x08006fa5
 8006f00:	08006fa5 	.word	0x08006fa5
 8006f04:	08006fa5 	.word	0x08006fa5
 8006f08:	08006fa5 	.word	0x08006fa5
 8006f0c:	08006fa5 	.word	0x08006fa5
 8006f10:	08006fa5 	.word	0x08006fa5
 8006f14:	08006f8f 	.word	0x08006f8f
 8006f18:	08006fa5 	.word	0x08006fa5
 8006f1c:	08006fa5 	.word	0x08006fa5
 8006f20:	08006fa5 	.word	0x08006fa5
 8006f24:	08006fa5 	.word	0x08006fa5
 8006f28:	08006fa5 	.word	0x08006fa5
 8006f2c:	08006fa5 	.word	0x08006fa5
 8006f30:	08006fa5 	.word	0x08006fa5
 8006f34:	08006fad 	.word	0x08006fad
 8006f38:	08006fa5 	.word	0x08006fa5
 8006f3c:	08006fa5 	.word	0x08006fa5
 8006f40:	08006fa5 	.word	0x08006fa5
 8006f44:	08006fa5 	.word	0x08006fa5
 8006f48:	08006fa5 	.word	0x08006fa5
 8006f4c:	08006fa5 	.word	0x08006fa5
 8006f50:	08006fa5 	.word	0x08006fa5
 8006f54:	08006fad 	.word	0x08006fad
 8006f58:	08006fa5 	.word	0x08006fa5
 8006f5c:	08006fa5 	.word	0x08006fa5
 8006f60:	08006fa5 	.word	0x08006fa5
 8006f64:	08006fa5 	.word	0x08006fa5
 8006f68:	08006fa5 	.word	0x08006fa5
 8006f6c:	08006fa5 	.word	0x08006fa5
 8006f70:	08006fa5 	.word	0x08006fa5
 8006f74:	08006fad 	.word	0x08006fad
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006f78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f7c:	3308      	adds	r3, #8
 8006f7e:	2101      	movs	r1, #1
 8006f80:	4618      	mov	r0, r3
 8006f82:	f000 ffc3 	bl	8007f0c <RCCEx_PLL2_Config>
 8006f86:	4603      	mov	r3, r0
 8006f88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006f8c:	e00f      	b.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006f8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f92:	3328      	adds	r3, #40	@ 0x28
 8006f94:	2101      	movs	r1, #1
 8006f96:	4618      	mov	r0, r3
 8006f98:	f001 f86a 	bl	8008070 <RCCEx_PLL3_Config>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006fa2:	e004      	b.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006faa:	e000      	b.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8006fac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d10a      	bne.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006fb6:	4bbf      	ldr	r3, [pc, #764]	@ (80072b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006fb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fba:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006fbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fc2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006fc4:	4abb      	ldr	r2, [pc, #748]	@ (80072b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006fc6:	430b      	orrs	r3, r1
 8006fc8:	6553      	str	r3, [r2, #84]	@ 0x54
 8006fca:	e003      	b.n	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fcc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fd0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006fd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fdc:	f002 0302 	and.w	r3, r2, #2
 8006fe0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006fea:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006fee:	460b      	mov	r3, r1
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	d041      	beq.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006ff4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ff8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006ffa:	2b05      	cmp	r3, #5
 8006ffc:	d824      	bhi.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8006ffe:	a201      	add	r2, pc, #4	@ (adr r2, 8007004 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007004:	08007051 	.word	0x08007051
 8007008:	0800701d 	.word	0x0800701d
 800700c:	08007033 	.word	0x08007033
 8007010:	08007051 	.word	0x08007051
 8007014:	08007051 	.word	0x08007051
 8007018:	08007051 	.word	0x08007051
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800701c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007020:	3308      	adds	r3, #8
 8007022:	2101      	movs	r1, #1
 8007024:	4618      	mov	r0, r3
 8007026:	f000 ff71 	bl	8007f0c <RCCEx_PLL2_Config>
 800702a:	4603      	mov	r3, r0
 800702c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007030:	e00f      	b.n	8007052 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007032:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007036:	3328      	adds	r3, #40	@ 0x28
 8007038:	2101      	movs	r1, #1
 800703a:	4618      	mov	r0, r3
 800703c:	f001 f818 	bl	8008070 <RCCEx_PLL3_Config>
 8007040:	4603      	mov	r3, r0
 8007042:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007046:	e004      	b.n	8007052 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007048:	2301      	movs	r3, #1
 800704a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800704e:	e000      	b.n	8007052 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8007050:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007052:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007056:	2b00      	cmp	r3, #0
 8007058:	d10a      	bne.n	8007070 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800705a:	4b96      	ldr	r3, [pc, #600]	@ (80072b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800705c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800705e:	f023 0107 	bic.w	r1, r3, #7
 8007062:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007066:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007068:	4a92      	ldr	r2, [pc, #584]	@ (80072b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800706a:	430b      	orrs	r3, r1
 800706c:	6553      	str	r3, [r2, #84]	@ 0x54
 800706e:	e003      	b.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007070:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007074:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007078:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800707c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007080:	f002 0304 	and.w	r3, r2, #4
 8007084:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007088:	2300      	movs	r3, #0
 800708a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800708e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007092:	460b      	mov	r3, r1
 8007094:	4313      	orrs	r3, r2
 8007096:	d044      	beq.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007098:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800709c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80070a0:	2b05      	cmp	r3, #5
 80070a2:	d825      	bhi.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80070a4:	a201      	add	r2, pc, #4	@ (adr r2, 80070ac <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80070a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070aa:	bf00      	nop
 80070ac:	080070f9 	.word	0x080070f9
 80070b0:	080070c5 	.word	0x080070c5
 80070b4:	080070db 	.word	0x080070db
 80070b8:	080070f9 	.word	0x080070f9
 80070bc:	080070f9 	.word	0x080070f9
 80070c0:	080070f9 	.word	0x080070f9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80070c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070c8:	3308      	adds	r3, #8
 80070ca:	2101      	movs	r1, #1
 80070cc:	4618      	mov	r0, r3
 80070ce:	f000 ff1d 	bl	8007f0c <RCCEx_PLL2_Config>
 80070d2:	4603      	mov	r3, r0
 80070d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80070d8:	e00f      	b.n	80070fa <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80070da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070de:	3328      	adds	r3, #40	@ 0x28
 80070e0:	2101      	movs	r1, #1
 80070e2:	4618      	mov	r0, r3
 80070e4:	f000 ffc4 	bl	8008070 <RCCEx_PLL3_Config>
 80070e8:	4603      	mov	r3, r0
 80070ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80070ee:	e004      	b.n	80070fa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80070f0:	2301      	movs	r3, #1
 80070f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80070f6:	e000      	b.n	80070fa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80070f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d10b      	bne.n	800711a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007102:	4b6c      	ldr	r3, [pc, #432]	@ (80072b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007104:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007106:	f023 0107 	bic.w	r1, r3, #7
 800710a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800710e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007112:	4a68      	ldr	r2, [pc, #416]	@ (80072b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007114:	430b      	orrs	r3, r1
 8007116:	6593      	str	r3, [r2, #88]	@ 0x58
 8007118:	e003      	b.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800711a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800711e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007122:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800712a:	f002 0320 	and.w	r3, r2, #32
 800712e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007132:	2300      	movs	r3, #0
 8007134:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007138:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800713c:	460b      	mov	r3, r1
 800713e:	4313      	orrs	r3, r2
 8007140:	d055      	beq.n	80071ee <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007142:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007146:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800714a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800714e:	d033      	beq.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8007150:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007154:	d82c      	bhi.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007156:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800715a:	d02f      	beq.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800715c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007160:	d826      	bhi.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007162:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007166:	d02b      	beq.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8007168:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800716c:	d820      	bhi.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800716e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007172:	d012      	beq.n	800719a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007174:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007178:	d81a      	bhi.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800717a:	2b00      	cmp	r3, #0
 800717c:	d022      	beq.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800717e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007182:	d115      	bne.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007184:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007188:	3308      	adds	r3, #8
 800718a:	2100      	movs	r1, #0
 800718c:	4618      	mov	r0, r3
 800718e:	f000 febd 	bl	8007f0c <RCCEx_PLL2_Config>
 8007192:	4603      	mov	r3, r0
 8007194:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007198:	e015      	b.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800719a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800719e:	3328      	adds	r3, #40	@ 0x28
 80071a0:	2102      	movs	r1, #2
 80071a2:	4618      	mov	r0, r3
 80071a4:	f000 ff64 	bl	8008070 <RCCEx_PLL3_Config>
 80071a8:	4603      	mov	r3, r0
 80071aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80071ae:	e00a      	b.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80071b0:	2301      	movs	r3, #1
 80071b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80071b6:	e006      	b.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80071b8:	bf00      	nop
 80071ba:	e004      	b.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80071bc:	bf00      	nop
 80071be:	e002      	b.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80071c0:	bf00      	nop
 80071c2:	e000      	b.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80071c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d10b      	bne.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80071ce:	4b39      	ldr	r3, [pc, #228]	@ (80072b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80071d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071d2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80071d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071de:	4a35      	ldr	r2, [pc, #212]	@ (80072b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80071e0:	430b      	orrs	r3, r1
 80071e2:	6553      	str	r3, [r2, #84]	@ 0x54
 80071e4:	e003      	b.n	80071ee <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80071ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071f6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80071fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80071fe:	2300      	movs	r3, #0
 8007200:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007204:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007208:	460b      	mov	r3, r1
 800720a:	4313      	orrs	r3, r2
 800720c:	d058      	beq.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800720e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007212:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007216:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800721a:	d033      	beq.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800721c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007220:	d82c      	bhi.n	800727c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007222:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007226:	d02f      	beq.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8007228:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800722c:	d826      	bhi.n	800727c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800722e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007232:	d02b      	beq.n	800728c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8007234:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007238:	d820      	bhi.n	800727c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800723a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800723e:	d012      	beq.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007240:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007244:	d81a      	bhi.n	800727c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007246:	2b00      	cmp	r3, #0
 8007248:	d022      	beq.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800724a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800724e:	d115      	bne.n	800727c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007250:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007254:	3308      	adds	r3, #8
 8007256:	2100      	movs	r1, #0
 8007258:	4618      	mov	r0, r3
 800725a:	f000 fe57 	bl	8007f0c <RCCEx_PLL2_Config>
 800725e:	4603      	mov	r3, r0
 8007260:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007264:	e015      	b.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007266:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800726a:	3328      	adds	r3, #40	@ 0x28
 800726c:	2102      	movs	r1, #2
 800726e:	4618      	mov	r0, r3
 8007270:	f000 fefe 	bl	8008070 <RCCEx_PLL3_Config>
 8007274:	4603      	mov	r3, r0
 8007276:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800727a:	e00a      	b.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800727c:	2301      	movs	r3, #1
 800727e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007282:	e006      	b.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007284:	bf00      	nop
 8007286:	e004      	b.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007288:	bf00      	nop
 800728a:	e002      	b.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800728c:	bf00      	nop
 800728e:	e000      	b.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007290:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007292:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007296:	2b00      	cmp	r3, #0
 8007298:	d10e      	bne.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800729a:	4b06      	ldr	r3, [pc, #24]	@ (80072b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800729c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800729e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80072a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80072aa:	4a02      	ldr	r2, [pc, #8]	@ (80072b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80072ac:	430b      	orrs	r3, r1
 80072ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80072b0:	e006      	b.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80072b2:	bf00      	nop
 80072b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80072c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072c8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80072cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80072d0:	2300      	movs	r3, #0
 80072d2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80072d6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80072da:	460b      	mov	r3, r1
 80072dc:	4313      	orrs	r3, r2
 80072de:	d055      	beq.n	800738c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80072e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072e4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80072e8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80072ec:	d033      	beq.n	8007356 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80072ee:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80072f2:	d82c      	bhi.n	800734e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80072f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80072f8:	d02f      	beq.n	800735a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80072fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80072fe:	d826      	bhi.n	800734e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007300:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007304:	d02b      	beq.n	800735e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8007306:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800730a:	d820      	bhi.n	800734e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800730c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007310:	d012      	beq.n	8007338 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8007312:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007316:	d81a      	bhi.n	800734e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007318:	2b00      	cmp	r3, #0
 800731a:	d022      	beq.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800731c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007320:	d115      	bne.n	800734e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007322:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007326:	3308      	adds	r3, #8
 8007328:	2100      	movs	r1, #0
 800732a:	4618      	mov	r0, r3
 800732c:	f000 fdee 	bl	8007f0c <RCCEx_PLL2_Config>
 8007330:	4603      	mov	r3, r0
 8007332:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007336:	e015      	b.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007338:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800733c:	3328      	adds	r3, #40	@ 0x28
 800733e:	2102      	movs	r1, #2
 8007340:	4618      	mov	r0, r3
 8007342:	f000 fe95 	bl	8008070 <RCCEx_PLL3_Config>
 8007346:	4603      	mov	r3, r0
 8007348:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800734c:	e00a      	b.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800734e:	2301      	movs	r3, #1
 8007350:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007354:	e006      	b.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007356:	bf00      	nop
 8007358:	e004      	b.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800735a:	bf00      	nop
 800735c:	e002      	b.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800735e:	bf00      	nop
 8007360:	e000      	b.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007362:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007364:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007368:	2b00      	cmp	r3, #0
 800736a:	d10b      	bne.n	8007384 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800736c:	4ba1      	ldr	r3, [pc, #644]	@ (80075f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800736e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007370:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007374:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007378:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800737c:	4a9d      	ldr	r2, [pc, #628]	@ (80075f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800737e:	430b      	orrs	r3, r1
 8007380:	6593      	str	r3, [r2, #88]	@ 0x58
 8007382:	e003      	b.n	800738c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007384:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007388:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800738c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007394:	f002 0308 	and.w	r3, r2, #8
 8007398:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800739c:	2300      	movs	r3, #0
 800739e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80073a2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80073a6:	460b      	mov	r3, r1
 80073a8:	4313      	orrs	r3, r2
 80073aa:	d01e      	beq.n	80073ea <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80073ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80073b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073b8:	d10c      	bne.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80073ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073be:	3328      	adds	r3, #40	@ 0x28
 80073c0:	2102      	movs	r1, #2
 80073c2:	4618      	mov	r0, r3
 80073c4:	f000 fe54 	bl	8008070 <RCCEx_PLL3_Config>
 80073c8:	4603      	mov	r3, r0
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d002      	beq.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80073ce:	2301      	movs	r3, #1
 80073d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80073d4:	4b87      	ldr	r3, [pc, #540]	@ (80075f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80073d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073d8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80073dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80073e4:	4a83      	ldr	r2, [pc, #524]	@ (80075f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80073e6:	430b      	orrs	r3, r1
 80073e8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80073ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073f2:	f002 0310 	and.w	r3, r2, #16
 80073f6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80073fa:	2300      	movs	r3, #0
 80073fc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007400:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007404:	460b      	mov	r3, r1
 8007406:	4313      	orrs	r3, r2
 8007408:	d01e      	beq.n	8007448 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800740a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800740e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007412:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007416:	d10c      	bne.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007418:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800741c:	3328      	adds	r3, #40	@ 0x28
 800741e:	2102      	movs	r1, #2
 8007420:	4618      	mov	r0, r3
 8007422:	f000 fe25 	bl	8008070 <RCCEx_PLL3_Config>
 8007426:	4603      	mov	r3, r0
 8007428:	2b00      	cmp	r3, #0
 800742a:	d002      	beq.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800742c:	2301      	movs	r3, #1
 800742e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007432:	4b70      	ldr	r3, [pc, #448]	@ (80075f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007434:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007436:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800743a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800743e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007442:	4a6c      	ldr	r2, [pc, #432]	@ (80075f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007444:	430b      	orrs	r3, r1
 8007446:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007448:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800744c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007450:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007454:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007458:	2300      	movs	r3, #0
 800745a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800745e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007462:	460b      	mov	r3, r1
 8007464:	4313      	orrs	r3, r2
 8007466:	d03e      	beq.n	80074e6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007468:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800746c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007470:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007474:	d022      	beq.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8007476:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800747a:	d81b      	bhi.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800747c:	2b00      	cmp	r3, #0
 800747e:	d003      	beq.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8007480:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007484:	d00b      	beq.n	800749e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8007486:	e015      	b.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007488:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800748c:	3308      	adds	r3, #8
 800748e:	2100      	movs	r1, #0
 8007490:	4618      	mov	r0, r3
 8007492:	f000 fd3b 	bl	8007f0c <RCCEx_PLL2_Config>
 8007496:	4603      	mov	r3, r0
 8007498:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800749c:	e00f      	b.n	80074be <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800749e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074a2:	3328      	adds	r3, #40	@ 0x28
 80074a4:	2102      	movs	r1, #2
 80074a6:	4618      	mov	r0, r3
 80074a8:	f000 fde2 	bl	8008070 <RCCEx_PLL3_Config>
 80074ac:	4603      	mov	r3, r0
 80074ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80074b2:	e004      	b.n	80074be <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80074b4:	2301      	movs	r3, #1
 80074b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80074ba:	e000      	b.n	80074be <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80074bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d10b      	bne.n	80074de <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80074c6:	4b4b      	ldr	r3, [pc, #300]	@ (80075f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80074c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074ca:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80074ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074d2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80074d6:	4a47      	ldr	r2, [pc, #284]	@ (80075f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80074d8:	430b      	orrs	r3, r1
 80074da:	6593      	str	r3, [r2, #88]	@ 0x58
 80074dc:	e003      	b.n	80074e6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80074e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ee:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80074f2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80074f4:	2300      	movs	r3, #0
 80074f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80074f8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80074fc:	460b      	mov	r3, r1
 80074fe:	4313      	orrs	r3, r2
 8007500:	d03b      	beq.n	800757a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007502:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007506:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800750a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800750e:	d01f      	beq.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8007510:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007514:	d818      	bhi.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8007516:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800751a:	d003      	beq.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800751c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007520:	d007      	beq.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8007522:	e011      	b.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007524:	4b33      	ldr	r3, [pc, #204]	@ (80075f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007528:	4a32      	ldr	r2, [pc, #200]	@ (80075f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800752a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800752e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007530:	e00f      	b.n	8007552 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007532:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007536:	3328      	adds	r3, #40	@ 0x28
 8007538:	2101      	movs	r1, #1
 800753a:	4618      	mov	r0, r3
 800753c:	f000 fd98 	bl	8008070 <RCCEx_PLL3_Config>
 8007540:	4603      	mov	r3, r0
 8007542:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8007546:	e004      	b.n	8007552 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007548:	2301      	movs	r3, #1
 800754a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800754e:	e000      	b.n	8007552 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8007550:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007552:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007556:	2b00      	cmp	r3, #0
 8007558:	d10b      	bne.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800755a:	4b26      	ldr	r3, [pc, #152]	@ (80075f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800755c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800755e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007562:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007566:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800756a:	4a22      	ldr	r2, [pc, #136]	@ (80075f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800756c:	430b      	orrs	r3, r1
 800756e:	6553      	str	r3, [r2, #84]	@ 0x54
 8007570:	e003      	b.n	800757a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007572:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007576:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800757a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800757e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007582:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007586:	673b      	str	r3, [r7, #112]	@ 0x70
 8007588:	2300      	movs	r3, #0
 800758a:	677b      	str	r3, [r7, #116]	@ 0x74
 800758c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007590:	460b      	mov	r3, r1
 8007592:	4313      	orrs	r3, r2
 8007594:	d034      	beq.n	8007600 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007596:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800759a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800759c:	2b00      	cmp	r3, #0
 800759e:	d003      	beq.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80075a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80075a4:	d007      	beq.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80075a6:	e011      	b.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075a8:	4b12      	ldr	r3, [pc, #72]	@ (80075f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80075aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075ac:	4a11      	ldr	r2, [pc, #68]	@ (80075f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80075ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80075b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80075b4:	e00e      	b.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80075b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075ba:	3308      	adds	r3, #8
 80075bc:	2102      	movs	r1, #2
 80075be:	4618      	mov	r0, r3
 80075c0:	f000 fca4 	bl	8007f0c <RCCEx_PLL2_Config>
 80075c4:	4603      	mov	r3, r0
 80075c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80075ca:	e003      	b.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80075cc:	2301      	movs	r3, #1
 80075ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80075d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d10d      	bne.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80075dc:	4b05      	ldr	r3, [pc, #20]	@ (80075f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80075de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80075e0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80075e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075ea:	4a02      	ldr	r2, [pc, #8]	@ (80075f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80075ec:	430b      	orrs	r3, r1
 80075ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80075f0:	e006      	b.n	8007600 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80075f2:	bf00      	nop
 80075f4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007600:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007608:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800760c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800760e:	2300      	movs	r3, #0
 8007610:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007612:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007616:	460b      	mov	r3, r1
 8007618:	4313      	orrs	r3, r2
 800761a:	d00c      	beq.n	8007636 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800761c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007620:	3328      	adds	r3, #40	@ 0x28
 8007622:	2102      	movs	r1, #2
 8007624:	4618      	mov	r0, r3
 8007626:	f000 fd23 	bl	8008070 <RCCEx_PLL3_Config>
 800762a:	4603      	mov	r3, r0
 800762c:	2b00      	cmp	r3, #0
 800762e:	d002      	beq.n	8007636 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8007630:	2301      	movs	r3, #1
 8007632:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007636:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800763a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800763e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007642:	663b      	str	r3, [r7, #96]	@ 0x60
 8007644:	2300      	movs	r3, #0
 8007646:	667b      	str	r3, [r7, #100]	@ 0x64
 8007648:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800764c:	460b      	mov	r3, r1
 800764e:	4313      	orrs	r3, r2
 8007650:	d038      	beq.n	80076c4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007652:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007656:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800765a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800765e:	d018      	beq.n	8007692 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8007660:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007664:	d811      	bhi.n	800768a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007666:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800766a:	d014      	beq.n	8007696 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800766c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007670:	d80b      	bhi.n	800768a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007672:	2b00      	cmp	r3, #0
 8007674:	d011      	beq.n	800769a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8007676:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800767a:	d106      	bne.n	800768a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800767c:	4bc3      	ldr	r3, [pc, #780]	@ (800798c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800767e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007680:	4ac2      	ldr	r2, [pc, #776]	@ (800798c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007682:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007686:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007688:	e008      	b.n	800769c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800768a:	2301      	movs	r3, #1
 800768c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007690:	e004      	b.n	800769c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007692:	bf00      	nop
 8007694:	e002      	b.n	800769c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007696:	bf00      	nop
 8007698:	e000      	b.n	800769c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800769a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800769c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d10b      	bne.n	80076bc <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80076a4:	4bb9      	ldr	r3, [pc, #740]	@ (800798c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80076a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076a8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80076ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076b4:	4ab5      	ldr	r2, [pc, #724]	@ (800798c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80076b6:	430b      	orrs	r3, r1
 80076b8:	6553      	str	r3, [r2, #84]	@ 0x54
 80076ba:	e003      	b.n	80076c4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80076c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076cc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80076d0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80076d2:	2300      	movs	r3, #0
 80076d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80076d6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80076da:	460b      	mov	r3, r1
 80076dc:	4313      	orrs	r3, r2
 80076de:	d009      	beq.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80076e0:	4baa      	ldr	r3, [pc, #680]	@ (800798c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80076e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076e4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80076e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80076ee:	4aa7      	ldr	r2, [pc, #668]	@ (800798c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80076f0:	430b      	orrs	r3, r1
 80076f2:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80076f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076fc:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8007700:	653b      	str	r3, [r7, #80]	@ 0x50
 8007702:	2300      	movs	r3, #0
 8007704:	657b      	str	r3, [r7, #84]	@ 0x54
 8007706:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800770a:	460b      	mov	r3, r1
 800770c:	4313      	orrs	r3, r2
 800770e:	d00a      	beq.n	8007726 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007710:	4b9e      	ldr	r3, [pc, #632]	@ (800798c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007712:	691b      	ldr	r3, [r3, #16]
 8007714:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8007718:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800771c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007720:	4a9a      	ldr	r2, [pc, #616]	@ (800798c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007722:	430b      	orrs	r3, r1
 8007724:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007726:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800772a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800772e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007732:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007734:	2300      	movs	r3, #0
 8007736:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007738:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800773c:	460b      	mov	r3, r1
 800773e:	4313      	orrs	r3, r2
 8007740:	d009      	beq.n	8007756 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007742:	4b92      	ldr	r3, [pc, #584]	@ (800798c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007744:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007746:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800774a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800774e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007750:	4a8e      	ldr	r2, [pc, #568]	@ (800798c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007752:	430b      	orrs	r3, r1
 8007754:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007756:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800775a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800775e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007762:	643b      	str	r3, [r7, #64]	@ 0x40
 8007764:	2300      	movs	r3, #0
 8007766:	647b      	str	r3, [r7, #68]	@ 0x44
 8007768:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800776c:	460b      	mov	r3, r1
 800776e:	4313      	orrs	r3, r2
 8007770:	d00e      	beq.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007772:	4b86      	ldr	r3, [pc, #536]	@ (800798c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007774:	691b      	ldr	r3, [r3, #16]
 8007776:	4a85      	ldr	r2, [pc, #532]	@ (800798c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007778:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800777c:	6113      	str	r3, [r2, #16]
 800777e:	4b83      	ldr	r3, [pc, #524]	@ (800798c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007780:	6919      	ldr	r1, [r3, #16]
 8007782:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007786:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800778a:	4a80      	ldr	r2, [pc, #512]	@ (800798c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800778c:	430b      	orrs	r3, r1
 800778e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007790:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007798:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800779c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800779e:	2300      	movs	r3, #0
 80077a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80077a2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80077a6:	460b      	mov	r3, r1
 80077a8:	4313      	orrs	r3, r2
 80077aa:	d009      	beq.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80077ac:	4b77      	ldr	r3, [pc, #476]	@ (800798c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80077ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80077b0:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80077b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077ba:	4a74      	ldr	r2, [pc, #464]	@ (800798c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80077bc:	430b      	orrs	r3, r1
 80077be:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80077c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077c8:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80077cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80077ce:	2300      	movs	r3, #0
 80077d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80077d2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80077d6:	460b      	mov	r3, r1
 80077d8:	4313      	orrs	r3, r2
 80077da:	d00a      	beq.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80077dc:	4b6b      	ldr	r3, [pc, #428]	@ (800798c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80077de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077e0:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80077e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80077ec:	4a67      	ldr	r2, [pc, #412]	@ (800798c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80077ee:	430b      	orrs	r3, r1
 80077f0:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80077f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077fa:	2100      	movs	r1, #0
 80077fc:	62b9      	str	r1, [r7, #40]	@ 0x28
 80077fe:	f003 0301 	and.w	r3, r3, #1
 8007802:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007804:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007808:	460b      	mov	r3, r1
 800780a:	4313      	orrs	r3, r2
 800780c:	d011      	beq.n	8007832 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800780e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007812:	3308      	adds	r3, #8
 8007814:	2100      	movs	r1, #0
 8007816:	4618      	mov	r0, r3
 8007818:	f000 fb78 	bl	8007f0c <RCCEx_PLL2_Config>
 800781c:	4603      	mov	r3, r0
 800781e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007822:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007826:	2b00      	cmp	r3, #0
 8007828:	d003      	beq.n	8007832 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800782a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800782e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007832:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800783a:	2100      	movs	r1, #0
 800783c:	6239      	str	r1, [r7, #32]
 800783e:	f003 0302 	and.w	r3, r3, #2
 8007842:	627b      	str	r3, [r7, #36]	@ 0x24
 8007844:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007848:	460b      	mov	r3, r1
 800784a:	4313      	orrs	r3, r2
 800784c:	d011      	beq.n	8007872 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800784e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007852:	3308      	adds	r3, #8
 8007854:	2101      	movs	r1, #1
 8007856:	4618      	mov	r0, r3
 8007858:	f000 fb58 	bl	8007f0c <RCCEx_PLL2_Config>
 800785c:	4603      	mov	r3, r0
 800785e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007862:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007866:	2b00      	cmp	r3, #0
 8007868:	d003      	beq.n	8007872 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800786a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800786e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007872:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800787a:	2100      	movs	r1, #0
 800787c:	61b9      	str	r1, [r7, #24]
 800787e:	f003 0304 	and.w	r3, r3, #4
 8007882:	61fb      	str	r3, [r7, #28]
 8007884:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007888:	460b      	mov	r3, r1
 800788a:	4313      	orrs	r3, r2
 800788c:	d011      	beq.n	80078b2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800788e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007892:	3308      	adds	r3, #8
 8007894:	2102      	movs	r1, #2
 8007896:	4618      	mov	r0, r3
 8007898:	f000 fb38 	bl	8007f0c <RCCEx_PLL2_Config>
 800789c:	4603      	mov	r3, r0
 800789e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80078a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d003      	beq.n	80078b2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80078b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ba:	2100      	movs	r1, #0
 80078bc:	6139      	str	r1, [r7, #16]
 80078be:	f003 0308 	and.w	r3, r3, #8
 80078c2:	617b      	str	r3, [r7, #20]
 80078c4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80078c8:	460b      	mov	r3, r1
 80078ca:	4313      	orrs	r3, r2
 80078cc:	d011      	beq.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80078ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078d2:	3328      	adds	r3, #40	@ 0x28
 80078d4:	2100      	movs	r1, #0
 80078d6:	4618      	mov	r0, r3
 80078d8:	f000 fbca 	bl	8008070 <RCCEx_PLL3_Config>
 80078dc:	4603      	mov	r3, r0
 80078de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80078e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d003      	beq.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80078f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078fa:	2100      	movs	r1, #0
 80078fc:	60b9      	str	r1, [r7, #8]
 80078fe:	f003 0310 	and.w	r3, r3, #16
 8007902:	60fb      	str	r3, [r7, #12]
 8007904:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007908:	460b      	mov	r3, r1
 800790a:	4313      	orrs	r3, r2
 800790c:	d011      	beq.n	8007932 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800790e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007912:	3328      	adds	r3, #40	@ 0x28
 8007914:	2101      	movs	r1, #1
 8007916:	4618      	mov	r0, r3
 8007918:	f000 fbaa 	bl	8008070 <RCCEx_PLL3_Config>
 800791c:	4603      	mov	r3, r0
 800791e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007922:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007926:	2b00      	cmp	r3, #0
 8007928:	d003      	beq.n	8007932 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800792a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800792e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007932:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800793a:	2100      	movs	r1, #0
 800793c:	6039      	str	r1, [r7, #0]
 800793e:	f003 0320 	and.w	r3, r3, #32
 8007942:	607b      	str	r3, [r7, #4]
 8007944:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007948:	460b      	mov	r3, r1
 800794a:	4313      	orrs	r3, r2
 800794c:	d011      	beq.n	8007972 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800794e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007952:	3328      	adds	r3, #40	@ 0x28
 8007954:	2102      	movs	r1, #2
 8007956:	4618      	mov	r0, r3
 8007958:	f000 fb8a 	bl	8008070 <RCCEx_PLL3_Config>
 800795c:	4603      	mov	r3, r0
 800795e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007962:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007966:	2b00      	cmp	r3, #0
 8007968:	d003      	beq.n	8007972 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800796a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800796e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8007972:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8007976:	2b00      	cmp	r3, #0
 8007978:	d101      	bne.n	800797e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800797a:	2300      	movs	r3, #0
 800797c:	e000      	b.n	8007980 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800797e:	2301      	movs	r3, #1
}
 8007980:	4618      	mov	r0, r3
 8007982:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8007986:	46bd      	mov	sp, r7
 8007988:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800798c:	58024400 	.word	0x58024400

08007990 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007994:	f7fe fd54 	bl	8006440 <HAL_RCC_GetHCLKFreq>
 8007998:	4602      	mov	r2, r0
 800799a:	4b06      	ldr	r3, [pc, #24]	@ (80079b4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800799c:	6a1b      	ldr	r3, [r3, #32]
 800799e:	091b      	lsrs	r3, r3, #4
 80079a0:	f003 0307 	and.w	r3, r3, #7
 80079a4:	4904      	ldr	r1, [pc, #16]	@ (80079b8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80079a6:	5ccb      	ldrb	r3, [r1, r3]
 80079a8:	f003 031f 	and.w	r3, r3, #31
 80079ac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	bd80      	pop	{r7, pc}
 80079b4:	58024400 	.word	0x58024400
 80079b8:	0800d5dc 	.word	0x0800d5dc

080079bc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80079bc:	b480      	push	{r7}
 80079be:	b089      	sub	sp, #36	@ 0x24
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80079c4:	4ba1      	ldr	r3, [pc, #644]	@ (8007c4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079c8:	f003 0303 	and.w	r3, r3, #3
 80079cc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80079ce:	4b9f      	ldr	r3, [pc, #636]	@ (8007c4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079d2:	0b1b      	lsrs	r3, r3, #12
 80079d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80079d8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80079da:	4b9c      	ldr	r3, [pc, #624]	@ (8007c4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079de:	091b      	lsrs	r3, r3, #4
 80079e0:	f003 0301 	and.w	r3, r3, #1
 80079e4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80079e6:	4b99      	ldr	r3, [pc, #612]	@ (8007c4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079ea:	08db      	lsrs	r3, r3, #3
 80079ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80079f0:	693a      	ldr	r2, [r7, #16]
 80079f2:	fb02 f303 	mul.w	r3, r2, r3
 80079f6:	ee07 3a90 	vmov	s15, r3
 80079fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079fe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	f000 8111 	beq.w	8007c2c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007a0a:	69bb      	ldr	r3, [r7, #24]
 8007a0c:	2b02      	cmp	r3, #2
 8007a0e:	f000 8083 	beq.w	8007b18 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007a12:	69bb      	ldr	r3, [r7, #24]
 8007a14:	2b02      	cmp	r3, #2
 8007a16:	f200 80a1 	bhi.w	8007b5c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007a1a:	69bb      	ldr	r3, [r7, #24]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d003      	beq.n	8007a28 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007a20:	69bb      	ldr	r3, [r7, #24]
 8007a22:	2b01      	cmp	r3, #1
 8007a24:	d056      	beq.n	8007ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007a26:	e099      	b.n	8007b5c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a28:	4b88      	ldr	r3, [pc, #544]	@ (8007c4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f003 0320 	and.w	r3, r3, #32
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d02d      	beq.n	8007a90 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007a34:	4b85      	ldr	r3, [pc, #532]	@ (8007c4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	08db      	lsrs	r3, r3, #3
 8007a3a:	f003 0303 	and.w	r3, r3, #3
 8007a3e:	4a84      	ldr	r2, [pc, #528]	@ (8007c50 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007a40:	fa22 f303 	lsr.w	r3, r2, r3
 8007a44:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	ee07 3a90 	vmov	s15, r3
 8007a4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a50:	697b      	ldr	r3, [r7, #20]
 8007a52:	ee07 3a90 	vmov	s15, r3
 8007a56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a5e:	4b7b      	ldr	r3, [pc, #492]	@ (8007c4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a66:	ee07 3a90 	vmov	s15, r3
 8007a6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a72:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007c54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007a76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a8a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007a8e:	e087      	b.n	8007ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007a90:	697b      	ldr	r3, [r7, #20]
 8007a92:	ee07 3a90 	vmov	s15, r3
 8007a96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a9a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007c58 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007a9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007aa2:	4b6a      	ldr	r3, [pc, #424]	@ (8007c4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007aa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007aa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007aaa:	ee07 3a90 	vmov	s15, r3
 8007aae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ab2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ab6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007c54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007aba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007abe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ac2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007ac6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007aca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ace:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007ad2:	e065      	b.n	8007ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	ee07 3a90 	vmov	s15, r3
 8007ada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ade:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007c5c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007ae2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ae6:	4b59      	ldr	r3, [pc, #356]	@ (8007c4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ae8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007aea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007aee:	ee07 3a90 	vmov	s15, r3
 8007af2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007af6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007afa:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007c54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007afe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b16:	e043      	b.n	8007ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007b18:	697b      	ldr	r3, [r7, #20]
 8007b1a:	ee07 3a90 	vmov	s15, r3
 8007b1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b22:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007c60 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007b26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b2a:	4b48      	ldr	r3, [pc, #288]	@ (8007c4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b32:	ee07 3a90 	vmov	s15, r3
 8007b36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b3e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007c54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007b42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b5a:	e021      	b.n	8007ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007b5c:	697b      	ldr	r3, [r7, #20]
 8007b5e:	ee07 3a90 	vmov	s15, r3
 8007b62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b66:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007c5c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007b6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b6e:	4b37      	ldr	r3, [pc, #220]	@ (8007c4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b76:	ee07 3a90 	vmov	s15, r3
 8007b7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b82:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007c54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007b86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b9e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007ba0:	4b2a      	ldr	r3, [pc, #168]	@ (8007c4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ba2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ba4:	0a5b      	lsrs	r3, r3, #9
 8007ba6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007baa:	ee07 3a90 	vmov	s15, r3
 8007bae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bb2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007bb6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007bba:	edd7 6a07 	vldr	s13, [r7, #28]
 8007bbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007bc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007bc6:	ee17 2a90 	vmov	r2, s15
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007bce:	4b1f      	ldr	r3, [pc, #124]	@ (8007c4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007bd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bd2:	0c1b      	lsrs	r3, r3, #16
 8007bd4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007bd8:	ee07 3a90 	vmov	s15, r3
 8007bdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007be0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007be4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007be8:	edd7 6a07 	vldr	s13, [r7, #28]
 8007bec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007bf0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007bf4:	ee17 2a90 	vmov	r2, s15
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007bfc:	4b13      	ldr	r3, [pc, #76]	@ (8007c4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007bfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c00:	0e1b      	lsrs	r3, r3, #24
 8007c02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c06:	ee07 3a90 	vmov	s15, r3
 8007c0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c0e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007c12:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c16:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c22:	ee17 2a90 	vmov	r2, s15
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007c2a:	e008      	b.n	8007c3e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2200      	movs	r2, #0
 8007c36:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	609a      	str	r2, [r3, #8]
}
 8007c3e:	bf00      	nop
 8007c40:	3724      	adds	r7, #36	@ 0x24
 8007c42:	46bd      	mov	sp, r7
 8007c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c48:	4770      	bx	lr
 8007c4a:	bf00      	nop
 8007c4c:	58024400 	.word	0x58024400
 8007c50:	03d09000 	.word	0x03d09000
 8007c54:	46000000 	.word	0x46000000
 8007c58:	4c742400 	.word	0x4c742400
 8007c5c:	4a742400 	.word	0x4a742400
 8007c60:	4af42400 	.word	0x4af42400

08007c64 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007c64:	b480      	push	{r7}
 8007c66:	b089      	sub	sp, #36	@ 0x24
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007c6c:	4ba1      	ldr	r3, [pc, #644]	@ (8007ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c70:	f003 0303 	and.w	r3, r3, #3
 8007c74:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007c76:	4b9f      	ldr	r3, [pc, #636]	@ (8007ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c7a:	0d1b      	lsrs	r3, r3, #20
 8007c7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007c80:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007c82:	4b9c      	ldr	r3, [pc, #624]	@ (8007ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c86:	0a1b      	lsrs	r3, r3, #8
 8007c88:	f003 0301 	and.w	r3, r3, #1
 8007c8c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007c8e:	4b99      	ldr	r3, [pc, #612]	@ (8007ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c92:	08db      	lsrs	r3, r3, #3
 8007c94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007c98:	693a      	ldr	r2, [r7, #16]
 8007c9a:	fb02 f303 	mul.w	r3, r2, r3
 8007c9e:	ee07 3a90 	vmov	s15, r3
 8007ca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ca6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	f000 8111 	beq.w	8007ed4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007cb2:	69bb      	ldr	r3, [r7, #24]
 8007cb4:	2b02      	cmp	r3, #2
 8007cb6:	f000 8083 	beq.w	8007dc0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007cba:	69bb      	ldr	r3, [r7, #24]
 8007cbc:	2b02      	cmp	r3, #2
 8007cbe:	f200 80a1 	bhi.w	8007e04 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007cc2:	69bb      	ldr	r3, [r7, #24]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d003      	beq.n	8007cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007cc8:	69bb      	ldr	r3, [r7, #24]
 8007cca:	2b01      	cmp	r3, #1
 8007ccc:	d056      	beq.n	8007d7c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007cce:	e099      	b.n	8007e04 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007cd0:	4b88      	ldr	r3, [pc, #544]	@ (8007ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f003 0320 	and.w	r3, r3, #32
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d02d      	beq.n	8007d38 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007cdc:	4b85      	ldr	r3, [pc, #532]	@ (8007ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	08db      	lsrs	r3, r3, #3
 8007ce2:	f003 0303 	and.w	r3, r3, #3
 8007ce6:	4a84      	ldr	r2, [pc, #528]	@ (8007ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007ce8:	fa22 f303 	lsr.w	r3, r2, r3
 8007cec:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	ee07 3a90 	vmov	s15, r3
 8007cf4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	ee07 3a90 	vmov	s15, r3
 8007cfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d06:	4b7b      	ldr	r3, [pc, #492]	@ (8007ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d0e:	ee07 3a90 	vmov	s15, r3
 8007d12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d16:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d1a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007efc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007d1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d32:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007d36:	e087      	b.n	8007e48 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007d38:	697b      	ldr	r3, [r7, #20]
 8007d3a:	ee07 3a90 	vmov	s15, r3
 8007d3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d42:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007f00 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007d46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d4a:	4b6a      	ldr	r3, [pc, #424]	@ (8007ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d52:	ee07 3a90 	vmov	s15, r3
 8007d56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d5e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007efc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007d62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d7a:	e065      	b.n	8007e48 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	ee07 3a90 	vmov	s15, r3
 8007d82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d86:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007f04 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007d8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d8e:	4b59      	ldr	r3, [pc, #356]	@ (8007ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d96:	ee07 3a90 	vmov	s15, r3
 8007d9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007da2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007efc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007da6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007daa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007dae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007db2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007db6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007dba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007dbe:	e043      	b.n	8007e48 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007dc0:	697b      	ldr	r3, [r7, #20]
 8007dc2:	ee07 3a90 	vmov	s15, r3
 8007dc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dca:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007f08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007dce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007dd2:	4b48      	ldr	r3, [pc, #288]	@ (8007ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dda:	ee07 3a90 	vmov	s15, r3
 8007dde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007de2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007de6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007efc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007dea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007dee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007df2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007df6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007dfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007dfe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007e02:	e021      	b.n	8007e48 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007e04:	697b      	ldr	r3, [r7, #20]
 8007e06:	ee07 3a90 	vmov	s15, r3
 8007e0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e0e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007f04 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007e12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e16:	4b37      	ldr	r3, [pc, #220]	@ (8007ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e1e:	ee07 3a90 	vmov	s15, r3
 8007e22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e26:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e2a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007efc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007e2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007e3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007e46:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007e48:	4b2a      	ldr	r3, [pc, #168]	@ (8007ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e4c:	0a5b      	lsrs	r3, r3, #9
 8007e4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e52:	ee07 3a90 	vmov	s15, r3
 8007e56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e5a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007e5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e62:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e6e:	ee17 2a90 	vmov	r2, s15
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007e76:	4b1f      	ldr	r3, [pc, #124]	@ (8007ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e7a:	0c1b      	lsrs	r3, r3, #16
 8007e7c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e80:	ee07 3a90 	vmov	s15, r3
 8007e84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e88:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007e8c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e90:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e9c:	ee17 2a90 	vmov	r2, s15
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007ea4:	4b13      	ldr	r3, [pc, #76]	@ (8007ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ea8:	0e1b      	lsrs	r3, r3, #24
 8007eaa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007eae:	ee07 3a90 	vmov	s15, r3
 8007eb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007eb6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007eba:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ebe:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ec2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ec6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007eca:	ee17 2a90 	vmov	r2, s15
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007ed2:	e008      	b.n	8007ee6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2200      	movs	r2, #0
 8007ede:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	609a      	str	r2, [r3, #8]
}
 8007ee6:	bf00      	nop
 8007ee8:	3724      	adds	r7, #36	@ 0x24
 8007eea:	46bd      	mov	sp, r7
 8007eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef0:	4770      	bx	lr
 8007ef2:	bf00      	nop
 8007ef4:	58024400 	.word	0x58024400
 8007ef8:	03d09000 	.word	0x03d09000
 8007efc:	46000000 	.word	0x46000000
 8007f00:	4c742400 	.word	0x4c742400
 8007f04:	4a742400 	.word	0x4a742400
 8007f08:	4af42400 	.word	0x4af42400

08007f0c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b084      	sub	sp, #16
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
 8007f14:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007f16:	2300      	movs	r3, #0
 8007f18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007f1a:	4b53      	ldr	r3, [pc, #332]	@ (8008068 <RCCEx_PLL2_Config+0x15c>)
 8007f1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f1e:	f003 0303 	and.w	r3, r3, #3
 8007f22:	2b03      	cmp	r3, #3
 8007f24:	d101      	bne.n	8007f2a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007f26:	2301      	movs	r3, #1
 8007f28:	e099      	b.n	800805e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007f2a:	4b4f      	ldr	r3, [pc, #316]	@ (8008068 <RCCEx_PLL2_Config+0x15c>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4a4e      	ldr	r2, [pc, #312]	@ (8008068 <RCCEx_PLL2_Config+0x15c>)
 8007f30:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007f34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f36:	f7fa f939 	bl	80021ac <HAL_GetTick>
 8007f3a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007f3c:	e008      	b.n	8007f50 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007f3e:	f7fa f935 	bl	80021ac <HAL_GetTick>
 8007f42:	4602      	mov	r2, r0
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	1ad3      	subs	r3, r2, r3
 8007f48:	2b02      	cmp	r3, #2
 8007f4a:	d901      	bls.n	8007f50 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007f4c:	2303      	movs	r3, #3
 8007f4e:	e086      	b.n	800805e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007f50:	4b45      	ldr	r3, [pc, #276]	@ (8008068 <RCCEx_PLL2_Config+0x15c>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d1f0      	bne.n	8007f3e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007f5c:	4b42      	ldr	r3, [pc, #264]	@ (8008068 <RCCEx_PLL2_Config+0x15c>)
 8007f5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f60:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	031b      	lsls	r3, r3, #12
 8007f6a:	493f      	ldr	r1, [pc, #252]	@ (8008068 <RCCEx_PLL2_Config+0x15c>)
 8007f6c:	4313      	orrs	r3, r2
 8007f6e:	628b      	str	r3, [r1, #40]	@ 0x28
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	685b      	ldr	r3, [r3, #4]
 8007f74:	3b01      	subs	r3, #1
 8007f76:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	689b      	ldr	r3, [r3, #8]
 8007f7e:	3b01      	subs	r3, #1
 8007f80:	025b      	lsls	r3, r3, #9
 8007f82:	b29b      	uxth	r3, r3
 8007f84:	431a      	orrs	r2, r3
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	68db      	ldr	r3, [r3, #12]
 8007f8a:	3b01      	subs	r3, #1
 8007f8c:	041b      	lsls	r3, r3, #16
 8007f8e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007f92:	431a      	orrs	r2, r3
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	691b      	ldr	r3, [r3, #16]
 8007f98:	3b01      	subs	r3, #1
 8007f9a:	061b      	lsls	r3, r3, #24
 8007f9c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007fa0:	4931      	ldr	r1, [pc, #196]	@ (8008068 <RCCEx_PLL2_Config+0x15c>)
 8007fa2:	4313      	orrs	r3, r2
 8007fa4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007fa6:	4b30      	ldr	r3, [pc, #192]	@ (8008068 <RCCEx_PLL2_Config+0x15c>)
 8007fa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007faa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	695b      	ldr	r3, [r3, #20]
 8007fb2:	492d      	ldr	r1, [pc, #180]	@ (8008068 <RCCEx_PLL2_Config+0x15c>)
 8007fb4:	4313      	orrs	r3, r2
 8007fb6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007fb8:	4b2b      	ldr	r3, [pc, #172]	@ (8008068 <RCCEx_PLL2_Config+0x15c>)
 8007fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fbc:	f023 0220 	bic.w	r2, r3, #32
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	699b      	ldr	r3, [r3, #24]
 8007fc4:	4928      	ldr	r1, [pc, #160]	@ (8008068 <RCCEx_PLL2_Config+0x15c>)
 8007fc6:	4313      	orrs	r3, r2
 8007fc8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007fca:	4b27      	ldr	r3, [pc, #156]	@ (8008068 <RCCEx_PLL2_Config+0x15c>)
 8007fcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fce:	4a26      	ldr	r2, [pc, #152]	@ (8008068 <RCCEx_PLL2_Config+0x15c>)
 8007fd0:	f023 0310 	bic.w	r3, r3, #16
 8007fd4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007fd6:	4b24      	ldr	r3, [pc, #144]	@ (8008068 <RCCEx_PLL2_Config+0x15c>)
 8007fd8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007fda:	4b24      	ldr	r3, [pc, #144]	@ (800806c <RCCEx_PLL2_Config+0x160>)
 8007fdc:	4013      	ands	r3, r2
 8007fde:	687a      	ldr	r2, [r7, #4]
 8007fe0:	69d2      	ldr	r2, [r2, #28]
 8007fe2:	00d2      	lsls	r2, r2, #3
 8007fe4:	4920      	ldr	r1, [pc, #128]	@ (8008068 <RCCEx_PLL2_Config+0x15c>)
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007fea:	4b1f      	ldr	r3, [pc, #124]	@ (8008068 <RCCEx_PLL2_Config+0x15c>)
 8007fec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fee:	4a1e      	ldr	r2, [pc, #120]	@ (8008068 <RCCEx_PLL2_Config+0x15c>)
 8007ff0:	f043 0310 	orr.w	r3, r3, #16
 8007ff4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d106      	bne.n	800800a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007ffc:	4b1a      	ldr	r3, [pc, #104]	@ (8008068 <RCCEx_PLL2_Config+0x15c>)
 8007ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008000:	4a19      	ldr	r2, [pc, #100]	@ (8008068 <RCCEx_PLL2_Config+0x15c>)
 8008002:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008006:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008008:	e00f      	b.n	800802a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	2b01      	cmp	r3, #1
 800800e:	d106      	bne.n	800801e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008010:	4b15      	ldr	r3, [pc, #84]	@ (8008068 <RCCEx_PLL2_Config+0x15c>)
 8008012:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008014:	4a14      	ldr	r2, [pc, #80]	@ (8008068 <RCCEx_PLL2_Config+0x15c>)
 8008016:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800801a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800801c:	e005      	b.n	800802a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800801e:	4b12      	ldr	r3, [pc, #72]	@ (8008068 <RCCEx_PLL2_Config+0x15c>)
 8008020:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008022:	4a11      	ldr	r2, [pc, #68]	@ (8008068 <RCCEx_PLL2_Config+0x15c>)
 8008024:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008028:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800802a:	4b0f      	ldr	r3, [pc, #60]	@ (8008068 <RCCEx_PLL2_Config+0x15c>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	4a0e      	ldr	r2, [pc, #56]	@ (8008068 <RCCEx_PLL2_Config+0x15c>)
 8008030:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008034:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008036:	f7fa f8b9 	bl	80021ac <HAL_GetTick>
 800803a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800803c:	e008      	b.n	8008050 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800803e:	f7fa f8b5 	bl	80021ac <HAL_GetTick>
 8008042:	4602      	mov	r2, r0
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	1ad3      	subs	r3, r2, r3
 8008048:	2b02      	cmp	r3, #2
 800804a:	d901      	bls.n	8008050 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800804c:	2303      	movs	r3, #3
 800804e:	e006      	b.n	800805e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008050:	4b05      	ldr	r3, [pc, #20]	@ (8008068 <RCCEx_PLL2_Config+0x15c>)
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008058:	2b00      	cmp	r3, #0
 800805a:	d0f0      	beq.n	800803e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800805c:	7bfb      	ldrb	r3, [r7, #15]
}
 800805e:	4618      	mov	r0, r3
 8008060:	3710      	adds	r7, #16
 8008062:	46bd      	mov	sp, r7
 8008064:	bd80      	pop	{r7, pc}
 8008066:	bf00      	nop
 8008068:	58024400 	.word	0x58024400
 800806c:	ffff0007 	.word	0xffff0007

08008070 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b084      	sub	sp, #16
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
 8008078:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800807a:	2300      	movs	r3, #0
 800807c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800807e:	4b53      	ldr	r3, [pc, #332]	@ (80081cc <RCCEx_PLL3_Config+0x15c>)
 8008080:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008082:	f003 0303 	and.w	r3, r3, #3
 8008086:	2b03      	cmp	r3, #3
 8008088:	d101      	bne.n	800808e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800808a:	2301      	movs	r3, #1
 800808c:	e099      	b.n	80081c2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800808e:	4b4f      	ldr	r3, [pc, #316]	@ (80081cc <RCCEx_PLL3_Config+0x15c>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	4a4e      	ldr	r2, [pc, #312]	@ (80081cc <RCCEx_PLL3_Config+0x15c>)
 8008094:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008098:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800809a:	f7fa f887 	bl	80021ac <HAL_GetTick>
 800809e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80080a0:	e008      	b.n	80080b4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80080a2:	f7fa f883 	bl	80021ac <HAL_GetTick>
 80080a6:	4602      	mov	r2, r0
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	1ad3      	subs	r3, r2, r3
 80080ac:	2b02      	cmp	r3, #2
 80080ae:	d901      	bls.n	80080b4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80080b0:	2303      	movs	r3, #3
 80080b2:	e086      	b.n	80081c2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80080b4:	4b45      	ldr	r3, [pc, #276]	@ (80081cc <RCCEx_PLL3_Config+0x15c>)
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d1f0      	bne.n	80080a2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80080c0:	4b42      	ldr	r3, [pc, #264]	@ (80081cc <RCCEx_PLL3_Config+0x15c>)
 80080c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080c4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	051b      	lsls	r3, r3, #20
 80080ce:	493f      	ldr	r1, [pc, #252]	@ (80081cc <RCCEx_PLL3_Config+0x15c>)
 80080d0:	4313      	orrs	r3, r2
 80080d2:	628b      	str	r3, [r1, #40]	@ 0x28
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	685b      	ldr	r3, [r3, #4]
 80080d8:	3b01      	subs	r3, #1
 80080da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	689b      	ldr	r3, [r3, #8]
 80080e2:	3b01      	subs	r3, #1
 80080e4:	025b      	lsls	r3, r3, #9
 80080e6:	b29b      	uxth	r3, r3
 80080e8:	431a      	orrs	r2, r3
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	68db      	ldr	r3, [r3, #12]
 80080ee:	3b01      	subs	r3, #1
 80080f0:	041b      	lsls	r3, r3, #16
 80080f2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80080f6:	431a      	orrs	r2, r3
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	691b      	ldr	r3, [r3, #16]
 80080fc:	3b01      	subs	r3, #1
 80080fe:	061b      	lsls	r3, r3, #24
 8008100:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008104:	4931      	ldr	r1, [pc, #196]	@ (80081cc <RCCEx_PLL3_Config+0x15c>)
 8008106:	4313      	orrs	r3, r2
 8008108:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800810a:	4b30      	ldr	r3, [pc, #192]	@ (80081cc <RCCEx_PLL3_Config+0x15c>)
 800810c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800810e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	695b      	ldr	r3, [r3, #20]
 8008116:	492d      	ldr	r1, [pc, #180]	@ (80081cc <RCCEx_PLL3_Config+0x15c>)
 8008118:	4313      	orrs	r3, r2
 800811a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800811c:	4b2b      	ldr	r3, [pc, #172]	@ (80081cc <RCCEx_PLL3_Config+0x15c>)
 800811e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008120:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	699b      	ldr	r3, [r3, #24]
 8008128:	4928      	ldr	r1, [pc, #160]	@ (80081cc <RCCEx_PLL3_Config+0x15c>)
 800812a:	4313      	orrs	r3, r2
 800812c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800812e:	4b27      	ldr	r3, [pc, #156]	@ (80081cc <RCCEx_PLL3_Config+0x15c>)
 8008130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008132:	4a26      	ldr	r2, [pc, #152]	@ (80081cc <RCCEx_PLL3_Config+0x15c>)
 8008134:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008138:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800813a:	4b24      	ldr	r3, [pc, #144]	@ (80081cc <RCCEx_PLL3_Config+0x15c>)
 800813c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800813e:	4b24      	ldr	r3, [pc, #144]	@ (80081d0 <RCCEx_PLL3_Config+0x160>)
 8008140:	4013      	ands	r3, r2
 8008142:	687a      	ldr	r2, [r7, #4]
 8008144:	69d2      	ldr	r2, [r2, #28]
 8008146:	00d2      	lsls	r2, r2, #3
 8008148:	4920      	ldr	r1, [pc, #128]	@ (80081cc <RCCEx_PLL3_Config+0x15c>)
 800814a:	4313      	orrs	r3, r2
 800814c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800814e:	4b1f      	ldr	r3, [pc, #124]	@ (80081cc <RCCEx_PLL3_Config+0x15c>)
 8008150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008152:	4a1e      	ldr	r2, [pc, #120]	@ (80081cc <RCCEx_PLL3_Config+0x15c>)
 8008154:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008158:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d106      	bne.n	800816e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008160:	4b1a      	ldr	r3, [pc, #104]	@ (80081cc <RCCEx_PLL3_Config+0x15c>)
 8008162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008164:	4a19      	ldr	r2, [pc, #100]	@ (80081cc <RCCEx_PLL3_Config+0x15c>)
 8008166:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800816a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800816c:	e00f      	b.n	800818e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	2b01      	cmp	r3, #1
 8008172:	d106      	bne.n	8008182 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008174:	4b15      	ldr	r3, [pc, #84]	@ (80081cc <RCCEx_PLL3_Config+0x15c>)
 8008176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008178:	4a14      	ldr	r2, [pc, #80]	@ (80081cc <RCCEx_PLL3_Config+0x15c>)
 800817a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800817e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008180:	e005      	b.n	800818e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008182:	4b12      	ldr	r3, [pc, #72]	@ (80081cc <RCCEx_PLL3_Config+0x15c>)
 8008184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008186:	4a11      	ldr	r2, [pc, #68]	@ (80081cc <RCCEx_PLL3_Config+0x15c>)
 8008188:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800818c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800818e:	4b0f      	ldr	r3, [pc, #60]	@ (80081cc <RCCEx_PLL3_Config+0x15c>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	4a0e      	ldr	r2, [pc, #56]	@ (80081cc <RCCEx_PLL3_Config+0x15c>)
 8008194:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008198:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800819a:	f7fa f807 	bl	80021ac <HAL_GetTick>
 800819e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80081a0:	e008      	b.n	80081b4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80081a2:	f7fa f803 	bl	80021ac <HAL_GetTick>
 80081a6:	4602      	mov	r2, r0
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	1ad3      	subs	r3, r2, r3
 80081ac:	2b02      	cmp	r3, #2
 80081ae:	d901      	bls.n	80081b4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80081b0:	2303      	movs	r3, #3
 80081b2:	e006      	b.n	80081c2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80081b4:	4b05      	ldr	r3, [pc, #20]	@ (80081cc <RCCEx_PLL3_Config+0x15c>)
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d0f0      	beq.n	80081a2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80081c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80081c2:	4618      	mov	r0, r3
 80081c4:	3710      	adds	r7, #16
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bd80      	pop	{r7, pc}
 80081ca:	bf00      	nop
 80081cc:	58024400 	.word	0x58024400
 80081d0:	ffff0007 	.word	0xffff0007

080081d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b082      	sub	sp, #8
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d101      	bne.n	80081e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80081e2:	2301      	movs	r3, #1
 80081e4:	e049      	b.n	800827a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80081ec:	b2db      	uxtb	r3, r3
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d106      	bne.n	8008200 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2200      	movs	r2, #0
 80081f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80081fa:	6878      	ldr	r0, [r7, #4]
 80081fc:	f7f9 f9f2 	bl	80015e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2202      	movs	r2, #2
 8008204:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681a      	ldr	r2, [r3, #0]
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	3304      	adds	r3, #4
 8008210:	4619      	mov	r1, r3
 8008212:	4610      	mov	r0, r2
 8008214:	f000 f9de 	bl	80085d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2201      	movs	r2, #1
 800821c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2201      	movs	r2, #1
 8008224:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2201      	movs	r2, #1
 800822c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2201      	movs	r2, #1
 8008234:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2201      	movs	r2, #1
 800823c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2201      	movs	r2, #1
 8008244:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2201      	movs	r2, #1
 800824c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2201      	movs	r2, #1
 8008254:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2201      	movs	r2, #1
 800825c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2201      	movs	r2, #1
 8008264:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2201      	movs	r2, #1
 800826c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2201      	movs	r2, #1
 8008274:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008278:	2300      	movs	r3, #0
}
 800827a:	4618      	mov	r0, r3
 800827c:	3708      	adds	r7, #8
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}
	...

08008284 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008284:	b480      	push	{r7}
 8008286:	b085      	sub	sp, #20
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008292:	b2db      	uxtb	r3, r3
 8008294:	2b01      	cmp	r3, #1
 8008296:	d001      	beq.n	800829c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008298:	2301      	movs	r3, #1
 800829a:	e054      	b.n	8008346 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2202      	movs	r2, #2
 80082a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	68da      	ldr	r2, [r3, #12]
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f042 0201 	orr.w	r2, r2, #1
 80082b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	4a26      	ldr	r2, [pc, #152]	@ (8008354 <HAL_TIM_Base_Start_IT+0xd0>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d022      	beq.n	8008304 <HAL_TIM_Base_Start_IT+0x80>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082c6:	d01d      	beq.n	8008304 <HAL_TIM_Base_Start_IT+0x80>
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4a22      	ldr	r2, [pc, #136]	@ (8008358 <HAL_TIM_Base_Start_IT+0xd4>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d018      	beq.n	8008304 <HAL_TIM_Base_Start_IT+0x80>
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	4a21      	ldr	r2, [pc, #132]	@ (800835c <HAL_TIM_Base_Start_IT+0xd8>)
 80082d8:	4293      	cmp	r3, r2
 80082da:	d013      	beq.n	8008304 <HAL_TIM_Base_Start_IT+0x80>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4a1f      	ldr	r2, [pc, #124]	@ (8008360 <HAL_TIM_Base_Start_IT+0xdc>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d00e      	beq.n	8008304 <HAL_TIM_Base_Start_IT+0x80>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	4a1e      	ldr	r2, [pc, #120]	@ (8008364 <HAL_TIM_Base_Start_IT+0xe0>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d009      	beq.n	8008304 <HAL_TIM_Base_Start_IT+0x80>
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	4a1c      	ldr	r2, [pc, #112]	@ (8008368 <HAL_TIM_Base_Start_IT+0xe4>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d004      	beq.n	8008304 <HAL_TIM_Base_Start_IT+0x80>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	4a1b      	ldr	r2, [pc, #108]	@ (800836c <HAL_TIM_Base_Start_IT+0xe8>)
 8008300:	4293      	cmp	r3, r2
 8008302:	d115      	bne.n	8008330 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	689a      	ldr	r2, [r3, #8]
 800830a:	4b19      	ldr	r3, [pc, #100]	@ (8008370 <HAL_TIM_Base_Start_IT+0xec>)
 800830c:	4013      	ands	r3, r2
 800830e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	2b06      	cmp	r3, #6
 8008314:	d015      	beq.n	8008342 <HAL_TIM_Base_Start_IT+0xbe>
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800831c:	d011      	beq.n	8008342 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	681a      	ldr	r2, [r3, #0]
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f042 0201 	orr.w	r2, r2, #1
 800832c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800832e:	e008      	b.n	8008342 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	681a      	ldr	r2, [r3, #0]
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f042 0201 	orr.w	r2, r2, #1
 800833e:	601a      	str	r2, [r3, #0]
 8008340:	e000      	b.n	8008344 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008342:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008344:	2300      	movs	r3, #0
}
 8008346:	4618      	mov	r0, r3
 8008348:	3714      	adds	r7, #20
 800834a:	46bd      	mov	sp, r7
 800834c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008350:	4770      	bx	lr
 8008352:	bf00      	nop
 8008354:	40010000 	.word	0x40010000
 8008358:	40000400 	.word	0x40000400
 800835c:	40000800 	.word	0x40000800
 8008360:	40000c00 	.word	0x40000c00
 8008364:	40010400 	.word	0x40010400
 8008368:	40001800 	.word	0x40001800
 800836c:	40014000 	.word	0x40014000
 8008370:	00010007 	.word	0x00010007

08008374 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b084      	sub	sp, #16
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	68db      	ldr	r3, [r3, #12]
 8008382:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	691b      	ldr	r3, [r3, #16]
 800838a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	f003 0302 	and.w	r3, r3, #2
 8008392:	2b00      	cmp	r3, #0
 8008394:	d020      	beq.n	80083d8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	f003 0302 	and.w	r3, r3, #2
 800839c:	2b00      	cmp	r3, #0
 800839e:	d01b      	beq.n	80083d8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f06f 0202 	mvn.w	r2, #2
 80083a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2201      	movs	r2, #1
 80083ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	699b      	ldr	r3, [r3, #24]
 80083b6:	f003 0303 	and.w	r3, r3, #3
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d003      	beq.n	80083c6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f000 f8e9 	bl	8008596 <HAL_TIM_IC_CaptureCallback>
 80083c4:	e005      	b.n	80083d2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f000 f8db 	bl	8008582 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f000 f8ec 	bl	80085aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2200      	movs	r2, #0
 80083d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	f003 0304 	and.w	r3, r3, #4
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d020      	beq.n	8008424 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	f003 0304 	and.w	r3, r3, #4
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d01b      	beq.n	8008424 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f06f 0204 	mvn.w	r2, #4
 80083f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2202      	movs	r2, #2
 80083fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	699b      	ldr	r3, [r3, #24]
 8008402:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008406:	2b00      	cmp	r3, #0
 8008408:	d003      	beq.n	8008412 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f000 f8c3 	bl	8008596 <HAL_TIM_IC_CaptureCallback>
 8008410:	e005      	b.n	800841e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f000 f8b5 	bl	8008582 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f000 f8c6 	bl	80085aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2200      	movs	r2, #0
 8008422:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	f003 0308 	and.w	r3, r3, #8
 800842a:	2b00      	cmp	r3, #0
 800842c:	d020      	beq.n	8008470 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	f003 0308 	and.w	r3, r3, #8
 8008434:	2b00      	cmp	r3, #0
 8008436:	d01b      	beq.n	8008470 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f06f 0208 	mvn.w	r2, #8
 8008440:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2204      	movs	r2, #4
 8008446:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	69db      	ldr	r3, [r3, #28]
 800844e:	f003 0303 	and.w	r3, r3, #3
 8008452:	2b00      	cmp	r3, #0
 8008454:	d003      	beq.n	800845e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f000 f89d 	bl	8008596 <HAL_TIM_IC_CaptureCallback>
 800845c:	e005      	b.n	800846a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f000 f88f 	bl	8008582 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f000 f8a0 	bl	80085aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2200      	movs	r2, #0
 800846e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	f003 0310 	and.w	r3, r3, #16
 8008476:	2b00      	cmp	r3, #0
 8008478:	d020      	beq.n	80084bc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	f003 0310 	and.w	r3, r3, #16
 8008480:	2b00      	cmp	r3, #0
 8008482:	d01b      	beq.n	80084bc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f06f 0210 	mvn.w	r2, #16
 800848c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2208      	movs	r2, #8
 8008492:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	69db      	ldr	r3, [r3, #28]
 800849a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d003      	beq.n	80084aa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f000 f877 	bl	8008596 <HAL_TIM_IC_CaptureCallback>
 80084a8:	e005      	b.n	80084b6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f000 f869 	bl	8008582 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f000 f87a 	bl	80085aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2200      	movs	r2, #0
 80084ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	f003 0301 	and.w	r3, r3, #1
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d00c      	beq.n	80084e0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	f003 0301 	and.w	r3, r3, #1
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d007      	beq.n	80084e0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f06f 0201 	mvn.w	r2, #1
 80084d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f7f9 f83c 	bl	8001558 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d104      	bne.n	80084f4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d00c      	beq.n	800850e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d007      	beq.n	800850e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008506:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f000 f99b 	bl	8008844 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008514:	2b00      	cmp	r3, #0
 8008516:	d00c      	beq.n	8008532 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800851e:	2b00      	cmp	r3, #0
 8008520:	d007      	beq.n	8008532 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800852a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f000 f993 	bl	8008858 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008538:	2b00      	cmp	r3, #0
 800853a:	d00c      	beq.n	8008556 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008542:	2b00      	cmp	r3, #0
 8008544:	d007      	beq.n	8008556 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800854e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f000 f834 	bl	80085be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	f003 0320 	and.w	r3, r3, #32
 800855c:	2b00      	cmp	r3, #0
 800855e:	d00c      	beq.n	800857a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	f003 0320 	and.w	r3, r3, #32
 8008566:	2b00      	cmp	r3, #0
 8008568:	d007      	beq.n	800857a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f06f 0220 	mvn.w	r2, #32
 8008572:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008574:	6878      	ldr	r0, [r7, #4]
 8008576:	f000 f95b 	bl	8008830 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800857a:	bf00      	nop
 800857c:	3710      	adds	r7, #16
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}

08008582 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008582:	b480      	push	{r7}
 8008584:	b083      	sub	sp, #12
 8008586:	af00      	add	r7, sp, #0
 8008588:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800858a:	bf00      	nop
 800858c:	370c      	adds	r7, #12
 800858e:	46bd      	mov	sp, r7
 8008590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008594:	4770      	bx	lr

08008596 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008596:	b480      	push	{r7}
 8008598:	b083      	sub	sp, #12
 800859a:	af00      	add	r7, sp, #0
 800859c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800859e:	bf00      	nop
 80085a0:	370c      	adds	r7, #12
 80085a2:	46bd      	mov	sp, r7
 80085a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a8:	4770      	bx	lr

080085aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80085aa:	b480      	push	{r7}
 80085ac:	b083      	sub	sp, #12
 80085ae:	af00      	add	r7, sp, #0
 80085b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80085b2:	bf00      	nop
 80085b4:	370c      	adds	r7, #12
 80085b6:	46bd      	mov	sp, r7
 80085b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085bc:	4770      	bx	lr

080085be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80085be:	b480      	push	{r7}
 80085c0:	b083      	sub	sp, #12
 80085c2:	af00      	add	r7, sp, #0
 80085c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80085c6:	bf00      	nop
 80085c8:	370c      	adds	r7, #12
 80085ca:	46bd      	mov	sp, r7
 80085cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d0:	4770      	bx	lr
	...

080085d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80085d4:	b480      	push	{r7}
 80085d6:	b085      	sub	sp, #20
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
 80085dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	4a43      	ldr	r2, [pc, #268]	@ (80086f4 <TIM_Base_SetConfig+0x120>)
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d013      	beq.n	8008614 <TIM_Base_SetConfig+0x40>
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80085f2:	d00f      	beq.n	8008614 <TIM_Base_SetConfig+0x40>
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	4a40      	ldr	r2, [pc, #256]	@ (80086f8 <TIM_Base_SetConfig+0x124>)
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d00b      	beq.n	8008614 <TIM_Base_SetConfig+0x40>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	4a3f      	ldr	r2, [pc, #252]	@ (80086fc <TIM_Base_SetConfig+0x128>)
 8008600:	4293      	cmp	r3, r2
 8008602:	d007      	beq.n	8008614 <TIM_Base_SetConfig+0x40>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	4a3e      	ldr	r2, [pc, #248]	@ (8008700 <TIM_Base_SetConfig+0x12c>)
 8008608:	4293      	cmp	r3, r2
 800860a:	d003      	beq.n	8008614 <TIM_Base_SetConfig+0x40>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	4a3d      	ldr	r2, [pc, #244]	@ (8008704 <TIM_Base_SetConfig+0x130>)
 8008610:	4293      	cmp	r3, r2
 8008612:	d108      	bne.n	8008626 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800861a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	685b      	ldr	r3, [r3, #4]
 8008620:	68fa      	ldr	r2, [r7, #12]
 8008622:	4313      	orrs	r3, r2
 8008624:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	4a32      	ldr	r2, [pc, #200]	@ (80086f4 <TIM_Base_SetConfig+0x120>)
 800862a:	4293      	cmp	r3, r2
 800862c:	d01f      	beq.n	800866e <TIM_Base_SetConfig+0x9a>
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008634:	d01b      	beq.n	800866e <TIM_Base_SetConfig+0x9a>
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	4a2f      	ldr	r2, [pc, #188]	@ (80086f8 <TIM_Base_SetConfig+0x124>)
 800863a:	4293      	cmp	r3, r2
 800863c:	d017      	beq.n	800866e <TIM_Base_SetConfig+0x9a>
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	4a2e      	ldr	r2, [pc, #184]	@ (80086fc <TIM_Base_SetConfig+0x128>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d013      	beq.n	800866e <TIM_Base_SetConfig+0x9a>
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	4a2d      	ldr	r2, [pc, #180]	@ (8008700 <TIM_Base_SetConfig+0x12c>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d00f      	beq.n	800866e <TIM_Base_SetConfig+0x9a>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	4a2c      	ldr	r2, [pc, #176]	@ (8008704 <TIM_Base_SetConfig+0x130>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d00b      	beq.n	800866e <TIM_Base_SetConfig+0x9a>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	4a2b      	ldr	r2, [pc, #172]	@ (8008708 <TIM_Base_SetConfig+0x134>)
 800865a:	4293      	cmp	r3, r2
 800865c:	d007      	beq.n	800866e <TIM_Base_SetConfig+0x9a>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	4a2a      	ldr	r2, [pc, #168]	@ (800870c <TIM_Base_SetConfig+0x138>)
 8008662:	4293      	cmp	r3, r2
 8008664:	d003      	beq.n	800866e <TIM_Base_SetConfig+0x9a>
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	4a29      	ldr	r2, [pc, #164]	@ (8008710 <TIM_Base_SetConfig+0x13c>)
 800866a:	4293      	cmp	r3, r2
 800866c:	d108      	bne.n	8008680 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008674:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	68db      	ldr	r3, [r3, #12]
 800867a:	68fa      	ldr	r2, [r7, #12]
 800867c:	4313      	orrs	r3, r2
 800867e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	695b      	ldr	r3, [r3, #20]
 800868a:	4313      	orrs	r3, r2
 800868c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	689a      	ldr	r2, [r3, #8]
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	681a      	ldr	r2, [r3, #0]
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	4a14      	ldr	r2, [pc, #80]	@ (80086f4 <TIM_Base_SetConfig+0x120>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d00f      	beq.n	80086c6 <TIM_Base_SetConfig+0xf2>
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	4a16      	ldr	r2, [pc, #88]	@ (8008704 <TIM_Base_SetConfig+0x130>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d00b      	beq.n	80086c6 <TIM_Base_SetConfig+0xf2>
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	4a15      	ldr	r2, [pc, #84]	@ (8008708 <TIM_Base_SetConfig+0x134>)
 80086b2:	4293      	cmp	r3, r2
 80086b4:	d007      	beq.n	80086c6 <TIM_Base_SetConfig+0xf2>
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	4a14      	ldr	r2, [pc, #80]	@ (800870c <TIM_Base_SetConfig+0x138>)
 80086ba:	4293      	cmp	r3, r2
 80086bc:	d003      	beq.n	80086c6 <TIM_Base_SetConfig+0xf2>
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	4a13      	ldr	r2, [pc, #76]	@ (8008710 <TIM_Base_SetConfig+0x13c>)
 80086c2:	4293      	cmp	r3, r2
 80086c4:	d103      	bne.n	80086ce <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	691a      	ldr	r2, [r3, #16]
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f043 0204 	orr.w	r2, r3, #4
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2201      	movs	r2, #1
 80086de:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	68fa      	ldr	r2, [r7, #12]
 80086e4:	601a      	str	r2, [r3, #0]
}
 80086e6:	bf00      	nop
 80086e8:	3714      	adds	r7, #20
 80086ea:	46bd      	mov	sp, r7
 80086ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f0:	4770      	bx	lr
 80086f2:	bf00      	nop
 80086f4:	40010000 	.word	0x40010000
 80086f8:	40000400 	.word	0x40000400
 80086fc:	40000800 	.word	0x40000800
 8008700:	40000c00 	.word	0x40000c00
 8008704:	40010400 	.word	0x40010400
 8008708:	40014000 	.word	0x40014000
 800870c:	40014400 	.word	0x40014400
 8008710:	40014800 	.word	0x40014800

08008714 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008714:	b480      	push	{r7}
 8008716:	b085      	sub	sp, #20
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
 800871c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008724:	2b01      	cmp	r3, #1
 8008726:	d101      	bne.n	800872c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008728:	2302      	movs	r3, #2
 800872a:	e06d      	b.n	8008808 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2201      	movs	r2, #1
 8008730:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2202      	movs	r2, #2
 8008738:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	685b      	ldr	r3, [r3, #4]
 8008742:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	689b      	ldr	r3, [r3, #8]
 800874a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	4a30      	ldr	r2, [pc, #192]	@ (8008814 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008752:	4293      	cmp	r3, r2
 8008754:	d004      	beq.n	8008760 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	4a2f      	ldr	r2, [pc, #188]	@ (8008818 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800875c:	4293      	cmp	r3, r2
 800875e:	d108      	bne.n	8008772 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008766:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	685b      	ldr	r3, [r3, #4]
 800876c:	68fa      	ldr	r2, [r7, #12]
 800876e:	4313      	orrs	r3, r2
 8008770:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008778:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	68fa      	ldr	r2, [r7, #12]
 8008780:	4313      	orrs	r3, r2
 8008782:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	68fa      	ldr	r2, [r7, #12]
 800878a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	4a20      	ldr	r2, [pc, #128]	@ (8008814 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008792:	4293      	cmp	r3, r2
 8008794:	d022      	beq.n	80087dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800879e:	d01d      	beq.n	80087dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	4a1d      	ldr	r2, [pc, #116]	@ (800881c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d018      	beq.n	80087dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	4a1c      	ldr	r2, [pc, #112]	@ (8008820 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d013      	beq.n	80087dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4a1a      	ldr	r2, [pc, #104]	@ (8008824 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d00e      	beq.n	80087dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	4a15      	ldr	r2, [pc, #84]	@ (8008818 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d009      	beq.n	80087dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	4a16      	ldr	r2, [pc, #88]	@ (8008828 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d004      	beq.n	80087dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	4a15      	ldr	r2, [pc, #84]	@ (800882c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80087d8:	4293      	cmp	r3, r2
 80087da:	d10c      	bne.n	80087f6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80087e2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	689b      	ldr	r3, [r3, #8]
 80087e8:	68ba      	ldr	r2, [r7, #8]
 80087ea:	4313      	orrs	r3, r2
 80087ec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	68ba      	ldr	r2, [r7, #8]
 80087f4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2201      	movs	r2, #1
 80087fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2200      	movs	r2, #0
 8008802:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008806:	2300      	movs	r3, #0
}
 8008808:	4618      	mov	r0, r3
 800880a:	3714      	adds	r7, #20
 800880c:	46bd      	mov	sp, r7
 800880e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008812:	4770      	bx	lr
 8008814:	40010000 	.word	0x40010000
 8008818:	40010400 	.word	0x40010400
 800881c:	40000400 	.word	0x40000400
 8008820:	40000800 	.word	0x40000800
 8008824:	40000c00 	.word	0x40000c00
 8008828:	40001800 	.word	0x40001800
 800882c:	40014000 	.word	0x40014000

08008830 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008830:	b480      	push	{r7}
 8008832:	b083      	sub	sp, #12
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008838:	bf00      	nop
 800883a:	370c      	adds	r7, #12
 800883c:	46bd      	mov	sp, r7
 800883e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008842:	4770      	bx	lr

08008844 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008844:	b480      	push	{r7}
 8008846:	b083      	sub	sp, #12
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800884c:	bf00      	nop
 800884e:	370c      	adds	r7, #12
 8008850:	46bd      	mov	sp, r7
 8008852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008856:	4770      	bx	lr

08008858 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008858:	b480      	push	{r7}
 800885a:	b083      	sub	sp, #12
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008860:	bf00      	nop
 8008862:	370c      	adds	r7, #12
 8008864:	46bd      	mov	sp, r7
 8008866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886a:	4770      	bx	lr

0800886c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b082      	sub	sp, #8
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d101      	bne.n	800887e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800887a:	2301      	movs	r3, #1
 800887c:	e042      	b.n	8008904 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008884:	2b00      	cmp	r3, #0
 8008886:	d106      	bne.n	8008896 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2200      	movs	r2, #0
 800888c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008890:	6878      	ldr	r0, [r7, #4]
 8008892:	f7f8 fecf 	bl	8001634 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2224      	movs	r2, #36	@ 0x24
 800889a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	681a      	ldr	r2, [r3, #0]
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f022 0201 	bic.w	r2, r2, #1
 80088ac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d002      	beq.n	80088bc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f001 fa74 	bl	8009da4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f000 fd09 	bl	80092d4 <UART_SetConfig>
 80088c2:	4603      	mov	r3, r0
 80088c4:	2b01      	cmp	r3, #1
 80088c6:	d101      	bne.n	80088cc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80088c8:	2301      	movs	r3, #1
 80088ca:	e01b      	b.n	8008904 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	685a      	ldr	r2, [r3, #4]
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80088da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	689a      	ldr	r2, [r3, #8]
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80088ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	681a      	ldr	r2, [r3, #0]
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f042 0201 	orr.w	r2, r2, #1
 80088fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f001 faf3 	bl	8009ee8 <UART_CheckIdleState>
 8008902:	4603      	mov	r3, r0
}
 8008904:	4618      	mov	r0, r3
 8008906:	3708      	adds	r7, #8
 8008908:	46bd      	mov	sp, r7
 800890a:	bd80      	pop	{r7, pc}

0800890c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b08a      	sub	sp, #40	@ 0x28
 8008910:	af02      	add	r7, sp, #8
 8008912:	60f8      	str	r0, [r7, #12]
 8008914:	60b9      	str	r1, [r7, #8]
 8008916:	603b      	str	r3, [r7, #0]
 8008918:	4613      	mov	r3, r2
 800891a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008922:	2b20      	cmp	r3, #32
 8008924:	d17b      	bne.n	8008a1e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d002      	beq.n	8008932 <HAL_UART_Transmit+0x26>
 800892c:	88fb      	ldrh	r3, [r7, #6]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d101      	bne.n	8008936 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008932:	2301      	movs	r3, #1
 8008934:	e074      	b.n	8008a20 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	2200      	movs	r2, #0
 800893a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	2221      	movs	r2, #33	@ 0x21
 8008942:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008946:	f7f9 fc31 	bl	80021ac <HAL_GetTick>
 800894a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	88fa      	ldrh	r2, [r7, #6]
 8008950:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	88fa      	ldrh	r2, [r7, #6]
 8008958:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	689b      	ldr	r3, [r3, #8]
 8008960:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008964:	d108      	bne.n	8008978 <HAL_UART_Transmit+0x6c>
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	691b      	ldr	r3, [r3, #16]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d104      	bne.n	8008978 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800896e:	2300      	movs	r3, #0
 8008970:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	61bb      	str	r3, [r7, #24]
 8008976:	e003      	b.n	8008980 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800897c:	2300      	movs	r3, #0
 800897e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008980:	e030      	b.n	80089e4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	9300      	str	r3, [sp, #0]
 8008986:	697b      	ldr	r3, [r7, #20]
 8008988:	2200      	movs	r2, #0
 800898a:	2180      	movs	r1, #128	@ 0x80
 800898c:	68f8      	ldr	r0, [r7, #12]
 800898e:	f001 fb55 	bl	800a03c <UART_WaitOnFlagUntilTimeout>
 8008992:	4603      	mov	r3, r0
 8008994:	2b00      	cmp	r3, #0
 8008996:	d005      	beq.n	80089a4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	2220      	movs	r2, #32
 800899c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80089a0:	2303      	movs	r3, #3
 80089a2:	e03d      	b.n	8008a20 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80089a4:	69fb      	ldr	r3, [r7, #28]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d10b      	bne.n	80089c2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80089aa:	69bb      	ldr	r3, [r7, #24]
 80089ac:	881b      	ldrh	r3, [r3, #0]
 80089ae:	461a      	mov	r2, r3
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80089b8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80089ba:	69bb      	ldr	r3, [r7, #24]
 80089bc:	3302      	adds	r3, #2
 80089be:	61bb      	str	r3, [r7, #24]
 80089c0:	e007      	b.n	80089d2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80089c2:	69fb      	ldr	r3, [r7, #28]
 80089c4:	781a      	ldrb	r2, [r3, #0]
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80089cc:	69fb      	ldr	r3, [r7, #28]
 80089ce:	3301      	adds	r3, #1
 80089d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80089d8:	b29b      	uxth	r3, r3
 80089da:	3b01      	subs	r3, #1
 80089dc:	b29a      	uxth	r2, r3
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80089ea:	b29b      	uxth	r3, r3
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d1c8      	bne.n	8008982 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	9300      	str	r3, [sp, #0]
 80089f4:	697b      	ldr	r3, [r7, #20]
 80089f6:	2200      	movs	r2, #0
 80089f8:	2140      	movs	r1, #64	@ 0x40
 80089fa:	68f8      	ldr	r0, [r7, #12]
 80089fc:	f001 fb1e 	bl	800a03c <UART_WaitOnFlagUntilTimeout>
 8008a00:	4603      	mov	r3, r0
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d005      	beq.n	8008a12 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	2220      	movs	r2, #32
 8008a0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8008a0e:	2303      	movs	r3, #3
 8008a10:	e006      	b.n	8008a20 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	2220      	movs	r2, #32
 8008a16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	e000      	b.n	8008a20 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008a1e:	2302      	movs	r3, #2
  }
}
 8008a20:	4618      	mov	r0, r3
 8008a22:	3720      	adds	r7, #32
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bd80      	pop	{r7, pc}

08008a28 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b08a      	sub	sp, #40	@ 0x28
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	60f8      	str	r0, [r7, #12]
 8008a30:	60b9      	str	r1, [r7, #8]
 8008a32:	4613      	mov	r3, r2
 8008a34:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008a3c:	2b20      	cmp	r3, #32
 8008a3e:	d137      	bne.n	8008ab0 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d002      	beq.n	8008a4c <HAL_UART_Receive_DMA+0x24>
 8008a46:	88fb      	ldrh	r3, [r7, #6]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d101      	bne.n	8008a50 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8008a4c:	2301      	movs	r3, #1
 8008a4e:	e030      	b.n	8008ab2 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	2200      	movs	r2, #0
 8008a54:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	4a18      	ldr	r2, [pc, #96]	@ (8008abc <HAL_UART_Receive_DMA+0x94>)
 8008a5c:	4293      	cmp	r3, r2
 8008a5e:	d01f      	beq.n	8008aa0 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	685b      	ldr	r3, [r3, #4]
 8008a66:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d018      	beq.n	8008aa0 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a74:	697b      	ldr	r3, [r7, #20]
 8008a76:	e853 3f00 	ldrex	r3, [r3]
 8008a7a:	613b      	str	r3, [r7, #16]
   return(result);
 8008a7c:	693b      	ldr	r3, [r7, #16]
 8008a7e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008a82:	627b      	str	r3, [r7, #36]	@ 0x24
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	461a      	mov	r2, r3
 8008a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a8c:	623b      	str	r3, [r7, #32]
 8008a8e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a90:	69f9      	ldr	r1, [r7, #28]
 8008a92:	6a3a      	ldr	r2, [r7, #32]
 8008a94:	e841 2300 	strex	r3, r2, [r1]
 8008a98:	61bb      	str	r3, [r7, #24]
   return(result);
 8008a9a:	69bb      	ldr	r3, [r7, #24]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d1e6      	bne.n	8008a6e <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008aa0:	88fb      	ldrh	r3, [r7, #6]
 8008aa2:	461a      	mov	r2, r3
 8008aa4:	68b9      	ldr	r1, [r7, #8]
 8008aa6:	68f8      	ldr	r0, [r7, #12]
 8008aa8:	f001 fb36 	bl	800a118 <UART_Start_Receive_DMA>
 8008aac:	4603      	mov	r3, r0
 8008aae:	e000      	b.n	8008ab2 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008ab0:	2302      	movs	r3, #2
  }
}
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	3728      	adds	r7, #40	@ 0x28
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bd80      	pop	{r7, pc}
 8008aba:	bf00      	nop
 8008abc:	58000c00 	.word	0x58000c00

08008ac0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b0ba      	sub	sp, #232	@ 0xe8
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	69db      	ldr	r3, [r3, #28]
 8008ace:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	689b      	ldr	r3, [r3, #8]
 8008ae2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008ae6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008aea:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008aee:	4013      	ands	r3, r2
 8008af0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008af4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d11b      	bne.n	8008b34 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008afc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b00:	f003 0320 	and.w	r3, r3, #32
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d015      	beq.n	8008b34 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008b08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b0c:	f003 0320 	and.w	r3, r3, #32
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d105      	bne.n	8008b20 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008b14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008b18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d009      	beq.n	8008b34 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	f000 8393 	beq.w	8009250 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	4798      	blx	r3
      }
      return;
 8008b32:	e38d      	b.n	8009250 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008b34:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	f000 8123 	beq.w	8008d84 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008b3e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008b42:	4b8d      	ldr	r3, [pc, #564]	@ (8008d78 <HAL_UART_IRQHandler+0x2b8>)
 8008b44:	4013      	ands	r3, r2
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d106      	bne.n	8008b58 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008b4a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008b4e:	4b8b      	ldr	r3, [pc, #556]	@ (8008d7c <HAL_UART_IRQHandler+0x2bc>)
 8008b50:	4013      	ands	r3, r2
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	f000 8116 	beq.w	8008d84 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008b58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b5c:	f003 0301 	and.w	r3, r3, #1
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d011      	beq.n	8008b88 <HAL_UART_IRQHandler+0xc8>
 8008b64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d00b      	beq.n	8008b88 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	2201      	movs	r2, #1
 8008b76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b7e:	f043 0201 	orr.w	r2, r3, #1
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008b88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b8c:	f003 0302 	and.w	r3, r3, #2
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d011      	beq.n	8008bb8 <HAL_UART_IRQHandler+0xf8>
 8008b94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008b98:	f003 0301 	and.w	r3, r3, #1
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d00b      	beq.n	8008bb8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	2202      	movs	r2, #2
 8008ba6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008bae:	f043 0204 	orr.w	r2, r3, #4
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008bb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008bbc:	f003 0304 	and.w	r3, r3, #4
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d011      	beq.n	8008be8 <HAL_UART_IRQHandler+0x128>
 8008bc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008bc8:	f003 0301 	and.w	r3, r3, #1
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d00b      	beq.n	8008be8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	2204      	movs	r2, #4
 8008bd6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008bde:	f043 0202 	orr.w	r2, r3, #2
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008be8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008bec:	f003 0308 	and.w	r3, r3, #8
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d017      	beq.n	8008c24 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008bf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008bf8:	f003 0320 	and.w	r3, r3, #32
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d105      	bne.n	8008c0c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008c00:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008c04:	4b5c      	ldr	r3, [pc, #368]	@ (8008d78 <HAL_UART_IRQHandler+0x2b8>)
 8008c06:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d00b      	beq.n	8008c24 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	2208      	movs	r2, #8
 8008c12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c1a:	f043 0208 	orr.w	r2, r3, #8
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008c24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d012      	beq.n	8008c56 <HAL_UART_IRQHandler+0x196>
 8008c30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c34:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d00c      	beq.n	8008c56 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008c44:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c4c:	f043 0220 	orr.w	r2, r3, #32
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	f000 82f9 	beq.w	8009254 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008c62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c66:	f003 0320 	and.w	r3, r3, #32
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d013      	beq.n	8008c96 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008c6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c72:	f003 0320 	and.w	r3, r3, #32
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d105      	bne.n	8008c86 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008c7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008c7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d007      	beq.n	8008c96 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d003      	beq.n	8008c96 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c9c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	689b      	ldr	r3, [r3, #8]
 8008ca6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008caa:	2b40      	cmp	r3, #64	@ 0x40
 8008cac:	d005      	beq.n	8008cba <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008cae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008cb2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d054      	beq.n	8008d64 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008cba:	6878      	ldr	r0, [r7, #4]
 8008cbc:	f001 fb14 	bl	800a2e8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	689b      	ldr	r3, [r3, #8]
 8008cc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cca:	2b40      	cmp	r3, #64	@ 0x40
 8008ccc:	d146      	bne.n	8008d5c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	3308      	adds	r3, #8
 8008cd4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cd8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008cdc:	e853 3f00 	ldrex	r3, [r3]
 8008ce0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008ce4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008ce8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008cec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	3308      	adds	r3, #8
 8008cf6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008cfa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008cfe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d02:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008d06:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008d0a:	e841 2300 	strex	r3, r2, [r1]
 8008d0e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008d12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d1d9      	bne.n	8008cce <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d017      	beq.n	8008d54 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d2a:	4a15      	ldr	r2, [pc, #84]	@ (8008d80 <HAL_UART_IRQHandler+0x2c0>)
 8008d2c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d34:	4618      	mov	r0, r3
 8008d36:	f7fa fc39 	bl	80035ac <HAL_DMA_Abort_IT>
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d019      	beq.n	8008d74 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d48:	687a      	ldr	r2, [r7, #4]
 8008d4a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8008d4e:	4610      	mov	r0, r2
 8008d50:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d52:	e00f      	b.n	8008d74 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f000 faa7 	bl	80092a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d5a:	e00b      	b.n	8008d74 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	f000 faa3 	bl	80092a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d62:	e007      	b.n	8008d74 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f000 fa9f 	bl	80092a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8008d72:	e26f      	b.n	8009254 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d74:	bf00      	nop
    return;
 8008d76:	e26d      	b.n	8009254 <HAL_UART_IRQHandler+0x794>
 8008d78:	10000001 	.word	0x10000001
 8008d7c:	04000120 	.word	0x04000120
 8008d80:	0800a59b 	.word	0x0800a59b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008d88:	2b01      	cmp	r3, #1
 8008d8a:	f040 8203 	bne.w	8009194 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008d8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d92:	f003 0310 	and.w	r3, r3, #16
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	f000 81fc 	beq.w	8009194 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008d9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008da0:	f003 0310 	and.w	r3, r3, #16
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	f000 81f5 	beq.w	8009194 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	2210      	movs	r2, #16
 8008db0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	689b      	ldr	r3, [r3, #8]
 8008db8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008dbc:	2b40      	cmp	r3, #64	@ 0x40
 8008dbe:	f040 816d 	bne.w	800909c <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	4aa4      	ldr	r2, [pc, #656]	@ (800905c <HAL_UART_IRQHandler+0x59c>)
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	d068      	beq.n	8008ea2 <HAL_UART_IRQHandler+0x3e2>
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	4aa1      	ldr	r2, [pc, #644]	@ (8009060 <HAL_UART_IRQHandler+0x5a0>)
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	d061      	beq.n	8008ea2 <HAL_UART_IRQHandler+0x3e2>
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	4a9f      	ldr	r2, [pc, #636]	@ (8009064 <HAL_UART_IRQHandler+0x5a4>)
 8008de8:	4293      	cmp	r3, r2
 8008dea:	d05a      	beq.n	8008ea2 <HAL_UART_IRQHandler+0x3e2>
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	4a9c      	ldr	r2, [pc, #624]	@ (8009068 <HAL_UART_IRQHandler+0x5a8>)
 8008df6:	4293      	cmp	r3, r2
 8008df8:	d053      	beq.n	8008ea2 <HAL_UART_IRQHandler+0x3e2>
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	4a9a      	ldr	r2, [pc, #616]	@ (800906c <HAL_UART_IRQHandler+0x5ac>)
 8008e04:	4293      	cmp	r3, r2
 8008e06:	d04c      	beq.n	8008ea2 <HAL_UART_IRQHandler+0x3e2>
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	4a97      	ldr	r2, [pc, #604]	@ (8009070 <HAL_UART_IRQHandler+0x5b0>)
 8008e12:	4293      	cmp	r3, r2
 8008e14:	d045      	beq.n	8008ea2 <HAL_UART_IRQHandler+0x3e2>
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	4a95      	ldr	r2, [pc, #596]	@ (8009074 <HAL_UART_IRQHandler+0x5b4>)
 8008e20:	4293      	cmp	r3, r2
 8008e22:	d03e      	beq.n	8008ea2 <HAL_UART_IRQHandler+0x3e2>
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	4a92      	ldr	r2, [pc, #584]	@ (8009078 <HAL_UART_IRQHandler+0x5b8>)
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	d037      	beq.n	8008ea2 <HAL_UART_IRQHandler+0x3e2>
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	4a90      	ldr	r2, [pc, #576]	@ (800907c <HAL_UART_IRQHandler+0x5bc>)
 8008e3c:	4293      	cmp	r3, r2
 8008e3e:	d030      	beq.n	8008ea2 <HAL_UART_IRQHandler+0x3e2>
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	4a8d      	ldr	r2, [pc, #564]	@ (8009080 <HAL_UART_IRQHandler+0x5c0>)
 8008e4a:	4293      	cmp	r3, r2
 8008e4c:	d029      	beq.n	8008ea2 <HAL_UART_IRQHandler+0x3e2>
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	4a8b      	ldr	r2, [pc, #556]	@ (8009084 <HAL_UART_IRQHandler+0x5c4>)
 8008e58:	4293      	cmp	r3, r2
 8008e5a:	d022      	beq.n	8008ea2 <HAL_UART_IRQHandler+0x3e2>
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	4a88      	ldr	r2, [pc, #544]	@ (8009088 <HAL_UART_IRQHandler+0x5c8>)
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d01b      	beq.n	8008ea2 <HAL_UART_IRQHandler+0x3e2>
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	4a86      	ldr	r2, [pc, #536]	@ (800908c <HAL_UART_IRQHandler+0x5cc>)
 8008e74:	4293      	cmp	r3, r2
 8008e76:	d014      	beq.n	8008ea2 <HAL_UART_IRQHandler+0x3e2>
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	4a83      	ldr	r2, [pc, #524]	@ (8009090 <HAL_UART_IRQHandler+0x5d0>)
 8008e82:	4293      	cmp	r3, r2
 8008e84:	d00d      	beq.n	8008ea2 <HAL_UART_IRQHandler+0x3e2>
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	4a81      	ldr	r2, [pc, #516]	@ (8009094 <HAL_UART_IRQHandler+0x5d4>)
 8008e90:	4293      	cmp	r3, r2
 8008e92:	d006      	beq.n	8008ea2 <HAL_UART_IRQHandler+0x3e2>
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	4a7e      	ldr	r2, [pc, #504]	@ (8009098 <HAL_UART_IRQHandler+0x5d8>)
 8008e9e:	4293      	cmp	r3, r2
 8008ea0:	d106      	bne.n	8008eb0 <HAL_UART_IRQHandler+0x3f0>
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	685b      	ldr	r3, [r3, #4]
 8008eac:	b29b      	uxth	r3, r3
 8008eae:	e005      	b.n	8008ebc <HAL_UART_IRQHandler+0x3fc>
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	685b      	ldr	r3, [r3, #4]
 8008eba:	b29b      	uxth	r3, r3
 8008ebc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008ec0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	f000 80ad 	beq.w	8009024 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008ed0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008ed4:	429a      	cmp	r2, r3
 8008ed6:	f080 80a5 	bcs.w	8009024 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008ee0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008eea:	69db      	ldr	r3, [r3, #28]
 8008eec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ef0:	f000 8087 	beq.w	8009002 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008efc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008f00:	e853 3f00 	ldrex	r3, [r3]
 8008f04:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008f08:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008f0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008f10:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	461a      	mov	r2, r3
 8008f1a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008f1e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008f22:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f26:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008f2a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008f2e:	e841 2300 	strex	r3, r2, [r1]
 8008f32:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008f36:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d1da      	bne.n	8008ef4 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	3308      	adds	r3, #8
 8008f44:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f46:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008f48:	e853 3f00 	ldrex	r3, [r3]
 8008f4c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008f4e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008f50:	f023 0301 	bic.w	r3, r3, #1
 8008f54:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	3308      	adds	r3, #8
 8008f5e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008f62:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008f66:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f68:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008f6a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008f6e:	e841 2300 	strex	r3, r2, [r1]
 8008f72:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008f74:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d1e1      	bne.n	8008f3e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	3308      	adds	r3, #8
 8008f80:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f82:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008f84:	e853 3f00 	ldrex	r3, [r3]
 8008f88:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008f8a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008f8c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008f90:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	3308      	adds	r3, #8
 8008f9a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008f9e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008fa0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fa2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008fa4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008fa6:	e841 2300 	strex	r3, r2, [r1]
 8008faa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008fac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d1e3      	bne.n	8008f7a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	2220      	movs	r2, #32
 8008fb6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fc6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008fc8:	e853 3f00 	ldrex	r3, [r3]
 8008fcc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008fce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008fd0:	f023 0310 	bic.w	r3, r3, #16
 8008fd4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	461a      	mov	r2, r3
 8008fde:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008fe2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008fe4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fe6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008fe8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008fea:	e841 2300 	strex	r3, r2, [r1]
 8008fee:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008ff0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d1e4      	bne.n	8008fc0 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	f7f9 ffb7 	bl	8002f70 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2202      	movs	r2, #2
 8009006:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009014:	b29b      	uxth	r3, r3
 8009016:	1ad3      	subs	r3, r2, r3
 8009018:	b29b      	uxth	r3, r3
 800901a:	4619      	mov	r1, r3
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	f000 f94d 	bl	80092bc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8009022:	e119      	b.n	8009258 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800902a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800902e:	429a      	cmp	r2, r3
 8009030:	f040 8112 	bne.w	8009258 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800903a:	69db      	ldr	r3, [r3, #28]
 800903c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009040:	f040 810a 	bne.w	8009258 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2202      	movs	r2, #2
 8009048:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009050:	4619      	mov	r1, r3
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f000 f932 	bl	80092bc <HAL_UARTEx_RxEventCallback>
      return;
 8009058:	e0fe      	b.n	8009258 <HAL_UART_IRQHandler+0x798>
 800905a:	bf00      	nop
 800905c:	40020010 	.word	0x40020010
 8009060:	40020028 	.word	0x40020028
 8009064:	40020040 	.word	0x40020040
 8009068:	40020058 	.word	0x40020058
 800906c:	40020070 	.word	0x40020070
 8009070:	40020088 	.word	0x40020088
 8009074:	400200a0 	.word	0x400200a0
 8009078:	400200b8 	.word	0x400200b8
 800907c:	40020410 	.word	0x40020410
 8009080:	40020428 	.word	0x40020428
 8009084:	40020440 	.word	0x40020440
 8009088:	40020458 	.word	0x40020458
 800908c:	40020470 	.word	0x40020470
 8009090:	40020488 	.word	0x40020488
 8009094:	400204a0 	.word	0x400204a0
 8009098:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80090a8:	b29b      	uxth	r3, r3
 80090aa:	1ad3      	subs	r3, r2, r3
 80090ac:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80090b6:	b29b      	uxth	r3, r3
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	f000 80cf 	beq.w	800925c <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 80090be:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	f000 80ca 	beq.w	800925c <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090d0:	e853 3f00 	ldrex	r3, [r3]
 80090d4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80090d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80090dc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	461a      	mov	r2, r3
 80090e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80090ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80090ec:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090ee:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80090f0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80090f2:	e841 2300 	strex	r3, r2, [r1]
 80090f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80090f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d1e4      	bne.n	80090c8 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	3308      	adds	r3, #8
 8009104:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009108:	e853 3f00 	ldrex	r3, [r3]
 800910c:	623b      	str	r3, [r7, #32]
   return(result);
 800910e:	6a3a      	ldr	r2, [r7, #32]
 8009110:	4b55      	ldr	r3, [pc, #340]	@ (8009268 <HAL_UART_IRQHandler+0x7a8>)
 8009112:	4013      	ands	r3, r2
 8009114:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	3308      	adds	r3, #8
 800911e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009122:	633a      	str	r2, [r7, #48]	@ 0x30
 8009124:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009126:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009128:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800912a:	e841 2300 	strex	r3, r2, [r1]
 800912e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009130:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009132:	2b00      	cmp	r3, #0
 8009134:	d1e3      	bne.n	80090fe <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2220      	movs	r2, #32
 800913a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2200      	movs	r2, #0
 8009142:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2200      	movs	r2, #0
 8009148:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009150:	693b      	ldr	r3, [r7, #16]
 8009152:	e853 3f00 	ldrex	r3, [r3]
 8009156:	60fb      	str	r3, [r7, #12]
   return(result);
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	f023 0310 	bic.w	r3, r3, #16
 800915e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	461a      	mov	r2, r3
 8009168:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800916c:	61fb      	str	r3, [r7, #28]
 800916e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009170:	69b9      	ldr	r1, [r7, #24]
 8009172:	69fa      	ldr	r2, [r7, #28]
 8009174:	e841 2300 	strex	r3, r2, [r1]
 8009178:	617b      	str	r3, [r7, #20]
   return(result);
 800917a:	697b      	ldr	r3, [r7, #20]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d1e4      	bne.n	800914a <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2202      	movs	r2, #2
 8009184:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009186:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800918a:	4619      	mov	r1, r3
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	f000 f895 	bl	80092bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009192:	e063      	b.n	800925c <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009194:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009198:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800919c:	2b00      	cmp	r3, #0
 800919e:	d00e      	beq.n	80091be <HAL_UART_IRQHandler+0x6fe>
 80091a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80091a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d008      	beq.n	80091be <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80091b4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f001 fa2c 	bl	800a614 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80091bc:	e051      	b.n	8009262 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80091be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d014      	beq.n	80091f4 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80091ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80091ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d105      	bne.n	80091e2 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80091d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80091da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d008      	beq.n	80091f4 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d03a      	beq.n	8009260 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80091ee:	6878      	ldr	r0, [r7, #4]
 80091f0:	4798      	blx	r3
    }
    return;
 80091f2:	e035      	b.n	8009260 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80091f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d009      	beq.n	8009214 <HAL_UART_IRQHandler+0x754>
 8009200:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009204:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009208:	2b00      	cmp	r3, #0
 800920a:	d003      	beq.n	8009214 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 800920c:	6878      	ldr	r0, [r7, #4]
 800920e:	f001 f9d6 	bl	800a5be <UART_EndTransmit_IT>
    return;
 8009212:	e026      	b.n	8009262 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009214:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009218:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800921c:	2b00      	cmp	r3, #0
 800921e:	d009      	beq.n	8009234 <HAL_UART_IRQHandler+0x774>
 8009220:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009224:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009228:	2b00      	cmp	r3, #0
 800922a:	d003      	beq.n	8009234 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	f001 fa05 	bl	800a63c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009232:	e016      	b.n	8009262 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009234:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009238:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800923c:	2b00      	cmp	r3, #0
 800923e:	d010      	beq.n	8009262 <HAL_UART_IRQHandler+0x7a2>
 8009240:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009244:	2b00      	cmp	r3, #0
 8009246:	da0c      	bge.n	8009262 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f001 f9ed 	bl	800a628 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800924e:	e008      	b.n	8009262 <HAL_UART_IRQHandler+0x7a2>
      return;
 8009250:	bf00      	nop
 8009252:	e006      	b.n	8009262 <HAL_UART_IRQHandler+0x7a2>
    return;
 8009254:	bf00      	nop
 8009256:	e004      	b.n	8009262 <HAL_UART_IRQHandler+0x7a2>
      return;
 8009258:	bf00      	nop
 800925a:	e002      	b.n	8009262 <HAL_UART_IRQHandler+0x7a2>
      return;
 800925c:	bf00      	nop
 800925e:	e000      	b.n	8009262 <HAL_UART_IRQHandler+0x7a2>
    return;
 8009260:	bf00      	nop
  }
}
 8009262:	37e8      	adds	r7, #232	@ 0xe8
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}
 8009268:	effffffe 	.word	0xeffffffe

0800926c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800926c:	b480      	push	{r7}
 800926e:	b083      	sub	sp, #12
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009274:	bf00      	nop
 8009276:	370c      	adds	r7, #12
 8009278:	46bd      	mov	sp, r7
 800927a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927e:	4770      	bx	lr

08009280 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009280:	b480      	push	{r7}
 8009282:	b083      	sub	sp, #12
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009288:	bf00      	nop
 800928a:	370c      	adds	r7, #12
 800928c:	46bd      	mov	sp, r7
 800928e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009292:	4770      	bx	lr

08009294 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009294:	b480      	push	{r7}
 8009296:	b083      	sub	sp, #12
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800929c:	bf00      	nop
 800929e:	370c      	adds	r7, #12
 80092a0:	46bd      	mov	sp, r7
 80092a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a6:	4770      	bx	lr

080092a8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80092a8:	b480      	push	{r7}
 80092aa:	b083      	sub	sp, #12
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80092b0:	bf00      	nop
 80092b2:	370c      	adds	r7, #12
 80092b4:	46bd      	mov	sp, r7
 80092b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ba:	4770      	bx	lr

080092bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80092bc:	b480      	push	{r7}
 80092be:	b083      	sub	sp, #12
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
 80092c4:	460b      	mov	r3, r1
 80092c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80092c8:	bf00      	nop
 80092ca:	370c      	adds	r7, #12
 80092cc:	46bd      	mov	sp, r7
 80092ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d2:	4770      	bx	lr

080092d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80092d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80092d8:	b092      	sub	sp, #72	@ 0x48
 80092da:	af00      	add	r7, sp, #0
 80092dc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80092de:	2300      	movs	r3, #0
 80092e0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80092e4:	697b      	ldr	r3, [r7, #20]
 80092e6:	689a      	ldr	r2, [r3, #8]
 80092e8:	697b      	ldr	r3, [r7, #20]
 80092ea:	691b      	ldr	r3, [r3, #16]
 80092ec:	431a      	orrs	r2, r3
 80092ee:	697b      	ldr	r3, [r7, #20]
 80092f0:	695b      	ldr	r3, [r3, #20]
 80092f2:	431a      	orrs	r2, r3
 80092f4:	697b      	ldr	r3, [r7, #20]
 80092f6:	69db      	ldr	r3, [r3, #28]
 80092f8:	4313      	orrs	r3, r2
 80092fa:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80092fc:	697b      	ldr	r3, [r7, #20]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	681a      	ldr	r2, [r3, #0]
 8009302:	4bbe      	ldr	r3, [pc, #760]	@ (80095fc <UART_SetConfig+0x328>)
 8009304:	4013      	ands	r3, r2
 8009306:	697a      	ldr	r2, [r7, #20]
 8009308:	6812      	ldr	r2, [r2, #0]
 800930a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800930c:	430b      	orrs	r3, r1
 800930e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009310:	697b      	ldr	r3, [r7, #20]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	685b      	ldr	r3, [r3, #4]
 8009316:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800931a:	697b      	ldr	r3, [r7, #20]
 800931c:	68da      	ldr	r2, [r3, #12]
 800931e:	697b      	ldr	r3, [r7, #20]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	430a      	orrs	r2, r1
 8009324:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009326:	697b      	ldr	r3, [r7, #20]
 8009328:	699b      	ldr	r3, [r3, #24]
 800932a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800932c:	697b      	ldr	r3, [r7, #20]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	4ab3      	ldr	r2, [pc, #716]	@ (8009600 <UART_SetConfig+0x32c>)
 8009332:	4293      	cmp	r3, r2
 8009334:	d004      	beq.n	8009340 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009336:	697b      	ldr	r3, [r7, #20]
 8009338:	6a1b      	ldr	r3, [r3, #32]
 800933a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800933c:	4313      	orrs	r3, r2
 800933e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009340:	697b      	ldr	r3, [r7, #20]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	689a      	ldr	r2, [r3, #8]
 8009346:	4baf      	ldr	r3, [pc, #700]	@ (8009604 <UART_SetConfig+0x330>)
 8009348:	4013      	ands	r3, r2
 800934a:	697a      	ldr	r2, [r7, #20]
 800934c:	6812      	ldr	r2, [r2, #0]
 800934e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009350:	430b      	orrs	r3, r1
 8009352:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009354:	697b      	ldr	r3, [r7, #20]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800935a:	f023 010f 	bic.w	r1, r3, #15
 800935e:	697b      	ldr	r3, [r7, #20]
 8009360:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009362:	697b      	ldr	r3, [r7, #20]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	430a      	orrs	r2, r1
 8009368:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	4aa6      	ldr	r2, [pc, #664]	@ (8009608 <UART_SetConfig+0x334>)
 8009370:	4293      	cmp	r3, r2
 8009372:	d177      	bne.n	8009464 <UART_SetConfig+0x190>
 8009374:	4ba5      	ldr	r3, [pc, #660]	@ (800960c <UART_SetConfig+0x338>)
 8009376:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009378:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800937c:	2b28      	cmp	r3, #40	@ 0x28
 800937e:	d86d      	bhi.n	800945c <UART_SetConfig+0x188>
 8009380:	a201      	add	r2, pc, #4	@ (adr r2, 8009388 <UART_SetConfig+0xb4>)
 8009382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009386:	bf00      	nop
 8009388:	0800942d 	.word	0x0800942d
 800938c:	0800945d 	.word	0x0800945d
 8009390:	0800945d 	.word	0x0800945d
 8009394:	0800945d 	.word	0x0800945d
 8009398:	0800945d 	.word	0x0800945d
 800939c:	0800945d 	.word	0x0800945d
 80093a0:	0800945d 	.word	0x0800945d
 80093a4:	0800945d 	.word	0x0800945d
 80093a8:	08009435 	.word	0x08009435
 80093ac:	0800945d 	.word	0x0800945d
 80093b0:	0800945d 	.word	0x0800945d
 80093b4:	0800945d 	.word	0x0800945d
 80093b8:	0800945d 	.word	0x0800945d
 80093bc:	0800945d 	.word	0x0800945d
 80093c0:	0800945d 	.word	0x0800945d
 80093c4:	0800945d 	.word	0x0800945d
 80093c8:	0800943d 	.word	0x0800943d
 80093cc:	0800945d 	.word	0x0800945d
 80093d0:	0800945d 	.word	0x0800945d
 80093d4:	0800945d 	.word	0x0800945d
 80093d8:	0800945d 	.word	0x0800945d
 80093dc:	0800945d 	.word	0x0800945d
 80093e0:	0800945d 	.word	0x0800945d
 80093e4:	0800945d 	.word	0x0800945d
 80093e8:	08009445 	.word	0x08009445
 80093ec:	0800945d 	.word	0x0800945d
 80093f0:	0800945d 	.word	0x0800945d
 80093f4:	0800945d 	.word	0x0800945d
 80093f8:	0800945d 	.word	0x0800945d
 80093fc:	0800945d 	.word	0x0800945d
 8009400:	0800945d 	.word	0x0800945d
 8009404:	0800945d 	.word	0x0800945d
 8009408:	0800944d 	.word	0x0800944d
 800940c:	0800945d 	.word	0x0800945d
 8009410:	0800945d 	.word	0x0800945d
 8009414:	0800945d 	.word	0x0800945d
 8009418:	0800945d 	.word	0x0800945d
 800941c:	0800945d 	.word	0x0800945d
 8009420:	0800945d 	.word	0x0800945d
 8009424:	0800945d 	.word	0x0800945d
 8009428:	08009455 	.word	0x08009455
 800942c:	2301      	movs	r3, #1
 800942e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009432:	e222      	b.n	800987a <UART_SetConfig+0x5a6>
 8009434:	2304      	movs	r3, #4
 8009436:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800943a:	e21e      	b.n	800987a <UART_SetConfig+0x5a6>
 800943c:	2308      	movs	r3, #8
 800943e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009442:	e21a      	b.n	800987a <UART_SetConfig+0x5a6>
 8009444:	2310      	movs	r3, #16
 8009446:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800944a:	e216      	b.n	800987a <UART_SetConfig+0x5a6>
 800944c:	2320      	movs	r3, #32
 800944e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009452:	e212      	b.n	800987a <UART_SetConfig+0x5a6>
 8009454:	2340      	movs	r3, #64	@ 0x40
 8009456:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800945a:	e20e      	b.n	800987a <UART_SetConfig+0x5a6>
 800945c:	2380      	movs	r3, #128	@ 0x80
 800945e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009462:	e20a      	b.n	800987a <UART_SetConfig+0x5a6>
 8009464:	697b      	ldr	r3, [r7, #20]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	4a69      	ldr	r2, [pc, #420]	@ (8009610 <UART_SetConfig+0x33c>)
 800946a:	4293      	cmp	r3, r2
 800946c:	d130      	bne.n	80094d0 <UART_SetConfig+0x1fc>
 800946e:	4b67      	ldr	r3, [pc, #412]	@ (800960c <UART_SetConfig+0x338>)
 8009470:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009472:	f003 0307 	and.w	r3, r3, #7
 8009476:	2b05      	cmp	r3, #5
 8009478:	d826      	bhi.n	80094c8 <UART_SetConfig+0x1f4>
 800947a:	a201      	add	r2, pc, #4	@ (adr r2, 8009480 <UART_SetConfig+0x1ac>)
 800947c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009480:	08009499 	.word	0x08009499
 8009484:	080094a1 	.word	0x080094a1
 8009488:	080094a9 	.word	0x080094a9
 800948c:	080094b1 	.word	0x080094b1
 8009490:	080094b9 	.word	0x080094b9
 8009494:	080094c1 	.word	0x080094c1
 8009498:	2300      	movs	r3, #0
 800949a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800949e:	e1ec      	b.n	800987a <UART_SetConfig+0x5a6>
 80094a0:	2304      	movs	r3, #4
 80094a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094a6:	e1e8      	b.n	800987a <UART_SetConfig+0x5a6>
 80094a8:	2308      	movs	r3, #8
 80094aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094ae:	e1e4      	b.n	800987a <UART_SetConfig+0x5a6>
 80094b0:	2310      	movs	r3, #16
 80094b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094b6:	e1e0      	b.n	800987a <UART_SetConfig+0x5a6>
 80094b8:	2320      	movs	r3, #32
 80094ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094be:	e1dc      	b.n	800987a <UART_SetConfig+0x5a6>
 80094c0:	2340      	movs	r3, #64	@ 0x40
 80094c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094c6:	e1d8      	b.n	800987a <UART_SetConfig+0x5a6>
 80094c8:	2380      	movs	r3, #128	@ 0x80
 80094ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094ce:	e1d4      	b.n	800987a <UART_SetConfig+0x5a6>
 80094d0:	697b      	ldr	r3, [r7, #20]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	4a4f      	ldr	r2, [pc, #316]	@ (8009614 <UART_SetConfig+0x340>)
 80094d6:	4293      	cmp	r3, r2
 80094d8:	d130      	bne.n	800953c <UART_SetConfig+0x268>
 80094da:	4b4c      	ldr	r3, [pc, #304]	@ (800960c <UART_SetConfig+0x338>)
 80094dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094de:	f003 0307 	and.w	r3, r3, #7
 80094e2:	2b05      	cmp	r3, #5
 80094e4:	d826      	bhi.n	8009534 <UART_SetConfig+0x260>
 80094e6:	a201      	add	r2, pc, #4	@ (adr r2, 80094ec <UART_SetConfig+0x218>)
 80094e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094ec:	08009505 	.word	0x08009505
 80094f0:	0800950d 	.word	0x0800950d
 80094f4:	08009515 	.word	0x08009515
 80094f8:	0800951d 	.word	0x0800951d
 80094fc:	08009525 	.word	0x08009525
 8009500:	0800952d 	.word	0x0800952d
 8009504:	2300      	movs	r3, #0
 8009506:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800950a:	e1b6      	b.n	800987a <UART_SetConfig+0x5a6>
 800950c:	2304      	movs	r3, #4
 800950e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009512:	e1b2      	b.n	800987a <UART_SetConfig+0x5a6>
 8009514:	2308      	movs	r3, #8
 8009516:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800951a:	e1ae      	b.n	800987a <UART_SetConfig+0x5a6>
 800951c:	2310      	movs	r3, #16
 800951e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009522:	e1aa      	b.n	800987a <UART_SetConfig+0x5a6>
 8009524:	2320      	movs	r3, #32
 8009526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800952a:	e1a6      	b.n	800987a <UART_SetConfig+0x5a6>
 800952c:	2340      	movs	r3, #64	@ 0x40
 800952e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009532:	e1a2      	b.n	800987a <UART_SetConfig+0x5a6>
 8009534:	2380      	movs	r3, #128	@ 0x80
 8009536:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800953a:	e19e      	b.n	800987a <UART_SetConfig+0x5a6>
 800953c:	697b      	ldr	r3, [r7, #20]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	4a35      	ldr	r2, [pc, #212]	@ (8009618 <UART_SetConfig+0x344>)
 8009542:	4293      	cmp	r3, r2
 8009544:	d130      	bne.n	80095a8 <UART_SetConfig+0x2d4>
 8009546:	4b31      	ldr	r3, [pc, #196]	@ (800960c <UART_SetConfig+0x338>)
 8009548:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800954a:	f003 0307 	and.w	r3, r3, #7
 800954e:	2b05      	cmp	r3, #5
 8009550:	d826      	bhi.n	80095a0 <UART_SetConfig+0x2cc>
 8009552:	a201      	add	r2, pc, #4	@ (adr r2, 8009558 <UART_SetConfig+0x284>)
 8009554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009558:	08009571 	.word	0x08009571
 800955c:	08009579 	.word	0x08009579
 8009560:	08009581 	.word	0x08009581
 8009564:	08009589 	.word	0x08009589
 8009568:	08009591 	.word	0x08009591
 800956c:	08009599 	.word	0x08009599
 8009570:	2300      	movs	r3, #0
 8009572:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009576:	e180      	b.n	800987a <UART_SetConfig+0x5a6>
 8009578:	2304      	movs	r3, #4
 800957a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800957e:	e17c      	b.n	800987a <UART_SetConfig+0x5a6>
 8009580:	2308      	movs	r3, #8
 8009582:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009586:	e178      	b.n	800987a <UART_SetConfig+0x5a6>
 8009588:	2310      	movs	r3, #16
 800958a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800958e:	e174      	b.n	800987a <UART_SetConfig+0x5a6>
 8009590:	2320      	movs	r3, #32
 8009592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009596:	e170      	b.n	800987a <UART_SetConfig+0x5a6>
 8009598:	2340      	movs	r3, #64	@ 0x40
 800959a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800959e:	e16c      	b.n	800987a <UART_SetConfig+0x5a6>
 80095a0:	2380      	movs	r3, #128	@ 0x80
 80095a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095a6:	e168      	b.n	800987a <UART_SetConfig+0x5a6>
 80095a8:	697b      	ldr	r3, [r7, #20]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	4a1b      	ldr	r2, [pc, #108]	@ (800961c <UART_SetConfig+0x348>)
 80095ae:	4293      	cmp	r3, r2
 80095b0:	d142      	bne.n	8009638 <UART_SetConfig+0x364>
 80095b2:	4b16      	ldr	r3, [pc, #88]	@ (800960c <UART_SetConfig+0x338>)
 80095b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80095b6:	f003 0307 	and.w	r3, r3, #7
 80095ba:	2b05      	cmp	r3, #5
 80095bc:	d838      	bhi.n	8009630 <UART_SetConfig+0x35c>
 80095be:	a201      	add	r2, pc, #4	@ (adr r2, 80095c4 <UART_SetConfig+0x2f0>)
 80095c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095c4:	080095dd 	.word	0x080095dd
 80095c8:	080095e5 	.word	0x080095e5
 80095cc:	080095ed 	.word	0x080095ed
 80095d0:	080095f5 	.word	0x080095f5
 80095d4:	08009621 	.word	0x08009621
 80095d8:	08009629 	.word	0x08009629
 80095dc:	2300      	movs	r3, #0
 80095de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095e2:	e14a      	b.n	800987a <UART_SetConfig+0x5a6>
 80095e4:	2304      	movs	r3, #4
 80095e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095ea:	e146      	b.n	800987a <UART_SetConfig+0x5a6>
 80095ec:	2308      	movs	r3, #8
 80095ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095f2:	e142      	b.n	800987a <UART_SetConfig+0x5a6>
 80095f4:	2310      	movs	r3, #16
 80095f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095fa:	e13e      	b.n	800987a <UART_SetConfig+0x5a6>
 80095fc:	cfff69f3 	.word	0xcfff69f3
 8009600:	58000c00 	.word	0x58000c00
 8009604:	11fff4ff 	.word	0x11fff4ff
 8009608:	40011000 	.word	0x40011000
 800960c:	58024400 	.word	0x58024400
 8009610:	40004400 	.word	0x40004400
 8009614:	40004800 	.word	0x40004800
 8009618:	40004c00 	.word	0x40004c00
 800961c:	40005000 	.word	0x40005000
 8009620:	2320      	movs	r3, #32
 8009622:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009626:	e128      	b.n	800987a <UART_SetConfig+0x5a6>
 8009628:	2340      	movs	r3, #64	@ 0x40
 800962a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800962e:	e124      	b.n	800987a <UART_SetConfig+0x5a6>
 8009630:	2380      	movs	r3, #128	@ 0x80
 8009632:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009636:	e120      	b.n	800987a <UART_SetConfig+0x5a6>
 8009638:	697b      	ldr	r3, [r7, #20]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	4acb      	ldr	r2, [pc, #812]	@ (800996c <UART_SetConfig+0x698>)
 800963e:	4293      	cmp	r3, r2
 8009640:	d176      	bne.n	8009730 <UART_SetConfig+0x45c>
 8009642:	4bcb      	ldr	r3, [pc, #812]	@ (8009970 <UART_SetConfig+0x69c>)
 8009644:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009646:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800964a:	2b28      	cmp	r3, #40	@ 0x28
 800964c:	d86c      	bhi.n	8009728 <UART_SetConfig+0x454>
 800964e:	a201      	add	r2, pc, #4	@ (adr r2, 8009654 <UART_SetConfig+0x380>)
 8009650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009654:	080096f9 	.word	0x080096f9
 8009658:	08009729 	.word	0x08009729
 800965c:	08009729 	.word	0x08009729
 8009660:	08009729 	.word	0x08009729
 8009664:	08009729 	.word	0x08009729
 8009668:	08009729 	.word	0x08009729
 800966c:	08009729 	.word	0x08009729
 8009670:	08009729 	.word	0x08009729
 8009674:	08009701 	.word	0x08009701
 8009678:	08009729 	.word	0x08009729
 800967c:	08009729 	.word	0x08009729
 8009680:	08009729 	.word	0x08009729
 8009684:	08009729 	.word	0x08009729
 8009688:	08009729 	.word	0x08009729
 800968c:	08009729 	.word	0x08009729
 8009690:	08009729 	.word	0x08009729
 8009694:	08009709 	.word	0x08009709
 8009698:	08009729 	.word	0x08009729
 800969c:	08009729 	.word	0x08009729
 80096a0:	08009729 	.word	0x08009729
 80096a4:	08009729 	.word	0x08009729
 80096a8:	08009729 	.word	0x08009729
 80096ac:	08009729 	.word	0x08009729
 80096b0:	08009729 	.word	0x08009729
 80096b4:	08009711 	.word	0x08009711
 80096b8:	08009729 	.word	0x08009729
 80096bc:	08009729 	.word	0x08009729
 80096c0:	08009729 	.word	0x08009729
 80096c4:	08009729 	.word	0x08009729
 80096c8:	08009729 	.word	0x08009729
 80096cc:	08009729 	.word	0x08009729
 80096d0:	08009729 	.word	0x08009729
 80096d4:	08009719 	.word	0x08009719
 80096d8:	08009729 	.word	0x08009729
 80096dc:	08009729 	.word	0x08009729
 80096e0:	08009729 	.word	0x08009729
 80096e4:	08009729 	.word	0x08009729
 80096e8:	08009729 	.word	0x08009729
 80096ec:	08009729 	.word	0x08009729
 80096f0:	08009729 	.word	0x08009729
 80096f4:	08009721 	.word	0x08009721
 80096f8:	2301      	movs	r3, #1
 80096fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096fe:	e0bc      	b.n	800987a <UART_SetConfig+0x5a6>
 8009700:	2304      	movs	r3, #4
 8009702:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009706:	e0b8      	b.n	800987a <UART_SetConfig+0x5a6>
 8009708:	2308      	movs	r3, #8
 800970a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800970e:	e0b4      	b.n	800987a <UART_SetConfig+0x5a6>
 8009710:	2310      	movs	r3, #16
 8009712:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009716:	e0b0      	b.n	800987a <UART_SetConfig+0x5a6>
 8009718:	2320      	movs	r3, #32
 800971a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800971e:	e0ac      	b.n	800987a <UART_SetConfig+0x5a6>
 8009720:	2340      	movs	r3, #64	@ 0x40
 8009722:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009726:	e0a8      	b.n	800987a <UART_SetConfig+0x5a6>
 8009728:	2380      	movs	r3, #128	@ 0x80
 800972a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800972e:	e0a4      	b.n	800987a <UART_SetConfig+0x5a6>
 8009730:	697b      	ldr	r3, [r7, #20]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	4a8f      	ldr	r2, [pc, #572]	@ (8009974 <UART_SetConfig+0x6a0>)
 8009736:	4293      	cmp	r3, r2
 8009738:	d130      	bne.n	800979c <UART_SetConfig+0x4c8>
 800973a:	4b8d      	ldr	r3, [pc, #564]	@ (8009970 <UART_SetConfig+0x69c>)
 800973c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800973e:	f003 0307 	and.w	r3, r3, #7
 8009742:	2b05      	cmp	r3, #5
 8009744:	d826      	bhi.n	8009794 <UART_SetConfig+0x4c0>
 8009746:	a201      	add	r2, pc, #4	@ (adr r2, 800974c <UART_SetConfig+0x478>)
 8009748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800974c:	08009765 	.word	0x08009765
 8009750:	0800976d 	.word	0x0800976d
 8009754:	08009775 	.word	0x08009775
 8009758:	0800977d 	.word	0x0800977d
 800975c:	08009785 	.word	0x08009785
 8009760:	0800978d 	.word	0x0800978d
 8009764:	2300      	movs	r3, #0
 8009766:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800976a:	e086      	b.n	800987a <UART_SetConfig+0x5a6>
 800976c:	2304      	movs	r3, #4
 800976e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009772:	e082      	b.n	800987a <UART_SetConfig+0x5a6>
 8009774:	2308      	movs	r3, #8
 8009776:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800977a:	e07e      	b.n	800987a <UART_SetConfig+0x5a6>
 800977c:	2310      	movs	r3, #16
 800977e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009782:	e07a      	b.n	800987a <UART_SetConfig+0x5a6>
 8009784:	2320      	movs	r3, #32
 8009786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800978a:	e076      	b.n	800987a <UART_SetConfig+0x5a6>
 800978c:	2340      	movs	r3, #64	@ 0x40
 800978e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009792:	e072      	b.n	800987a <UART_SetConfig+0x5a6>
 8009794:	2380      	movs	r3, #128	@ 0x80
 8009796:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800979a:	e06e      	b.n	800987a <UART_SetConfig+0x5a6>
 800979c:	697b      	ldr	r3, [r7, #20]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	4a75      	ldr	r2, [pc, #468]	@ (8009978 <UART_SetConfig+0x6a4>)
 80097a2:	4293      	cmp	r3, r2
 80097a4:	d130      	bne.n	8009808 <UART_SetConfig+0x534>
 80097a6:	4b72      	ldr	r3, [pc, #456]	@ (8009970 <UART_SetConfig+0x69c>)
 80097a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097aa:	f003 0307 	and.w	r3, r3, #7
 80097ae:	2b05      	cmp	r3, #5
 80097b0:	d826      	bhi.n	8009800 <UART_SetConfig+0x52c>
 80097b2:	a201      	add	r2, pc, #4	@ (adr r2, 80097b8 <UART_SetConfig+0x4e4>)
 80097b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097b8:	080097d1 	.word	0x080097d1
 80097bc:	080097d9 	.word	0x080097d9
 80097c0:	080097e1 	.word	0x080097e1
 80097c4:	080097e9 	.word	0x080097e9
 80097c8:	080097f1 	.word	0x080097f1
 80097cc:	080097f9 	.word	0x080097f9
 80097d0:	2300      	movs	r3, #0
 80097d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097d6:	e050      	b.n	800987a <UART_SetConfig+0x5a6>
 80097d8:	2304      	movs	r3, #4
 80097da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097de:	e04c      	b.n	800987a <UART_SetConfig+0x5a6>
 80097e0:	2308      	movs	r3, #8
 80097e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097e6:	e048      	b.n	800987a <UART_SetConfig+0x5a6>
 80097e8:	2310      	movs	r3, #16
 80097ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097ee:	e044      	b.n	800987a <UART_SetConfig+0x5a6>
 80097f0:	2320      	movs	r3, #32
 80097f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097f6:	e040      	b.n	800987a <UART_SetConfig+0x5a6>
 80097f8:	2340      	movs	r3, #64	@ 0x40
 80097fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097fe:	e03c      	b.n	800987a <UART_SetConfig+0x5a6>
 8009800:	2380      	movs	r3, #128	@ 0x80
 8009802:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009806:	e038      	b.n	800987a <UART_SetConfig+0x5a6>
 8009808:	697b      	ldr	r3, [r7, #20]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	4a5b      	ldr	r2, [pc, #364]	@ (800997c <UART_SetConfig+0x6a8>)
 800980e:	4293      	cmp	r3, r2
 8009810:	d130      	bne.n	8009874 <UART_SetConfig+0x5a0>
 8009812:	4b57      	ldr	r3, [pc, #348]	@ (8009970 <UART_SetConfig+0x69c>)
 8009814:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009816:	f003 0307 	and.w	r3, r3, #7
 800981a:	2b05      	cmp	r3, #5
 800981c:	d826      	bhi.n	800986c <UART_SetConfig+0x598>
 800981e:	a201      	add	r2, pc, #4	@ (adr r2, 8009824 <UART_SetConfig+0x550>)
 8009820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009824:	0800983d 	.word	0x0800983d
 8009828:	08009845 	.word	0x08009845
 800982c:	0800984d 	.word	0x0800984d
 8009830:	08009855 	.word	0x08009855
 8009834:	0800985d 	.word	0x0800985d
 8009838:	08009865 	.word	0x08009865
 800983c:	2302      	movs	r3, #2
 800983e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009842:	e01a      	b.n	800987a <UART_SetConfig+0x5a6>
 8009844:	2304      	movs	r3, #4
 8009846:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800984a:	e016      	b.n	800987a <UART_SetConfig+0x5a6>
 800984c:	2308      	movs	r3, #8
 800984e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009852:	e012      	b.n	800987a <UART_SetConfig+0x5a6>
 8009854:	2310      	movs	r3, #16
 8009856:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800985a:	e00e      	b.n	800987a <UART_SetConfig+0x5a6>
 800985c:	2320      	movs	r3, #32
 800985e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009862:	e00a      	b.n	800987a <UART_SetConfig+0x5a6>
 8009864:	2340      	movs	r3, #64	@ 0x40
 8009866:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800986a:	e006      	b.n	800987a <UART_SetConfig+0x5a6>
 800986c:	2380      	movs	r3, #128	@ 0x80
 800986e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009872:	e002      	b.n	800987a <UART_SetConfig+0x5a6>
 8009874:	2380      	movs	r3, #128	@ 0x80
 8009876:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800987a:	697b      	ldr	r3, [r7, #20]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	4a3f      	ldr	r2, [pc, #252]	@ (800997c <UART_SetConfig+0x6a8>)
 8009880:	4293      	cmp	r3, r2
 8009882:	f040 80f8 	bne.w	8009a76 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009886:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800988a:	2b20      	cmp	r3, #32
 800988c:	dc46      	bgt.n	800991c <UART_SetConfig+0x648>
 800988e:	2b02      	cmp	r3, #2
 8009890:	f2c0 8082 	blt.w	8009998 <UART_SetConfig+0x6c4>
 8009894:	3b02      	subs	r3, #2
 8009896:	2b1e      	cmp	r3, #30
 8009898:	d87e      	bhi.n	8009998 <UART_SetConfig+0x6c4>
 800989a:	a201      	add	r2, pc, #4	@ (adr r2, 80098a0 <UART_SetConfig+0x5cc>)
 800989c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098a0:	08009923 	.word	0x08009923
 80098a4:	08009999 	.word	0x08009999
 80098a8:	0800992b 	.word	0x0800992b
 80098ac:	08009999 	.word	0x08009999
 80098b0:	08009999 	.word	0x08009999
 80098b4:	08009999 	.word	0x08009999
 80098b8:	0800993b 	.word	0x0800993b
 80098bc:	08009999 	.word	0x08009999
 80098c0:	08009999 	.word	0x08009999
 80098c4:	08009999 	.word	0x08009999
 80098c8:	08009999 	.word	0x08009999
 80098cc:	08009999 	.word	0x08009999
 80098d0:	08009999 	.word	0x08009999
 80098d4:	08009999 	.word	0x08009999
 80098d8:	0800994b 	.word	0x0800994b
 80098dc:	08009999 	.word	0x08009999
 80098e0:	08009999 	.word	0x08009999
 80098e4:	08009999 	.word	0x08009999
 80098e8:	08009999 	.word	0x08009999
 80098ec:	08009999 	.word	0x08009999
 80098f0:	08009999 	.word	0x08009999
 80098f4:	08009999 	.word	0x08009999
 80098f8:	08009999 	.word	0x08009999
 80098fc:	08009999 	.word	0x08009999
 8009900:	08009999 	.word	0x08009999
 8009904:	08009999 	.word	0x08009999
 8009908:	08009999 	.word	0x08009999
 800990c:	08009999 	.word	0x08009999
 8009910:	08009999 	.word	0x08009999
 8009914:	08009999 	.word	0x08009999
 8009918:	0800998b 	.word	0x0800998b
 800991c:	2b40      	cmp	r3, #64	@ 0x40
 800991e:	d037      	beq.n	8009990 <UART_SetConfig+0x6bc>
 8009920:	e03a      	b.n	8009998 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009922:	f7fe f835 	bl	8007990 <HAL_RCCEx_GetD3PCLK1Freq>
 8009926:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009928:	e03c      	b.n	80099a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800992a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800992e:	4618      	mov	r0, r3
 8009930:	f7fe f844 	bl	80079bc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009936:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009938:	e034      	b.n	80099a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800993a:	f107 0318 	add.w	r3, r7, #24
 800993e:	4618      	mov	r0, r3
 8009940:	f7fe f990 	bl	8007c64 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009944:	69fb      	ldr	r3, [r7, #28]
 8009946:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009948:	e02c      	b.n	80099a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800994a:	4b09      	ldr	r3, [pc, #36]	@ (8009970 <UART_SetConfig+0x69c>)
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	f003 0320 	and.w	r3, r3, #32
 8009952:	2b00      	cmp	r3, #0
 8009954:	d016      	beq.n	8009984 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009956:	4b06      	ldr	r3, [pc, #24]	@ (8009970 <UART_SetConfig+0x69c>)
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	08db      	lsrs	r3, r3, #3
 800995c:	f003 0303 	and.w	r3, r3, #3
 8009960:	4a07      	ldr	r2, [pc, #28]	@ (8009980 <UART_SetConfig+0x6ac>)
 8009962:	fa22 f303 	lsr.w	r3, r2, r3
 8009966:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009968:	e01c      	b.n	80099a4 <UART_SetConfig+0x6d0>
 800996a:	bf00      	nop
 800996c:	40011400 	.word	0x40011400
 8009970:	58024400 	.word	0x58024400
 8009974:	40007800 	.word	0x40007800
 8009978:	40007c00 	.word	0x40007c00
 800997c:	58000c00 	.word	0x58000c00
 8009980:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8009984:	4b9d      	ldr	r3, [pc, #628]	@ (8009bfc <UART_SetConfig+0x928>)
 8009986:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009988:	e00c      	b.n	80099a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800998a:	4b9d      	ldr	r3, [pc, #628]	@ (8009c00 <UART_SetConfig+0x92c>)
 800998c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800998e:	e009      	b.n	80099a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009990:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009994:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009996:	e005      	b.n	80099a4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8009998:	2300      	movs	r3, #0
 800999a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800999c:	2301      	movs	r3, #1
 800999e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80099a2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80099a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	f000 81de 	beq.w	8009d68 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80099ac:	697b      	ldr	r3, [r7, #20]
 80099ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099b0:	4a94      	ldr	r2, [pc, #592]	@ (8009c04 <UART_SetConfig+0x930>)
 80099b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80099b6:	461a      	mov	r2, r3
 80099b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80099ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80099be:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80099c0:	697b      	ldr	r3, [r7, #20]
 80099c2:	685a      	ldr	r2, [r3, #4]
 80099c4:	4613      	mov	r3, r2
 80099c6:	005b      	lsls	r3, r3, #1
 80099c8:	4413      	add	r3, r2
 80099ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80099cc:	429a      	cmp	r2, r3
 80099ce:	d305      	bcc.n	80099dc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80099d0:	697b      	ldr	r3, [r7, #20]
 80099d2:	685b      	ldr	r3, [r3, #4]
 80099d4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80099d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80099d8:	429a      	cmp	r2, r3
 80099da:	d903      	bls.n	80099e4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80099dc:	2301      	movs	r3, #1
 80099de:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80099e2:	e1c1      	b.n	8009d68 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80099e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80099e6:	2200      	movs	r2, #0
 80099e8:	60bb      	str	r3, [r7, #8]
 80099ea:	60fa      	str	r2, [r7, #12]
 80099ec:	697b      	ldr	r3, [r7, #20]
 80099ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099f0:	4a84      	ldr	r2, [pc, #528]	@ (8009c04 <UART_SetConfig+0x930>)
 80099f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80099f6:	b29b      	uxth	r3, r3
 80099f8:	2200      	movs	r2, #0
 80099fa:	603b      	str	r3, [r7, #0]
 80099fc:	607a      	str	r2, [r7, #4]
 80099fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a02:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009a06:	f7f6 fcc3 	bl	8000390 <__aeabi_uldivmod>
 8009a0a:	4602      	mov	r2, r0
 8009a0c:	460b      	mov	r3, r1
 8009a0e:	4610      	mov	r0, r2
 8009a10:	4619      	mov	r1, r3
 8009a12:	f04f 0200 	mov.w	r2, #0
 8009a16:	f04f 0300 	mov.w	r3, #0
 8009a1a:	020b      	lsls	r3, r1, #8
 8009a1c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009a20:	0202      	lsls	r2, r0, #8
 8009a22:	6979      	ldr	r1, [r7, #20]
 8009a24:	6849      	ldr	r1, [r1, #4]
 8009a26:	0849      	lsrs	r1, r1, #1
 8009a28:	2000      	movs	r0, #0
 8009a2a:	460c      	mov	r4, r1
 8009a2c:	4605      	mov	r5, r0
 8009a2e:	eb12 0804 	adds.w	r8, r2, r4
 8009a32:	eb43 0905 	adc.w	r9, r3, r5
 8009a36:	697b      	ldr	r3, [r7, #20]
 8009a38:	685b      	ldr	r3, [r3, #4]
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	469a      	mov	sl, r3
 8009a3e:	4693      	mov	fp, r2
 8009a40:	4652      	mov	r2, sl
 8009a42:	465b      	mov	r3, fp
 8009a44:	4640      	mov	r0, r8
 8009a46:	4649      	mov	r1, r9
 8009a48:	f7f6 fca2 	bl	8000390 <__aeabi_uldivmod>
 8009a4c:	4602      	mov	r2, r0
 8009a4e:	460b      	mov	r3, r1
 8009a50:	4613      	mov	r3, r2
 8009a52:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009a54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a56:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009a5a:	d308      	bcc.n	8009a6e <UART_SetConfig+0x79a>
 8009a5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a5e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009a62:	d204      	bcs.n	8009a6e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8009a64:	697b      	ldr	r3, [r7, #20]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009a6a:	60da      	str	r2, [r3, #12]
 8009a6c:	e17c      	b.n	8009d68 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8009a6e:	2301      	movs	r3, #1
 8009a70:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009a74:	e178      	b.n	8009d68 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009a76:	697b      	ldr	r3, [r7, #20]
 8009a78:	69db      	ldr	r3, [r3, #28]
 8009a7a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009a7e:	f040 80c5 	bne.w	8009c0c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8009a82:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009a86:	2b20      	cmp	r3, #32
 8009a88:	dc48      	bgt.n	8009b1c <UART_SetConfig+0x848>
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	db7b      	blt.n	8009b86 <UART_SetConfig+0x8b2>
 8009a8e:	2b20      	cmp	r3, #32
 8009a90:	d879      	bhi.n	8009b86 <UART_SetConfig+0x8b2>
 8009a92:	a201      	add	r2, pc, #4	@ (adr r2, 8009a98 <UART_SetConfig+0x7c4>)
 8009a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a98:	08009b23 	.word	0x08009b23
 8009a9c:	08009b2b 	.word	0x08009b2b
 8009aa0:	08009b87 	.word	0x08009b87
 8009aa4:	08009b87 	.word	0x08009b87
 8009aa8:	08009b33 	.word	0x08009b33
 8009aac:	08009b87 	.word	0x08009b87
 8009ab0:	08009b87 	.word	0x08009b87
 8009ab4:	08009b87 	.word	0x08009b87
 8009ab8:	08009b43 	.word	0x08009b43
 8009abc:	08009b87 	.word	0x08009b87
 8009ac0:	08009b87 	.word	0x08009b87
 8009ac4:	08009b87 	.word	0x08009b87
 8009ac8:	08009b87 	.word	0x08009b87
 8009acc:	08009b87 	.word	0x08009b87
 8009ad0:	08009b87 	.word	0x08009b87
 8009ad4:	08009b87 	.word	0x08009b87
 8009ad8:	08009b53 	.word	0x08009b53
 8009adc:	08009b87 	.word	0x08009b87
 8009ae0:	08009b87 	.word	0x08009b87
 8009ae4:	08009b87 	.word	0x08009b87
 8009ae8:	08009b87 	.word	0x08009b87
 8009aec:	08009b87 	.word	0x08009b87
 8009af0:	08009b87 	.word	0x08009b87
 8009af4:	08009b87 	.word	0x08009b87
 8009af8:	08009b87 	.word	0x08009b87
 8009afc:	08009b87 	.word	0x08009b87
 8009b00:	08009b87 	.word	0x08009b87
 8009b04:	08009b87 	.word	0x08009b87
 8009b08:	08009b87 	.word	0x08009b87
 8009b0c:	08009b87 	.word	0x08009b87
 8009b10:	08009b87 	.word	0x08009b87
 8009b14:	08009b87 	.word	0x08009b87
 8009b18:	08009b79 	.word	0x08009b79
 8009b1c:	2b40      	cmp	r3, #64	@ 0x40
 8009b1e:	d02e      	beq.n	8009b7e <UART_SetConfig+0x8aa>
 8009b20:	e031      	b.n	8009b86 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009b22:	f7fc fcbd 	bl	80064a0 <HAL_RCC_GetPCLK1Freq>
 8009b26:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009b28:	e033      	b.n	8009b92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009b2a:	f7fc fccf 	bl	80064cc <HAL_RCC_GetPCLK2Freq>
 8009b2e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009b30:	e02f      	b.n	8009b92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009b36:	4618      	mov	r0, r3
 8009b38:	f7fd ff40 	bl	80079bc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009b3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b40:	e027      	b.n	8009b92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009b42:	f107 0318 	add.w	r3, r7, #24
 8009b46:	4618      	mov	r0, r3
 8009b48:	f7fe f88c 	bl	8007c64 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009b4c:	69fb      	ldr	r3, [r7, #28]
 8009b4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b50:	e01f      	b.n	8009b92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009b52:	4b2d      	ldr	r3, [pc, #180]	@ (8009c08 <UART_SetConfig+0x934>)
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	f003 0320 	and.w	r3, r3, #32
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d009      	beq.n	8009b72 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009b5e:	4b2a      	ldr	r3, [pc, #168]	@ (8009c08 <UART_SetConfig+0x934>)
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	08db      	lsrs	r3, r3, #3
 8009b64:	f003 0303 	and.w	r3, r3, #3
 8009b68:	4a24      	ldr	r2, [pc, #144]	@ (8009bfc <UART_SetConfig+0x928>)
 8009b6a:	fa22 f303 	lsr.w	r3, r2, r3
 8009b6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009b70:	e00f      	b.n	8009b92 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009b72:	4b22      	ldr	r3, [pc, #136]	@ (8009bfc <UART_SetConfig+0x928>)
 8009b74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b76:	e00c      	b.n	8009b92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009b78:	4b21      	ldr	r3, [pc, #132]	@ (8009c00 <UART_SetConfig+0x92c>)
 8009b7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b7c:	e009      	b.n	8009b92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009b7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009b82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b84:	e005      	b.n	8009b92 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009b86:	2300      	movs	r3, #0
 8009b88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009b8a:	2301      	movs	r3, #1
 8009b8c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009b90:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009b92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	f000 80e7 	beq.w	8009d68 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b9a:	697b      	ldr	r3, [r7, #20]
 8009b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b9e:	4a19      	ldr	r2, [pc, #100]	@ (8009c04 <UART_SetConfig+0x930>)
 8009ba0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ba4:	461a      	mov	r2, r3
 8009ba6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ba8:	fbb3 f3f2 	udiv	r3, r3, r2
 8009bac:	005a      	lsls	r2, r3, #1
 8009bae:	697b      	ldr	r3, [r7, #20]
 8009bb0:	685b      	ldr	r3, [r3, #4]
 8009bb2:	085b      	lsrs	r3, r3, #1
 8009bb4:	441a      	add	r2, r3
 8009bb6:	697b      	ldr	r3, [r7, #20]
 8009bb8:	685b      	ldr	r3, [r3, #4]
 8009bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bbe:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009bc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bc2:	2b0f      	cmp	r3, #15
 8009bc4:	d916      	bls.n	8009bf4 <UART_SetConfig+0x920>
 8009bc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009bcc:	d212      	bcs.n	8009bf4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009bce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bd0:	b29b      	uxth	r3, r3
 8009bd2:	f023 030f 	bic.w	r3, r3, #15
 8009bd6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009bd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bda:	085b      	lsrs	r3, r3, #1
 8009bdc:	b29b      	uxth	r3, r3
 8009bde:	f003 0307 	and.w	r3, r3, #7
 8009be2:	b29a      	uxth	r2, r3
 8009be4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009be6:	4313      	orrs	r3, r2
 8009be8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8009bea:	697b      	ldr	r3, [r7, #20]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009bf0:	60da      	str	r2, [r3, #12]
 8009bf2:	e0b9      	b.n	8009d68 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009bf4:	2301      	movs	r3, #1
 8009bf6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009bfa:	e0b5      	b.n	8009d68 <UART_SetConfig+0xa94>
 8009bfc:	03d09000 	.word	0x03d09000
 8009c00:	003d0900 	.word	0x003d0900
 8009c04:	0800d600 	.word	0x0800d600
 8009c08:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8009c0c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009c10:	2b20      	cmp	r3, #32
 8009c12:	dc49      	bgt.n	8009ca8 <UART_SetConfig+0x9d4>
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	db7c      	blt.n	8009d12 <UART_SetConfig+0xa3e>
 8009c18:	2b20      	cmp	r3, #32
 8009c1a:	d87a      	bhi.n	8009d12 <UART_SetConfig+0xa3e>
 8009c1c:	a201      	add	r2, pc, #4	@ (adr r2, 8009c24 <UART_SetConfig+0x950>)
 8009c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c22:	bf00      	nop
 8009c24:	08009caf 	.word	0x08009caf
 8009c28:	08009cb7 	.word	0x08009cb7
 8009c2c:	08009d13 	.word	0x08009d13
 8009c30:	08009d13 	.word	0x08009d13
 8009c34:	08009cbf 	.word	0x08009cbf
 8009c38:	08009d13 	.word	0x08009d13
 8009c3c:	08009d13 	.word	0x08009d13
 8009c40:	08009d13 	.word	0x08009d13
 8009c44:	08009ccf 	.word	0x08009ccf
 8009c48:	08009d13 	.word	0x08009d13
 8009c4c:	08009d13 	.word	0x08009d13
 8009c50:	08009d13 	.word	0x08009d13
 8009c54:	08009d13 	.word	0x08009d13
 8009c58:	08009d13 	.word	0x08009d13
 8009c5c:	08009d13 	.word	0x08009d13
 8009c60:	08009d13 	.word	0x08009d13
 8009c64:	08009cdf 	.word	0x08009cdf
 8009c68:	08009d13 	.word	0x08009d13
 8009c6c:	08009d13 	.word	0x08009d13
 8009c70:	08009d13 	.word	0x08009d13
 8009c74:	08009d13 	.word	0x08009d13
 8009c78:	08009d13 	.word	0x08009d13
 8009c7c:	08009d13 	.word	0x08009d13
 8009c80:	08009d13 	.word	0x08009d13
 8009c84:	08009d13 	.word	0x08009d13
 8009c88:	08009d13 	.word	0x08009d13
 8009c8c:	08009d13 	.word	0x08009d13
 8009c90:	08009d13 	.word	0x08009d13
 8009c94:	08009d13 	.word	0x08009d13
 8009c98:	08009d13 	.word	0x08009d13
 8009c9c:	08009d13 	.word	0x08009d13
 8009ca0:	08009d13 	.word	0x08009d13
 8009ca4:	08009d05 	.word	0x08009d05
 8009ca8:	2b40      	cmp	r3, #64	@ 0x40
 8009caa:	d02e      	beq.n	8009d0a <UART_SetConfig+0xa36>
 8009cac:	e031      	b.n	8009d12 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009cae:	f7fc fbf7 	bl	80064a0 <HAL_RCC_GetPCLK1Freq>
 8009cb2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009cb4:	e033      	b.n	8009d1e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009cb6:	f7fc fc09 	bl	80064cc <HAL_RCC_GetPCLK2Freq>
 8009cba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009cbc:	e02f      	b.n	8009d1e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009cbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	f7fd fe7a 	bl	80079bc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009cc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ccc:	e027      	b.n	8009d1e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009cce:	f107 0318 	add.w	r3, r7, #24
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	f7fd ffc6 	bl	8007c64 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009cd8:	69fb      	ldr	r3, [r7, #28]
 8009cda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009cdc:	e01f      	b.n	8009d1e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009cde:	4b2d      	ldr	r3, [pc, #180]	@ (8009d94 <UART_SetConfig+0xac0>)
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	f003 0320 	and.w	r3, r3, #32
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d009      	beq.n	8009cfe <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009cea:	4b2a      	ldr	r3, [pc, #168]	@ (8009d94 <UART_SetConfig+0xac0>)
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	08db      	lsrs	r3, r3, #3
 8009cf0:	f003 0303 	and.w	r3, r3, #3
 8009cf4:	4a28      	ldr	r2, [pc, #160]	@ (8009d98 <UART_SetConfig+0xac4>)
 8009cf6:	fa22 f303 	lsr.w	r3, r2, r3
 8009cfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009cfc:	e00f      	b.n	8009d1e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8009cfe:	4b26      	ldr	r3, [pc, #152]	@ (8009d98 <UART_SetConfig+0xac4>)
 8009d00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d02:	e00c      	b.n	8009d1e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009d04:	4b25      	ldr	r3, [pc, #148]	@ (8009d9c <UART_SetConfig+0xac8>)
 8009d06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d08:	e009      	b.n	8009d1e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009d0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009d0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d10:	e005      	b.n	8009d1e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8009d12:	2300      	movs	r3, #0
 8009d14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009d16:	2301      	movs	r3, #1
 8009d18:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009d1c:	bf00      	nop
    }

    if (pclk != 0U)
 8009d1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d021      	beq.n	8009d68 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009d24:	697b      	ldr	r3, [r7, #20]
 8009d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d28:	4a1d      	ldr	r2, [pc, #116]	@ (8009da0 <UART_SetConfig+0xacc>)
 8009d2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d2e:	461a      	mov	r2, r3
 8009d30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d32:	fbb3 f2f2 	udiv	r2, r3, r2
 8009d36:	697b      	ldr	r3, [r7, #20]
 8009d38:	685b      	ldr	r3, [r3, #4]
 8009d3a:	085b      	lsrs	r3, r3, #1
 8009d3c:	441a      	add	r2, r3
 8009d3e:	697b      	ldr	r3, [r7, #20]
 8009d40:	685b      	ldr	r3, [r3, #4]
 8009d42:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d46:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009d48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d4a:	2b0f      	cmp	r3, #15
 8009d4c:	d909      	bls.n	8009d62 <UART_SetConfig+0xa8e>
 8009d4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d54:	d205      	bcs.n	8009d62 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009d56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d58:	b29a      	uxth	r2, r3
 8009d5a:	697b      	ldr	r3, [r7, #20]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	60da      	str	r2, [r3, #12]
 8009d60:	e002      	b.n	8009d68 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009d62:	2301      	movs	r3, #1
 8009d64:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009d68:	697b      	ldr	r3, [r7, #20]
 8009d6a:	2201      	movs	r2, #1
 8009d6c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009d70:	697b      	ldr	r3, [r7, #20]
 8009d72:	2201      	movs	r2, #1
 8009d74:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009d78:	697b      	ldr	r3, [r7, #20]
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009d7e:	697b      	ldr	r3, [r7, #20]
 8009d80:	2200      	movs	r2, #0
 8009d82:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009d84:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8009d88:	4618      	mov	r0, r3
 8009d8a:	3748      	adds	r7, #72	@ 0x48
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009d92:	bf00      	nop
 8009d94:	58024400 	.word	0x58024400
 8009d98:	03d09000 	.word	0x03d09000
 8009d9c:	003d0900 	.word	0x003d0900
 8009da0:	0800d600 	.word	0x0800d600

08009da4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009da4:	b480      	push	{r7}
 8009da6:	b083      	sub	sp, #12
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009db0:	f003 0308 	and.w	r3, r3, #8
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d00a      	beq.n	8009dce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	685b      	ldr	r3, [r3, #4]
 8009dbe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	430a      	orrs	r2, r1
 8009dcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009dd2:	f003 0301 	and.w	r3, r3, #1
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d00a      	beq.n	8009df0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	685b      	ldr	r3, [r3, #4]
 8009de0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	430a      	orrs	r2, r1
 8009dee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009df4:	f003 0302 	and.w	r3, r3, #2
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d00a      	beq.n	8009e12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	685b      	ldr	r3, [r3, #4]
 8009e02:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	430a      	orrs	r2, r1
 8009e10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e16:	f003 0304 	and.w	r3, r3, #4
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d00a      	beq.n	8009e34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	685b      	ldr	r3, [r3, #4]
 8009e24:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	430a      	orrs	r2, r1
 8009e32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e38:	f003 0310 	and.w	r3, r3, #16
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d00a      	beq.n	8009e56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	689b      	ldr	r3, [r3, #8]
 8009e46:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	430a      	orrs	r2, r1
 8009e54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e5a:	f003 0320 	and.w	r3, r3, #32
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d00a      	beq.n	8009e78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	689b      	ldr	r3, [r3, #8]
 8009e68:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	430a      	orrs	r2, r1
 8009e76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d01a      	beq.n	8009eba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	685b      	ldr	r3, [r3, #4]
 8009e8a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	430a      	orrs	r2, r1
 8009e98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009ea2:	d10a      	bne.n	8009eba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	685b      	ldr	r3, [r3, #4]
 8009eaa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	430a      	orrs	r2, r1
 8009eb8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ebe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d00a      	beq.n	8009edc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	685b      	ldr	r3, [r3, #4]
 8009ecc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	430a      	orrs	r2, r1
 8009eda:	605a      	str	r2, [r3, #4]
  }
}
 8009edc:	bf00      	nop
 8009ede:	370c      	adds	r7, #12
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee6:	4770      	bx	lr

08009ee8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b098      	sub	sp, #96	@ 0x60
 8009eec:	af02      	add	r7, sp, #8
 8009eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009ef8:	f7f8 f958 	bl	80021ac <HAL_GetTick>
 8009efc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	f003 0308 	and.w	r3, r3, #8
 8009f08:	2b08      	cmp	r3, #8
 8009f0a:	d12f      	bne.n	8009f6c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009f0c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009f10:	9300      	str	r3, [sp, #0]
 8009f12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009f14:	2200      	movs	r2, #0
 8009f16:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009f1a:	6878      	ldr	r0, [r7, #4]
 8009f1c:	f000 f88e 	bl	800a03c <UART_WaitOnFlagUntilTimeout>
 8009f20:	4603      	mov	r3, r0
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d022      	beq.n	8009f6c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f2e:	e853 3f00 	ldrex	r3, [r3]
 8009f32:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009f34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f36:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009f3a:	653b      	str	r3, [r7, #80]	@ 0x50
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	461a      	mov	r2, r3
 8009f42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f44:	647b      	str	r3, [r7, #68]	@ 0x44
 8009f46:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f48:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009f4a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009f4c:	e841 2300 	strex	r3, r2, [r1]
 8009f50:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009f52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d1e6      	bne.n	8009f26 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2220      	movs	r2, #32
 8009f5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2200      	movs	r2, #0
 8009f64:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009f68:	2303      	movs	r3, #3
 8009f6a:	e063      	b.n	800a034 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	f003 0304 	and.w	r3, r3, #4
 8009f76:	2b04      	cmp	r3, #4
 8009f78:	d149      	bne.n	800a00e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009f7a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009f7e:	9300      	str	r3, [sp, #0]
 8009f80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009f82:	2200      	movs	r2, #0
 8009f84:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009f88:	6878      	ldr	r0, [r7, #4]
 8009f8a:	f000 f857 	bl	800a03c <UART_WaitOnFlagUntilTimeout>
 8009f8e:	4603      	mov	r3, r0
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d03c      	beq.n	800a00e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f9c:	e853 3f00 	ldrex	r3, [r3]
 8009fa0:	623b      	str	r3, [r7, #32]
   return(result);
 8009fa2:	6a3b      	ldr	r3, [r7, #32]
 8009fa4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009fa8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	461a      	mov	r2, r3
 8009fb0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009fb2:	633b      	str	r3, [r7, #48]	@ 0x30
 8009fb4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fb6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009fb8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009fba:	e841 2300 	strex	r3, r2, [r1]
 8009fbe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009fc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d1e6      	bne.n	8009f94 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	3308      	adds	r3, #8
 8009fcc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fce:	693b      	ldr	r3, [r7, #16]
 8009fd0:	e853 3f00 	ldrex	r3, [r3]
 8009fd4:	60fb      	str	r3, [r7, #12]
   return(result);
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	f023 0301 	bic.w	r3, r3, #1
 8009fdc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	3308      	adds	r3, #8
 8009fe4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009fe6:	61fa      	str	r2, [r7, #28]
 8009fe8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fea:	69b9      	ldr	r1, [r7, #24]
 8009fec:	69fa      	ldr	r2, [r7, #28]
 8009fee:	e841 2300 	strex	r3, r2, [r1]
 8009ff2:	617b      	str	r3, [r7, #20]
   return(result);
 8009ff4:	697b      	ldr	r3, [r7, #20]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d1e5      	bne.n	8009fc6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	2220      	movs	r2, #32
 8009ffe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	2200      	movs	r2, #0
 800a006:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a00a:	2303      	movs	r3, #3
 800a00c:	e012      	b.n	800a034 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	2220      	movs	r2, #32
 800a012:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	2220      	movs	r2, #32
 800a01a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	2200      	movs	r2, #0
 800a022:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2200      	movs	r2, #0
 800a028:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2200      	movs	r2, #0
 800a02e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a032:	2300      	movs	r3, #0
}
 800a034:	4618      	mov	r0, r3
 800a036:	3758      	adds	r7, #88	@ 0x58
 800a038:	46bd      	mov	sp, r7
 800a03a:	bd80      	pop	{r7, pc}

0800a03c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b084      	sub	sp, #16
 800a040:	af00      	add	r7, sp, #0
 800a042:	60f8      	str	r0, [r7, #12]
 800a044:	60b9      	str	r1, [r7, #8]
 800a046:	603b      	str	r3, [r7, #0]
 800a048:	4613      	mov	r3, r2
 800a04a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a04c:	e04f      	b.n	800a0ee <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a04e:	69bb      	ldr	r3, [r7, #24]
 800a050:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a054:	d04b      	beq.n	800a0ee <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a056:	f7f8 f8a9 	bl	80021ac <HAL_GetTick>
 800a05a:	4602      	mov	r2, r0
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	1ad3      	subs	r3, r2, r3
 800a060:	69ba      	ldr	r2, [r7, #24]
 800a062:	429a      	cmp	r2, r3
 800a064:	d302      	bcc.n	800a06c <UART_WaitOnFlagUntilTimeout+0x30>
 800a066:	69bb      	ldr	r3, [r7, #24]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d101      	bne.n	800a070 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a06c:	2303      	movs	r3, #3
 800a06e:	e04e      	b.n	800a10e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	f003 0304 	and.w	r3, r3, #4
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d037      	beq.n	800a0ee <UART_WaitOnFlagUntilTimeout+0xb2>
 800a07e:	68bb      	ldr	r3, [r7, #8]
 800a080:	2b80      	cmp	r3, #128	@ 0x80
 800a082:	d034      	beq.n	800a0ee <UART_WaitOnFlagUntilTimeout+0xb2>
 800a084:	68bb      	ldr	r3, [r7, #8]
 800a086:	2b40      	cmp	r3, #64	@ 0x40
 800a088:	d031      	beq.n	800a0ee <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	69db      	ldr	r3, [r3, #28]
 800a090:	f003 0308 	and.w	r3, r3, #8
 800a094:	2b08      	cmp	r3, #8
 800a096:	d110      	bne.n	800a0ba <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	2208      	movs	r2, #8
 800a09e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a0a0:	68f8      	ldr	r0, [r7, #12]
 800a0a2:	f000 f921 	bl	800a2e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	2208      	movs	r2, #8
 800a0aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a0b6:	2301      	movs	r3, #1
 800a0b8:	e029      	b.n	800a10e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	69db      	ldr	r3, [r3, #28]
 800a0c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a0c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a0c8:	d111      	bne.n	800a0ee <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a0d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a0d4:	68f8      	ldr	r0, [r7, #12]
 800a0d6:	f000 f907 	bl	800a2e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	2220      	movs	r2, #32
 800a0de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a0ea:	2303      	movs	r3, #3
 800a0ec:	e00f      	b.n	800a10e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	69da      	ldr	r2, [r3, #28]
 800a0f4:	68bb      	ldr	r3, [r7, #8]
 800a0f6:	4013      	ands	r3, r2
 800a0f8:	68ba      	ldr	r2, [r7, #8]
 800a0fa:	429a      	cmp	r2, r3
 800a0fc:	bf0c      	ite	eq
 800a0fe:	2301      	moveq	r3, #1
 800a100:	2300      	movne	r3, #0
 800a102:	b2db      	uxtb	r3, r3
 800a104:	461a      	mov	r2, r3
 800a106:	79fb      	ldrb	r3, [r7, #7]
 800a108:	429a      	cmp	r2, r3
 800a10a:	d0a0      	beq.n	800a04e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a10c:	2300      	movs	r3, #0
}
 800a10e:	4618      	mov	r0, r3
 800a110:	3710      	adds	r7, #16
 800a112:	46bd      	mov	sp, r7
 800a114:	bd80      	pop	{r7, pc}
	...

0800a118 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b096      	sub	sp, #88	@ 0x58
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	60f8      	str	r0, [r7, #12]
 800a120:	60b9      	str	r1, [r7, #8]
 800a122:	4613      	mov	r3, r2
 800a124:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	68ba      	ldr	r2, [r7, #8]
 800a12a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	88fa      	ldrh	r2, [r7, #6]
 800a130:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	2200      	movs	r2, #0
 800a138:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	2222      	movs	r2, #34	@ 0x22
 800a140:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d02d      	beq.n	800a1aa <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a154:	4a40      	ldr	r2, [pc, #256]	@ (800a258 <UART_Start_Receive_DMA+0x140>)
 800a156:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a15e:	4a3f      	ldr	r2, [pc, #252]	@ (800a25c <UART_Start_Receive_DMA+0x144>)
 800a160:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a168:	4a3d      	ldr	r2, [pc, #244]	@ (800a260 <UART_Start_Receive_DMA+0x148>)
 800a16a:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a172:	2200      	movs	r2, #0
 800a174:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	3324      	adds	r3, #36	@ 0x24
 800a182:	4619      	mov	r1, r3
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a188:	461a      	mov	r2, r3
 800a18a:	88fb      	ldrh	r3, [r7, #6]
 800a18c:	f7f8 fc86 	bl	8002a9c <HAL_DMA_Start_IT>
 800a190:	4603      	mov	r3, r0
 800a192:	2b00      	cmp	r3, #0
 800a194:	d009      	beq.n	800a1aa <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	2210      	movs	r2, #16
 800a19a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	2220      	movs	r2, #32
 800a1a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800a1a6:	2301      	movs	r3, #1
 800a1a8:	e051      	b.n	800a24e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	691b      	ldr	r3, [r3, #16]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d018      	beq.n	800a1e4 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1ba:	e853 3f00 	ldrex	r3, [r3]
 800a1be:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a1c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a1c6:	657b      	str	r3, [r7, #84]	@ 0x54
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	461a      	mov	r2, r3
 800a1ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a1d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a1d2:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1d4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a1d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a1d8:	e841 2300 	strex	r3, r2, [r1]
 800a1dc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a1de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d1e6      	bne.n	800a1b2 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	3308      	adds	r3, #8
 800a1ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1ee:	e853 3f00 	ldrex	r3, [r3]
 800a1f2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a1f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1f6:	f043 0301 	orr.w	r3, r3, #1
 800a1fa:	653b      	str	r3, [r7, #80]	@ 0x50
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	3308      	adds	r3, #8
 800a202:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a204:	637a      	str	r2, [r7, #52]	@ 0x34
 800a206:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a208:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a20a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a20c:	e841 2300 	strex	r3, r2, [r1]
 800a210:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a212:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a214:	2b00      	cmp	r3, #0
 800a216:	d1e5      	bne.n	800a1e4 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	3308      	adds	r3, #8
 800a21e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a220:	697b      	ldr	r3, [r7, #20]
 800a222:	e853 3f00 	ldrex	r3, [r3]
 800a226:	613b      	str	r3, [r7, #16]
   return(result);
 800a228:	693b      	ldr	r3, [r7, #16]
 800a22a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a22e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	3308      	adds	r3, #8
 800a236:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a238:	623a      	str	r2, [r7, #32]
 800a23a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a23c:	69f9      	ldr	r1, [r7, #28]
 800a23e:	6a3a      	ldr	r2, [r7, #32]
 800a240:	e841 2300 	strex	r3, r2, [r1]
 800a244:	61bb      	str	r3, [r7, #24]
   return(result);
 800a246:	69bb      	ldr	r3, [r7, #24]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d1e5      	bne.n	800a218 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800a24c:	2300      	movs	r3, #0
}
 800a24e:	4618      	mov	r0, r3
 800a250:	3758      	adds	r7, #88	@ 0x58
 800a252:	46bd      	mov	sp, r7
 800a254:	bd80      	pop	{r7, pc}
 800a256:	bf00      	nop
 800a258:	0800a3b5 	.word	0x0800a3b5
 800a25c:	0800a4dd 	.word	0x0800a4dd
 800a260:	0800a51b 	.word	0x0800a51b

0800a264 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a264:	b480      	push	{r7}
 800a266:	b08f      	sub	sp, #60	@ 0x3c
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a272:	6a3b      	ldr	r3, [r7, #32]
 800a274:	e853 3f00 	ldrex	r3, [r3]
 800a278:	61fb      	str	r3, [r7, #28]
   return(result);
 800a27a:	69fb      	ldr	r3, [r7, #28]
 800a27c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a280:	637b      	str	r3, [r7, #52]	@ 0x34
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	461a      	mov	r2, r3
 800a288:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a28a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a28c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a28e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a290:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a292:	e841 2300 	strex	r3, r2, [r1]
 800a296:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d1e6      	bne.n	800a26c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	3308      	adds	r3, #8
 800a2a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	e853 3f00 	ldrex	r3, [r3]
 800a2ac:	60bb      	str	r3, [r7, #8]
   return(result);
 800a2ae:	68bb      	ldr	r3, [r7, #8]
 800a2b0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a2b4:	633b      	str	r3, [r7, #48]	@ 0x30
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	3308      	adds	r3, #8
 800a2bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a2be:	61ba      	str	r2, [r7, #24]
 800a2c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2c2:	6979      	ldr	r1, [r7, #20]
 800a2c4:	69ba      	ldr	r2, [r7, #24]
 800a2c6:	e841 2300 	strex	r3, r2, [r1]
 800a2ca:	613b      	str	r3, [r7, #16]
   return(result);
 800a2cc:	693b      	ldr	r3, [r7, #16]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d1e5      	bne.n	800a29e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2220      	movs	r2, #32
 800a2d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800a2da:	bf00      	nop
 800a2dc:	373c      	adds	r7, #60	@ 0x3c
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e4:	4770      	bx	lr
	...

0800a2e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a2e8:	b480      	push	{r7}
 800a2ea:	b095      	sub	sp, #84	@ 0x54
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2f8:	e853 3f00 	ldrex	r3, [r3]
 800a2fc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a2fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a300:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a304:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	461a      	mov	r2, r3
 800a30c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a30e:	643b      	str	r3, [r7, #64]	@ 0x40
 800a310:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a312:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a314:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a316:	e841 2300 	strex	r3, r2, [r1]
 800a31a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a31c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d1e6      	bne.n	800a2f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	3308      	adds	r3, #8
 800a328:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a32a:	6a3b      	ldr	r3, [r7, #32]
 800a32c:	e853 3f00 	ldrex	r3, [r3]
 800a330:	61fb      	str	r3, [r7, #28]
   return(result);
 800a332:	69fa      	ldr	r2, [r7, #28]
 800a334:	4b1e      	ldr	r3, [pc, #120]	@ (800a3b0 <UART_EndRxTransfer+0xc8>)
 800a336:	4013      	ands	r3, r2
 800a338:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	3308      	adds	r3, #8
 800a340:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a342:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a344:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a346:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a348:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a34a:	e841 2300 	strex	r3, r2, [r1]
 800a34e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a352:	2b00      	cmp	r3, #0
 800a354:	d1e5      	bne.n	800a322 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a35a:	2b01      	cmp	r3, #1
 800a35c:	d118      	bne.n	800a390 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	e853 3f00 	ldrex	r3, [r3]
 800a36a:	60bb      	str	r3, [r7, #8]
   return(result);
 800a36c:	68bb      	ldr	r3, [r7, #8]
 800a36e:	f023 0310 	bic.w	r3, r3, #16
 800a372:	647b      	str	r3, [r7, #68]	@ 0x44
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	461a      	mov	r2, r3
 800a37a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a37c:	61bb      	str	r3, [r7, #24]
 800a37e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a380:	6979      	ldr	r1, [r7, #20]
 800a382:	69ba      	ldr	r2, [r7, #24]
 800a384:	e841 2300 	strex	r3, r2, [r1]
 800a388:	613b      	str	r3, [r7, #16]
   return(result);
 800a38a:	693b      	ldr	r3, [r7, #16]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d1e6      	bne.n	800a35e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	2220      	movs	r2, #32
 800a394:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2200      	movs	r2, #0
 800a39c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a3a4:	bf00      	nop
 800a3a6:	3754      	adds	r7, #84	@ 0x54
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ae:	4770      	bx	lr
 800a3b0:	effffffe 	.word	0xeffffffe

0800a3b4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b09c      	sub	sp, #112	@ 0x70
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3c0:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	69db      	ldr	r3, [r3, #28]
 800a3c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a3ca:	d071      	beq.n	800a4b0 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800a3cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a3d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a3dc:	e853 3f00 	ldrex	r3, [r3]
 800a3e0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a3e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a3e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a3e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a3ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	461a      	mov	r2, r3
 800a3f0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a3f2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a3f4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3f6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a3f8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a3fa:	e841 2300 	strex	r3, r2, [r1]
 800a3fe:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a400:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a402:	2b00      	cmp	r3, #0
 800a404:	d1e6      	bne.n	800a3d4 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a406:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	3308      	adds	r3, #8
 800a40c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a40e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a410:	e853 3f00 	ldrex	r3, [r3]
 800a414:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a416:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a418:	f023 0301 	bic.w	r3, r3, #1
 800a41c:	667b      	str	r3, [r7, #100]	@ 0x64
 800a41e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	3308      	adds	r3, #8
 800a424:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a426:	647a      	str	r2, [r7, #68]	@ 0x44
 800a428:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a42a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a42c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a42e:	e841 2300 	strex	r3, r2, [r1]
 800a432:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a434:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a436:	2b00      	cmp	r3, #0
 800a438:	d1e5      	bne.n	800a406 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a43a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	3308      	adds	r3, #8
 800a440:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a444:	e853 3f00 	ldrex	r3, [r3]
 800a448:	623b      	str	r3, [r7, #32]
   return(result);
 800a44a:	6a3b      	ldr	r3, [r7, #32]
 800a44c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a450:	663b      	str	r3, [r7, #96]	@ 0x60
 800a452:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	3308      	adds	r3, #8
 800a458:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a45a:	633a      	str	r2, [r7, #48]	@ 0x30
 800a45c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a45e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a460:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a462:	e841 2300 	strex	r3, r2, [r1]
 800a466:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a468:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d1e5      	bne.n	800a43a <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a46e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a470:	2220      	movs	r2, #32
 800a472:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a476:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a478:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a47a:	2b01      	cmp	r3, #1
 800a47c:	d118      	bne.n	800a4b0 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a47e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a484:	693b      	ldr	r3, [r7, #16]
 800a486:	e853 3f00 	ldrex	r3, [r3]
 800a48a:	60fb      	str	r3, [r7, #12]
   return(result);
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	f023 0310 	bic.w	r3, r3, #16
 800a492:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a494:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	461a      	mov	r2, r3
 800a49a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a49c:	61fb      	str	r3, [r7, #28]
 800a49e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4a0:	69b9      	ldr	r1, [r7, #24]
 800a4a2:	69fa      	ldr	r2, [r7, #28]
 800a4a4:	e841 2300 	strex	r3, r2, [r1]
 800a4a8:	617b      	str	r3, [r7, #20]
   return(result);
 800a4aa:	697b      	ldr	r3, [r7, #20]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d1e6      	bne.n	800a47e <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a4b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a4b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a4b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a4ba:	2b01      	cmp	r3, #1
 800a4bc:	d107      	bne.n	800a4ce <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a4be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a4c0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a4c4:	4619      	mov	r1, r3
 800a4c6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a4c8:	f7fe fef8 	bl	80092bc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a4cc:	e002      	b.n	800a4d4 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800a4ce:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a4d0:	f7fe fed6 	bl	8009280 <HAL_UART_RxCpltCallback>
}
 800a4d4:	bf00      	nop
 800a4d6:	3770      	adds	r7, #112	@ 0x70
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	bd80      	pop	{r7, pc}

0800a4dc <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b084      	sub	sp, #16
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4e8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	2201      	movs	r2, #1
 800a4ee:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a4f4:	2b01      	cmp	r3, #1
 800a4f6:	d109      	bne.n	800a50c <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a4fe:	085b      	lsrs	r3, r3, #1
 800a500:	b29b      	uxth	r3, r3
 800a502:	4619      	mov	r1, r3
 800a504:	68f8      	ldr	r0, [r7, #12]
 800a506:	f7fe fed9 	bl	80092bc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a50a:	e002      	b.n	800a512 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800a50c:	68f8      	ldr	r0, [r7, #12]
 800a50e:	f7fe fec1 	bl	8009294 <HAL_UART_RxHalfCpltCallback>
}
 800a512:	bf00      	nop
 800a514:	3710      	adds	r7, #16
 800a516:	46bd      	mov	sp, r7
 800a518:	bd80      	pop	{r7, pc}

0800a51a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a51a:	b580      	push	{r7, lr}
 800a51c:	b086      	sub	sp, #24
 800a51e:	af00      	add	r7, sp, #0
 800a520:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a526:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a528:	697b      	ldr	r3, [r7, #20]
 800a52a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a52e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a530:	697b      	ldr	r3, [r7, #20]
 800a532:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a536:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a538:	697b      	ldr	r3, [r7, #20]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	689b      	ldr	r3, [r3, #8]
 800a53e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a542:	2b80      	cmp	r3, #128	@ 0x80
 800a544:	d109      	bne.n	800a55a <UART_DMAError+0x40>
 800a546:	693b      	ldr	r3, [r7, #16]
 800a548:	2b21      	cmp	r3, #33	@ 0x21
 800a54a:	d106      	bne.n	800a55a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a54c:	697b      	ldr	r3, [r7, #20]
 800a54e:	2200      	movs	r2, #0
 800a550:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800a554:	6978      	ldr	r0, [r7, #20]
 800a556:	f7ff fe85 	bl	800a264 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a55a:	697b      	ldr	r3, [r7, #20]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	689b      	ldr	r3, [r3, #8]
 800a560:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a564:	2b40      	cmp	r3, #64	@ 0x40
 800a566:	d109      	bne.n	800a57c <UART_DMAError+0x62>
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	2b22      	cmp	r3, #34	@ 0x22
 800a56c:	d106      	bne.n	800a57c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a56e:	697b      	ldr	r3, [r7, #20]
 800a570:	2200      	movs	r2, #0
 800a572:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800a576:	6978      	ldr	r0, [r7, #20]
 800a578:	f7ff feb6 	bl	800a2e8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a57c:	697b      	ldr	r3, [r7, #20]
 800a57e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a582:	f043 0210 	orr.w	r2, r3, #16
 800a586:	697b      	ldr	r3, [r7, #20]
 800a588:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a58c:	6978      	ldr	r0, [r7, #20]
 800a58e:	f7fe fe8b 	bl	80092a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a592:	bf00      	nop
 800a594:	3718      	adds	r7, #24
 800a596:	46bd      	mov	sp, r7
 800a598:	bd80      	pop	{r7, pc}

0800a59a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a59a:	b580      	push	{r7, lr}
 800a59c:	b084      	sub	sp, #16
 800a59e:	af00      	add	r7, sp, #0
 800a5a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a5b0:	68f8      	ldr	r0, [r7, #12]
 800a5b2:	f7fe fe79 	bl	80092a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a5b6:	bf00      	nop
 800a5b8:	3710      	adds	r7, #16
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	bd80      	pop	{r7, pc}

0800a5be <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a5be:	b580      	push	{r7, lr}
 800a5c0:	b088      	sub	sp, #32
 800a5c2:	af00      	add	r7, sp, #0
 800a5c4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	e853 3f00 	ldrex	r3, [r3]
 800a5d2:	60bb      	str	r3, [r7, #8]
   return(result);
 800a5d4:	68bb      	ldr	r3, [r7, #8]
 800a5d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a5da:	61fb      	str	r3, [r7, #28]
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	461a      	mov	r2, r3
 800a5e2:	69fb      	ldr	r3, [r7, #28]
 800a5e4:	61bb      	str	r3, [r7, #24]
 800a5e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5e8:	6979      	ldr	r1, [r7, #20]
 800a5ea:	69ba      	ldr	r2, [r7, #24]
 800a5ec:	e841 2300 	strex	r3, r2, [r1]
 800a5f0:	613b      	str	r3, [r7, #16]
   return(result);
 800a5f2:	693b      	ldr	r3, [r7, #16]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d1e6      	bne.n	800a5c6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	2220      	movs	r2, #32
 800a5fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2200      	movs	r2, #0
 800a604:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a606:	6878      	ldr	r0, [r7, #4]
 800a608:	f7fe fe30 	bl	800926c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a60c:	bf00      	nop
 800a60e:	3720      	adds	r7, #32
 800a610:	46bd      	mov	sp, r7
 800a612:	bd80      	pop	{r7, pc}

0800a614 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a614:	b480      	push	{r7}
 800a616:	b083      	sub	sp, #12
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a61c:	bf00      	nop
 800a61e:	370c      	adds	r7, #12
 800a620:	46bd      	mov	sp, r7
 800a622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a626:	4770      	bx	lr

0800a628 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a628:	b480      	push	{r7}
 800a62a:	b083      	sub	sp, #12
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a630:	bf00      	nop
 800a632:	370c      	adds	r7, #12
 800a634:	46bd      	mov	sp, r7
 800a636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63a:	4770      	bx	lr

0800a63c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a63c:	b480      	push	{r7}
 800a63e:	b083      	sub	sp, #12
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a644:	bf00      	nop
 800a646:	370c      	adds	r7, #12
 800a648:	46bd      	mov	sp, r7
 800a64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64e:	4770      	bx	lr

0800a650 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a650:	b480      	push	{r7}
 800a652:	b085      	sub	sp, #20
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a65e:	2b01      	cmp	r3, #1
 800a660:	d101      	bne.n	800a666 <HAL_UARTEx_DisableFifoMode+0x16>
 800a662:	2302      	movs	r3, #2
 800a664:	e027      	b.n	800a6b6 <HAL_UARTEx_DisableFifoMode+0x66>
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	2201      	movs	r2, #1
 800a66a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	2224      	movs	r2, #36	@ 0x24
 800a672:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	681a      	ldr	r2, [r3, #0]
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	f022 0201 	bic.w	r2, r2, #1
 800a68c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a694:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	2200      	movs	r2, #0
 800a69a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	68fa      	ldr	r2, [r7, #12]
 800a6a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	2220      	movs	r2, #32
 800a6a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a6b4:	2300      	movs	r3, #0
}
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	3714      	adds	r7, #20
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c0:	4770      	bx	lr

0800a6c2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a6c2:	b580      	push	{r7, lr}
 800a6c4:	b084      	sub	sp, #16
 800a6c6:	af00      	add	r7, sp, #0
 800a6c8:	6078      	str	r0, [r7, #4]
 800a6ca:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a6d2:	2b01      	cmp	r3, #1
 800a6d4:	d101      	bne.n	800a6da <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a6d6:	2302      	movs	r3, #2
 800a6d8:	e02d      	b.n	800a736 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	2201      	movs	r2, #1
 800a6de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	2224      	movs	r2, #36	@ 0x24
 800a6e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	681a      	ldr	r2, [r3, #0]
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	f022 0201 	bic.w	r2, r2, #1
 800a700:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	689b      	ldr	r3, [r3, #8]
 800a708:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	683a      	ldr	r2, [r7, #0]
 800a712:	430a      	orrs	r2, r1
 800a714:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a716:	6878      	ldr	r0, [r7, #4]
 800a718:	f000 f850 	bl	800a7bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	68fa      	ldr	r2, [r7, #12]
 800a722:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	2220      	movs	r2, #32
 800a728:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2200      	movs	r2, #0
 800a730:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a734:	2300      	movs	r3, #0
}
 800a736:	4618      	mov	r0, r3
 800a738:	3710      	adds	r7, #16
 800a73a:	46bd      	mov	sp, r7
 800a73c:	bd80      	pop	{r7, pc}

0800a73e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a73e:	b580      	push	{r7, lr}
 800a740:	b084      	sub	sp, #16
 800a742:	af00      	add	r7, sp, #0
 800a744:	6078      	str	r0, [r7, #4]
 800a746:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a74e:	2b01      	cmp	r3, #1
 800a750:	d101      	bne.n	800a756 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a752:	2302      	movs	r3, #2
 800a754:	e02d      	b.n	800a7b2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	2201      	movs	r2, #1
 800a75a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	2224      	movs	r2, #36	@ 0x24
 800a762:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	681a      	ldr	r2, [r3, #0]
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	f022 0201 	bic.w	r2, r2, #1
 800a77c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	689b      	ldr	r3, [r3, #8]
 800a784:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	683a      	ldr	r2, [r7, #0]
 800a78e:	430a      	orrs	r2, r1
 800a790:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a792:	6878      	ldr	r0, [r7, #4]
 800a794:	f000 f812 	bl	800a7bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	68fa      	ldr	r2, [r7, #12]
 800a79e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2220      	movs	r2, #32
 800a7a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a7b0:	2300      	movs	r3, #0
}
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	3710      	adds	r7, #16
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	bd80      	pop	{r7, pc}
	...

0800a7bc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a7bc:	b480      	push	{r7}
 800a7be:	b085      	sub	sp, #20
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d108      	bne.n	800a7de <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	2201      	movs	r2, #1
 800a7d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	2201      	movs	r2, #1
 800a7d8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a7dc:	e031      	b.n	800a842 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a7de:	2310      	movs	r3, #16
 800a7e0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a7e2:	2310      	movs	r3, #16
 800a7e4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	689b      	ldr	r3, [r3, #8]
 800a7ec:	0e5b      	lsrs	r3, r3, #25
 800a7ee:	b2db      	uxtb	r3, r3
 800a7f0:	f003 0307 	and.w	r3, r3, #7
 800a7f4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	689b      	ldr	r3, [r3, #8]
 800a7fc:	0f5b      	lsrs	r3, r3, #29
 800a7fe:	b2db      	uxtb	r3, r3
 800a800:	f003 0307 	and.w	r3, r3, #7
 800a804:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a806:	7bbb      	ldrb	r3, [r7, #14]
 800a808:	7b3a      	ldrb	r2, [r7, #12]
 800a80a:	4911      	ldr	r1, [pc, #68]	@ (800a850 <UARTEx_SetNbDataToProcess+0x94>)
 800a80c:	5c8a      	ldrb	r2, [r1, r2]
 800a80e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a812:	7b3a      	ldrb	r2, [r7, #12]
 800a814:	490f      	ldr	r1, [pc, #60]	@ (800a854 <UARTEx_SetNbDataToProcess+0x98>)
 800a816:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a818:	fb93 f3f2 	sdiv	r3, r3, r2
 800a81c:	b29a      	uxth	r2, r3
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a824:	7bfb      	ldrb	r3, [r7, #15]
 800a826:	7b7a      	ldrb	r2, [r7, #13]
 800a828:	4909      	ldr	r1, [pc, #36]	@ (800a850 <UARTEx_SetNbDataToProcess+0x94>)
 800a82a:	5c8a      	ldrb	r2, [r1, r2]
 800a82c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a830:	7b7a      	ldrb	r2, [r7, #13]
 800a832:	4908      	ldr	r1, [pc, #32]	@ (800a854 <UARTEx_SetNbDataToProcess+0x98>)
 800a834:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a836:	fb93 f3f2 	sdiv	r3, r3, r2
 800a83a:	b29a      	uxth	r2, r3
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a842:	bf00      	nop
 800a844:	3714      	adds	r7, #20
 800a846:	46bd      	mov	sp, r7
 800a848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84c:	4770      	bx	lr
 800a84e:	bf00      	nop
 800a850:	0800d618 	.word	0x0800d618
 800a854:	0800d620 	.word	0x0800d620

0800a858 <__cvt>:
 800a858:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a85a:	ed2d 8b02 	vpush	{d8}
 800a85e:	eeb0 8b40 	vmov.f64	d8, d0
 800a862:	b085      	sub	sp, #20
 800a864:	4617      	mov	r7, r2
 800a866:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800a868:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a86a:	ee18 2a90 	vmov	r2, s17
 800a86e:	f025 0520 	bic.w	r5, r5, #32
 800a872:	2a00      	cmp	r2, #0
 800a874:	bfb6      	itet	lt
 800a876:	222d      	movlt	r2, #45	@ 0x2d
 800a878:	2200      	movge	r2, #0
 800a87a:	eeb1 8b40 	vneglt.f64	d8, d0
 800a87e:	2d46      	cmp	r5, #70	@ 0x46
 800a880:	460c      	mov	r4, r1
 800a882:	701a      	strb	r2, [r3, #0]
 800a884:	d004      	beq.n	800a890 <__cvt+0x38>
 800a886:	2d45      	cmp	r5, #69	@ 0x45
 800a888:	d100      	bne.n	800a88c <__cvt+0x34>
 800a88a:	3401      	adds	r4, #1
 800a88c:	2102      	movs	r1, #2
 800a88e:	e000      	b.n	800a892 <__cvt+0x3a>
 800a890:	2103      	movs	r1, #3
 800a892:	ab03      	add	r3, sp, #12
 800a894:	9301      	str	r3, [sp, #4]
 800a896:	ab02      	add	r3, sp, #8
 800a898:	9300      	str	r3, [sp, #0]
 800a89a:	4622      	mov	r2, r4
 800a89c:	4633      	mov	r3, r6
 800a89e:	eeb0 0b48 	vmov.f64	d0, d8
 800a8a2:	f000 ff21 	bl	800b6e8 <_dtoa_r>
 800a8a6:	2d47      	cmp	r5, #71	@ 0x47
 800a8a8:	d114      	bne.n	800a8d4 <__cvt+0x7c>
 800a8aa:	07fb      	lsls	r3, r7, #31
 800a8ac:	d50a      	bpl.n	800a8c4 <__cvt+0x6c>
 800a8ae:	1902      	adds	r2, r0, r4
 800a8b0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a8b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8b8:	bf08      	it	eq
 800a8ba:	9203      	streq	r2, [sp, #12]
 800a8bc:	2130      	movs	r1, #48	@ 0x30
 800a8be:	9b03      	ldr	r3, [sp, #12]
 800a8c0:	4293      	cmp	r3, r2
 800a8c2:	d319      	bcc.n	800a8f8 <__cvt+0xa0>
 800a8c4:	9b03      	ldr	r3, [sp, #12]
 800a8c6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a8c8:	1a1b      	subs	r3, r3, r0
 800a8ca:	6013      	str	r3, [r2, #0]
 800a8cc:	b005      	add	sp, #20
 800a8ce:	ecbd 8b02 	vpop	{d8}
 800a8d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a8d4:	2d46      	cmp	r5, #70	@ 0x46
 800a8d6:	eb00 0204 	add.w	r2, r0, r4
 800a8da:	d1e9      	bne.n	800a8b0 <__cvt+0x58>
 800a8dc:	7803      	ldrb	r3, [r0, #0]
 800a8de:	2b30      	cmp	r3, #48	@ 0x30
 800a8e0:	d107      	bne.n	800a8f2 <__cvt+0x9a>
 800a8e2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a8e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8ea:	bf1c      	itt	ne
 800a8ec:	f1c4 0401 	rsbne	r4, r4, #1
 800a8f0:	6034      	strne	r4, [r6, #0]
 800a8f2:	6833      	ldr	r3, [r6, #0]
 800a8f4:	441a      	add	r2, r3
 800a8f6:	e7db      	b.n	800a8b0 <__cvt+0x58>
 800a8f8:	1c5c      	adds	r4, r3, #1
 800a8fa:	9403      	str	r4, [sp, #12]
 800a8fc:	7019      	strb	r1, [r3, #0]
 800a8fe:	e7de      	b.n	800a8be <__cvt+0x66>

0800a900 <__exponent>:
 800a900:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a902:	2900      	cmp	r1, #0
 800a904:	bfba      	itte	lt
 800a906:	4249      	neglt	r1, r1
 800a908:	232d      	movlt	r3, #45	@ 0x2d
 800a90a:	232b      	movge	r3, #43	@ 0x2b
 800a90c:	2909      	cmp	r1, #9
 800a90e:	7002      	strb	r2, [r0, #0]
 800a910:	7043      	strb	r3, [r0, #1]
 800a912:	dd29      	ble.n	800a968 <__exponent+0x68>
 800a914:	f10d 0307 	add.w	r3, sp, #7
 800a918:	461d      	mov	r5, r3
 800a91a:	270a      	movs	r7, #10
 800a91c:	461a      	mov	r2, r3
 800a91e:	fbb1 f6f7 	udiv	r6, r1, r7
 800a922:	fb07 1416 	mls	r4, r7, r6, r1
 800a926:	3430      	adds	r4, #48	@ 0x30
 800a928:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a92c:	460c      	mov	r4, r1
 800a92e:	2c63      	cmp	r4, #99	@ 0x63
 800a930:	f103 33ff 	add.w	r3, r3, #4294967295
 800a934:	4631      	mov	r1, r6
 800a936:	dcf1      	bgt.n	800a91c <__exponent+0x1c>
 800a938:	3130      	adds	r1, #48	@ 0x30
 800a93a:	1e94      	subs	r4, r2, #2
 800a93c:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a940:	1c41      	adds	r1, r0, #1
 800a942:	4623      	mov	r3, r4
 800a944:	42ab      	cmp	r3, r5
 800a946:	d30a      	bcc.n	800a95e <__exponent+0x5e>
 800a948:	f10d 0309 	add.w	r3, sp, #9
 800a94c:	1a9b      	subs	r3, r3, r2
 800a94e:	42ac      	cmp	r4, r5
 800a950:	bf88      	it	hi
 800a952:	2300      	movhi	r3, #0
 800a954:	3302      	adds	r3, #2
 800a956:	4403      	add	r3, r0
 800a958:	1a18      	subs	r0, r3, r0
 800a95a:	b003      	add	sp, #12
 800a95c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a95e:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a962:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a966:	e7ed      	b.n	800a944 <__exponent+0x44>
 800a968:	2330      	movs	r3, #48	@ 0x30
 800a96a:	3130      	adds	r1, #48	@ 0x30
 800a96c:	7083      	strb	r3, [r0, #2]
 800a96e:	70c1      	strb	r1, [r0, #3]
 800a970:	1d03      	adds	r3, r0, #4
 800a972:	e7f1      	b.n	800a958 <__exponent+0x58>
 800a974:	0000      	movs	r0, r0
	...

0800a978 <_printf_float>:
 800a978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a97c:	b08d      	sub	sp, #52	@ 0x34
 800a97e:	460c      	mov	r4, r1
 800a980:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a984:	4616      	mov	r6, r2
 800a986:	461f      	mov	r7, r3
 800a988:	4605      	mov	r5, r0
 800a98a:	f000 fdad 	bl	800b4e8 <_localeconv_r>
 800a98e:	f8d0 b000 	ldr.w	fp, [r0]
 800a992:	4658      	mov	r0, fp
 800a994:	f7f5 fcf4 	bl	8000380 <strlen>
 800a998:	2300      	movs	r3, #0
 800a99a:	930a      	str	r3, [sp, #40]	@ 0x28
 800a99c:	f8d8 3000 	ldr.w	r3, [r8]
 800a9a0:	f894 9018 	ldrb.w	r9, [r4, #24]
 800a9a4:	6822      	ldr	r2, [r4, #0]
 800a9a6:	9005      	str	r0, [sp, #20]
 800a9a8:	3307      	adds	r3, #7
 800a9aa:	f023 0307 	bic.w	r3, r3, #7
 800a9ae:	f103 0108 	add.w	r1, r3, #8
 800a9b2:	f8c8 1000 	str.w	r1, [r8]
 800a9b6:	ed93 0b00 	vldr	d0, [r3]
 800a9ba:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800ac18 <_printf_float+0x2a0>
 800a9be:	eeb0 7bc0 	vabs.f64	d7, d0
 800a9c2:	eeb4 7b46 	vcmp.f64	d7, d6
 800a9c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9ca:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800a9ce:	dd24      	ble.n	800aa1a <_printf_float+0xa2>
 800a9d0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800a9d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9d8:	d502      	bpl.n	800a9e0 <_printf_float+0x68>
 800a9da:	232d      	movs	r3, #45	@ 0x2d
 800a9dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a9e0:	498f      	ldr	r1, [pc, #572]	@ (800ac20 <_printf_float+0x2a8>)
 800a9e2:	4b90      	ldr	r3, [pc, #576]	@ (800ac24 <_printf_float+0x2ac>)
 800a9e4:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800a9e8:	bf8c      	ite	hi
 800a9ea:	4688      	movhi	r8, r1
 800a9ec:	4698      	movls	r8, r3
 800a9ee:	f022 0204 	bic.w	r2, r2, #4
 800a9f2:	2303      	movs	r3, #3
 800a9f4:	6123      	str	r3, [r4, #16]
 800a9f6:	6022      	str	r2, [r4, #0]
 800a9f8:	f04f 0a00 	mov.w	sl, #0
 800a9fc:	9700      	str	r7, [sp, #0]
 800a9fe:	4633      	mov	r3, r6
 800aa00:	aa0b      	add	r2, sp, #44	@ 0x2c
 800aa02:	4621      	mov	r1, r4
 800aa04:	4628      	mov	r0, r5
 800aa06:	f000 f9d1 	bl	800adac <_printf_common>
 800aa0a:	3001      	adds	r0, #1
 800aa0c:	f040 8089 	bne.w	800ab22 <_printf_float+0x1aa>
 800aa10:	f04f 30ff 	mov.w	r0, #4294967295
 800aa14:	b00d      	add	sp, #52	@ 0x34
 800aa16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa1a:	eeb4 0b40 	vcmp.f64	d0, d0
 800aa1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa22:	d709      	bvc.n	800aa38 <_printf_float+0xc0>
 800aa24:	ee10 3a90 	vmov	r3, s1
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	bfbc      	itt	lt
 800aa2c:	232d      	movlt	r3, #45	@ 0x2d
 800aa2e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800aa32:	497d      	ldr	r1, [pc, #500]	@ (800ac28 <_printf_float+0x2b0>)
 800aa34:	4b7d      	ldr	r3, [pc, #500]	@ (800ac2c <_printf_float+0x2b4>)
 800aa36:	e7d5      	b.n	800a9e4 <_printf_float+0x6c>
 800aa38:	6863      	ldr	r3, [r4, #4]
 800aa3a:	1c59      	adds	r1, r3, #1
 800aa3c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800aa40:	d139      	bne.n	800aab6 <_printf_float+0x13e>
 800aa42:	2306      	movs	r3, #6
 800aa44:	6063      	str	r3, [r4, #4]
 800aa46:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	6022      	str	r2, [r4, #0]
 800aa4e:	9303      	str	r3, [sp, #12]
 800aa50:	ab0a      	add	r3, sp, #40	@ 0x28
 800aa52:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800aa56:	ab09      	add	r3, sp, #36	@ 0x24
 800aa58:	9300      	str	r3, [sp, #0]
 800aa5a:	6861      	ldr	r1, [r4, #4]
 800aa5c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800aa60:	4628      	mov	r0, r5
 800aa62:	f7ff fef9 	bl	800a858 <__cvt>
 800aa66:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800aa6a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800aa6c:	4680      	mov	r8, r0
 800aa6e:	d129      	bne.n	800aac4 <_printf_float+0x14c>
 800aa70:	1cc8      	adds	r0, r1, #3
 800aa72:	db02      	blt.n	800aa7a <_printf_float+0x102>
 800aa74:	6863      	ldr	r3, [r4, #4]
 800aa76:	4299      	cmp	r1, r3
 800aa78:	dd41      	ble.n	800aafe <_printf_float+0x186>
 800aa7a:	f1a9 0902 	sub.w	r9, r9, #2
 800aa7e:	fa5f f989 	uxtb.w	r9, r9
 800aa82:	3901      	subs	r1, #1
 800aa84:	464a      	mov	r2, r9
 800aa86:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800aa8a:	9109      	str	r1, [sp, #36]	@ 0x24
 800aa8c:	f7ff ff38 	bl	800a900 <__exponent>
 800aa90:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800aa92:	1813      	adds	r3, r2, r0
 800aa94:	2a01      	cmp	r2, #1
 800aa96:	4682      	mov	sl, r0
 800aa98:	6123      	str	r3, [r4, #16]
 800aa9a:	dc02      	bgt.n	800aaa2 <_printf_float+0x12a>
 800aa9c:	6822      	ldr	r2, [r4, #0]
 800aa9e:	07d2      	lsls	r2, r2, #31
 800aaa0:	d501      	bpl.n	800aaa6 <_printf_float+0x12e>
 800aaa2:	3301      	adds	r3, #1
 800aaa4:	6123      	str	r3, [r4, #16]
 800aaa6:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d0a6      	beq.n	800a9fc <_printf_float+0x84>
 800aaae:	232d      	movs	r3, #45	@ 0x2d
 800aab0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aab4:	e7a2      	b.n	800a9fc <_printf_float+0x84>
 800aab6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800aaba:	d1c4      	bne.n	800aa46 <_printf_float+0xce>
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d1c2      	bne.n	800aa46 <_printf_float+0xce>
 800aac0:	2301      	movs	r3, #1
 800aac2:	e7bf      	b.n	800aa44 <_printf_float+0xcc>
 800aac4:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800aac8:	d9db      	bls.n	800aa82 <_printf_float+0x10a>
 800aaca:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800aace:	d118      	bne.n	800ab02 <_printf_float+0x18a>
 800aad0:	2900      	cmp	r1, #0
 800aad2:	6863      	ldr	r3, [r4, #4]
 800aad4:	dd0b      	ble.n	800aaee <_printf_float+0x176>
 800aad6:	6121      	str	r1, [r4, #16]
 800aad8:	b913      	cbnz	r3, 800aae0 <_printf_float+0x168>
 800aada:	6822      	ldr	r2, [r4, #0]
 800aadc:	07d0      	lsls	r0, r2, #31
 800aade:	d502      	bpl.n	800aae6 <_printf_float+0x16e>
 800aae0:	3301      	adds	r3, #1
 800aae2:	440b      	add	r3, r1
 800aae4:	6123      	str	r3, [r4, #16]
 800aae6:	65a1      	str	r1, [r4, #88]	@ 0x58
 800aae8:	f04f 0a00 	mov.w	sl, #0
 800aaec:	e7db      	b.n	800aaa6 <_printf_float+0x12e>
 800aaee:	b913      	cbnz	r3, 800aaf6 <_printf_float+0x17e>
 800aaf0:	6822      	ldr	r2, [r4, #0]
 800aaf2:	07d2      	lsls	r2, r2, #31
 800aaf4:	d501      	bpl.n	800aafa <_printf_float+0x182>
 800aaf6:	3302      	adds	r3, #2
 800aaf8:	e7f4      	b.n	800aae4 <_printf_float+0x16c>
 800aafa:	2301      	movs	r3, #1
 800aafc:	e7f2      	b.n	800aae4 <_printf_float+0x16c>
 800aafe:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800ab02:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ab04:	4299      	cmp	r1, r3
 800ab06:	db05      	blt.n	800ab14 <_printf_float+0x19c>
 800ab08:	6823      	ldr	r3, [r4, #0]
 800ab0a:	6121      	str	r1, [r4, #16]
 800ab0c:	07d8      	lsls	r0, r3, #31
 800ab0e:	d5ea      	bpl.n	800aae6 <_printf_float+0x16e>
 800ab10:	1c4b      	adds	r3, r1, #1
 800ab12:	e7e7      	b.n	800aae4 <_printf_float+0x16c>
 800ab14:	2900      	cmp	r1, #0
 800ab16:	bfd4      	ite	le
 800ab18:	f1c1 0202 	rsble	r2, r1, #2
 800ab1c:	2201      	movgt	r2, #1
 800ab1e:	4413      	add	r3, r2
 800ab20:	e7e0      	b.n	800aae4 <_printf_float+0x16c>
 800ab22:	6823      	ldr	r3, [r4, #0]
 800ab24:	055a      	lsls	r2, r3, #21
 800ab26:	d407      	bmi.n	800ab38 <_printf_float+0x1c0>
 800ab28:	6923      	ldr	r3, [r4, #16]
 800ab2a:	4642      	mov	r2, r8
 800ab2c:	4631      	mov	r1, r6
 800ab2e:	4628      	mov	r0, r5
 800ab30:	47b8      	blx	r7
 800ab32:	3001      	adds	r0, #1
 800ab34:	d12a      	bne.n	800ab8c <_printf_float+0x214>
 800ab36:	e76b      	b.n	800aa10 <_printf_float+0x98>
 800ab38:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800ab3c:	f240 80e0 	bls.w	800ad00 <_printf_float+0x388>
 800ab40:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800ab44:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ab48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab4c:	d133      	bne.n	800abb6 <_printf_float+0x23e>
 800ab4e:	4a38      	ldr	r2, [pc, #224]	@ (800ac30 <_printf_float+0x2b8>)
 800ab50:	2301      	movs	r3, #1
 800ab52:	4631      	mov	r1, r6
 800ab54:	4628      	mov	r0, r5
 800ab56:	47b8      	blx	r7
 800ab58:	3001      	adds	r0, #1
 800ab5a:	f43f af59 	beq.w	800aa10 <_printf_float+0x98>
 800ab5e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800ab62:	4543      	cmp	r3, r8
 800ab64:	db02      	blt.n	800ab6c <_printf_float+0x1f4>
 800ab66:	6823      	ldr	r3, [r4, #0]
 800ab68:	07d8      	lsls	r0, r3, #31
 800ab6a:	d50f      	bpl.n	800ab8c <_printf_float+0x214>
 800ab6c:	9b05      	ldr	r3, [sp, #20]
 800ab6e:	465a      	mov	r2, fp
 800ab70:	4631      	mov	r1, r6
 800ab72:	4628      	mov	r0, r5
 800ab74:	47b8      	blx	r7
 800ab76:	3001      	adds	r0, #1
 800ab78:	f43f af4a 	beq.w	800aa10 <_printf_float+0x98>
 800ab7c:	f04f 0900 	mov.w	r9, #0
 800ab80:	f108 38ff 	add.w	r8, r8, #4294967295
 800ab84:	f104 0a1a 	add.w	sl, r4, #26
 800ab88:	45c8      	cmp	r8, r9
 800ab8a:	dc09      	bgt.n	800aba0 <_printf_float+0x228>
 800ab8c:	6823      	ldr	r3, [r4, #0]
 800ab8e:	079b      	lsls	r3, r3, #30
 800ab90:	f100 8107 	bmi.w	800ada2 <_printf_float+0x42a>
 800ab94:	68e0      	ldr	r0, [r4, #12]
 800ab96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ab98:	4298      	cmp	r0, r3
 800ab9a:	bfb8      	it	lt
 800ab9c:	4618      	movlt	r0, r3
 800ab9e:	e739      	b.n	800aa14 <_printf_float+0x9c>
 800aba0:	2301      	movs	r3, #1
 800aba2:	4652      	mov	r2, sl
 800aba4:	4631      	mov	r1, r6
 800aba6:	4628      	mov	r0, r5
 800aba8:	47b8      	blx	r7
 800abaa:	3001      	adds	r0, #1
 800abac:	f43f af30 	beq.w	800aa10 <_printf_float+0x98>
 800abb0:	f109 0901 	add.w	r9, r9, #1
 800abb4:	e7e8      	b.n	800ab88 <_printf_float+0x210>
 800abb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800abb8:	2b00      	cmp	r3, #0
 800abba:	dc3b      	bgt.n	800ac34 <_printf_float+0x2bc>
 800abbc:	4a1c      	ldr	r2, [pc, #112]	@ (800ac30 <_printf_float+0x2b8>)
 800abbe:	2301      	movs	r3, #1
 800abc0:	4631      	mov	r1, r6
 800abc2:	4628      	mov	r0, r5
 800abc4:	47b8      	blx	r7
 800abc6:	3001      	adds	r0, #1
 800abc8:	f43f af22 	beq.w	800aa10 <_printf_float+0x98>
 800abcc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800abd0:	ea59 0303 	orrs.w	r3, r9, r3
 800abd4:	d102      	bne.n	800abdc <_printf_float+0x264>
 800abd6:	6823      	ldr	r3, [r4, #0]
 800abd8:	07d9      	lsls	r1, r3, #31
 800abda:	d5d7      	bpl.n	800ab8c <_printf_float+0x214>
 800abdc:	9b05      	ldr	r3, [sp, #20]
 800abde:	465a      	mov	r2, fp
 800abe0:	4631      	mov	r1, r6
 800abe2:	4628      	mov	r0, r5
 800abe4:	47b8      	blx	r7
 800abe6:	3001      	adds	r0, #1
 800abe8:	f43f af12 	beq.w	800aa10 <_printf_float+0x98>
 800abec:	f04f 0a00 	mov.w	sl, #0
 800abf0:	f104 0b1a 	add.w	fp, r4, #26
 800abf4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800abf6:	425b      	negs	r3, r3
 800abf8:	4553      	cmp	r3, sl
 800abfa:	dc01      	bgt.n	800ac00 <_printf_float+0x288>
 800abfc:	464b      	mov	r3, r9
 800abfe:	e794      	b.n	800ab2a <_printf_float+0x1b2>
 800ac00:	2301      	movs	r3, #1
 800ac02:	465a      	mov	r2, fp
 800ac04:	4631      	mov	r1, r6
 800ac06:	4628      	mov	r0, r5
 800ac08:	47b8      	blx	r7
 800ac0a:	3001      	adds	r0, #1
 800ac0c:	f43f af00 	beq.w	800aa10 <_printf_float+0x98>
 800ac10:	f10a 0a01 	add.w	sl, sl, #1
 800ac14:	e7ee      	b.n	800abf4 <_printf_float+0x27c>
 800ac16:	bf00      	nop
 800ac18:	ffffffff 	.word	0xffffffff
 800ac1c:	7fefffff 	.word	0x7fefffff
 800ac20:	0800d62c 	.word	0x0800d62c
 800ac24:	0800d628 	.word	0x0800d628
 800ac28:	0800d634 	.word	0x0800d634
 800ac2c:	0800d630 	.word	0x0800d630
 800ac30:	0800d638 	.word	0x0800d638
 800ac34:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ac36:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ac3a:	4553      	cmp	r3, sl
 800ac3c:	bfa8      	it	ge
 800ac3e:	4653      	movge	r3, sl
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	4699      	mov	r9, r3
 800ac44:	dc37      	bgt.n	800acb6 <_printf_float+0x33e>
 800ac46:	2300      	movs	r3, #0
 800ac48:	9307      	str	r3, [sp, #28]
 800ac4a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ac4e:	f104 021a 	add.w	r2, r4, #26
 800ac52:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ac54:	9907      	ldr	r1, [sp, #28]
 800ac56:	9306      	str	r3, [sp, #24]
 800ac58:	eba3 0309 	sub.w	r3, r3, r9
 800ac5c:	428b      	cmp	r3, r1
 800ac5e:	dc31      	bgt.n	800acc4 <_printf_float+0x34c>
 800ac60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac62:	459a      	cmp	sl, r3
 800ac64:	dc3b      	bgt.n	800acde <_printf_float+0x366>
 800ac66:	6823      	ldr	r3, [r4, #0]
 800ac68:	07da      	lsls	r2, r3, #31
 800ac6a:	d438      	bmi.n	800acde <_printf_float+0x366>
 800ac6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac6e:	ebaa 0903 	sub.w	r9, sl, r3
 800ac72:	9b06      	ldr	r3, [sp, #24]
 800ac74:	ebaa 0303 	sub.w	r3, sl, r3
 800ac78:	4599      	cmp	r9, r3
 800ac7a:	bfa8      	it	ge
 800ac7c:	4699      	movge	r9, r3
 800ac7e:	f1b9 0f00 	cmp.w	r9, #0
 800ac82:	dc34      	bgt.n	800acee <_printf_float+0x376>
 800ac84:	f04f 0800 	mov.w	r8, #0
 800ac88:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ac8c:	f104 0b1a 	add.w	fp, r4, #26
 800ac90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac92:	ebaa 0303 	sub.w	r3, sl, r3
 800ac96:	eba3 0309 	sub.w	r3, r3, r9
 800ac9a:	4543      	cmp	r3, r8
 800ac9c:	f77f af76 	ble.w	800ab8c <_printf_float+0x214>
 800aca0:	2301      	movs	r3, #1
 800aca2:	465a      	mov	r2, fp
 800aca4:	4631      	mov	r1, r6
 800aca6:	4628      	mov	r0, r5
 800aca8:	47b8      	blx	r7
 800acaa:	3001      	adds	r0, #1
 800acac:	f43f aeb0 	beq.w	800aa10 <_printf_float+0x98>
 800acb0:	f108 0801 	add.w	r8, r8, #1
 800acb4:	e7ec      	b.n	800ac90 <_printf_float+0x318>
 800acb6:	4642      	mov	r2, r8
 800acb8:	4631      	mov	r1, r6
 800acba:	4628      	mov	r0, r5
 800acbc:	47b8      	blx	r7
 800acbe:	3001      	adds	r0, #1
 800acc0:	d1c1      	bne.n	800ac46 <_printf_float+0x2ce>
 800acc2:	e6a5      	b.n	800aa10 <_printf_float+0x98>
 800acc4:	2301      	movs	r3, #1
 800acc6:	4631      	mov	r1, r6
 800acc8:	4628      	mov	r0, r5
 800acca:	9206      	str	r2, [sp, #24]
 800accc:	47b8      	blx	r7
 800acce:	3001      	adds	r0, #1
 800acd0:	f43f ae9e 	beq.w	800aa10 <_printf_float+0x98>
 800acd4:	9b07      	ldr	r3, [sp, #28]
 800acd6:	9a06      	ldr	r2, [sp, #24]
 800acd8:	3301      	adds	r3, #1
 800acda:	9307      	str	r3, [sp, #28]
 800acdc:	e7b9      	b.n	800ac52 <_printf_float+0x2da>
 800acde:	9b05      	ldr	r3, [sp, #20]
 800ace0:	465a      	mov	r2, fp
 800ace2:	4631      	mov	r1, r6
 800ace4:	4628      	mov	r0, r5
 800ace6:	47b8      	blx	r7
 800ace8:	3001      	adds	r0, #1
 800acea:	d1bf      	bne.n	800ac6c <_printf_float+0x2f4>
 800acec:	e690      	b.n	800aa10 <_printf_float+0x98>
 800acee:	9a06      	ldr	r2, [sp, #24]
 800acf0:	464b      	mov	r3, r9
 800acf2:	4442      	add	r2, r8
 800acf4:	4631      	mov	r1, r6
 800acf6:	4628      	mov	r0, r5
 800acf8:	47b8      	blx	r7
 800acfa:	3001      	adds	r0, #1
 800acfc:	d1c2      	bne.n	800ac84 <_printf_float+0x30c>
 800acfe:	e687      	b.n	800aa10 <_printf_float+0x98>
 800ad00:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800ad04:	f1b9 0f01 	cmp.w	r9, #1
 800ad08:	dc01      	bgt.n	800ad0e <_printf_float+0x396>
 800ad0a:	07db      	lsls	r3, r3, #31
 800ad0c:	d536      	bpl.n	800ad7c <_printf_float+0x404>
 800ad0e:	2301      	movs	r3, #1
 800ad10:	4642      	mov	r2, r8
 800ad12:	4631      	mov	r1, r6
 800ad14:	4628      	mov	r0, r5
 800ad16:	47b8      	blx	r7
 800ad18:	3001      	adds	r0, #1
 800ad1a:	f43f ae79 	beq.w	800aa10 <_printf_float+0x98>
 800ad1e:	9b05      	ldr	r3, [sp, #20]
 800ad20:	465a      	mov	r2, fp
 800ad22:	4631      	mov	r1, r6
 800ad24:	4628      	mov	r0, r5
 800ad26:	47b8      	blx	r7
 800ad28:	3001      	adds	r0, #1
 800ad2a:	f43f ae71 	beq.w	800aa10 <_printf_float+0x98>
 800ad2e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800ad32:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ad36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad3a:	f109 39ff 	add.w	r9, r9, #4294967295
 800ad3e:	d018      	beq.n	800ad72 <_printf_float+0x3fa>
 800ad40:	464b      	mov	r3, r9
 800ad42:	f108 0201 	add.w	r2, r8, #1
 800ad46:	4631      	mov	r1, r6
 800ad48:	4628      	mov	r0, r5
 800ad4a:	47b8      	blx	r7
 800ad4c:	3001      	adds	r0, #1
 800ad4e:	d10c      	bne.n	800ad6a <_printf_float+0x3f2>
 800ad50:	e65e      	b.n	800aa10 <_printf_float+0x98>
 800ad52:	2301      	movs	r3, #1
 800ad54:	465a      	mov	r2, fp
 800ad56:	4631      	mov	r1, r6
 800ad58:	4628      	mov	r0, r5
 800ad5a:	47b8      	blx	r7
 800ad5c:	3001      	adds	r0, #1
 800ad5e:	f43f ae57 	beq.w	800aa10 <_printf_float+0x98>
 800ad62:	f108 0801 	add.w	r8, r8, #1
 800ad66:	45c8      	cmp	r8, r9
 800ad68:	dbf3      	blt.n	800ad52 <_printf_float+0x3da>
 800ad6a:	4653      	mov	r3, sl
 800ad6c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800ad70:	e6dc      	b.n	800ab2c <_printf_float+0x1b4>
 800ad72:	f04f 0800 	mov.w	r8, #0
 800ad76:	f104 0b1a 	add.w	fp, r4, #26
 800ad7a:	e7f4      	b.n	800ad66 <_printf_float+0x3ee>
 800ad7c:	2301      	movs	r3, #1
 800ad7e:	4642      	mov	r2, r8
 800ad80:	e7e1      	b.n	800ad46 <_printf_float+0x3ce>
 800ad82:	2301      	movs	r3, #1
 800ad84:	464a      	mov	r2, r9
 800ad86:	4631      	mov	r1, r6
 800ad88:	4628      	mov	r0, r5
 800ad8a:	47b8      	blx	r7
 800ad8c:	3001      	adds	r0, #1
 800ad8e:	f43f ae3f 	beq.w	800aa10 <_printf_float+0x98>
 800ad92:	f108 0801 	add.w	r8, r8, #1
 800ad96:	68e3      	ldr	r3, [r4, #12]
 800ad98:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ad9a:	1a5b      	subs	r3, r3, r1
 800ad9c:	4543      	cmp	r3, r8
 800ad9e:	dcf0      	bgt.n	800ad82 <_printf_float+0x40a>
 800ada0:	e6f8      	b.n	800ab94 <_printf_float+0x21c>
 800ada2:	f04f 0800 	mov.w	r8, #0
 800ada6:	f104 0919 	add.w	r9, r4, #25
 800adaa:	e7f4      	b.n	800ad96 <_printf_float+0x41e>

0800adac <_printf_common>:
 800adac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800adb0:	4616      	mov	r6, r2
 800adb2:	4698      	mov	r8, r3
 800adb4:	688a      	ldr	r2, [r1, #8]
 800adb6:	690b      	ldr	r3, [r1, #16]
 800adb8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800adbc:	4293      	cmp	r3, r2
 800adbe:	bfb8      	it	lt
 800adc0:	4613      	movlt	r3, r2
 800adc2:	6033      	str	r3, [r6, #0]
 800adc4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800adc8:	4607      	mov	r7, r0
 800adca:	460c      	mov	r4, r1
 800adcc:	b10a      	cbz	r2, 800add2 <_printf_common+0x26>
 800adce:	3301      	adds	r3, #1
 800add0:	6033      	str	r3, [r6, #0]
 800add2:	6823      	ldr	r3, [r4, #0]
 800add4:	0699      	lsls	r1, r3, #26
 800add6:	bf42      	ittt	mi
 800add8:	6833      	ldrmi	r3, [r6, #0]
 800adda:	3302      	addmi	r3, #2
 800addc:	6033      	strmi	r3, [r6, #0]
 800adde:	6825      	ldr	r5, [r4, #0]
 800ade0:	f015 0506 	ands.w	r5, r5, #6
 800ade4:	d106      	bne.n	800adf4 <_printf_common+0x48>
 800ade6:	f104 0a19 	add.w	sl, r4, #25
 800adea:	68e3      	ldr	r3, [r4, #12]
 800adec:	6832      	ldr	r2, [r6, #0]
 800adee:	1a9b      	subs	r3, r3, r2
 800adf0:	42ab      	cmp	r3, r5
 800adf2:	dc26      	bgt.n	800ae42 <_printf_common+0x96>
 800adf4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800adf8:	6822      	ldr	r2, [r4, #0]
 800adfa:	3b00      	subs	r3, #0
 800adfc:	bf18      	it	ne
 800adfe:	2301      	movne	r3, #1
 800ae00:	0692      	lsls	r2, r2, #26
 800ae02:	d42b      	bmi.n	800ae5c <_printf_common+0xb0>
 800ae04:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ae08:	4641      	mov	r1, r8
 800ae0a:	4638      	mov	r0, r7
 800ae0c:	47c8      	blx	r9
 800ae0e:	3001      	adds	r0, #1
 800ae10:	d01e      	beq.n	800ae50 <_printf_common+0xa4>
 800ae12:	6823      	ldr	r3, [r4, #0]
 800ae14:	6922      	ldr	r2, [r4, #16]
 800ae16:	f003 0306 	and.w	r3, r3, #6
 800ae1a:	2b04      	cmp	r3, #4
 800ae1c:	bf02      	ittt	eq
 800ae1e:	68e5      	ldreq	r5, [r4, #12]
 800ae20:	6833      	ldreq	r3, [r6, #0]
 800ae22:	1aed      	subeq	r5, r5, r3
 800ae24:	68a3      	ldr	r3, [r4, #8]
 800ae26:	bf0c      	ite	eq
 800ae28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ae2c:	2500      	movne	r5, #0
 800ae2e:	4293      	cmp	r3, r2
 800ae30:	bfc4      	itt	gt
 800ae32:	1a9b      	subgt	r3, r3, r2
 800ae34:	18ed      	addgt	r5, r5, r3
 800ae36:	2600      	movs	r6, #0
 800ae38:	341a      	adds	r4, #26
 800ae3a:	42b5      	cmp	r5, r6
 800ae3c:	d11a      	bne.n	800ae74 <_printf_common+0xc8>
 800ae3e:	2000      	movs	r0, #0
 800ae40:	e008      	b.n	800ae54 <_printf_common+0xa8>
 800ae42:	2301      	movs	r3, #1
 800ae44:	4652      	mov	r2, sl
 800ae46:	4641      	mov	r1, r8
 800ae48:	4638      	mov	r0, r7
 800ae4a:	47c8      	blx	r9
 800ae4c:	3001      	adds	r0, #1
 800ae4e:	d103      	bne.n	800ae58 <_printf_common+0xac>
 800ae50:	f04f 30ff 	mov.w	r0, #4294967295
 800ae54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae58:	3501      	adds	r5, #1
 800ae5a:	e7c6      	b.n	800adea <_printf_common+0x3e>
 800ae5c:	18e1      	adds	r1, r4, r3
 800ae5e:	1c5a      	adds	r2, r3, #1
 800ae60:	2030      	movs	r0, #48	@ 0x30
 800ae62:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ae66:	4422      	add	r2, r4
 800ae68:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ae6c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ae70:	3302      	adds	r3, #2
 800ae72:	e7c7      	b.n	800ae04 <_printf_common+0x58>
 800ae74:	2301      	movs	r3, #1
 800ae76:	4622      	mov	r2, r4
 800ae78:	4641      	mov	r1, r8
 800ae7a:	4638      	mov	r0, r7
 800ae7c:	47c8      	blx	r9
 800ae7e:	3001      	adds	r0, #1
 800ae80:	d0e6      	beq.n	800ae50 <_printf_common+0xa4>
 800ae82:	3601      	adds	r6, #1
 800ae84:	e7d9      	b.n	800ae3a <_printf_common+0x8e>
	...

0800ae88 <_printf_i>:
 800ae88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ae8c:	7e0f      	ldrb	r7, [r1, #24]
 800ae8e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ae90:	2f78      	cmp	r7, #120	@ 0x78
 800ae92:	4691      	mov	r9, r2
 800ae94:	4680      	mov	r8, r0
 800ae96:	460c      	mov	r4, r1
 800ae98:	469a      	mov	sl, r3
 800ae9a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ae9e:	d807      	bhi.n	800aeb0 <_printf_i+0x28>
 800aea0:	2f62      	cmp	r7, #98	@ 0x62
 800aea2:	d80a      	bhi.n	800aeba <_printf_i+0x32>
 800aea4:	2f00      	cmp	r7, #0
 800aea6:	f000 80d1 	beq.w	800b04c <_printf_i+0x1c4>
 800aeaa:	2f58      	cmp	r7, #88	@ 0x58
 800aeac:	f000 80b8 	beq.w	800b020 <_printf_i+0x198>
 800aeb0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800aeb4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800aeb8:	e03a      	b.n	800af30 <_printf_i+0xa8>
 800aeba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800aebe:	2b15      	cmp	r3, #21
 800aec0:	d8f6      	bhi.n	800aeb0 <_printf_i+0x28>
 800aec2:	a101      	add	r1, pc, #4	@ (adr r1, 800aec8 <_printf_i+0x40>)
 800aec4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aec8:	0800af21 	.word	0x0800af21
 800aecc:	0800af35 	.word	0x0800af35
 800aed0:	0800aeb1 	.word	0x0800aeb1
 800aed4:	0800aeb1 	.word	0x0800aeb1
 800aed8:	0800aeb1 	.word	0x0800aeb1
 800aedc:	0800aeb1 	.word	0x0800aeb1
 800aee0:	0800af35 	.word	0x0800af35
 800aee4:	0800aeb1 	.word	0x0800aeb1
 800aee8:	0800aeb1 	.word	0x0800aeb1
 800aeec:	0800aeb1 	.word	0x0800aeb1
 800aef0:	0800aeb1 	.word	0x0800aeb1
 800aef4:	0800b033 	.word	0x0800b033
 800aef8:	0800af5f 	.word	0x0800af5f
 800aefc:	0800afed 	.word	0x0800afed
 800af00:	0800aeb1 	.word	0x0800aeb1
 800af04:	0800aeb1 	.word	0x0800aeb1
 800af08:	0800b055 	.word	0x0800b055
 800af0c:	0800aeb1 	.word	0x0800aeb1
 800af10:	0800af5f 	.word	0x0800af5f
 800af14:	0800aeb1 	.word	0x0800aeb1
 800af18:	0800aeb1 	.word	0x0800aeb1
 800af1c:	0800aff5 	.word	0x0800aff5
 800af20:	6833      	ldr	r3, [r6, #0]
 800af22:	1d1a      	adds	r2, r3, #4
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	6032      	str	r2, [r6, #0]
 800af28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800af2c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800af30:	2301      	movs	r3, #1
 800af32:	e09c      	b.n	800b06e <_printf_i+0x1e6>
 800af34:	6833      	ldr	r3, [r6, #0]
 800af36:	6820      	ldr	r0, [r4, #0]
 800af38:	1d19      	adds	r1, r3, #4
 800af3a:	6031      	str	r1, [r6, #0]
 800af3c:	0606      	lsls	r6, r0, #24
 800af3e:	d501      	bpl.n	800af44 <_printf_i+0xbc>
 800af40:	681d      	ldr	r5, [r3, #0]
 800af42:	e003      	b.n	800af4c <_printf_i+0xc4>
 800af44:	0645      	lsls	r5, r0, #25
 800af46:	d5fb      	bpl.n	800af40 <_printf_i+0xb8>
 800af48:	f9b3 5000 	ldrsh.w	r5, [r3]
 800af4c:	2d00      	cmp	r5, #0
 800af4e:	da03      	bge.n	800af58 <_printf_i+0xd0>
 800af50:	232d      	movs	r3, #45	@ 0x2d
 800af52:	426d      	negs	r5, r5
 800af54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800af58:	4858      	ldr	r0, [pc, #352]	@ (800b0bc <_printf_i+0x234>)
 800af5a:	230a      	movs	r3, #10
 800af5c:	e011      	b.n	800af82 <_printf_i+0xfa>
 800af5e:	6821      	ldr	r1, [r4, #0]
 800af60:	6833      	ldr	r3, [r6, #0]
 800af62:	0608      	lsls	r0, r1, #24
 800af64:	f853 5b04 	ldr.w	r5, [r3], #4
 800af68:	d402      	bmi.n	800af70 <_printf_i+0xe8>
 800af6a:	0649      	lsls	r1, r1, #25
 800af6c:	bf48      	it	mi
 800af6e:	b2ad      	uxthmi	r5, r5
 800af70:	2f6f      	cmp	r7, #111	@ 0x6f
 800af72:	4852      	ldr	r0, [pc, #328]	@ (800b0bc <_printf_i+0x234>)
 800af74:	6033      	str	r3, [r6, #0]
 800af76:	bf14      	ite	ne
 800af78:	230a      	movne	r3, #10
 800af7a:	2308      	moveq	r3, #8
 800af7c:	2100      	movs	r1, #0
 800af7e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800af82:	6866      	ldr	r6, [r4, #4]
 800af84:	60a6      	str	r6, [r4, #8]
 800af86:	2e00      	cmp	r6, #0
 800af88:	db05      	blt.n	800af96 <_printf_i+0x10e>
 800af8a:	6821      	ldr	r1, [r4, #0]
 800af8c:	432e      	orrs	r6, r5
 800af8e:	f021 0104 	bic.w	r1, r1, #4
 800af92:	6021      	str	r1, [r4, #0]
 800af94:	d04b      	beq.n	800b02e <_printf_i+0x1a6>
 800af96:	4616      	mov	r6, r2
 800af98:	fbb5 f1f3 	udiv	r1, r5, r3
 800af9c:	fb03 5711 	mls	r7, r3, r1, r5
 800afa0:	5dc7      	ldrb	r7, [r0, r7]
 800afa2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800afa6:	462f      	mov	r7, r5
 800afa8:	42bb      	cmp	r3, r7
 800afaa:	460d      	mov	r5, r1
 800afac:	d9f4      	bls.n	800af98 <_printf_i+0x110>
 800afae:	2b08      	cmp	r3, #8
 800afb0:	d10b      	bne.n	800afca <_printf_i+0x142>
 800afb2:	6823      	ldr	r3, [r4, #0]
 800afb4:	07df      	lsls	r7, r3, #31
 800afb6:	d508      	bpl.n	800afca <_printf_i+0x142>
 800afb8:	6923      	ldr	r3, [r4, #16]
 800afba:	6861      	ldr	r1, [r4, #4]
 800afbc:	4299      	cmp	r1, r3
 800afbe:	bfde      	ittt	le
 800afc0:	2330      	movle	r3, #48	@ 0x30
 800afc2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800afc6:	f106 36ff 	addle.w	r6, r6, #4294967295
 800afca:	1b92      	subs	r2, r2, r6
 800afcc:	6122      	str	r2, [r4, #16]
 800afce:	f8cd a000 	str.w	sl, [sp]
 800afd2:	464b      	mov	r3, r9
 800afd4:	aa03      	add	r2, sp, #12
 800afd6:	4621      	mov	r1, r4
 800afd8:	4640      	mov	r0, r8
 800afda:	f7ff fee7 	bl	800adac <_printf_common>
 800afde:	3001      	adds	r0, #1
 800afe0:	d14a      	bne.n	800b078 <_printf_i+0x1f0>
 800afe2:	f04f 30ff 	mov.w	r0, #4294967295
 800afe6:	b004      	add	sp, #16
 800afe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afec:	6823      	ldr	r3, [r4, #0]
 800afee:	f043 0320 	orr.w	r3, r3, #32
 800aff2:	6023      	str	r3, [r4, #0]
 800aff4:	4832      	ldr	r0, [pc, #200]	@ (800b0c0 <_printf_i+0x238>)
 800aff6:	2778      	movs	r7, #120	@ 0x78
 800aff8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800affc:	6823      	ldr	r3, [r4, #0]
 800affe:	6831      	ldr	r1, [r6, #0]
 800b000:	061f      	lsls	r7, r3, #24
 800b002:	f851 5b04 	ldr.w	r5, [r1], #4
 800b006:	d402      	bmi.n	800b00e <_printf_i+0x186>
 800b008:	065f      	lsls	r7, r3, #25
 800b00a:	bf48      	it	mi
 800b00c:	b2ad      	uxthmi	r5, r5
 800b00e:	6031      	str	r1, [r6, #0]
 800b010:	07d9      	lsls	r1, r3, #31
 800b012:	bf44      	itt	mi
 800b014:	f043 0320 	orrmi.w	r3, r3, #32
 800b018:	6023      	strmi	r3, [r4, #0]
 800b01a:	b11d      	cbz	r5, 800b024 <_printf_i+0x19c>
 800b01c:	2310      	movs	r3, #16
 800b01e:	e7ad      	b.n	800af7c <_printf_i+0xf4>
 800b020:	4826      	ldr	r0, [pc, #152]	@ (800b0bc <_printf_i+0x234>)
 800b022:	e7e9      	b.n	800aff8 <_printf_i+0x170>
 800b024:	6823      	ldr	r3, [r4, #0]
 800b026:	f023 0320 	bic.w	r3, r3, #32
 800b02a:	6023      	str	r3, [r4, #0]
 800b02c:	e7f6      	b.n	800b01c <_printf_i+0x194>
 800b02e:	4616      	mov	r6, r2
 800b030:	e7bd      	b.n	800afae <_printf_i+0x126>
 800b032:	6833      	ldr	r3, [r6, #0]
 800b034:	6825      	ldr	r5, [r4, #0]
 800b036:	6961      	ldr	r1, [r4, #20]
 800b038:	1d18      	adds	r0, r3, #4
 800b03a:	6030      	str	r0, [r6, #0]
 800b03c:	062e      	lsls	r6, r5, #24
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	d501      	bpl.n	800b046 <_printf_i+0x1be>
 800b042:	6019      	str	r1, [r3, #0]
 800b044:	e002      	b.n	800b04c <_printf_i+0x1c4>
 800b046:	0668      	lsls	r0, r5, #25
 800b048:	d5fb      	bpl.n	800b042 <_printf_i+0x1ba>
 800b04a:	8019      	strh	r1, [r3, #0]
 800b04c:	2300      	movs	r3, #0
 800b04e:	6123      	str	r3, [r4, #16]
 800b050:	4616      	mov	r6, r2
 800b052:	e7bc      	b.n	800afce <_printf_i+0x146>
 800b054:	6833      	ldr	r3, [r6, #0]
 800b056:	1d1a      	adds	r2, r3, #4
 800b058:	6032      	str	r2, [r6, #0]
 800b05a:	681e      	ldr	r6, [r3, #0]
 800b05c:	6862      	ldr	r2, [r4, #4]
 800b05e:	2100      	movs	r1, #0
 800b060:	4630      	mov	r0, r6
 800b062:	f7f5 f93d 	bl	80002e0 <memchr>
 800b066:	b108      	cbz	r0, 800b06c <_printf_i+0x1e4>
 800b068:	1b80      	subs	r0, r0, r6
 800b06a:	6060      	str	r0, [r4, #4]
 800b06c:	6863      	ldr	r3, [r4, #4]
 800b06e:	6123      	str	r3, [r4, #16]
 800b070:	2300      	movs	r3, #0
 800b072:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b076:	e7aa      	b.n	800afce <_printf_i+0x146>
 800b078:	6923      	ldr	r3, [r4, #16]
 800b07a:	4632      	mov	r2, r6
 800b07c:	4649      	mov	r1, r9
 800b07e:	4640      	mov	r0, r8
 800b080:	47d0      	blx	sl
 800b082:	3001      	adds	r0, #1
 800b084:	d0ad      	beq.n	800afe2 <_printf_i+0x15a>
 800b086:	6823      	ldr	r3, [r4, #0]
 800b088:	079b      	lsls	r3, r3, #30
 800b08a:	d413      	bmi.n	800b0b4 <_printf_i+0x22c>
 800b08c:	68e0      	ldr	r0, [r4, #12]
 800b08e:	9b03      	ldr	r3, [sp, #12]
 800b090:	4298      	cmp	r0, r3
 800b092:	bfb8      	it	lt
 800b094:	4618      	movlt	r0, r3
 800b096:	e7a6      	b.n	800afe6 <_printf_i+0x15e>
 800b098:	2301      	movs	r3, #1
 800b09a:	4632      	mov	r2, r6
 800b09c:	4649      	mov	r1, r9
 800b09e:	4640      	mov	r0, r8
 800b0a0:	47d0      	blx	sl
 800b0a2:	3001      	adds	r0, #1
 800b0a4:	d09d      	beq.n	800afe2 <_printf_i+0x15a>
 800b0a6:	3501      	adds	r5, #1
 800b0a8:	68e3      	ldr	r3, [r4, #12]
 800b0aa:	9903      	ldr	r1, [sp, #12]
 800b0ac:	1a5b      	subs	r3, r3, r1
 800b0ae:	42ab      	cmp	r3, r5
 800b0b0:	dcf2      	bgt.n	800b098 <_printf_i+0x210>
 800b0b2:	e7eb      	b.n	800b08c <_printf_i+0x204>
 800b0b4:	2500      	movs	r5, #0
 800b0b6:	f104 0619 	add.w	r6, r4, #25
 800b0ba:	e7f5      	b.n	800b0a8 <_printf_i+0x220>
 800b0bc:	0800d63a 	.word	0x0800d63a
 800b0c0:	0800d64b 	.word	0x0800d64b

0800b0c4 <std>:
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	b510      	push	{r4, lr}
 800b0c8:	4604      	mov	r4, r0
 800b0ca:	e9c0 3300 	strd	r3, r3, [r0]
 800b0ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b0d2:	6083      	str	r3, [r0, #8]
 800b0d4:	8181      	strh	r1, [r0, #12]
 800b0d6:	6643      	str	r3, [r0, #100]	@ 0x64
 800b0d8:	81c2      	strh	r2, [r0, #14]
 800b0da:	6183      	str	r3, [r0, #24]
 800b0dc:	4619      	mov	r1, r3
 800b0de:	2208      	movs	r2, #8
 800b0e0:	305c      	adds	r0, #92	@ 0x5c
 800b0e2:	f000 f9f9 	bl	800b4d8 <memset>
 800b0e6:	4b0d      	ldr	r3, [pc, #52]	@ (800b11c <std+0x58>)
 800b0e8:	6263      	str	r3, [r4, #36]	@ 0x24
 800b0ea:	4b0d      	ldr	r3, [pc, #52]	@ (800b120 <std+0x5c>)
 800b0ec:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b0ee:	4b0d      	ldr	r3, [pc, #52]	@ (800b124 <std+0x60>)
 800b0f0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b0f2:	4b0d      	ldr	r3, [pc, #52]	@ (800b128 <std+0x64>)
 800b0f4:	6323      	str	r3, [r4, #48]	@ 0x30
 800b0f6:	4b0d      	ldr	r3, [pc, #52]	@ (800b12c <std+0x68>)
 800b0f8:	6224      	str	r4, [r4, #32]
 800b0fa:	429c      	cmp	r4, r3
 800b0fc:	d006      	beq.n	800b10c <std+0x48>
 800b0fe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b102:	4294      	cmp	r4, r2
 800b104:	d002      	beq.n	800b10c <std+0x48>
 800b106:	33d0      	adds	r3, #208	@ 0xd0
 800b108:	429c      	cmp	r4, r3
 800b10a:	d105      	bne.n	800b118 <std+0x54>
 800b10c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b110:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b114:	f000 ba5c 	b.w	800b5d0 <__retarget_lock_init_recursive>
 800b118:	bd10      	pop	{r4, pc}
 800b11a:	bf00      	nop
 800b11c:	0800b329 	.word	0x0800b329
 800b120:	0800b34b 	.word	0x0800b34b
 800b124:	0800b383 	.word	0x0800b383
 800b128:	0800b3a7 	.word	0x0800b3a7
 800b12c:	24000778 	.word	0x24000778

0800b130 <stdio_exit_handler>:
 800b130:	4a02      	ldr	r2, [pc, #8]	@ (800b13c <stdio_exit_handler+0xc>)
 800b132:	4903      	ldr	r1, [pc, #12]	@ (800b140 <stdio_exit_handler+0x10>)
 800b134:	4803      	ldr	r0, [pc, #12]	@ (800b144 <stdio_exit_handler+0x14>)
 800b136:	f000 b869 	b.w	800b20c <_fwalk_sglue>
 800b13a:	bf00      	nop
 800b13c:	24000030 	.word	0x24000030
 800b140:	0800ce25 	.word	0x0800ce25
 800b144:	24000040 	.word	0x24000040

0800b148 <cleanup_stdio>:
 800b148:	6841      	ldr	r1, [r0, #4]
 800b14a:	4b0c      	ldr	r3, [pc, #48]	@ (800b17c <cleanup_stdio+0x34>)
 800b14c:	4299      	cmp	r1, r3
 800b14e:	b510      	push	{r4, lr}
 800b150:	4604      	mov	r4, r0
 800b152:	d001      	beq.n	800b158 <cleanup_stdio+0x10>
 800b154:	f001 fe66 	bl	800ce24 <_fflush_r>
 800b158:	68a1      	ldr	r1, [r4, #8]
 800b15a:	4b09      	ldr	r3, [pc, #36]	@ (800b180 <cleanup_stdio+0x38>)
 800b15c:	4299      	cmp	r1, r3
 800b15e:	d002      	beq.n	800b166 <cleanup_stdio+0x1e>
 800b160:	4620      	mov	r0, r4
 800b162:	f001 fe5f 	bl	800ce24 <_fflush_r>
 800b166:	68e1      	ldr	r1, [r4, #12]
 800b168:	4b06      	ldr	r3, [pc, #24]	@ (800b184 <cleanup_stdio+0x3c>)
 800b16a:	4299      	cmp	r1, r3
 800b16c:	d004      	beq.n	800b178 <cleanup_stdio+0x30>
 800b16e:	4620      	mov	r0, r4
 800b170:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b174:	f001 be56 	b.w	800ce24 <_fflush_r>
 800b178:	bd10      	pop	{r4, pc}
 800b17a:	bf00      	nop
 800b17c:	24000778 	.word	0x24000778
 800b180:	240007e0 	.word	0x240007e0
 800b184:	24000848 	.word	0x24000848

0800b188 <global_stdio_init.part.0>:
 800b188:	b510      	push	{r4, lr}
 800b18a:	4b0b      	ldr	r3, [pc, #44]	@ (800b1b8 <global_stdio_init.part.0+0x30>)
 800b18c:	4c0b      	ldr	r4, [pc, #44]	@ (800b1bc <global_stdio_init.part.0+0x34>)
 800b18e:	4a0c      	ldr	r2, [pc, #48]	@ (800b1c0 <global_stdio_init.part.0+0x38>)
 800b190:	601a      	str	r2, [r3, #0]
 800b192:	4620      	mov	r0, r4
 800b194:	2200      	movs	r2, #0
 800b196:	2104      	movs	r1, #4
 800b198:	f7ff ff94 	bl	800b0c4 <std>
 800b19c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b1a0:	2201      	movs	r2, #1
 800b1a2:	2109      	movs	r1, #9
 800b1a4:	f7ff ff8e 	bl	800b0c4 <std>
 800b1a8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b1ac:	2202      	movs	r2, #2
 800b1ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b1b2:	2112      	movs	r1, #18
 800b1b4:	f7ff bf86 	b.w	800b0c4 <std>
 800b1b8:	240008b0 	.word	0x240008b0
 800b1bc:	24000778 	.word	0x24000778
 800b1c0:	0800b131 	.word	0x0800b131

0800b1c4 <__sfp_lock_acquire>:
 800b1c4:	4801      	ldr	r0, [pc, #4]	@ (800b1cc <__sfp_lock_acquire+0x8>)
 800b1c6:	f000 ba04 	b.w	800b5d2 <__retarget_lock_acquire_recursive>
 800b1ca:	bf00      	nop
 800b1cc:	240008b9 	.word	0x240008b9

0800b1d0 <__sfp_lock_release>:
 800b1d0:	4801      	ldr	r0, [pc, #4]	@ (800b1d8 <__sfp_lock_release+0x8>)
 800b1d2:	f000 b9ff 	b.w	800b5d4 <__retarget_lock_release_recursive>
 800b1d6:	bf00      	nop
 800b1d8:	240008b9 	.word	0x240008b9

0800b1dc <__sinit>:
 800b1dc:	b510      	push	{r4, lr}
 800b1de:	4604      	mov	r4, r0
 800b1e0:	f7ff fff0 	bl	800b1c4 <__sfp_lock_acquire>
 800b1e4:	6a23      	ldr	r3, [r4, #32]
 800b1e6:	b11b      	cbz	r3, 800b1f0 <__sinit+0x14>
 800b1e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b1ec:	f7ff bff0 	b.w	800b1d0 <__sfp_lock_release>
 800b1f0:	4b04      	ldr	r3, [pc, #16]	@ (800b204 <__sinit+0x28>)
 800b1f2:	6223      	str	r3, [r4, #32]
 800b1f4:	4b04      	ldr	r3, [pc, #16]	@ (800b208 <__sinit+0x2c>)
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d1f5      	bne.n	800b1e8 <__sinit+0xc>
 800b1fc:	f7ff ffc4 	bl	800b188 <global_stdio_init.part.0>
 800b200:	e7f2      	b.n	800b1e8 <__sinit+0xc>
 800b202:	bf00      	nop
 800b204:	0800b149 	.word	0x0800b149
 800b208:	240008b0 	.word	0x240008b0

0800b20c <_fwalk_sglue>:
 800b20c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b210:	4607      	mov	r7, r0
 800b212:	4688      	mov	r8, r1
 800b214:	4614      	mov	r4, r2
 800b216:	2600      	movs	r6, #0
 800b218:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b21c:	f1b9 0901 	subs.w	r9, r9, #1
 800b220:	d505      	bpl.n	800b22e <_fwalk_sglue+0x22>
 800b222:	6824      	ldr	r4, [r4, #0]
 800b224:	2c00      	cmp	r4, #0
 800b226:	d1f7      	bne.n	800b218 <_fwalk_sglue+0xc>
 800b228:	4630      	mov	r0, r6
 800b22a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b22e:	89ab      	ldrh	r3, [r5, #12]
 800b230:	2b01      	cmp	r3, #1
 800b232:	d907      	bls.n	800b244 <_fwalk_sglue+0x38>
 800b234:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b238:	3301      	adds	r3, #1
 800b23a:	d003      	beq.n	800b244 <_fwalk_sglue+0x38>
 800b23c:	4629      	mov	r1, r5
 800b23e:	4638      	mov	r0, r7
 800b240:	47c0      	blx	r8
 800b242:	4306      	orrs	r6, r0
 800b244:	3568      	adds	r5, #104	@ 0x68
 800b246:	e7e9      	b.n	800b21c <_fwalk_sglue+0x10>

0800b248 <iprintf>:
 800b248:	b40f      	push	{r0, r1, r2, r3}
 800b24a:	b507      	push	{r0, r1, r2, lr}
 800b24c:	4906      	ldr	r1, [pc, #24]	@ (800b268 <iprintf+0x20>)
 800b24e:	ab04      	add	r3, sp, #16
 800b250:	6808      	ldr	r0, [r1, #0]
 800b252:	f853 2b04 	ldr.w	r2, [r3], #4
 800b256:	6881      	ldr	r1, [r0, #8]
 800b258:	9301      	str	r3, [sp, #4]
 800b25a:	f001 fc47 	bl	800caec <_vfiprintf_r>
 800b25e:	b003      	add	sp, #12
 800b260:	f85d eb04 	ldr.w	lr, [sp], #4
 800b264:	b004      	add	sp, #16
 800b266:	4770      	bx	lr
 800b268:	2400003c 	.word	0x2400003c

0800b26c <_puts_r>:
 800b26c:	6a03      	ldr	r3, [r0, #32]
 800b26e:	b570      	push	{r4, r5, r6, lr}
 800b270:	6884      	ldr	r4, [r0, #8]
 800b272:	4605      	mov	r5, r0
 800b274:	460e      	mov	r6, r1
 800b276:	b90b      	cbnz	r3, 800b27c <_puts_r+0x10>
 800b278:	f7ff ffb0 	bl	800b1dc <__sinit>
 800b27c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b27e:	07db      	lsls	r3, r3, #31
 800b280:	d405      	bmi.n	800b28e <_puts_r+0x22>
 800b282:	89a3      	ldrh	r3, [r4, #12]
 800b284:	0598      	lsls	r0, r3, #22
 800b286:	d402      	bmi.n	800b28e <_puts_r+0x22>
 800b288:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b28a:	f000 f9a2 	bl	800b5d2 <__retarget_lock_acquire_recursive>
 800b28e:	89a3      	ldrh	r3, [r4, #12]
 800b290:	0719      	lsls	r1, r3, #28
 800b292:	d502      	bpl.n	800b29a <_puts_r+0x2e>
 800b294:	6923      	ldr	r3, [r4, #16]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d135      	bne.n	800b306 <_puts_r+0x9a>
 800b29a:	4621      	mov	r1, r4
 800b29c:	4628      	mov	r0, r5
 800b29e:	f000 f8c5 	bl	800b42c <__swsetup_r>
 800b2a2:	b380      	cbz	r0, 800b306 <_puts_r+0x9a>
 800b2a4:	f04f 35ff 	mov.w	r5, #4294967295
 800b2a8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b2aa:	07da      	lsls	r2, r3, #31
 800b2ac:	d405      	bmi.n	800b2ba <_puts_r+0x4e>
 800b2ae:	89a3      	ldrh	r3, [r4, #12]
 800b2b0:	059b      	lsls	r3, r3, #22
 800b2b2:	d402      	bmi.n	800b2ba <_puts_r+0x4e>
 800b2b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b2b6:	f000 f98d 	bl	800b5d4 <__retarget_lock_release_recursive>
 800b2ba:	4628      	mov	r0, r5
 800b2bc:	bd70      	pop	{r4, r5, r6, pc}
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	da04      	bge.n	800b2cc <_puts_r+0x60>
 800b2c2:	69a2      	ldr	r2, [r4, #24]
 800b2c4:	429a      	cmp	r2, r3
 800b2c6:	dc17      	bgt.n	800b2f8 <_puts_r+0x8c>
 800b2c8:	290a      	cmp	r1, #10
 800b2ca:	d015      	beq.n	800b2f8 <_puts_r+0x8c>
 800b2cc:	6823      	ldr	r3, [r4, #0]
 800b2ce:	1c5a      	adds	r2, r3, #1
 800b2d0:	6022      	str	r2, [r4, #0]
 800b2d2:	7019      	strb	r1, [r3, #0]
 800b2d4:	68a3      	ldr	r3, [r4, #8]
 800b2d6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b2da:	3b01      	subs	r3, #1
 800b2dc:	60a3      	str	r3, [r4, #8]
 800b2de:	2900      	cmp	r1, #0
 800b2e0:	d1ed      	bne.n	800b2be <_puts_r+0x52>
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	da11      	bge.n	800b30a <_puts_r+0x9e>
 800b2e6:	4622      	mov	r2, r4
 800b2e8:	210a      	movs	r1, #10
 800b2ea:	4628      	mov	r0, r5
 800b2ec:	f000 f85f 	bl	800b3ae <__swbuf_r>
 800b2f0:	3001      	adds	r0, #1
 800b2f2:	d0d7      	beq.n	800b2a4 <_puts_r+0x38>
 800b2f4:	250a      	movs	r5, #10
 800b2f6:	e7d7      	b.n	800b2a8 <_puts_r+0x3c>
 800b2f8:	4622      	mov	r2, r4
 800b2fa:	4628      	mov	r0, r5
 800b2fc:	f000 f857 	bl	800b3ae <__swbuf_r>
 800b300:	3001      	adds	r0, #1
 800b302:	d1e7      	bne.n	800b2d4 <_puts_r+0x68>
 800b304:	e7ce      	b.n	800b2a4 <_puts_r+0x38>
 800b306:	3e01      	subs	r6, #1
 800b308:	e7e4      	b.n	800b2d4 <_puts_r+0x68>
 800b30a:	6823      	ldr	r3, [r4, #0]
 800b30c:	1c5a      	adds	r2, r3, #1
 800b30e:	6022      	str	r2, [r4, #0]
 800b310:	220a      	movs	r2, #10
 800b312:	701a      	strb	r2, [r3, #0]
 800b314:	e7ee      	b.n	800b2f4 <_puts_r+0x88>
	...

0800b318 <puts>:
 800b318:	4b02      	ldr	r3, [pc, #8]	@ (800b324 <puts+0xc>)
 800b31a:	4601      	mov	r1, r0
 800b31c:	6818      	ldr	r0, [r3, #0]
 800b31e:	f7ff bfa5 	b.w	800b26c <_puts_r>
 800b322:	bf00      	nop
 800b324:	2400003c 	.word	0x2400003c

0800b328 <__sread>:
 800b328:	b510      	push	{r4, lr}
 800b32a:	460c      	mov	r4, r1
 800b32c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b330:	f000 f900 	bl	800b534 <_read_r>
 800b334:	2800      	cmp	r0, #0
 800b336:	bfab      	itete	ge
 800b338:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b33a:	89a3      	ldrhlt	r3, [r4, #12]
 800b33c:	181b      	addge	r3, r3, r0
 800b33e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b342:	bfac      	ite	ge
 800b344:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b346:	81a3      	strhlt	r3, [r4, #12]
 800b348:	bd10      	pop	{r4, pc}

0800b34a <__swrite>:
 800b34a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b34e:	461f      	mov	r7, r3
 800b350:	898b      	ldrh	r3, [r1, #12]
 800b352:	05db      	lsls	r3, r3, #23
 800b354:	4605      	mov	r5, r0
 800b356:	460c      	mov	r4, r1
 800b358:	4616      	mov	r6, r2
 800b35a:	d505      	bpl.n	800b368 <__swrite+0x1e>
 800b35c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b360:	2302      	movs	r3, #2
 800b362:	2200      	movs	r2, #0
 800b364:	f000 f8d4 	bl	800b510 <_lseek_r>
 800b368:	89a3      	ldrh	r3, [r4, #12]
 800b36a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b36e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b372:	81a3      	strh	r3, [r4, #12]
 800b374:	4632      	mov	r2, r6
 800b376:	463b      	mov	r3, r7
 800b378:	4628      	mov	r0, r5
 800b37a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b37e:	f000 b8eb 	b.w	800b558 <_write_r>

0800b382 <__sseek>:
 800b382:	b510      	push	{r4, lr}
 800b384:	460c      	mov	r4, r1
 800b386:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b38a:	f000 f8c1 	bl	800b510 <_lseek_r>
 800b38e:	1c43      	adds	r3, r0, #1
 800b390:	89a3      	ldrh	r3, [r4, #12]
 800b392:	bf15      	itete	ne
 800b394:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b396:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b39a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b39e:	81a3      	strheq	r3, [r4, #12]
 800b3a0:	bf18      	it	ne
 800b3a2:	81a3      	strhne	r3, [r4, #12]
 800b3a4:	bd10      	pop	{r4, pc}

0800b3a6 <__sclose>:
 800b3a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3aa:	f000 b8a1 	b.w	800b4f0 <_close_r>

0800b3ae <__swbuf_r>:
 800b3ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3b0:	460e      	mov	r6, r1
 800b3b2:	4614      	mov	r4, r2
 800b3b4:	4605      	mov	r5, r0
 800b3b6:	b118      	cbz	r0, 800b3c0 <__swbuf_r+0x12>
 800b3b8:	6a03      	ldr	r3, [r0, #32]
 800b3ba:	b90b      	cbnz	r3, 800b3c0 <__swbuf_r+0x12>
 800b3bc:	f7ff ff0e 	bl	800b1dc <__sinit>
 800b3c0:	69a3      	ldr	r3, [r4, #24]
 800b3c2:	60a3      	str	r3, [r4, #8]
 800b3c4:	89a3      	ldrh	r3, [r4, #12]
 800b3c6:	071a      	lsls	r2, r3, #28
 800b3c8:	d501      	bpl.n	800b3ce <__swbuf_r+0x20>
 800b3ca:	6923      	ldr	r3, [r4, #16]
 800b3cc:	b943      	cbnz	r3, 800b3e0 <__swbuf_r+0x32>
 800b3ce:	4621      	mov	r1, r4
 800b3d0:	4628      	mov	r0, r5
 800b3d2:	f000 f82b 	bl	800b42c <__swsetup_r>
 800b3d6:	b118      	cbz	r0, 800b3e0 <__swbuf_r+0x32>
 800b3d8:	f04f 37ff 	mov.w	r7, #4294967295
 800b3dc:	4638      	mov	r0, r7
 800b3de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3e0:	6823      	ldr	r3, [r4, #0]
 800b3e2:	6922      	ldr	r2, [r4, #16]
 800b3e4:	1a98      	subs	r0, r3, r2
 800b3e6:	6963      	ldr	r3, [r4, #20]
 800b3e8:	b2f6      	uxtb	r6, r6
 800b3ea:	4283      	cmp	r3, r0
 800b3ec:	4637      	mov	r7, r6
 800b3ee:	dc05      	bgt.n	800b3fc <__swbuf_r+0x4e>
 800b3f0:	4621      	mov	r1, r4
 800b3f2:	4628      	mov	r0, r5
 800b3f4:	f001 fd16 	bl	800ce24 <_fflush_r>
 800b3f8:	2800      	cmp	r0, #0
 800b3fa:	d1ed      	bne.n	800b3d8 <__swbuf_r+0x2a>
 800b3fc:	68a3      	ldr	r3, [r4, #8]
 800b3fe:	3b01      	subs	r3, #1
 800b400:	60a3      	str	r3, [r4, #8]
 800b402:	6823      	ldr	r3, [r4, #0]
 800b404:	1c5a      	adds	r2, r3, #1
 800b406:	6022      	str	r2, [r4, #0]
 800b408:	701e      	strb	r6, [r3, #0]
 800b40a:	6962      	ldr	r2, [r4, #20]
 800b40c:	1c43      	adds	r3, r0, #1
 800b40e:	429a      	cmp	r2, r3
 800b410:	d004      	beq.n	800b41c <__swbuf_r+0x6e>
 800b412:	89a3      	ldrh	r3, [r4, #12]
 800b414:	07db      	lsls	r3, r3, #31
 800b416:	d5e1      	bpl.n	800b3dc <__swbuf_r+0x2e>
 800b418:	2e0a      	cmp	r6, #10
 800b41a:	d1df      	bne.n	800b3dc <__swbuf_r+0x2e>
 800b41c:	4621      	mov	r1, r4
 800b41e:	4628      	mov	r0, r5
 800b420:	f001 fd00 	bl	800ce24 <_fflush_r>
 800b424:	2800      	cmp	r0, #0
 800b426:	d0d9      	beq.n	800b3dc <__swbuf_r+0x2e>
 800b428:	e7d6      	b.n	800b3d8 <__swbuf_r+0x2a>
	...

0800b42c <__swsetup_r>:
 800b42c:	b538      	push	{r3, r4, r5, lr}
 800b42e:	4b29      	ldr	r3, [pc, #164]	@ (800b4d4 <__swsetup_r+0xa8>)
 800b430:	4605      	mov	r5, r0
 800b432:	6818      	ldr	r0, [r3, #0]
 800b434:	460c      	mov	r4, r1
 800b436:	b118      	cbz	r0, 800b440 <__swsetup_r+0x14>
 800b438:	6a03      	ldr	r3, [r0, #32]
 800b43a:	b90b      	cbnz	r3, 800b440 <__swsetup_r+0x14>
 800b43c:	f7ff fece 	bl	800b1dc <__sinit>
 800b440:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b444:	0719      	lsls	r1, r3, #28
 800b446:	d422      	bmi.n	800b48e <__swsetup_r+0x62>
 800b448:	06da      	lsls	r2, r3, #27
 800b44a:	d407      	bmi.n	800b45c <__swsetup_r+0x30>
 800b44c:	2209      	movs	r2, #9
 800b44e:	602a      	str	r2, [r5, #0]
 800b450:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b454:	81a3      	strh	r3, [r4, #12]
 800b456:	f04f 30ff 	mov.w	r0, #4294967295
 800b45a:	e033      	b.n	800b4c4 <__swsetup_r+0x98>
 800b45c:	0758      	lsls	r0, r3, #29
 800b45e:	d512      	bpl.n	800b486 <__swsetup_r+0x5a>
 800b460:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b462:	b141      	cbz	r1, 800b476 <__swsetup_r+0x4a>
 800b464:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b468:	4299      	cmp	r1, r3
 800b46a:	d002      	beq.n	800b472 <__swsetup_r+0x46>
 800b46c:	4628      	mov	r0, r5
 800b46e:	f000 fe99 	bl	800c1a4 <_free_r>
 800b472:	2300      	movs	r3, #0
 800b474:	6363      	str	r3, [r4, #52]	@ 0x34
 800b476:	89a3      	ldrh	r3, [r4, #12]
 800b478:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b47c:	81a3      	strh	r3, [r4, #12]
 800b47e:	2300      	movs	r3, #0
 800b480:	6063      	str	r3, [r4, #4]
 800b482:	6923      	ldr	r3, [r4, #16]
 800b484:	6023      	str	r3, [r4, #0]
 800b486:	89a3      	ldrh	r3, [r4, #12]
 800b488:	f043 0308 	orr.w	r3, r3, #8
 800b48c:	81a3      	strh	r3, [r4, #12]
 800b48e:	6923      	ldr	r3, [r4, #16]
 800b490:	b94b      	cbnz	r3, 800b4a6 <__swsetup_r+0x7a>
 800b492:	89a3      	ldrh	r3, [r4, #12]
 800b494:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b498:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b49c:	d003      	beq.n	800b4a6 <__swsetup_r+0x7a>
 800b49e:	4621      	mov	r1, r4
 800b4a0:	4628      	mov	r0, r5
 800b4a2:	f001 fd0d 	bl	800cec0 <__smakebuf_r>
 800b4a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b4aa:	f013 0201 	ands.w	r2, r3, #1
 800b4ae:	d00a      	beq.n	800b4c6 <__swsetup_r+0x9a>
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	60a2      	str	r2, [r4, #8]
 800b4b4:	6962      	ldr	r2, [r4, #20]
 800b4b6:	4252      	negs	r2, r2
 800b4b8:	61a2      	str	r2, [r4, #24]
 800b4ba:	6922      	ldr	r2, [r4, #16]
 800b4bc:	b942      	cbnz	r2, 800b4d0 <__swsetup_r+0xa4>
 800b4be:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b4c2:	d1c5      	bne.n	800b450 <__swsetup_r+0x24>
 800b4c4:	bd38      	pop	{r3, r4, r5, pc}
 800b4c6:	0799      	lsls	r1, r3, #30
 800b4c8:	bf58      	it	pl
 800b4ca:	6962      	ldrpl	r2, [r4, #20]
 800b4cc:	60a2      	str	r2, [r4, #8]
 800b4ce:	e7f4      	b.n	800b4ba <__swsetup_r+0x8e>
 800b4d0:	2000      	movs	r0, #0
 800b4d2:	e7f7      	b.n	800b4c4 <__swsetup_r+0x98>
 800b4d4:	2400003c 	.word	0x2400003c

0800b4d8 <memset>:
 800b4d8:	4402      	add	r2, r0
 800b4da:	4603      	mov	r3, r0
 800b4dc:	4293      	cmp	r3, r2
 800b4de:	d100      	bne.n	800b4e2 <memset+0xa>
 800b4e0:	4770      	bx	lr
 800b4e2:	f803 1b01 	strb.w	r1, [r3], #1
 800b4e6:	e7f9      	b.n	800b4dc <memset+0x4>

0800b4e8 <_localeconv_r>:
 800b4e8:	4800      	ldr	r0, [pc, #0]	@ (800b4ec <_localeconv_r+0x4>)
 800b4ea:	4770      	bx	lr
 800b4ec:	2400017c 	.word	0x2400017c

0800b4f0 <_close_r>:
 800b4f0:	b538      	push	{r3, r4, r5, lr}
 800b4f2:	4d06      	ldr	r5, [pc, #24]	@ (800b50c <_close_r+0x1c>)
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	4604      	mov	r4, r0
 800b4f8:	4608      	mov	r0, r1
 800b4fa:	602b      	str	r3, [r5, #0]
 800b4fc:	f7f6 fab6 	bl	8001a6c <_close>
 800b500:	1c43      	adds	r3, r0, #1
 800b502:	d102      	bne.n	800b50a <_close_r+0x1a>
 800b504:	682b      	ldr	r3, [r5, #0]
 800b506:	b103      	cbz	r3, 800b50a <_close_r+0x1a>
 800b508:	6023      	str	r3, [r4, #0]
 800b50a:	bd38      	pop	{r3, r4, r5, pc}
 800b50c:	240008b4 	.word	0x240008b4

0800b510 <_lseek_r>:
 800b510:	b538      	push	{r3, r4, r5, lr}
 800b512:	4d07      	ldr	r5, [pc, #28]	@ (800b530 <_lseek_r+0x20>)
 800b514:	4604      	mov	r4, r0
 800b516:	4608      	mov	r0, r1
 800b518:	4611      	mov	r1, r2
 800b51a:	2200      	movs	r2, #0
 800b51c:	602a      	str	r2, [r5, #0]
 800b51e:	461a      	mov	r2, r3
 800b520:	f7f6 facb 	bl	8001aba <_lseek>
 800b524:	1c43      	adds	r3, r0, #1
 800b526:	d102      	bne.n	800b52e <_lseek_r+0x1e>
 800b528:	682b      	ldr	r3, [r5, #0]
 800b52a:	b103      	cbz	r3, 800b52e <_lseek_r+0x1e>
 800b52c:	6023      	str	r3, [r4, #0]
 800b52e:	bd38      	pop	{r3, r4, r5, pc}
 800b530:	240008b4 	.word	0x240008b4

0800b534 <_read_r>:
 800b534:	b538      	push	{r3, r4, r5, lr}
 800b536:	4d07      	ldr	r5, [pc, #28]	@ (800b554 <_read_r+0x20>)
 800b538:	4604      	mov	r4, r0
 800b53a:	4608      	mov	r0, r1
 800b53c:	4611      	mov	r1, r2
 800b53e:	2200      	movs	r2, #0
 800b540:	602a      	str	r2, [r5, #0]
 800b542:	461a      	mov	r2, r3
 800b544:	f7f6 fa59 	bl	80019fa <_read>
 800b548:	1c43      	adds	r3, r0, #1
 800b54a:	d102      	bne.n	800b552 <_read_r+0x1e>
 800b54c:	682b      	ldr	r3, [r5, #0]
 800b54e:	b103      	cbz	r3, 800b552 <_read_r+0x1e>
 800b550:	6023      	str	r3, [r4, #0]
 800b552:	bd38      	pop	{r3, r4, r5, pc}
 800b554:	240008b4 	.word	0x240008b4

0800b558 <_write_r>:
 800b558:	b538      	push	{r3, r4, r5, lr}
 800b55a:	4d07      	ldr	r5, [pc, #28]	@ (800b578 <_write_r+0x20>)
 800b55c:	4604      	mov	r4, r0
 800b55e:	4608      	mov	r0, r1
 800b560:	4611      	mov	r1, r2
 800b562:	2200      	movs	r2, #0
 800b564:	602a      	str	r2, [r5, #0]
 800b566:	461a      	mov	r2, r3
 800b568:	f7f6 fa64 	bl	8001a34 <_write>
 800b56c:	1c43      	adds	r3, r0, #1
 800b56e:	d102      	bne.n	800b576 <_write_r+0x1e>
 800b570:	682b      	ldr	r3, [r5, #0]
 800b572:	b103      	cbz	r3, 800b576 <_write_r+0x1e>
 800b574:	6023      	str	r3, [r4, #0]
 800b576:	bd38      	pop	{r3, r4, r5, pc}
 800b578:	240008b4 	.word	0x240008b4

0800b57c <__errno>:
 800b57c:	4b01      	ldr	r3, [pc, #4]	@ (800b584 <__errno+0x8>)
 800b57e:	6818      	ldr	r0, [r3, #0]
 800b580:	4770      	bx	lr
 800b582:	bf00      	nop
 800b584:	2400003c 	.word	0x2400003c

0800b588 <__libc_init_array>:
 800b588:	b570      	push	{r4, r5, r6, lr}
 800b58a:	4d0d      	ldr	r5, [pc, #52]	@ (800b5c0 <__libc_init_array+0x38>)
 800b58c:	4c0d      	ldr	r4, [pc, #52]	@ (800b5c4 <__libc_init_array+0x3c>)
 800b58e:	1b64      	subs	r4, r4, r5
 800b590:	10a4      	asrs	r4, r4, #2
 800b592:	2600      	movs	r6, #0
 800b594:	42a6      	cmp	r6, r4
 800b596:	d109      	bne.n	800b5ac <__libc_init_array+0x24>
 800b598:	4d0b      	ldr	r5, [pc, #44]	@ (800b5c8 <__libc_init_array+0x40>)
 800b59a:	4c0c      	ldr	r4, [pc, #48]	@ (800b5cc <__libc_init_array+0x44>)
 800b59c:	f001 ff82 	bl	800d4a4 <_init>
 800b5a0:	1b64      	subs	r4, r4, r5
 800b5a2:	10a4      	asrs	r4, r4, #2
 800b5a4:	2600      	movs	r6, #0
 800b5a6:	42a6      	cmp	r6, r4
 800b5a8:	d105      	bne.n	800b5b6 <__libc_init_array+0x2e>
 800b5aa:	bd70      	pop	{r4, r5, r6, pc}
 800b5ac:	f855 3b04 	ldr.w	r3, [r5], #4
 800b5b0:	4798      	blx	r3
 800b5b2:	3601      	adds	r6, #1
 800b5b4:	e7ee      	b.n	800b594 <__libc_init_array+0xc>
 800b5b6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b5ba:	4798      	blx	r3
 800b5bc:	3601      	adds	r6, #1
 800b5be:	e7f2      	b.n	800b5a6 <__libc_init_array+0x1e>
 800b5c0:	0800dc18 	.word	0x0800dc18
 800b5c4:	0800dc18 	.word	0x0800dc18
 800b5c8:	0800dc18 	.word	0x0800dc18
 800b5cc:	0800dc1c 	.word	0x0800dc1c

0800b5d0 <__retarget_lock_init_recursive>:
 800b5d0:	4770      	bx	lr

0800b5d2 <__retarget_lock_acquire_recursive>:
 800b5d2:	4770      	bx	lr

0800b5d4 <__retarget_lock_release_recursive>:
 800b5d4:	4770      	bx	lr

0800b5d6 <quorem>:
 800b5d6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5da:	6903      	ldr	r3, [r0, #16]
 800b5dc:	690c      	ldr	r4, [r1, #16]
 800b5de:	42a3      	cmp	r3, r4
 800b5e0:	4607      	mov	r7, r0
 800b5e2:	db7e      	blt.n	800b6e2 <quorem+0x10c>
 800b5e4:	3c01      	subs	r4, #1
 800b5e6:	f101 0814 	add.w	r8, r1, #20
 800b5ea:	00a3      	lsls	r3, r4, #2
 800b5ec:	f100 0514 	add.w	r5, r0, #20
 800b5f0:	9300      	str	r3, [sp, #0]
 800b5f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b5f6:	9301      	str	r3, [sp, #4]
 800b5f8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b5fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b600:	3301      	adds	r3, #1
 800b602:	429a      	cmp	r2, r3
 800b604:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b608:	fbb2 f6f3 	udiv	r6, r2, r3
 800b60c:	d32e      	bcc.n	800b66c <quorem+0x96>
 800b60e:	f04f 0a00 	mov.w	sl, #0
 800b612:	46c4      	mov	ip, r8
 800b614:	46ae      	mov	lr, r5
 800b616:	46d3      	mov	fp, sl
 800b618:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b61c:	b298      	uxth	r0, r3
 800b61e:	fb06 a000 	mla	r0, r6, r0, sl
 800b622:	0c02      	lsrs	r2, r0, #16
 800b624:	0c1b      	lsrs	r3, r3, #16
 800b626:	fb06 2303 	mla	r3, r6, r3, r2
 800b62a:	f8de 2000 	ldr.w	r2, [lr]
 800b62e:	b280      	uxth	r0, r0
 800b630:	b292      	uxth	r2, r2
 800b632:	1a12      	subs	r2, r2, r0
 800b634:	445a      	add	r2, fp
 800b636:	f8de 0000 	ldr.w	r0, [lr]
 800b63a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b63e:	b29b      	uxth	r3, r3
 800b640:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b644:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b648:	b292      	uxth	r2, r2
 800b64a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b64e:	45e1      	cmp	r9, ip
 800b650:	f84e 2b04 	str.w	r2, [lr], #4
 800b654:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b658:	d2de      	bcs.n	800b618 <quorem+0x42>
 800b65a:	9b00      	ldr	r3, [sp, #0]
 800b65c:	58eb      	ldr	r3, [r5, r3]
 800b65e:	b92b      	cbnz	r3, 800b66c <quorem+0x96>
 800b660:	9b01      	ldr	r3, [sp, #4]
 800b662:	3b04      	subs	r3, #4
 800b664:	429d      	cmp	r5, r3
 800b666:	461a      	mov	r2, r3
 800b668:	d32f      	bcc.n	800b6ca <quorem+0xf4>
 800b66a:	613c      	str	r4, [r7, #16]
 800b66c:	4638      	mov	r0, r7
 800b66e:	f001 f90b 	bl	800c888 <__mcmp>
 800b672:	2800      	cmp	r0, #0
 800b674:	db25      	blt.n	800b6c2 <quorem+0xec>
 800b676:	4629      	mov	r1, r5
 800b678:	2000      	movs	r0, #0
 800b67a:	f858 2b04 	ldr.w	r2, [r8], #4
 800b67e:	f8d1 c000 	ldr.w	ip, [r1]
 800b682:	fa1f fe82 	uxth.w	lr, r2
 800b686:	fa1f f38c 	uxth.w	r3, ip
 800b68a:	eba3 030e 	sub.w	r3, r3, lr
 800b68e:	4403      	add	r3, r0
 800b690:	0c12      	lsrs	r2, r2, #16
 800b692:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b696:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b69a:	b29b      	uxth	r3, r3
 800b69c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b6a0:	45c1      	cmp	r9, r8
 800b6a2:	f841 3b04 	str.w	r3, [r1], #4
 800b6a6:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b6aa:	d2e6      	bcs.n	800b67a <quorem+0xa4>
 800b6ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b6b0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b6b4:	b922      	cbnz	r2, 800b6c0 <quorem+0xea>
 800b6b6:	3b04      	subs	r3, #4
 800b6b8:	429d      	cmp	r5, r3
 800b6ba:	461a      	mov	r2, r3
 800b6bc:	d30b      	bcc.n	800b6d6 <quorem+0x100>
 800b6be:	613c      	str	r4, [r7, #16]
 800b6c0:	3601      	adds	r6, #1
 800b6c2:	4630      	mov	r0, r6
 800b6c4:	b003      	add	sp, #12
 800b6c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6ca:	6812      	ldr	r2, [r2, #0]
 800b6cc:	3b04      	subs	r3, #4
 800b6ce:	2a00      	cmp	r2, #0
 800b6d0:	d1cb      	bne.n	800b66a <quorem+0x94>
 800b6d2:	3c01      	subs	r4, #1
 800b6d4:	e7c6      	b.n	800b664 <quorem+0x8e>
 800b6d6:	6812      	ldr	r2, [r2, #0]
 800b6d8:	3b04      	subs	r3, #4
 800b6da:	2a00      	cmp	r2, #0
 800b6dc:	d1ef      	bne.n	800b6be <quorem+0xe8>
 800b6de:	3c01      	subs	r4, #1
 800b6e0:	e7ea      	b.n	800b6b8 <quorem+0xe2>
 800b6e2:	2000      	movs	r0, #0
 800b6e4:	e7ee      	b.n	800b6c4 <quorem+0xee>
	...

0800b6e8 <_dtoa_r>:
 800b6e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6ec:	ed2d 8b02 	vpush	{d8}
 800b6f0:	69c7      	ldr	r7, [r0, #28]
 800b6f2:	b091      	sub	sp, #68	@ 0x44
 800b6f4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b6f8:	ec55 4b10 	vmov	r4, r5, d0
 800b6fc:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800b6fe:	9107      	str	r1, [sp, #28]
 800b700:	4681      	mov	r9, r0
 800b702:	9209      	str	r2, [sp, #36]	@ 0x24
 800b704:	930d      	str	r3, [sp, #52]	@ 0x34
 800b706:	b97f      	cbnz	r7, 800b728 <_dtoa_r+0x40>
 800b708:	2010      	movs	r0, #16
 800b70a:	f000 fd95 	bl	800c238 <malloc>
 800b70e:	4602      	mov	r2, r0
 800b710:	f8c9 001c 	str.w	r0, [r9, #28]
 800b714:	b920      	cbnz	r0, 800b720 <_dtoa_r+0x38>
 800b716:	4ba0      	ldr	r3, [pc, #640]	@ (800b998 <_dtoa_r+0x2b0>)
 800b718:	21ef      	movs	r1, #239	@ 0xef
 800b71a:	48a0      	ldr	r0, [pc, #640]	@ (800b99c <_dtoa_r+0x2b4>)
 800b71c:	f001 fc4c 	bl	800cfb8 <__assert_func>
 800b720:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b724:	6007      	str	r7, [r0, #0]
 800b726:	60c7      	str	r7, [r0, #12]
 800b728:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b72c:	6819      	ldr	r1, [r3, #0]
 800b72e:	b159      	cbz	r1, 800b748 <_dtoa_r+0x60>
 800b730:	685a      	ldr	r2, [r3, #4]
 800b732:	604a      	str	r2, [r1, #4]
 800b734:	2301      	movs	r3, #1
 800b736:	4093      	lsls	r3, r2
 800b738:	608b      	str	r3, [r1, #8]
 800b73a:	4648      	mov	r0, r9
 800b73c:	f000 fe72 	bl	800c424 <_Bfree>
 800b740:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b744:	2200      	movs	r2, #0
 800b746:	601a      	str	r2, [r3, #0]
 800b748:	1e2b      	subs	r3, r5, #0
 800b74a:	bfbb      	ittet	lt
 800b74c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b750:	9303      	strlt	r3, [sp, #12]
 800b752:	2300      	movge	r3, #0
 800b754:	2201      	movlt	r2, #1
 800b756:	bfac      	ite	ge
 800b758:	6033      	strge	r3, [r6, #0]
 800b75a:	6032      	strlt	r2, [r6, #0]
 800b75c:	4b90      	ldr	r3, [pc, #576]	@ (800b9a0 <_dtoa_r+0x2b8>)
 800b75e:	9e03      	ldr	r6, [sp, #12]
 800b760:	43b3      	bics	r3, r6
 800b762:	d110      	bne.n	800b786 <_dtoa_r+0x9e>
 800b764:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b766:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b76a:	6013      	str	r3, [r2, #0]
 800b76c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800b770:	4323      	orrs	r3, r4
 800b772:	f000 84e6 	beq.w	800c142 <_dtoa_r+0xa5a>
 800b776:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b778:	4f8a      	ldr	r7, [pc, #552]	@ (800b9a4 <_dtoa_r+0x2bc>)
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	f000 84e8 	beq.w	800c150 <_dtoa_r+0xa68>
 800b780:	1cfb      	adds	r3, r7, #3
 800b782:	f000 bce3 	b.w	800c14c <_dtoa_r+0xa64>
 800b786:	ed9d 8b02 	vldr	d8, [sp, #8]
 800b78a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b78e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b792:	d10a      	bne.n	800b7aa <_dtoa_r+0xc2>
 800b794:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b796:	2301      	movs	r3, #1
 800b798:	6013      	str	r3, [r2, #0]
 800b79a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b79c:	b113      	cbz	r3, 800b7a4 <_dtoa_r+0xbc>
 800b79e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800b7a0:	4b81      	ldr	r3, [pc, #516]	@ (800b9a8 <_dtoa_r+0x2c0>)
 800b7a2:	6013      	str	r3, [r2, #0]
 800b7a4:	4f81      	ldr	r7, [pc, #516]	@ (800b9ac <_dtoa_r+0x2c4>)
 800b7a6:	f000 bcd3 	b.w	800c150 <_dtoa_r+0xa68>
 800b7aa:	aa0e      	add	r2, sp, #56	@ 0x38
 800b7ac:	a90f      	add	r1, sp, #60	@ 0x3c
 800b7ae:	4648      	mov	r0, r9
 800b7b0:	eeb0 0b48 	vmov.f64	d0, d8
 800b7b4:	f001 f918 	bl	800c9e8 <__d2b>
 800b7b8:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800b7bc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b7be:	9001      	str	r0, [sp, #4]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d045      	beq.n	800b850 <_dtoa_r+0x168>
 800b7c4:	eeb0 7b48 	vmov.f64	d7, d8
 800b7c8:	ee18 1a90 	vmov	r1, s17
 800b7cc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800b7d0:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800b7d4:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800b7d8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800b7dc:	2500      	movs	r5, #0
 800b7de:	ee07 1a90 	vmov	s15, r1
 800b7e2:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800b7e6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800b980 <_dtoa_r+0x298>
 800b7ea:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b7ee:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800b988 <_dtoa_r+0x2a0>
 800b7f2:	eea7 6b05 	vfma.f64	d6, d7, d5
 800b7f6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800b990 <_dtoa_r+0x2a8>
 800b7fa:	ee07 3a90 	vmov	s15, r3
 800b7fe:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800b802:	eeb0 7b46 	vmov.f64	d7, d6
 800b806:	eea4 7b05 	vfma.f64	d7, d4, d5
 800b80a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800b80e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800b812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b816:	ee16 8a90 	vmov	r8, s13
 800b81a:	d508      	bpl.n	800b82e <_dtoa_r+0x146>
 800b81c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800b820:	eeb4 6b47 	vcmp.f64	d6, d7
 800b824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b828:	bf18      	it	ne
 800b82a:	f108 38ff 	addne.w	r8, r8, #4294967295
 800b82e:	f1b8 0f16 	cmp.w	r8, #22
 800b832:	d82b      	bhi.n	800b88c <_dtoa_r+0x1a4>
 800b834:	495e      	ldr	r1, [pc, #376]	@ (800b9b0 <_dtoa_r+0x2c8>)
 800b836:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800b83a:	ed91 7b00 	vldr	d7, [r1]
 800b83e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800b842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b846:	d501      	bpl.n	800b84c <_dtoa_r+0x164>
 800b848:	f108 38ff 	add.w	r8, r8, #4294967295
 800b84c:	2100      	movs	r1, #0
 800b84e:	e01e      	b.n	800b88e <_dtoa_r+0x1a6>
 800b850:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b852:	4413      	add	r3, r2
 800b854:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800b858:	2920      	cmp	r1, #32
 800b85a:	bfc1      	itttt	gt
 800b85c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800b860:	408e      	lslgt	r6, r1
 800b862:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800b866:	fa24 f101 	lsrgt.w	r1, r4, r1
 800b86a:	bfd6      	itet	le
 800b86c:	f1c1 0120 	rsble	r1, r1, #32
 800b870:	4331      	orrgt	r1, r6
 800b872:	fa04 f101 	lslle.w	r1, r4, r1
 800b876:	ee07 1a90 	vmov	s15, r1
 800b87a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800b87e:	3b01      	subs	r3, #1
 800b880:	ee17 1a90 	vmov	r1, s15
 800b884:	2501      	movs	r5, #1
 800b886:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800b88a:	e7a8      	b.n	800b7de <_dtoa_r+0xf6>
 800b88c:	2101      	movs	r1, #1
 800b88e:	1ad2      	subs	r2, r2, r3
 800b890:	1e53      	subs	r3, r2, #1
 800b892:	9306      	str	r3, [sp, #24]
 800b894:	bf45      	ittet	mi
 800b896:	f1c2 0301 	rsbmi	r3, r2, #1
 800b89a:	9304      	strmi	r3, [sp, #16]
 800b89c:	2300      	movpl	r3, #0
 800b89e:	2300      	movmi	r3, #0
 800b8a0:	bf4c      	ite	mi
 800b8a2:	9306      	strmi	r3, [sp, #24]
 800b8a4:	9304      	strpl	r3, [sp, #16]
 800b8a6:	f1b8 0f00 	cmp.w	r8, #0
 800b8aa:	910c      	str	r1, [sp, #48]	@ 0x30
 800b8ac:	db18      	blt.n	800b8e0 <_dtoa_r+0x1f8>
 800b8ae:	9b06      	ldr	r3, [sp, #24]
 800b8b0:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800b8b4:	4443      	add	r3, r8
 800b8b6:	9306      	str	r3, [sp, #24]
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	9a07      	ldr	r2, [sp, #28]
 800b8bc:	2a09      	cmp	r2, #9
 800b8be:	d845      	bhi.n	800b94c <_dtoa_r+0x264>
 800b8c0:	2a05      	cmp	r2, #5
 800b8c2:	bfc4      	itt	gt
 800b8c4:	3a04      	subgt	r2, #4
 800b8c6:	9207      	strgt	r2, [sp, #28]
 800b8c8:	9a07      	ldr	r2, [sp, #28]
 800b8ca:	f1a2 0202 	sub.w	r2, r2, #2
 800b8ce:	bfcc      	ite	gt
 800b8d0:	2400      	movgt	r4, #0
 800b8d2:	2401      	movle	r4, #1
 800b8d4:	2a03      	cmp	r2, #3
 800b8d6:	d844      	bhi.n	800b962 <_dtoa_r+0x27a>
 800b8d8:	e8df f002 	tbb	[pc, r2]
 800b8dc:	0b173634 	.word	0x0b173634
 800b8e0:	9b04      	ldr	r3, [sp, #16]
 800b8e2:	2200      	movs	r2, #0
 800b8e4:	eba3 0308 	sub.w	r3, r3, r8
 800b8e8:	9304      	str	r3, [sp, #16]
 800b8ea:	920a      	str	r2, [sp, #40]	@ 0x28
 800b8ec:	f1c8 0300 	rsb	r3, r8, #0
 800b8f0:	e7e3      	b.n	800b8ba <_dtoa_r+0x1d2>
 800b8f2:	2201      	movs	r2, #1
 800b8f4:	9208      	str	r2, [sp, #32]
 800b8f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b8f8:	eb08 0b02 	add.w	fp, r8, r2
 800b8fc:	f10b 0a01 	add.w	sl, fp, #1
 800b900:	4652      	mov	r2, sl
 800b902:	2a01      	cmp	r2, #1
 800b904:	bfb8      	it	lt
 800b906:	2201      	movlt	r2, #1
 800b908:	e006      	b.n	800b918 <_dtoa_r+0x230>
 800b90a:	2201      	movs	r2, #1
 800b90c:	9208      	str	r2, [sp, #32]
 800b90e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b910:	2a00      	cmp	r2, #0
 800b912:	dd29      	ble.n	800b968 <_dtoa_r+0x280>
 800b914:	4693      	mov	fp, r2
 800b916:	4692      	mov	sl, r2
 800b918:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800b91c:	2100      	movs	r1, #0
 800b91e:	2004      	movs	r0, #4
 800b920:	f100 0614 	add.w	r6, r0, #20
 800b924:	4296      	cmp	r6, r2
 800b926:	d926      	bls.n	800b976 <_dtoa_r+0x28e>
 800b928:	6079      	str	r1, [r7, #4]
 800b92a:	4648      	mov	r0, r9
 800b92c:	9305      	str	r3, [sp, #20]
 800b92e:	f000 fd39 	bl	800c3a4 <_Balloc>
 800b932:	9b05      	ldr	r3, [sp, #20]
 800b934:	4607      	mov	r7, r0
 800b936:	2800      	cmp	r0, #0
 800b938:	d13e      	bne.n	800b9b8 <_dtoa_r+0x2d0>
 800b93a:	4b1e      	ldr	r3, [pc, #120]	@ (800b9b4 <_dtoa_r+0x2cc>)
 800b93c:	4602      	mov	r2, r0
 800b93e:	f240 11af 	movw	r1, #431	@ 0x1af
 800b942:	e6ea      	b.n	800b71a <_dtoa_r+0x32>
 800b944:	2200      	movs	r2, #0
 800b946:	e7e1      	b.n	800b90c <_dtoa_r+0x224>
 800b948:	2200      	movs	r2, #0
 800b94a:	e7d3      	b.n	800b8f4 <_dtoa_r+0x20c>
 800b94c:	2401      	movs	r4, #1
 800b94e:	2200      	movs	r2, #0
 800b950:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800b954:	f04f 3bff 	mov.w	fp, #4294967295
 800b958:	2100      	movs	r1, #0
 800b95a:	46da      	mov	sl, fp
 800b95c:	2212      	movs	r2, #18
 800b95e:	9109      	str	r1, [sp, #36]	@ 0x24
 800b960:	e7da      	b.n	800b918 <_dtoa_r+0x230>
 800b962:	2201      	movs	r2, #1
 800b964:	9208      	str	r2, [sp, #32]
 800b966:	e7f5      	b.n	800b954 <_dtoa_r+0x26c>
 800b968:	f04f 0b01 	mov.w	fp, #1
 800b96c:	46da      	mov	sl, fp
 800b96e:	465a      	mov	r2, fp
 800b970:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800b974:	e7d0      	b.n	800b918 <_dtoa_r+0x230>
 800b976:	3101      	adds	r1, #1
 800b978:	0040      	lsls	r0, r0, #1
 800b97a:	e7d1      	b.n	800b920 <_dtoa_r+0x238>
 800b97c:	f3af 8000 	nop.w
 800b980:	636f4361 	.word	0x636f4361
 800b984:	3fd287a7 	.word	0x3fd287a7
 800b988:	8b60c8b3 	.word	0x8b60c8b3
 800b98c:	3fc68a28 	.word	0x3fc68a28
 800b990:	509f79fb 	.word	0x509f79fb
 800b994:	3fd34413 	.word	0x3fd34413
 800b998:	0800d669 	.word	0x0800d669
 800b99c:	0800d680 	.word	0x0800d680
 800b9a0:	7ff00000 	.word	0x7ff00000
 800b9a4:	0800d665 	.word	0x0800d665
 800b9a8:	0800d639 	.word	0x0800d639
 800b9ac:	0800d638 	.word	0x0800d638
 800b9b0:	0800d7d0 	.word	0x0800d7d0
 800b9b4:	0800d6d8 	.word	0x0800d6d8
 800b9b8:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800b9bc:	f1ba 0f0e 	cmp.w	sl, #14
 800b9c0:	6010      	str	r0, [r2, #0]
 800b9c2:	d86e      	bhi.n	800baa2 <_dtoa_r+0x3ba>
 800b9c4:	2c00      	cmp	r4, #0
 800b9c6:	d06c      	beq.n	800baa2 <_dtoa_r+0x3ba>
 800b9c8:	f1b8 0f00 	cmp.w	r8, #0
 800b9cc:	f340 80b4 	ble.w	800bb38 <_dtoa_r+0x450>
 800b9d0:	4ac8      	ldr	r2, [pc, #800]	@ (800bcf4 <_dtoa_r+0x60c>)
 800b9d2:	f008 010f 	and.w	r1, r8, #15
 800b9d6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800b9da:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800b9de:	ed92 7b00 	vldr	d7, [r2]
 800b9e2:	ea4f 1128 	mov.w	r1, r8, asr #4
 800b9e6:	f000 809b 	beq.w	800bb20 <_dtoa_r+0x438>
 800b9ea:	4ac3      	ldr	r2, [pc, #780]	@ (800bcf8 <_dtoa_r+0x610>)
 800b9ec:	ed92 6b08 	vldr	d6, [r2, #32]
 800b9f0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800b9f4:	ed8d 6b02 	vstr	d6, [sp, #8]
 800b9f8:	f001 010f 	and.w	r1, r1, #15
 800b9fc:	2203      	movs	r2, #3
 800b9fe:	48be      	ldr	r0, [pc, #760]	@ (800bcf8 <_dtoa_r+0x610>)
 800ba00:	2900      	cmp	r1, #0
 800ba02:	f040 808f 	bne.w	800bb24 <_dtoa_r+0x43c>
 800ba06:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ba0a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800ba0e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ba12:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ba14:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ba18:	2900      	cmp	r1, #0
 800ba1a:	f000 80b3 	beq.w	800bb84 <_dtoa_r+0x49c>
 800ba1e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800ba22:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ba26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba2a:	f140 80ab 	bpl.w	800bb84 <_dtoa_r+0x49c>
 800ba2e:	f1ba 0f00 	cmp.w	sl, #0
 800ba32:	f000 80a7 	beq.w	800bb84 <_dtoa_r+0x49c>
 800ba36:	f1bb 0f00 	cmp.w	fp, #0
 800ba3a:	dd30      	ble.n	800ba9e <_dtoa_r+0x3b6>
 800ba3c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800ba40:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ba44:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ba48:	f108 31ff 	add.w	r1, r8, #4294967295
 800ba4c:	9105      	str	r1, [sp, #20]
 800ba4e:	3201      	adds	r2, #1
 800ba50:	465c      	mov	r4, fp
 800ba52:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ba56:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800ba5a:	ee07 2a90 	vmov	s15, r2
 800ba5e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ba62:	eea7 5b06 	vfma.f64	d5, d7, d6
 800ba66:	ee15 2a90 	vmov	r2, s11
 800ba6a:	ec51 0b15 	vmov	r0, r1, d5
 800ba6e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800ba72:	2c00      	cmp	r4, #0
 800ba74:	f040 808a 	bne.w	800bb8c <_dtoa_r+0x4a4>
 800ba78:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800ba7c:	ee36 6b47 	vsub.f64	d6, d6, d7
 800ba80:	ec41 0b17 	vmov	d7, r0, r1
 800ba84:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ba88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba8c:	f300 826a 	bgt.w	800bf64 <_dtoa_r+0x87c>
 800ba90:	eeb1 7b47 	vneg.f64	d7, d7
 800ba94:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ba98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba9c:	d423      	bmi.n	800bae6 <_dtoa_r+0x3fe>
 800ba9e:	ed8d 8b02 	vstr	d8, [sp, #8]
 800baa2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800baa4:	2a00      	cmp	r2, #0
 800baa6:	f2c0 8129 	blt.w	800bcfc <_dtoa_r+0x614>
 800baaa:	f1b8 0f0e 	cmp.w	r8, #14
 800baae:	f300 8125 	bgt.w	800bcfc <_dtoa_r+0x614>
 800bab2:	4b90      	ldr	r3, [pc, #576]	@ (800bcf4 <_dtoa_r+0x60c>)
 800bab4:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800bab8:	ed93 6b00 	vldr	d6, [r3]
 800babc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800babe:	2b00      	cmp	r3, #0
 800bac0:	f280 80c8 	bge.w	800bc54 <_dtoa_r+0x56c>
 800bac4:	f1ba 0f00 	cmp.w	sl, #0
 800bac8:	f300 80c4 	bgt.w	800bc54 <_dtoa_r+0x56c>
 800bacc:	d10b      	bne.n	800bae6 <_dtoa_r+0x3fe>
 800bace:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800bad2:	ee26 6b07 	vmul.f64	d6, d6, d7
 800bad6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bada:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bae2:	f2c0 823c 	blt.w	800bf5e <_dtoa_r+0x876>
 800bae6:	2400      	movs	r4, #0
 800bae8:	4625      	mov	r5, r4
 800baea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800baec:	43db      	mvns	r3, r3
 800baee:	9305      	str	r3, [sp, #20]
 800baf0:	463e      	mov	r6, r7
 800baf2:	f04f 0800 	mov.w	r8, #0
 800baf6:	4621      	mov	r1, r4
 800baf8:	4648      	mov	r0, r9
 800bafa:	f000 fc93 	bl	800c424 <_Bfree>
 800bafe:	2d00      	cmp	r5, #0
 800bb00:	f000 80a2 	beq.w	800bc48 <_dtoa_r+0x560>
 800bb04:	f1b8 0f00 	cmp.w	r8, #0
 800bb08:	d005      	beq.n	800bb16 <_dtoa_r+0x42e>
 800bb0a:	45a8      	cmp	r8, r5
 800bb0c:	d003      	beq.n	800bb16 <_dtoa_r+0x42e>
 800bb0e:	4641      	mov	r1, r8
 800bb10:	4648      	mov	r0, r9
 800bb12:	f000 fc87 	bl	800c424 <_Bfree>
 800bb16:	4629      	mov	r1, r5
 800bb18:	4648      	mov	r0, r9
 800bb1a:	f000 fc83 	bl	800c424 <_Bfree>
 800bb1e:	e093      	b.n	800bc48 <_dtoa_r+0x560>
 800bb20:	2202      	movs	r2, #2
 800bb22:	e76c      	b.n	800b9fe <_dtoa_r+0x316>
 800bb24:	07cc      	lsls	r4, r1, #31
 800bb26:	d504      	bpl.n	800bb32 <_dtoa_r+0x44a>
 800bb28:	ed90 6b00 	vldr	d6, [r0]
 800bb2c:	3201      	adds	r2, #1
 800bb2e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bb32:	1049      	asrs	r1, r1, #1
 800bb34:	3008      	adds	r0, #8
 800bb36:	e763      	b.n	800ba00 <_dtoa_r+0x318>
 800bb38:	d022      	beq.n	800bb80 <_dtoa_r+0x498>
 800bb3a:	f1c8 0100 	rsb	r1, r8, #0
 800bb3e:	4a6d      	ldr	r2, [pc, #436]	@ (800bcf4 <_dtoa_r+0x60c>)
 800bb40:	f001 000f 	and.w	r0, r1, #15
 800bb44:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800bb48:	ed92 7b00 	vldr	d7, [r2]
 800bb4c:	ee28 7b07 	vmul.f64	d7, d8, d7
 800bb50:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bb54:	4868      	ldr	r0, [pc, #416]	@ (800bcf8 <_dtoa_r+0x610>)
 800bb56:	1109      	asrs	r1, r1, #4
 800bb58:	2400      	movs	r4, #0
 800bb5a:	2202      	movs	r2, #2
 800bb5c:	b929      	cbnz	r1, 800bb6a <_dtoa_r+0x482>
 800bb5e:	2c00      	cmp	r4, #0
 800bb60:	f43f af57 	beq.w	800ba12 <_dtoa_r+0x32a>
 800bb64:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bb68:	e753      	b.n	800ba12 <_dtoa_r+0x32a>
 800bb6a:	07ce      	lsls	r6, r1, #31
 800bb6c:	d505      	bpl.n	800bb7a <_dtoa_r+0x492>
 800bb6e:	ed90 6b00 	vldr	d6, [r0]
 800bb72:	3201      	adds	r2, #1
 800bb74:	2401      	movs	r4, #1
 800bb76:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bb7a:	1049      	asrs	r1, r1, #1
 800bb7c:	3008      	adds	r0, #8
 800bb7e:	e7ed      	b.n	800bb5c <_dtoa_r+0x474>
 800bb80:	2202      	movs	r2, #2
 800bb82:	e746      	b.n	800ba12 <_dtoa_r+0x32a>
 800bb84:	f8cd 8014 	str.w	r8, [sp, #20]
 800bb88:	4654      	mov	r4, sl
 800bb8a:	e762      	b.n	800ba52 <_dtoa_r+0x36a>
 800bb8c:	4a59      	ldr	r2, [pc, #356]	@ (800bcf4 <_dtoa_r+0x60c>)
 800bb8e:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800bb92:	ed12 4b02 	vldr	d4, [r2, #-8]
 800bb96:	9a08      	ldr	r2, [sp, #32]
 800bb98:	ec41 0b17 	vmov	d7, r0, r1
 800bb9c:	443c      	add	r4, r7
 800bb9e:	b34a      	cbz	r2, 800bbf4 <_dtoa_r+0x50c>
 800bba0:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800bba4:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800bba8:	463e      	mov	r6, r7
 800bbaa:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800bbae:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800bbb2:	ee35 7b47 	vsub.f64	d7, d5, d7
 800bbb6:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800bbba:	ee14 2a90 	vmov	r2, s9
 800bbbe:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800bbc2:	3230      	adds	r2, #48	@ 0x30
 800bbc4:	ee36 6b45 	vsub.f64	d6, d6, d5
 800bbc8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bbcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbd0:	f806 2b01 	strb.w	r2, [r6], #1
 800bbd4:	d438      	bmi.n	800bc48 <_dtoa_r+0x560>
 800bbd6:	ee32 5b46 	vsub.f64	d5, d2, d6
 800bbda:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800bbde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbe2:	d46e      	bmi.n	800bcc2 <_dtoa_r+0x5da>
 800bbe4:	42a6      	cmp	r6, r4
 800bbe6:	f43f af5a 	beq.w	800ba9e <_dtoa_r+0x3b6>
 800bbea:	ee27 7b03 	vmul.f64	d7, d7, d3
 800bbee:	ee26 6b03 	vmul.f64	d6, d6, d3
 800bbf2:	e7e0      	b.n	800bbb6 <_dtoa_r+0x4ce>
 800bbf4:	4621      	mov	r1, r4
 800bbf6:	463e      	mov	r6, r7
 800bbf8:	ee27 7b04 	vmul.f64	d7, d7, d4
 800bbfc:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800bc00:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800bc04:	ee14 2a90 	vmov	r2, s9
 800bc08:	3230      	adds	r2, #48	@ 0x30
 800bc0a:	f806 2b01 	strb.w	r2, [r6], #1
 800bc0e:	42a6      	cmp	r6, r4
 800bc10:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800bc14:	ee36 6b45 	vsub.f64	d6, d6, d5
 800bc18:	d119      	bne.n	800bc4e <_dtoa_r+0x566>
 800bc1a:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800bc1e:	ee37 4b05 	vadd.f64	d4, d7, d5
 800bc22:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800bc26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc2a:	dc4a      	bgt.n	800bcc2 <_dtoa_r+0x5da>
 800bc2c:	ee35 5b47 	vsub.f64	d5, d5, d7
 800bc30:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800bc34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc38:	f57f af31 	bpl.w	800ba9e <_dtoa_r+0x3b6>
 800bc3c:	460e      	mov	r6, r1
 800bc3e:	3901      	subs	r1, #1
 800bc40:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bc44:	2b30      	cmp	r3, #48	@ 0x30
 800bc46:	d0f9      	beq.n	800bc3c <_dtoa_r+0x554>
 800bc48:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800bc4c:	e027      	b.n	800bc9e <_dtoa_r+0x5b6>
 800bc4e:	ee26 6b03 	vmul.f64	d6, d6, d3
 800bc52:	e7d5      	b.n	800bc00 <_dtoa_r+0x518>
 800bc54:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bc58:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800bc5c:	463e      	mov	r6, r7
 800bc5e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800bc62:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800bc66:	ee15 3a10 	vmov	r3, s10
 800bc6a:	3330      	adds	r3, #48	@ 0x30
 800bc6c:	f806 3b01 	strb.w	r3, [r6], #1
 800bc70:	1bf3      	subs	r3, r6, r7
 800bc72:	459a      	cmp	sl, r3
 800bc74:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800bc78:	eea3 7b46 	vfms.f64	d7, d3, d6
 800bc7c:	d132      	bne.n	800bce4 <_dtoa_r+0x5fc>
 800bc7e:	ee37 7b07 	vadd.f64	d7, d7, d7
 800bc82:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800bc86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc8a:	dc18      	bgt.n	800bcbe <_dtoa_r+0x5d6>
 800bc8c:	eeb4 7b46 	vcmp.f64	d7, d6
 800bc90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc94:	d103      	bne.n	800bc9e <_dtoa_r+0x5b6>
 800bc96:	ee15 3a10 	vmov	r3, s10
 800bc9a:	07db      	lsls	r3, r3, #31
 800bc9c:	d40f      	bmi.n	800bcbe <_dtoa_r+0x5d6>
 800bc9e:	9901      	ldr	r1, [sp, #4]
 800bca0:	4648      	mov	r0, r9
 800bca2:	f000 fbbf 	bl	800c424 <_Bfree>
 800bca6:	2300      	movs	r3, #0
 800bca8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bcaa:	7033      	strb	r3, [r6, #0]
 800bcac:	f108 0301 	add.w	r3, r8, #1
 800bcb0:	6013      	str	r3, [r2, #0]
 800bcb2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	f000 824b 	beq.w	800c150 <_dtoa_r+0xa68>
 800bcba:	601e      	str	r6, [r3, #0]
 800bcbc:	e248      	b.n	800c150 <_dtoa_r+0xa68>
 800bcbe:	f8cd 8014 	str.w	r8, [sp, #20]
 800bcc2:	4633      	mov	r3, r6
 800bcc4:	461e      	mov	r6, r3
 800bcc6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bcca:	2a39      	cmp	r2, #57	@ 0x39
 800bccc:	d106      	bne.n	800bcdc <_dtoa_r+0x5f4>
 800bcce:	429f      	cmp	r7, r3
 800bcd0:	d1f8      	bne.n	800bcc4 <_dtoa_r+0x5dc>
 800bcd2:	9a05      	ldr	r2, [sp, #20]
 800bcd4:	3201      	adds	r2, #1
 800bcd6:	9205      	str	r2, [sp, #20]
 800bcd8:	2230      	movs	r2, #48	@ 0x30
 800bcda:	703a      	strb	r2, [r7, #0]
 800bcdc:	781a      	ldrb	r2, [r3, #0]
 800bcde:	3201      	adds	r2, #1
 800bce0:	701a      	strb	r2, [r3, #0]
 800bce2:	e7b1      	b.n	800bc48 <_dtoa_r+0x560>
 800bce4:	ee27 7b04 	vmul.f64	d7, d7, d4
 800bce8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800bcec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcf0:	d1b5      	bne.n	800bc5e <_dtoa_r+0x576>
 800bcf2:	e7d4      	b.n	800bc9e <_dtoa_r+0x5b6>
 800bcf4:	0800d7d0 	.word	0x0800d7d0
 800bcf8:	0800d7a8 	.word	0x0800d7a8
 800bcfc:	9908      	ldr	r1, [sp, #32]
 800bcfe:	2900      	cmp	r1, #0
 800bd00:	f000 80e9 	beq.w	800bed6 <_dtoa_r+0x7ee>
 800bd04:	9907      	ldr	r1, [sp, #28]
 800bd06:	2901      	cmp	r1, #1
 800bd08:	f300 80cb 	bgt.w	800bea2 <_dtoa_r+0x7ba>
 800bd0c:	2d00      	cmp	r5, #0
 800bd0e:	f000 80c4 	beq.w	800be9a <_dtoa_r+0x7b2>
 800bd12:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800bd16:	9e04      	ldr	r6, [sp, #16]
 800bd18:	461c      	mov	r4, r3
 800bd1a:	9305      	str	r3, [sp, #20]
 800bd1c:	9b04      	ldr	r3, [sp, #16]
 800bd1e:	4413      	add	r3, r2
 800bd20:	9304      	str	r3, [sp, #16]
 800bd22:	9b06      	ldr	r3, [sp, #24]
 800bd24:	2101      	movs	r1, #1
 800bd26:	4413      	add	r3, r2
 800bd28:	4648      	mov	r0, r9
 800bd2a:	9306      	str	r3, [sp, #24]
 800bd2c:	f000 fc2e 	bl	800c58c <__i2b>
 800bd30:	9b05      	ldr	r3, [sp, #20]
 800bd32:	4605      	mov	r5, r0
 800bd34:	b166      	cbz	r6, 800bd50 <_dtoa_r+0x668>
 800bd36:	9a06      	ldr	r2, [sp, #24]
 800bd38:	2a00      	cmp	r2, #0
 800bd3a:	dd09      	ble.n	800bd50 <_dtoa_r+0x668>
 800bd3c:	42b2      	cmp	r2, r6
 800bd3e:	9904      	ldr	r1, [sp, #16]
 800bd40:	bfa8      	it	ge
 800bd42:	4632      	movge	r2, r6
 800bd44:	1a89      	subs	r1, r1, r2
 800bd46:	9104      	str	r1, [sp, #16]
 800bd48:	9906      	ldr	r1, [sp, #24]
 800bd4a:	1ab6      	subs	r6, r6, r2
 800bd4c:	1a8a      	subs	r2, r1, r2
 800bd4e:	9206      	str	r2, [sp, #24]
 800bd50:	b30b      	cbz	r3, 800bd96 <_dtoa_r+0x6ae>
 800bd52:	9a08      	ldr	r2, [sp, #32]
 800bd54:	2a00      	cmp	r2, #0
 800bd56:	f000 80c5 	beq.w	800bee4 <_dtoa_r+0x7fc>
 800bd5a:	2c00      	cmp	r4, #0
 800bd5c:	f000 80bf 	beq.w	800bede <_dtoa_r+0x7f6>
 800bd60:	4629      	mov	r1, r5
 800bd62:	4622      	mov	r2, r4
 800bd64:	4648      	mov	r0, r9
 800bd66:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bd68:	f000 fcc8 	bl	800c6fc <__pow5mult>
 800bd6c:	9a01      	ldr	r2, [sp, #4]
 800bd6e:	4601      	mov	r1, r0
 800bd70:	4605      	mov	r5, r0
 800bd72:	4648      	mov	r0, r9
 800bd74:	f000 fc20 	bl	800c5b8 <__multiply>
 800bd78:	9901      	ldr	r1, [sp, #4]
 800bd7a:	9005      	str	r0, [sp, #20]
 800bd7c:	4648      	mov	r0, r9
 800bd7e:	f000 fb51 	bl	800c424 <_Bfree>
 800bd82:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bd84:	1b1b      	subs	r3, r3, r4
 800bd86:	f000 80b0 	beq.w	800beea <_dtoa_r+0x802>
 800bd8a:	9905      	ldr	r1, [sp, #20]
 800bd8c:	461a      	mov	r2, r3
 800bd8e:	4648      	mov	r0, r9
 800bd90:	f000 fcb4 	bl	800c6fc <__pow5mult>
 800bd94:	9001      	str	r0, [sp, #4]
 800bd96:	2101      	movs	r1, #1
 800bd98:	4648      	mov	r0, r9
 800bd9a:	f000 fbf7 	bl	800c58c <__i2b>
 800bd9e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bda0:	4604      	mov	r4, r0
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	f000 81da 	beq.w	800c15c <_dtoa_r+0xa74>
 800bda8:	461a      	mov	r2, r3
 800bdaa:	4601      	mov	r1, r0
 800bdac:	4648      	mov	r0, r9
 800bdae:	f000 fca5 	bl	800c6fc <__pow5mult>
 800bdb2:	9b07      	ldr	r3, [sp, #28]
 800bdb4:	2b01      	cmp	r3, #1
 800bdb6:	4604      	mov	r4, r0
 800bdb8:	f300 80a0 	bgt.w	800befc <_dtoa_r+0x814>
 800bdbc:	9b02      	ldr	r3, [sp, #8]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	f040 8096 	bne.w	800bef0 <_dtoa_r+0x808>
 800bdc4:	9b03      	ldr	r3, [sp, #12]
 800bdc6:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800bdca:	2a00      	cmp	r2, #0
 800bdcc:	f040 8092 	bne.w	800bef4 <_dtoa_r+0x80c>
 800bdd0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800bdd4:	0d12      	lsrs	r2, r2, #20
 800bdd6:	0512      	lsls	r2, r2, #20
 800bdd8:	2a00      	cmp	r2, #0
 800bdda:	f000 808d 	beq.w	800bef8 <_dtoa_r+0x810>
 800bdde:	9b04      	ldr	r3, [sp, #16]
 800bde0:	3301      	adds	r3, #1
 800bde2:	9304      	str	r3, [sp, #16]
 800bde4:	9b06      	ldr	r3, [sp, #24]
 800bde6:	3301      	adds	r3, #1
 800bde8:	9306      	str	r3, [sp, #24]
 800bdea:	2301      	movs	r3, #1
 800bdec:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bdee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	f000 81b9 	beq.w	800c168 <_dtoa_r+0xa80>
 800bdf6:	6922      	ldr	r2, [r4, #16]
 800bdf8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800bdfc:	6910      	ldr	r0, [r2, #16]
 800bdfe:	f000 fb79 	bl	800c4f4 <__hi0bits>
 800be02:	f1c0 0020 	rsb	r0, r0, #32
 800be06:	9b06      	ldr	r3, [sp, #24]
 800be08:	4418      	add	r0, r3
 800be0a:	f010 001f 	ands.w	r0, r0, #31
 800be0e:	f000 8081 	beq.w	800bf14 <_dtoa_r+0x82c>
 800be12:	f1c0 0220 	rsb	r2, r0, #32
 800be16:	2a04      	cmp	r2, #4
 800be18:	dd73      	ble.n	800bf02 <_dtoa_r+0x81a>
 800be1a:	9b04      	ldr	r3, [sp, #16]
 800be1c:	f1c0 001c 	rsb	r0, r0, #28
 800be20:	4403      	add	r3, r0
 800be22:	9304      	str	r3, [sp, #16]
 800be24:	9b06      	ldr	r3, [sp, #24]
 800be26:	4406      	add	r6, r0
 800be28:	4403      	add	r3, r0
 800be2a:	9306      	str	r3, [sp, #24]
 800be2c:	9b04      	ldr	r3, [sp, #16]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	dd05      	ble.n	800be3e <_dtoa_r+0x756>
 800be32:	9901      	ldr	r1, [sp, #4]
 800be34:	461a      	mov	r2, r3
 800be36:	4648      	mov	r0, r9
 800be38:	f000 fcba 	bl	800c7b0 <__lshift>
 800be3c:	9001      	str	r0, [sp, #4]
 800be3e:	9b06      	ldr	r3, [sp, #24]
 800be40:	2b00      	cmp	r3, #0
 800be42:	dd05      	ble.n	800be50 <_dtoa_r+0x768>
 800be44:	4621      	mov	r1, r4
 800be46:	461a      	mov	r2, r3
 800be48:	4648      	mov	r0, r9
 800be4a:	f000 fcb1 	bl	800c7b0 <__lshift>
 800be4e:	4604      	mov	r4, r0
 800be50:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800be52:	2b00      	cmp	r3, #0
 800be54:	d060      	beq.n	800bf18 <_dtoa_r+0x830>
 800be56:	9801      	ldr	r0, [sp, #4]
 800be58:	4621      	mov	r1, r4
 800be5a:	f000 fd15 	bl	800c888 <__mcmp>
 800be5e:	2800      	cmp	r0, #0
 800be60:	da5a      	bge.n	800bf18 <_dtoa_r+0x830>
 800be62:	f108 33ff 	add.w	r3, r8, #4294967295
 800be66:	9305      	str	r3, [sp, #20]
 800be68:	9901      	ldr	r1, [sp, #4]
 800be6a:	2300      	movs	r3, #0
 800be6c:	220a      	movs	r2, #10
 800be6e:	4648      	mov	r0, r9
 800be70:	f000 fafa 	bl	800c468 <__multadd>
 800be74:	9b08      	ldr	r3, [sp, #32]
 800be76:	9001      	str	r0, [sp, #4]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	f000 8177 	beq.w	800c16c <_dtoa_r+0xa84>
 800be7e:	4629      	mov	r1, r5
 800be80:	2300      	movs	r3, #0
 800be82:	220a      	movs	r2, #10
 800be84:	4648      	mov	r0, r9
 800be86:	f000 faef 	bl	800c468 <__multadd>
 800be8a:	f1bb 0f00 	cmp.w	fp, #0
 800be8e:	4605      	mov	r5, r0
 800be90:	dc6e      	bgt.n	800bf70 <_dtoa_r+0x888>
 800be92:	9b07      	ldr	r3, [sp, #28]
 800be94:	2b02      	cmp	r3, #2
 800be96:	dc48      	bgt.n	800bf2a <_dtoa_r+0x842>
 800be98:	e06a      	b.n	800bf70 <_dtoa_r+0x888>
 800be9a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800be9c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800bea0:	e739      	b.n	800bd16 <_dtoa_r+0x62e>
 800bea2:	f10a 34ff 	add.w	r4, sl, #4294967295
 800bea6:	42a3      	cmp	r3, r4
 800bea8:	db07      	blt.n	800beba <_dtoa_r+0x7d2>
 800beaa:	f1ba 0f00 	cmp.w	sl, #0
 800beae:	eba3 0404 	sub.w	r4, r3, r4
 800beb2:	db0b      	blt.n	800becc <_dtoa_r+0x7e4>
 800beb4:	9e04      	ldr	r6, [sp, #16]
 800beb6:	4652      	mov	r2, sl
 800beb8:	e72f      	b.n	800bd1a <_dtoa_r+0x632>
 800beba:	1ae2      	subs	r2, r4, r3
 800bebc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bebe:	9e04      	ldr	r6, [sp, #16]
 800bec0:	4413      	add	r3, r2
 800bec2:	930a      	str	r3, [sp, #40]	@ 0x28
 800bec4:	4652      	mov	r2, sl
 800bec6:	4623      	mov	r3, r4
 800bec8:	2400      	movs	r4, #0
 800beca:	e726      	b.n	800bd1a <_dtoa_r+0x632>
 800becc:	9a04      	ldr	r2, [sp, #16]
 800bece:	eba2 060a 	sub.w	r6, r2, sl
 800bed2:	2200      	movs	r2, #0
 800bed4:	e721      	b.n	800bd1a <_dtoa_r+0x632>
 800bed6:	9e04      	ldr	r6, [sp, #16]
 800bed8:	9d08      	ldr	r5, [sp, #32]
 800beda:	461c      	mov	r4, r3
 800bedc:	e72a      	b.n	800bd34 <_dtoa_r+0x64c>
 800bede:	9a01      	ldr	r2, [sp, #4]
 800bee0:	9205      	str	r2, [sp, #20]
 800bee2:	e752      	b.n	800bd8a <_dtoa_r+0x6a2>
 800bee4:	9901      	ldr	r1, [sp, #4]
 800bee6:	461a      	mov	r2, r3
 800bee8:	e751      	b.n	800bd8e <_dtoa_r+0x6a6>
 800beea:	9b05      	ldr	r3, [sp, #20]
 800beec:	9301      	str	r3, [sp, #4]
 800beee:	e752      	b.n	800bd96 <_dtoa_r+0x6ae>
 800bef0:	2300      	movs	r3, #0
 800bef2:	e77b      	b.n	800bdec <_dtoa_r+0x704>
 800bef4:	9b02      	ldr	r3, [sp, #8]
 800bef6:	e779      	b.n	800bdec <_dtoa_r+0x704>
 800bef8:	920b      	str	r2, [sp, #44]	@ 0x2c
 800befa:	e778      	b.n	800bdee <_dtoa_r+0x706>
 800befc:	2300      	movs	r3, #0
 800befe:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bf00:	e779      	b.n	800bdf6 <_dtoa_r+0x70e>
 800bf02:	d093      	beq.n	800be2c <_dtoa_r+0x744>
 800bf04:	9b04      	ldr	r3, [sp, #16]
 800bf06:	321c      	adds	r2, #28
 800bf08:	4413      	add	r3, r2
 800bf0a:	9304      	str	r3, [sp, #16]
 800bf0c:	9b06      	ldr	r3, [sp, #24]
 800bf0e:	4416      	add	r6, r2
 800bf10:	4413      	add	r3, r2
 800bf12:	e78a      	b.n	800be2a <_dtoa_r+0x742>
 800bf14:	4602      	mov	r2, r0
 800bf16:	e7f5      	b.n	800bf04 <_dtoa_r+0x81c>
 800bf18:	f1ba 0f00 	cmp.w	sl, #0
 800bf1c:	f8cd 8014 	str.w	r8, [sp, #20]
 800bf20:	46d3      	mov	fp, sl
 800bf22:	dc21      	bgt.n	800bf68 <_dtoa_r+0x880>
 800bf24:	9b07      	ldr	r3, [sp, #28]
 800bf26:	2b02      	cmp	r3, #2
 800bf28:	dd1e      	ble.n	800bf68 <_dtoa_r+0x880>
 800bf2a:	f1bb 0f00 	cmp.w	fp, #0
 800bf2e:	f47f addc 	bne.w	800baea <_dtoa_r+0x402>
 800bf32:	4621      	mov	r1, r4
 800bf34:	465b      	mov	r3, fp
 800bf36:	2205      	movs	r2, #5
 800bf38:	4648      	mov	r0, r9
 800bf3a:	f000 fa95 	bl	800c468 <__multadd>
 800bf3e:	4601      	mov	r1, r0
 800bf40:	4604      	mov	r4, r0
 800bf42:	9801      	ldr	r0, [sp, #4]
 800bf44:	f000 fca0 	bl	800c888 <__mcmp>
 800bf48:	2800      	cmp	r0, #0
 800bf4a:	f77f adce 	ble.w	800baea <_dtoa_r+0x402>
 800bf4e:	463e      	mov	r6, r7
 800bf50:	2331      	movs	r3, #49	@ 0x31
 800bf52:	f806 3b01 	strb.w	r3, [r6], #1
 800bf56:	9b05      	ldr	r3, [sp, #20]
 800bf58:	3301      	adds	r3, #1
 800bf5a:	9305      	str	r3, [sp, #20]
 800bf5c:	e5c9      	b.n	800baf2 <_dtoa_r+0x40a>
 800bf5e:	f8cd 8014 	str.w	r8, [sp, #20]
 800bf62:	4654      	mov	r4, sl
 800bf64:	4625      	mov	r5, r4
 800bf66:	e7f2      	b.n	800bf4e <_dtoa_r+0x866>
 800bf68:	9b08      	ldr	r3, [sp, #32]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	f000 8102 	beq.w	800c174 <_dtoa_r+0xa8c>
 800bf70:	2e00      	cmp	r6, #0
 800bf72:	dd05      	ble.n	800bf80 <_dtoa_r+0x898>
 800bf74:	4629      	mov	r1, r5
 800bf76:	4632      	mov	r2, r6
 800bf78:	4648      	mov	r0, r9
 800bf7a:	f000 fc19 	bl	800c7b0 <__lshift>
 800bf7e:	4605      	mov	r5, r0
 800bf80:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d058      	beq.n	800c038 <_dtoa_r+0x950>
 800bf86:	6869      	ldr	r1, [r5, #4]
 800bf88:	4648      	mov	r0, r9
 800bf8a:	f000 fa0b 	bl	800c3a4 <_Balloc>
 800bf8e:	4606      	mov	r6, r0
 800bf90:	b928      	cbnz	r0, 800bf9e <_dtoa_r+0x8b6>
 800bf92:	4b82      	ldr	r3, [pc, #520]	@ (800c19c <_dtoa_r+0xab4>)
 800bf94:	4602      	mov	r2, r0
 800bf96:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800bf9a:	f7ff bbbe 	b.w	800b71a <_dtoa_r+0x32>
 800bf9e:	692a      	ldr	r2, [r5, #16]
 800bfa0:	3202      	adds	r2, #2
 800bfa2:	0092      	lsls	r2, r2, #2
 800bfa4:	f105 010c 	add.w	r1, r5, #12
 800bfa8:	300c      	adds	r0, #12
 800bfaa:	f000 fff7 	bl	800cf9c <memcpy>
 800bfae:	2201      	movs	r2, #1
 800bfb0:	4631      	mov	r1, r6
 800bfb2:	4648      	mov	r0, r9
 800bfb4:	f000 fbfc 	bl	800c7b0 <__lshift>
 800bfb8:	1c7b      	adds	r3, r7, #1
 800bfba:	9304      	str	r3, [sp, #16]
 800bfbc:	eb07 030b 	add.w	r3, r7, fp
 800bfc0:	9309      	str	r3, [sp, #36]	@ 0x24
 800bfc2:	9b02      	ldr	r3, [sp, #8]
 800bfc4:	f003 0301 	and.w	r3, r3, #1
 800bfc8:	46a8      	mov	r8, r5
 800bfca:	9308      	str	r3, [sp, #32]
 800bfcc:	4605      	mov	r5, r0
 800bfce:	9b04      	ldr	r3, [sp, #16]
 800bfd0:	9801      	ldr	r0, [sp, #4]
 800bfd2:	4621      	mov	r1, r4
 800bfd4:	f103 3bff 	add.w	fp, r3, #4294967295
 800bfd8:	f7ff fafd 	bl	800b5d6 <quorem>
 800bfdc:	4641      	mov	r1, r8
 800bfde:	9002      	str	r0, [sp, #8]
 800bfe0:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800bfe4:	9801      	ldr	r0, [sp, #4]
 800bfe6:	f000 fc4f 	bl	800c888 <__mcmp>
 800bfea:	462a      	mov	r2, r5
 800bfec:	9006      	str	r0, [sp, #24]
 800bfee:	4621      	mov	r1, r4
 800bff0:	4648      	mov	r0, r9
 800bff2:	f000 fc65 	bl	800c8c0 <__mdiff>
 800bff6:	68c2      	ldr	r2, [r0, #12]
 800bff8:	4606      	mov	r6, r0
 800bffa:	b9fa      	cbnz	r2, 800c03c <_dtoa_r+0x954>
 800bffc:	4601      	mov	r1, r0
 800bffe:	9801      	ldr	r0, [sp, #4]
 800c000:	f000 fc42 	bl	800c888 <__mcmp>
 800c004:	4602      	mov	r2, r0
 800c006:	4631      	mov	r1, r6
 800c008:	4648      	mov	r0, r9
 800c00a:	920a      	str	r2, [sp, #40]	@ 0x28
 800c00c:	f000 fa0a 	bl	800c424 <_Bfree>
 800c010:	9b07      	ldr	r3, [sp, #28]
 800c012:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c014:	9e04      	ldr	r6, [sp, #16]
 800c016:	ea42 0103 	orr.w	r1, r2, r3
 800c01a:	9b08      	ldr	r3, [sp, #32]
 800c01c:	4319      	orrs	r1, r3
 800c01e:	d10f      	bne.n	800c040 <_dtoa_r+0x958>
 800c020:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800c024:	d028      	beq.n	800c078 <_dtoa_r+0x990>
 800c026:	9b06      	ldr	r3, [sp, #24]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	dd02      	ble.n	800c032 <_dtoa_r+0x94a>
 800c02c:	9b02      	ldr	r3, [sp, #8]
 800c02e:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800c032:	f88b a000 	strb.w	sl, [fp]
 800c036:	e55e      	b.n	800baf6 <_dtoa_r+0x40e>
 800c038:	4628      	mov	r0, r5
 800c03a:	e7bd      	b.n	800bfb8 <_dtoa_r+0x8d0>
 800c03c:	2201      	movs	r2, #1
 800c03e:	e7e2      	b.n	800c006 <_dtoa_r+0x91e>
 800c040:	9b06      	ldr	r3, [sp, #24]
 800c042:	2b00      	cmp	r3, #0
 800c044:	db04      	blt.n	800c050 <_dtoa_r+0x968>
 800c046:	9907      	ldr	r1, [sp, #28]
 800c048:	430b      	orrs	r3, r1
 800c04a:	9908      	ldr	r1, [sp, #32]
 800c04c:	430b      	orrs	r3, r1
 800c04e:	d120      	bne.n	800c092 <_dtoa_r+0x9aa>
 800c050:	2a00      	cmp	r2, #0
 800c052:	ddee      	ble.n	800c032 <_dtoa_r+0x94a>
 800c054:	9901      	ldr	r1, [sp, #4]
 800c056:	2201      	movs	r2, #1
 800c058:	4648      	mov	r0, r9
 800c05a:	f000 fba9 	bl	800c7b0 <__lshift>
 800c05e:	4621      	mov	r1, r4
 800c060:	9001      	str	r0, [sp, #4]
 800c062:	f000 fc11 	bl	800c888 <__mcmp>
 800c066:	2800      	cmp	r0, #0
 800c068:	dc03      	bgt.n	800c072 <_dtoa_r+0x98a>
 800c06a:	d1e2      	bne.n	800c032 <_dtoa_r+0x94a>
 800c06c:	f01a 0f01 	tst.w	sl, #1
 800c070:	d0df      	beq.n	800c032 <_dtoa_r+0x94a>
 800c072:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800c076:	d1d9      	bne.n	800c02c <_dtoa_r+0x944>
 800c078:	2339      	movs	r3, #57	@ 0x39
 800c07a:	f88b 3000 	strb.w	r3, [fp]
 800c07e:	4633      	mov	r3, r6
 800c080:	461e      	mov	r6, r3
 800c082:	3b01      	subs	r3, #1
 800c084:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c088:	2a39      	cmp	r2, #57	@ 0x39
 800c08a:	d052      	beq.n	800c132 <_dtoa_r+0xa4a>
 800c08c:	3201      	adds	r2, #1
 800c08e:	701a      	strb	r2, [r3, #0]
 800c090:	e531      	b.n	800baf6 <_dtoa_r+0x40e>
 800c092:	2a00      	cmp	r2, #0
 800c094:	dd07      	ble.n	800c0a6 <_dtoa_r+0x9be>
 800c096:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800c09a:	d0ed      	beq.n	800c078 <_dtoa_r+0x990>
 800c09c:	f10a 0301 	add.w	r3, sl, #1
 800c0a0:	f88b 3000 	strb.w	r3, [fp]
 800c0a4:	e527      	b.n	800baf6 <_dtoa_r+0x40e>
 800c0a6:	9b04      	ldr	r3, [sp, #16]
 800c0a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c0aa:	f803 ac01 	strb.w	sl, [r3, #-1]
 800c0ae:	4293      	cmp	r3, r2
 800c0b0:	d029      	beq.n	800c106 <_dtoa_r+0xa1e>
 800c0b2:	9901      	ldr	r1, [sp, #4]
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	220a      	movs	r2, #10
 800c0b8:	4648      	mov	r0, r9
 800c0ba:	f000 f9d5 	bl	800c468 <__multadd>
 800c0be:	45a8      	cmp	r8, r5
 800c0c0:	9001      	str	r0, [sp, #4]
 800c0c2:	f04f 0300 	mov.w	r3, #0
 800c0c6:	f04f 020a 	mov.w	r2, #10
 800c0ca:	4641      	mov	r1, r8
 800c0cc:	4648      	mov	r0, r9
 800c0ce:	d107      	bne.n	800c0e0 <_dtoa_r+0x9f8>
 800c0d0:	f000 f9ca 	bl	800c468 <__multadd>
 800c0d4:	4680      	mov	r8, r0
 800c0d6:	4605      	mov	r5, r0
 800c0d8:	9b04      	ldr	r3, [sp, #16]
 800c0da:	3301      	adds	r3, #1
 800c0dc:	9304      	str	r3, [sp, #16]
 800c0de:	e776      	b.n	800bfce <_dtoa_r+0x8e6>
 800c0e0:	f000 f9c2 	bl	800c468 <__multadd>
 800c0e4:	4629      	mov	r1, r5
 800c0e6:	4680      	mov	r8, r0
 800c0e8:	2300      	movs	r3, #0
 800c0ea:	220a      	movs	r2, #10
 800c0ec:	4648      	mov	r0, r9
 800c0ee:	f000 f9bb 	bl	800c468 <__multadd>
 800c0f2:	4605      	mov	r5, r0
 800c0f4:	e7f0      	b.n	800c0d8 <_dtoa_r+0x9f0>
 800c0f6:	f1bb 0f00 	cmp.w	fp, #0
 800c0fa:	bfcc      	ite	gt
 800c0fc:	465e      	movgt	r6, fp
 800c0fe:	2601      	movle	r6, #1
 800c100:	443e      	add	r6, r7
 800c102:	f04f 0800 	mov.w	r8, #0
 800c106:	9901      	ldr	r1, [sp, #4]
 800c108:	2201      	movs	r2, #1
 800c10a:	4648      	mov	r0, r9
 800c10c:	f000 fb50 	bl	800c7b0 <__lshift>
 800c110:	4621      	mov	r1, r4
 800c112:	9001      	str	r0, [sp, #4]
 800c114:	f000 fbb8 	bl	800c888 <__mcmp>
 800c118:	2800      	cmp	r0, #0
 800c11a:	dcb0      	bgt.n	800c07e <_dtoa_r+0x996>
 800c11c:	d102      	bne.n	800c124 <_dtoa_r+0xa3c>
 800c11e:	f01a 0f01 	tst.w	sl, #1
 800c122:	d1ac      	bne.n	800c07e <_dtoa_r+0x996>
 800c124:	4633      	mov	r3, r6
 800c126:	461e      	mov	r6, r3
 800c128:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c12c:	2a30      	cmp	r2, #48	@ 0x30
 800c12e:	d0fa      	beq.n	800c126 <_dtoa_r+0xa3e>
 800c130:	e4e1      	b.n	800baf6 <_dtoa_r+0x40e>
 800c132:	429f      	cmp	r7, r3
 800c134:	d1a4      	bne.n	800c080 <_dtoa_r+0x998>
 800c136:	9b05      	ldr	r3, [sp, #20]
 800c138:	3301      	adds	r3, #1
 800c13a:	9305      	str	r3, [sp, #20]
 800c13c:	2331      	movs	r3, #49	@ 0x31
 800c13e:	703b      	strb	r3, [r7, #0]
 800c140:	e4d9      	b.n	800baf6 <_dtoa_r+0x40e>
 800c142:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c144:	4f16      	ldr	r7, [pc, #88]	@ (800c1a0 <_dtoa_r+0xab8>)
 800c146:	b11b      	cbz	r3, 800c150 <_dtoa_r+0xa68>
 800c148:	f107 0308 	add.w	r3, r7, #8
 800c14c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800c14e:	6013      	str	r3, [r2, #0]
 800c150:	4638      	mov	r0, r7
 800c152:	b011      	add	sp, #68	@ 0x44
 800c154:	ecbd 8b02 	vpop	{d8}
 800c158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c15c:	9b07      	ldr	r3, [sp, #28]
 800c15e:	2b01      	cmp	r3, #1
 800c160:	f77f ae2c 	ble.w	800bdbc <_dtoa_r+0x6d4>
 800c164:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c166:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c168:	2001      	movs	r0, #1
 800c16a:	e64c      	b.n	800be06 <_dtoa_r+0x71e>
 800c16c:	f1bb 0f00 	cmp.w	fp, #0
 800c170:	f77f aed8 	ble.w	800bf24 <_dtoa_r+0x83c>
 800c174:	463e      	mov	r6, r7
 800c176:	9801      	ldr	r0, [sp, #4]
 800c178:	4621      	mov	r1, r4
 800c17a:	f7ff fa2c 	bl	800b5d6 <quorem>
 800c17e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800c182:	f806 ab01 	strb.w	sl, [r6], #1
 800c186:	1bf2      	subs	r2, r6, r7
 800c188:	4593      	cmp	fp, r2
 800c18a:	ddb4      	ble.n	800c0f6 <_dtoa_r+0xa0e>
 800c18c:	9901      	ldr	r1, [sp, #4]
 800c18e:	2300      	movs	r3, #0
 800c190:	220a      	movs	r2, #10
 800c192:	4648      	mov	r0, r9
 800c194:	f000 f968 	bl	800c468 <__multadd>
 800c198:	9001      	str	r0, [sp, #4]
 800c19a:	e7ec      	b.n	800c176 <_dtoa_r+0xa8e>
 800c19c:	0800d6d8 	.word	0x0800d6d8
 800c1a0:	0800d65c 	.word	0x0800d65c

0800c1a4 <_free_r>:
 800c1a4:	b538      	push	{r3, r4, r5, lr}
 800c1a6:	4605      	mov	r5, r0
 800c1a8:	2900      	cmp	r1, #0
 800c1aa:	d041      	beq.n	800c230 <_free_r+0x8c>
 800c1ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c1b0:	1f0c      	subs	r4, r1, #4
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	bfb8      	it	lt
 800c1b6:	18e4      	addlt	r4, r4, r3
 800c1b8:	f000 f8e8 	bl	800c38c <__malloc_lock>
 800c1bc:	4a1d      	ldr	r2, [pc, #116]	@ (800c234 <_free_r+0x90>)
 800c1be:	6813      	ldr	r3, [r2, #0]
 800c1c0:	b933      	cbnz	r3, 800c1d0 <_free_r+0x2c>
 800c1c2:	6063      	str	r3, [r4, #4]
 800c1c4:	6014      	str	r4, [r2, #0]
 800c1c6:	4628      	mov	r0, r5
 800c1c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c1cc:	f000 b8e4 	b.w	800c398 <__malloc_unlock>
 800c1d0:	42a3      	cmp	r3, r4
 800c1d2:	d908      	bls.n	800c1e6 <_free_r+0x42>
 800c1d4:	6820      	ldr	r0, [r4, #0]
 800c1d6:	1821      	adds	r1, r4, r0
 800c1d8:	428b      	cmp	r3, r1
 800c1da:	bf01      	itttt	eq
 800c1dc:	6819      	ldreq	r1, [r3, #0]
 800c1de:	685b      	ldreq	r3, [r3, #4]
 800c1e0:	1809      	addeq	r1, r1, r0
 800c1e2:	6021      	streq	r1, [r4, #0]
 800c1e4:	e7ed      	b.n	800c1c2 <_free_r+0x1e>
 800c1e6:	461a      	mov	r2, r3
 800c1e8:	685b      	ldr	r3, [r3, #4]
 800c1ea:	b10b      	cbz	r3, 800c1f0 <_free_r+0x4c>
 800c1ec:	42a3      	cmp	r3, r4
 800c1ee:	d9fa      	bls.n	800c1e6 <_free_r+0x42>
 800c1f0:	6811      	ldr	r1, [r2, #0]
 800c1f2:	1850      	adds	r0, r2, r1
 800c1f4:	42a0      	cmp	r0, r4
 800c1f6:	d10b      	bne.n	800c210 <_free_r+0x6c>
 800c1f8:	6820      	ldr	r0, [r4, #0]
 800c1fa:	4401      	add	r1, r0
 800c1fc:	1850      	adds	r0, r2, r1
 800c1fe:	4283      	cmp	r3, r0
 800c200:	6011      	str	r1, [r2, #0]
 800c202:	d1e0      	bne.n	800c1c6 <_free_r+0x22>
 800c204:	6818      	ldr	r0, [r3, #0]
 800c206:	685b      	ldr	r3, [r3, #4]
 800c208:	6053      	str	r3, [r2, #4]
 800c20a:	4408      	add	r0, r1
 800c20c:	6010      	str	r0, [r2, #0]
 800c20e:	e7da      	b.n	800c1c6 <_free_r+0x22>
 800c210:	d902      	bls.n	800c218 <_free_r+0x74>
 800c212:	230c      	movs	r3, #12
 800c214:	602b      	str	r3, [r5, #0]
 800c216:	e7d6      	b.n	800c1c6 <_free_r+0x22>
 800c218:	6820      	ldr	r0, [r4, #0]
 800c21a:	1821      	adds	r1, r4, r0
 800c21c:	428b      	cmp	r3, r1
 800c21e:	bf04      	itt	eq
 800c220:	6819      	ldreq	r1, [r3, #0]
 800c222:	685b      	ldreq	r3, [r3, #4]
 800c224:	6063      	str	r3, [r4, #4]
 800c226:	bf04      	itt	eq
 800c228:	1809      	addeq	r1, r1, r0
 800c22a:	6021      	streq	r1, [r4, #0]
 800c22c:	6054      	str	r4, [r2, #4]
 800c22e:	e7ca      	b.n	800c1c6 <_free_r+0x22>
 800c230:	bd38      	pop	{r3, r4, r5, pc}
 800c232:	bf00      	nop
 800c234:	240008c0 	.word	0x240008c0

0800c238 <malloc>:
 800c238:	4b02      	ldr	r3, [pc, #8]	@ (800c244 <malloc+0xc>)
 800c23a:	4601      	mov	r1, r0
 800c23c:	6818      	ldr	r0, [r3, #0]
 800c23e:	f000 b825 	b.w	800c28c <_malloc_r>
 800c242:	bf00      	nop
 800c244:	2400003c 	.word	0x2400003c

0800c248 <sbrk_aligned>:
 800c248:	b570      	push	{r4, r5, r6, lr}
 800c24a:	4e0f      	ldr	r6, [pc, #60]	@ (800c288 <sbrk_aligned+0x40>)
 800c24c:	460c      	mov	r4, r1
 800c24e:	6831      	ldr	r1, [r6, #0]
 800c250:	4605      	mov	r5, r0
 800c252:	b911      	cbnz	r1, 800c25a <sbrk_aligned+0x12>
 800c254:	f000 fe92 	bl	800cf7c <_sbrk_r>
 800c258:	6030      	str	r0, [r6, #0]
 800c25a:	4621      	mov	r1, r4
 800c25c:	4628      	mov	r0, r5
 800c25e:	f000 fe8d 	bl	800cf7c <_sbrk_r>
 800c262:	1c43      	adds	r3, r0, #1
 800c264:	d103      	bne.n	800c26e <sbrk_aligned+0x26>
 800c266:	f04f 34ff 	mov.w	r4, #4294967295
 800c26a:	4620      	mov	r0, r4
 800c26c:	bd70      	pop	{r4, r5, r6, pc}
 800c26e:	1cc4      	adds	r4, r0, #3
 800c270:	f024 0403 	bic.w	r4, r4, #3
 800c274:	42a0      	cmp	r0, r4
 800c276:	d0f8      	beq.n	800c26a <sbrk_aligned+0x22>
 800c278:	1a21      	subs	r1, r4, r0
 800c27a:	4628      	mov	r0, r5
 800c27c:	f000 fe7e 	bl	800cf7c <_sbrk_r>
 800c280:	3001      	adds	r0, #1
 800c282:	d1f2      	bne.n	800c26a <sbrk_aligned+0x22>
 800c284:	e7ef      	b.n	800c266 <sbrk_aligned+0x1e>
 800c286:	bf00      	nop
 800c288:	240008bc 	.word	0x240008bc

0800c28c <_malloc_r>:
 800c28c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c290:	1ccd      	adds	r5, r1, #3
 800c292:	f025 0503 	bic.w	r5, r5, #3
 800c296:	3508      	adds	r5, #8
 800c298:	2d0c      	cmp	r5, #12
 800c29a:	bf38      	it	cc
 800c29c:	250c      	movcc	r5, #12
 800c29e:	2d00      	cmp	r5, #0
 800c2a0:	4606      	mov	r6, r0
 800c2a2:	db01      	blt.n	800c2a8 <_malloc_r+0x1c>
 800c2a4:	42a9      	cmp	r1, r5
 800c2a6:	d904      	bls.n	800c2b2 <_malloc_r+0x26>
 800c2a8:	230c      	movs	r3, #12
 800c2aa:	6033      	str	r3, [r6, #0]
 800c2ac:	2000      	movs	r0, #0
 800c2ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c2b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c388 <_malloc_r+0xfc>
 800c2b6:	f000 f869 	bl	800c38c <__malloc_lock>
 800c2ba:	f8d8 3000 	ldr.w	r3, [r8]
 800c2be:	461c      	mov	r4, r3
 800c2c0:	bb44      	cbnz	r4, 800c314 <_malloc_r+0x88>
 800c2c2:	4629      	mov	r1, r5
 800c2c4:	4630      	mov	r0, r6
 800c2c6:	f7ff ffbf 	bl	800c248 <sbrk_aligned>
 800c2ca:	1c43      	adds	r3, r0, #1
 800c2cc:	4604      	mov	r4, r0
 800c2ce:	d158      	bne.n	800c382 <_malloc_r+0xf6>
 800c2d0:	f8d8 4000 	ldr.w	r4, [r8]
 800c2d4:	4627      	mov	r7, r4
 800c2d6:	2f00      	cmp	r7, #0
 800c2d8:	d143      	bne.n	800c362 <_malloc_r+0xd6>
 800c2da:	2c00      	cmp	r4, #0
 800c2dc:	d04b      	beq.n	800c376 <_malloc_r+0xea>
 800c2de:	6823      	ldr	r3, [r4, #0]
 800c2e0:	4639      	mov	r1, r7
 800c2e2:	4630      	mov	r0, r6
 800c2e4:	eb04 0903 	add.w	r9, r4, r3
 800c2e8:	f000 fe48 	bl	800cf7c <_sbrk_r>
 800c2ec:	4581      	cmp	r9, r0
 800c2ee:	d142      	bne.n	800c376 <_malloc_r+0xea>
 800c2f0:	6821      	ldr	r1, [r4, #0]
 800c2f2:	1a6d      	subs	r5, r5, r1
 800c2f4:	4629      	mov	r1, r5
 800c2f6:	4630      	mov	r0, r6
 800c2f8:	f7ff ffa6 	bl	800c248 <sbrk_aligned>
 800c2fc:	3001      	adds	r0, #1
 800c2fe:	d03a      	beq.n	800c376 <_malloc_r+0xea>
 800c300:	6823      	ldr	r3, [r4, #0]
 800c302:	442b      	add	r3, r5
 800c304:	6023      	str	r3, [r4, #0]
 800c306:	f8d8 3000 	ldr.w	r3, [r8]
 800c30a:	685a      	ldr	r2, [r3, #4]
 800c30c:	bb62      	cbnz	r2, 800c368 <_malloc_r+0xdc>
 800c30e:	f8c8 7000 	str.w	r7, [r8]
 800c312:	e00f      	b.n	800c334 <_malloc_r+0xa8>
 800c314:	6822      	ldr	r2, [r4, #0]
 800c316:	1b52      	subs	r2, r2, r5
 800c318:	d420      	bmi.n	800c35c <_malloc_r+0xd0>
 800c31a:	2a0b      	cmp	r2, #11
 800c31c:	d917      	bls.n	800c34e <_malloc_r+0xc2>
 800c31e:	1961      	adds	r1, r4, r5
 800c320:	42a3      	cmp	r3, r4
 800c322:	6025      	str	r5, [r4, #0]
 800c324:	bf18      	it	ne
 800c326:	6059      	strne	r1, [r3, #4]
 800c328:	6863      	ldr	r3, [r4, #4]
 800c32a:	bf08      	it	eq
 800c32c:	f8c8 1000 	streq.w	r1, [r8]
 800c330:	5162      	str	r2, [r4, r5]
 800c332:	604b      	str	r3, [r1, #4]
 800c334:	4630      	mov	r0, r6
 800c336:	f000 f82f 	bl	800c398 <__malloc_unlock>
 800c33a:	f104 000b 	add.w	r0, r4, #11
 800c33e:	1d23      	adds	r3, r4, #4
 800c340:	f020 0007 	bic.w	r0, r0, #7
 800c344:	1ac2      	subs	r2, r0, r3
 800c346:	bf1c      	itt	ne
 800c348:	1a1b      	subne	r3, r3, r0
 800c34a:	50a3      	strne	r3, [r4, r2]
 800c34c:	e7af      	b.n	800c2ae <_malloc_r+0x22>
 800c34e:	6862      	ldr	r2, [r4, #4]
 800c350:	42a3      	cmp	r3, r4
 800c352:	bf0c      	ite	eq
 800c354:	f8c8 2000 	streq.w	r2, [r8]
 800c358:	605a      	strne	r2, [r3, #4]
 800c35a:	e7eb      	b.n	800c334 <_malloc_r+0xa8>
 800c35c:	4623      	mov	r3, r4
 800c35e:	6864      	ldr	r4, [r4, #4]
 800c360:	e7ae      	b.n	800c2c0 <_malloc_r+0x34>
 800c362:	463c      	mov	r4, r7
 800c364:	687f      	ldr	r7, [r7, #4]
 800c366:	e7b6      	b.n	800c2d6 <_malloc_r+0x4a>
 800c368:	461a      	mov	r2, r3
 800c36a:	685b      	ldr	r3, [r3, #4]
 800c36c:	42a3      	cmp	r3, r4
 800c36e:	d1fb      	bne.n	800c368 <_malloc_r+0xdc>
 800c370:	2300      	movs	r3, #0
 800c372:	6053      	str	r3, [r2, #4]
 800c374:	e7de      	b.n	800c334 <_malloc_r+0xa8>
 800c376:	230c      	movs	r3, #12
 800c378:	6033      	str	r3, [r6, #0]
 800c37a:	4630      	mov	r0, r6
 800c37c:	f000 f80c 	bl	800c398 <__malloc_unlock>
 800c380:	e794      	b.n	800c2ac <_malloc_r+0x20>
 800c382:	6005      	str	r5, [r0, #0]
 800c384:	e7d6      	b.n	800c334 <_malloc_r+0xa8>
 800c386:	bf00      	nop
 800c388:	240008c0 	.word	0x240008c0

0800c38c <__malloc_lock>:
 800c38c:	4801      	ldr	r0, [pc, #4]	@ (800c394 <__malloc_lock+0x8>)
 800c38e:	f7ff b920 	b.w	800b5d2 <__retarget_lock_acquire_recursive>
 800c392:	bf00      	nop
 800c394:	240008b8 	.word	0x240008b8

0800c398 <__malloc_unlock>:
 800c398:	4801      	ldr	r0, [pc, #4]	@ (800c3a0 <__malloc_unlock+0x8>)
 800c39a:	f7ff b91b 	b.w	800b5d4 <__retarget_lock_release_recursive>
 800c39e:	bf00      	nop
 800c3a0:	240008b8 	.word	0x240008b8

0800c3a4 <_Balloc>:
 800c3a4:	b570      	push	{r4, r5, r6, lr}
 800c3a6:	69c6      	ldr	r6, [r0, #28]
 800c3a8:	4604      	mov	r4, r0
 800c3aa:	460d      	mov	r5, r1
 800c3ac:	b976      	cbnz	r6, 800c3cc <_Balloc+0x28>
 800c3ae:	2010      	movs	r0, #16
 800c3b0:	f7ff ff42 	bl	800c238 <malloc>
 800c3b4:	4602      	mov	r2, r0
 800c3b6:	61e0      	str	r0, [r4, #28]
 800c3b8:	b920      	cbnz	r0, 800c3c4 <_Balloc+0x20>
 800c3ba:	4b18      	ldr	r3, [pc, #96]	@ (800c41c <_Balloc+0x78>)
 800c3bc:	4818      	ldr	r0, [pc, #96]	@ (800c420 <_Balloc+0x7c>)
 800c3be:	216b      	movs	r1, #107	@ 0x6b
 800c3c0:	f000 fdfa 	bl	800cfb8 <__assert_func>
 800c3c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c3c8:	6006      	str	r6, [r0, #0]
 800c3ca:	60c6      	str	r6, [r0, #12]
 800c3cc:	69e6      	ldr	r6, [r4, #28]
 800c3ce:	68f3      	ldr	r3, [r6, #12]
 800c3d0:	b183      	cbz	r3, 800c3f4 <_Balloc+0x50>
 800c3d2:	69e3      	ldr	r3, [r4, #28]
 800c3d4:	68db      	ldr	r3, [r3, #12]
 800c3d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c3da:	b9b8      	cbnz	r0, 800c40c <_Balloc+0x68>
 800c3dc:	2101      	movs	r1, #1
 800c3de:	fa01 f605 	lsl.w	r6, r1, r5
 800c3e2:	1d72      	adds	r2, r6, #5
 800c3e4:	0092      	lsls	r2, r2, #2
 800c3e6:	4620      	mov	r0, r4
 800c3e8:	f000 fe04 	bl	800cff4 <_calloc_r>
 800c3ec:	b160      	cbz	r0, 800c408 <_Balloc+0x64>
 800c3ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c3f2:	e00e      	b.n	800c412 <_Balloc+0x6e>
 800c3f4:	2221      	movs	r2, #33	@ 0x21
 800c3f6:	2104      	movs	r1, #4
 800c3f8:	4620      	mov	r0, r4
 800c3fa:	f000 fdfb 	bl	800cff4 <_calloc_r>
 800c3fe:	69e3      	ldr	r3, [r4, #28]
 800c400:	60f0      	str	r0, [r6, #12]
 800c402:	68db      	ldr	r3, [r3, #12]
 800c404:	2b00      	cmp	r3, #0
 800c406:	d1e4      	bne.n	800c3d2 <_Balloc+0x2e>
 800c408:	2000      	movs	r0, #0
 800c40a:	bd70      	pop	{r4, r5, r6, pc}
 800c40c:	6802      	ldr	r2, [r0, #0]
 800c40e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c412:	2300      	movs	r3, #0
 800c414:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c418:	e7f7      	b.n	800c40a <_Balloc+0x66>
 800c41a:	bf00      	nop
 800c41c:	0800d669 	.word	0x0800d669
 800c420:	0800d6e9 	.word	0x0800d6e9

0800c424 <_Bfree>:
 800c424:	b570      	push	{r4, r5, r6, lr}
 800c426:	69c6      	ldr	r6, [r0, #28]
 800c428:	4605      	mov	r5, r0
 800c42a:	460c      	mov	r4, r1
 800c42c:	b976      	cbnz	r6, 800c44c <_Bfree+0x28>
 800c42e:	2010      	movs	r0, #16
 800c430:	f7ff ff02 	bl	800c238 <malloc>
 800c434:	4602      	mov	r2, r0
 800c436:	61e8      	str	r0, [r5, #28]
 800c438:	b920      	cbnz	r0, 800c444 <_Bfree+0x20>
 800c43a:	4b09      	ldr	r3, [pc, #36]	@ (800c460 <_Bfree+0x3c>)
 800c43c:	4809      	ldr	r0, [pc, #36]	@ (800c464 <_Bfree+0x40>)
 800c43e:	218f      	movs	r1, #143	@ 0x8f
 800c440:	f000 fdba 	bl	800cfb8 <__assert_func>
 800c444:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c448:	6006      	str	r6, [r0, #0]
 800c44a:	60c6      	str	r6, [r0, #12]
 800c44c:	b13c      	cbz	r4, 800c45e <_Bfree+0x3a>
 800c44e:	69eb      	ldr	r3, [r5, #28]
 800c450:	6862      	ldr	r2, [r4, #4]
 800c452:	68db      	ldr	r3, [r3, #12]
 800c454:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c458:	6021      	str	r1, [r4, #0]
 800c45a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c45e:	bd70      	pop	{r4, r5, r6, pc}
 800c460:	0800d669 	.word	0x0800d669
 800c464:	0800d6e9 	.word	0x0800d6e9

0800c468 <__multadd>:
 800c468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c46c:	690d      	ldr	r5, [r1, #16]
 800c46e:	4607      	mov	r7, r0
 800c470:	460c      	mov	r4, r1
 800c472:	461e      	mov	r6, r3
 800c474:	f101 0c14 	add.w	ip, r1, #20
 800c478:	2000      	movs	r0, #0
 800c47a:	f8dc 3000 	ldr.w	r3, [ip]
 800c47e:	b299      	uxth	r1, r3
 800c480:	fb02 6101 	mla	r1, r2, r1, r6
 800c484:	0c1e      	lsrs	r6, r3, #16
 800c486:	0c0b      	lsrs	r3, r1, #16
 800c488:	fb02 3306 	mla	r3, r2, r6, r3
 800c48c:	b289      	uxth	r1, r1
 800c48e:	3001      	adds	r0, #1
 800c490:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c494:	4285      	cmp	r5, r0
 800c496:	f84c 1b04 	str.w	r1, [ip], #4
 800c49a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c49e:	dcec      	bgt.n	800c47a <__multadd+0x12>
 800c4a0:	b30e      	cbz	r6, 800c4e6 <__multadd+0x7e>
 800c4a2:	68a3      	ldr	r3, [r4, #8]
 800c4a4:	42ab      	cmp	r3, r5
 800c4a6:	dc19      	bgt.n	800c4dc <__multadd+0x74>
 800c4a8:	6861      	ldr	r1, [r4, #4]
 800c4aa:	4638      	mov	r0, r7
 800c4ac:	3101      	adds	r1, #1
 800c4ae:	f7ff ff79 	bl	800c3a4 <_Balloc>
 800c4b2:	4680      	mov	r8, r0
 800c4b4:	b928      	cbnz	r0, 800c4c2 <__multadd+0x5a>
 800c4b6:	4602      	mov	r2, r0
 800c4b8:	4b0c      	ldr	r3, [pc, #48]	@ (800c4ec <__multadd+0x84>)
 800c4ba:	480d      	ldr	r0, [pc, #52]	@ (800c4f0 <__multadd+0x88>)
 800c4bc:	21ba      	movs	r1, #186	@ 0xba
 800c4be:	f000 fd7b 	bl	800cfb8 <__assert_func>
 800c4c2:	6922      	ldr	r2, [r4, #16]
 800c4c4:	3202      	adds	r2, #2
 800c4c6:	f104 010c 	add.w	r1, r4, #12
 800c4ca:	0092      	lsls	r2, r2, #2
 800c4cc:	300c      	adds	r0, #12
 800c4ce:	f000 fd65 	bl	800cf9c <memcpy>
 800c4d2:	4621      	mov	r1, r4
 800c4d4:	4638      	mov	r0, r7
 800c4d6:	f7ff ffa5 	bl	800c424 <_Bfree>
 800c4da:	4644      	mov	r4, r8
 800c4dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c4e0:	3501      	adds	r5, #1
 800c4e2:	615e      	str	r6, [r3, #20]
 800c4e4:	6125      	str	r5, [r4, #16]
 800c4e6:	4620      	mov	r0, r4
 800c4e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4ec:	0800d6d8 	.word	0x0800d6d8
 800c4f0:	0800d6e9 	.word	0x0800d6e9

0800c4f4 <__hi0bits>:
 800c4f4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c4f8:	4603      	mov	r3, r0
 800c4fa:	bf36      	itet	cc
 800c4fc:	0403      	lslcc	r3, r0, #16
 800c4fe:	2000      	movcs	r0, #0
 800c500:	2010      	movcc	r0, #16
 800c502:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c506:	bf3c      	itt	cc
 800c508:	021b      	lslcc	r3, r3, #8
 800c50a:	3008      	addcc	r0, #8
 800c50c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c510:	bf3c      	itt	cc
 800c512:	011b      	lslcc	r3, r3, #4
 800c514:	3004      	addcc	r0, #4
 800c516:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c51a:	bf3c      	itt	cc
 800c51c:	009b      	lslcc	r3, r3, #2
 800c51e:	3002      	addcc	r0, #2
 800c520:	2b00      	cmp	r3, #0
 800c522:	db05      	blt.n	800c530 <__hi0bits+0x3c>
 800c524:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c528:	f100 0001 	add.w	r0, r0, #1
 800c52c:	bf08      	it	eq
 800c52e:	2020      	moveq	r0, #32
 800c530:	4770      	bx	lr

0800c532 <__lo0bits>:
 800c532:	6803      	ldr	r3, [r0, #0]
 800c534:	4602      	mov	r2, r0
 800c536:	f013 0007 	ands.w	r0, r3, #7
 800c53a:	d00b      	beq.n	800c554 <__lo0bits+0x22>
 800c53c:	07d9      	lsls	r1, r3, #31
 800c53e:	d421      	bmi.n	800c584 <__lo0bits+0x52>
 800c540:	0798      	lsls	r0, r3, #30
 800c542:	bf49      	itett	mi
 800c544:	085b      	lsrmi	r3, r3, #1
 800c546:	089b      	lsrpl	r3, r3, #2
 800c548:	2001      	movmi	r0, #1
 800c54a:	6013      	strmi	r3, [r2, #0]
 800c54c:	bf5c      	itt	pl
 800c54e:	6013      	strpl	r3, [r2, #0]
 800c550:	2002      	movpl	r0, #2
 800c552:	4770      	bx	lr
 800c554:	b299      	uxth	r1, r3
 800c556:	b909      	cbnz	r1, 800c55c <__lo0bits+0x2a>
 800c558:	0c1b      	lsrs	r3, r3, #16
 800c55a:	2010      	movs	r0, #16
 800c55c:	b2d9      	uxtb	r1, r3
 800c55e:	b909      	cbnz	r1, 800c564 <__lo0bits+0x32>
 800c560:	3008      	adds	r0, #8
 800c562:	0a1b      	lsrs	r3, r3, #8
 800c564:	0719      	lsls	r1, r3, #28
 800c566:	bf04      	itt	eq
 800c568:	091b      	lsreq	r3, r3, #4
 800c56a:	3004      	addeq	r0, #4
 800c56c:	0799      	lsls	r1, r3, #30
 800c56e:	bf04      	itt	eq
 800c570:	089b      	lsreq	r3, r3, #2
 800c572:	3002      	addeq	r0, #2
 800c574:	07d9      	lsls	r1, r3, #31
 800c576:	d403      	bmi.n	800c580 <__lo0bits+0x4e>
 800c578:	085b      	lsrs	r3, r3, #1
 800c57a:	f100 0001 	add.w	r0, r0, #1
 800c57e:	d003      	beq.n	800c588 <__lo0bits+0x56>
 800c580:	6013      	str	r3, [r2, #0]
 800c582:	4770      	bx	lr
 800c584:	2000      	movs	r0, #0
 800c586:	4770      	bx	lr
 800c588:	2020      	movs	r0, #32
 800c58a:	4770      	bx	lr

0800c58c <__i2b>:
 800c58c:	b510      	push	{r4, lr}
 800c58e:	460c      	mov	r4, r1
 800c590:	2101      	movs	r1, #1
 800c592:	f7ff ff07 	bl	800c3a4 <_Balloc>
 800c596:	4602      	mov	r2, r0
 800c598:	b928      	cbnz	r0, 800c5a6 <__i2b+0x1a>
 800c59a:	4b05      	ldr	r3, [pc, #20]	@ (800c5b0 <__i2b+0x24>)
 800c59c:	4805      	ldr	r0, [pc, #20]	@ (800c5b4 <__i2b+0x28>)
 800c59e:	f240 1145 	movw	r1, #325	@ 0x145
 800c5a2:	f000 fd09 	bl	800cfb8 <__assert_func>
 800c5a6:	2301      	movs	r3, #1
 800c5a8:	6144      	str	r4, [r0, #20]
 800c5aa:	6103      	str	r3, [r0, #16]
 800c5ac:	bd10      	pop	{r4, pc}
 800c5ae:	bf00      	nop
 800c5b0:	0800d6d8 	.word	0x0800d6d8
 800c5b4:	0800d6e9 	.word	0x0800d6e9

0800c5b8 <__multiply>:
 800c5b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5bc:	4617      	mov	r7, r2
 800c5be:	690a      	ldr	r2, [r1, #16]
 800c5c0:	693b      	ldr	r3, [r7, #16]
 800c5c2:	429a      	cmp	r2, r3
 800c5c4:	bfa8      	it	ge
 800c5c6:	463b      	movge	r3, r7
 800c5c8:	4689      	mov	r9, r1
 800c5ca:	bfa4      	itt	ge
 800c5cc:	460f      	movge	r7, r1
 800c5ce:	4699      	movge	r9, r3
 800c5d0:	693d      	ldr	r5, [r7, #16]
 800c5d2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c5d6:	68bb      	ldr	r3, [r7, #8]
 800c5d8:	6879      	ldr	r1, [r7, #4]
 800c5da:	eb05 060a 	add.w	r6, r5, sl
 800c5de:	42b3      	cmp	r3, r6
 800c5e0:	b085      	sub	sp, #20
 800c5e2:	bfb8      	it	lt
 800c5e4:	3101      	addlt	r1, #1
 800c5e6:	f7ff fedd 	bl	800c3a4 <_Balloc>
 800c5ea:	b930      	cbnz	r0, 800c5fa <__multiply+0x42>
 800c5ec:	4602      	mov	r2, r0
 800c5ee:	4b41      	ldr	r3, [pc, #260]	@ (800c6f4 <__multiply+0x13c>)
 800c5f0:	4841      	ldr	r0, [pc, #260]	@ (800c6f8 <__multiply+0x140>)
 800c5f2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c5f6:	f000 fcdf 	bl	800cfb8 <__assert_func>
 800c5fa:	f100 0414 	add.w	r4, r0, #20
 800c5fe:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800c602:	4623      	mov	r3, r4
 800c604:	2200      	movs	r2, #0
 800c606:	4573      	cmp	r3, lr
 800c608:	d320      	bcc.n	800c64c <__multiply+0x94>
 800c60a:	f107 0814 	add.w	r8, r7, #20
 800c60e:	f109 0114 	add.w	r1, r9, #20
 800c612:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800c616:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800c61a:	9302      	str	r3, [sp, #8]
 800c61c:	1beb      	subs	r3, r5, r7
 800c61e:	3b15      	subs	r3, #21
 800c620:	f023 0303 	bic.w	r3, r3, #3
 800c624:	3304      	adds	r3, #4
 800c626:	3715      	adds	r7, #21
 800c628:	42bd      	cmp	r5, r7
 800c62a:	bf38      	it	cc
 800c62c:	2304      	movcc	r3, #4
 800c62e:	9301      	str	r3, [sp, #4]
 800c630:	9b02      	ldr	r3, [sp, #8]
 800c632:	9103      	str	r1, [sp, #12]
 800c634:	428b      	cmp	r3, r1
 800c636:	d80c      	bhi.n	800c652 <__multiply+0x9a>
 800c638:	2e00      	cmp	r6, #0
 800c63a:	dd03      	ble.n	800c644 <__multiply+0x8c>
 800c63c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800c640:	2b00      	cmp	r3, #0
 800c642:	d055      	beq.n	800c6f0 <__multiply+0x138>
 800c644:	6106      	str	r6, [r0, #16]
 800c646:	b005      	add	sp, #20
 800c648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c64c:	f843 2b04 	str.w	r2, [r3], #4
 800c650:	e7d9      	b.n	800c606 <__multiply+0x4e>
 800c652:	f8b1 a000 	ldrh.w	sl, [r1]
 800c656:	f1ba 0f00 	cmp.w	sl, #0
 800c65a:	d01f      	beq.n	800c69c <__multiply+0xe4>
 800c65c:	46c4      	mov	ip, r8
 800c65e:	46a1      	mov	r9, r4
 800c660:	2700      	movs	r7, #0
 800c662:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c666:	f8d9 3000 	ldr.w	r3, [r9]
 800c66a:	fa1f fb82 	uxth.w	fp, r2
 800c66e:	b29b      	uxth	r3, r3
 800c670:	fb0a 330b 	mla	r3, sl, fp, r3
 800c674:	443b      	add	r3, r7
 800c676:	f8d9 7000 	ldr.w	r7, [r9]
 800c67a:	0c12      	lsrs	r2, r2, #16
 800c67c:	0c3f      	lsrs	r7, r7, #16
 800c67e:	fb0a 7202 	mla	r2, sl, r2, r7
 800c682:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800c686:	b29b      	uxth	r3, r3
 800c688:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c68c:	4565      	cmp	r5, ip
 800c68e:	f849 3b04 	str.w	r3, [r9], #4
 800c692:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800c696:	d8e4      	bhi.n	800c662 <__multiply+0xaa>
 800c698:	9b01      	ldr	r3, [sp, #4]
 800c69a:	50e7      	str	r7, [r4, r3]
 800c69c:	9b03      	ldr	r3, [sp, #12]
 800c69e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c6a2:	3104      	adds	r1, #4
 800c6a4:	f1b9 0f00 	cmp.w	r9, #0
 800c6a8:	d020      	beq.n	800c6ec <__multiply+0x134>
 800c6aa:	6823      	ldr	r3, [r4, #0]
 800c6ac:	4647      	mov	r7, r8
 800c6ae:	46a4      	mov	ip, r4
 800c6b0:	f04f 0a00 	mov.w	sl, #0
 800c6b4:	f8b7 b000 	ldrh.w	fp, [r7]
 800c6b8:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800c6bc:	fb09 220b 	mla	r2, r9, fp, r2
 800c6c0:	4452      	add	r2, sl
 800c6c2:	b29b      	uxth	r3, r3
 800c6c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c6c8:	f84c 3b04 	str.w	r3, [ip], #4
 800c6cc:	f857 3b04 	ldr.w	r3, [r7], #4
 800c6d0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c6d4:	f8bc 3000 	ldrh.w	r3, [ip]
 800c6d8:	fb09 330a 	mla	r3, r9, sl, r3
 800c6dc:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800c6e0:	42bd      	cmp	r5, r7
 800c6e2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c6e6:	d8e5      	bhi.n	800c6b4 <__multiply+0xfc>
 800c6e8:	9a01      	ldr	r2, [sp, #4]
 800c6ea:	50a3      	str	r3, [r4, r2]
 800c6ec:	3404      	adds	r4, #4
 800c6ee:	e79f      	b.n	800c630 <__multiply+0x78>
 800c6f0:	3e01      	subs	r6, #1
 800c6f2:	e7a1      	b.n	800c638 <__multiply+0x80>
 800c6f4:	0800d6d8 	.word	0x0800d6d8
 800c6f8:	0800d6e9 	.word	0x0800d6e9

0800c6fc <__pow5mult>:
 800c6fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c700:	4615      	mov	r5, r2
 800c702:	f012 0203 	ands.w	r2, r2, #3
 800c706:	4607      	mov	r7, r0
 800c708:	460e      	mov	r6, r1
 800c70a:	d007      	beq.n	800c71c <__pow5mult+0x20>
 800c70c:	4c25      	ldr	r4, [pc, #148]	@ (800c7a4 <__pow5mult+0xa8>)
 800c70e:	3a01      	subs	r2, #1
 800c710:	2300      	movs	r3, #0
 800c712:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c716:	f7ff fea7 	bl	800c468 <__multadd>
 800c71a:	4606      	mov	r6, r0
 800c71c:	10ad      	asrs	r5, r5, #2
 800c71e:	d03d      	beq.n	800c79c <__pow5mult+0xa0>
 800c720:	69fc      	ldr	r4, [r7, #28]
 800c722:	b97c      	cbnz	r4, 800c744 <__pow5mult+0x48>
 800c724:	2010      	movs	r0, #16
 800c726:	f7ff fd87 	bl	800c238 <malloc>
 800c72a:	4602      	mov	r2, r0
 800c72c:	61f8      	str	r0, [r7, #28]
 800c72e:	b928      	cbnz	r0, 800c73c <__pow5mult+0x40>
 800c730:	4b1d      	ldr	r3, [pc, #116]	@ (800c7a8 <__pow5mult+0xac>)
 800c732:	481e      	ldr	r0, [pc, #120]	@ (800c7ac <__pow5mult+0xb0>)
 800c734:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c738:	f000 fc3e 	bl	800cfb8 <__assert_func>
 800c73c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c740:	6004      	str	r4, [r0, #0]
 800c742:	60c4      	str	r4, [r0, #12]
 800c744:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c748:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c74c:	b94c      	cbnz	r4, 800c762 <__pow5mult+0x66>
 800c74e:	f240 2171 	movw	r1, #625	@ 0x271
 800c752:	4638      	mov	r0, r7
 800c754:	f7ff ff1a 	bl	800c58c <__i2b>
 800c758:	2300      	movs	r3, #0
 800c75a:	f8c8 0008 	str.w	r0, [r8, #8]
 800c75e:	4604      	mov	r4, r0
 800c760:	6003      	str	r3, [r0, #0]
 800c762:	f04f 0900 	mov.w	r9, #0
 800c766:	07eb      	lsls	r3, r5, #31
 800c768:	d50a      	bpl.n	800c780 <__pow5mult+0x84>
 800c76a:	4631      	mov	r1, r6
 800c76c:	4622      	mov	r2, r4
 800c76e:	4638      	mov	r0, r7
 800c770:	f7ff ff22 	bl	800c5b8 <__multiply>
 800c774:	4631      	mov	r1, r6
 800c776:	4680      	mov	r8, r0
 800c778:	4638      	mov	r0, r7
 800c77a:	f7ff fe53 	bl	800c424 <_Bfree>
 800c77e:	4646      	mov	r6, r8
 800c780:	106d      	asrs	r5, r5, #1
 800c782:	d00b      	beq.n	800c79c <__pow5mult+0xa0>
 800c784:	6820      	ldr	r0, [r4, #0]
 800c786:	b938      	cbnz	r0, 800c798 <__pow5mult+0x9c>
 800c788:	4622      	mov	r2, r4
 800c78a:	4621      	mov	r1, r4
 800c78c:	4638      	mov	r0, r7
 800c78e:	f7ff ff13 	bl	800c5b8 <__multiply>
 800c792:	6020      	str	r0, [r4, #0]
 800c794:	f8c0 9000 	str.w	r9, [r0]
 800c798:	4604      	mov	r4, r0
 800c79a:	e7e4      	b.n	800c766 <__pow5mult+0x6a>
 800c79c:	4630      	mov	r0, r6
 800c79e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c7a2:	bf00      	nop
 800c7a4:	0800d79c 	.word	0x0800d79c
 800c7a8:	0800d669 	.word	0x0800d669
 800c7ac:	0800d6e9 	.word	0x0800d6e9

0800c7b0 <__lshift>:
 800c7b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7b4:	460c      	mov	r4, r1
 800c7b6:	6849      	ldr	r1, [r1, #4]
 800c7b8:	6923      	ldr	r3, [r4, #16]
 800c7ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c7be:	68a3      	ldr	r3, [r4, #8]
 800c7c0:	4607      	mov	r7, r0
 800c7c2:	4691      	mov	r9, r2
 800c7c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c7c8:	f108 0601 	add.w	r6, r8, #1
 800c7cc:	42b3      	cmp	r3, r6
 800c7ce:	db0b      	blt.n	800c7e8 <__lshift+0x38>
 800c7d0:	4638      	mov	r0, r7
 800c7d2:	f7ff fde7 	bl	800c3a4 <_Balloc>
 800c7d6:	4605      	mov	r5, r0
 800c7d8:	b948      	cbnz	r0, 800c7ee <__lshift+0x3e>
 800c7da:	4602      	mov	r2, r0
 800c7dc:	4b28      	ldr	r3, [pc, #160]	@ (800c880 <__lshift+0xd0>)
 800c7de:	4829      	ldr	r0, [pc, #164]	@ (800c884 <__lshift+0xd4>)
 800c7e0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c7e4:	f000 fbe8 	bl	800cfb8 <__assert_func>
 800c7e8:	3101      	adds	r1, #1
 800c7ea:	005b      	lsls	r3, r3, #1
 800c7ec:	e7ee      	b.n	800c7cc <__lshift+0x1c>
 800c7ee:	2300      	movs	r3, #0
 800c7f0:	f100 0114 	add.w	r1, r0, #20
 800c7f4:	f100 0210 	add.w	r2, r0, #16
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	4553      	cmp	r3, sl
 800c7fc:	db33      	blt.n	800c866 <__lshift+0xb6>
 800c7fe:	6920      	ldr	r0, [r4, #16]
 800c800:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c804:	f104 0314 	add.w	r3, r4, #20
 800c808:	f019 091f 	ands.w	r9, r9, #31
 800c80c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c810:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c814:	d02b      	beq.n	800c86e <__lshift+0xbe>
 800c816:	f1c9 0e20 	rsb	lr, r9, #32
 800c81a:	468a      	mov	sl, r1
 800c81c:	2200      	movs	r2, #0
 800c81e:	6818      	ldr	r0, [r3, #0]
 800c820:	fa00 f009 	lsl.w	r0, r0, r9
 800c824:	4310      	orrs	r0, r2
 800c826:	f84a 0b04 	str.w	r0, [sl], #4
 800c82a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c82e:	459c      	cmp	ip, r3
 800c830:	fa22 f20e 	lsr.w	r2, r2, lr
 800c834:	d8f3      	bhi.n	800c81e <__lshift+0x6e>
 800c836:	ebac 0304 	sub.w	r3, ip, r4
 800c83a:	3b15      	subs	r3, #21
 800c83c:	f023 0303 	bic.w	r3, r3, #3
 800c840:	3304      	adds	r3, #4
 800c842:	f104 0015 	add.w	r0, r4, #21
 800c846:	4560      	cmp	r0, ip
 800c848:	bf88      	it	hi
 800c84a:	2304      	movhi	r3, #4
 800c84c:	50ca      	str	r2, [r1, r3]
 800c84e:	b10a      	cbz	r2, 800c854 <__lshift+0xa4>
 800c850:	f108 0602 	add.w	r6, r8, #2
 800c854:	3e01      	subs	r6, #1
 800c856:	4638      	mov	r0, r7
 800c858:	612e      	str	r6, [r5, #16]
 800c85a:	4621      	mov	r1, r4
 800c85c:	f7ff fde2 	bl	800c424 <_Bfree>
 800c860:	4628      	mov	r0, r5
 800c862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c866:	f842 0f04 	str.w	r0, [r2, #4]!
 800c86a:	3301      	adds	r3, #1
 800c86c:	e7c5      	b.n	800c7fa <__lshift+0x4a>
 800c86e:	3904      	subs	r1, #4
 800c870:	f853 2b04 	ldr.w	r2, [r3], #4
 800c874:	f841 2f04 	str.w	r2, [r1, #4]!
 800c878:	459c      	cmp	ip, r3
 800c87a:	d8f9      	bhi.n	800c870 <__lshift+0xc0>
 800c87c:	e7ea      	b.n	800c854 <__lshift+0xa4>
 800c87e:	bf00      	nop
 800c880:	0800d6d8 	.word	0x0800d6d8
 800c884:	0800d6e9 	.word	0x0800d6e9

0800c888 <__mcmp>:
 800c888:	690a      	ldr	r2, [r1, #16]
 800c88a:	4603      	mov	r3, r0
 800c88c:	6900      	ldr	r0, [r0, #16]
 800c88e:	1a80      	subs	r0, r0, r2
 800c890:	b530      	push	{r4, r5, lr}
 800c892:	d10e      	bne.n	800c8b2 <__mcmp+0x2a>
 800c894:	3314      	adds	r3, #20
 800c896:	3114      	adds	r1, #20
 800c898:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c89c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c8a0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c8a4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c8a8:	4295      	cmp	r5, r2
 800c8aa:	d003      	beq.n	800c8b4 <__mcmp+0x2c>
 800c8ac:	d205      	bcs.n	800c8ba <__mcmp+0x32>
 800c8ae:	f04f 30ff 	mov.w	r0, #4294967295
 800c8b2:	bd30      	pop	{r4, r5, pc}
 800c8b4:	42a3      	cmp	r3, r4
 800c8b6:	d3f3      	bcc.n	800c8a0 <__mcmp+0x18>
 800c8b8:	e7fb      	b.n	800c8b2 <__mcmp+0x2a>
 800c8ba:	2001      	movs	r0, #1
 800c8bc:	e7f9      	b.n	800c8b2 <__mcmp+0x2a>
	...

0800c8c0 <__mdiff>:
 800c8c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8c4:	4689      	mov	r9, r1
 800c8c6:	4606      	mov	r6, r0
 800c8c8:	4611      	mov	r1, r2
 800c8ca:	4648      	mov	r0, r9
 800c8cc:	4614      	mov	r4, r2
 800c8ce:	f7ff ffdb 	bl	800c888 <__mcmp>
 800c8d2:	1e05      	subs	r5, r0, #0
 800c8d4:	d112      	bne.n	800c8fc <__mdiff+0x3c>
 800c8d6:	4629      	mov	r1, r5
 800c8d8:	4630      	mov	r0, r6
 800c8da:	f7ff fd63 	bl	800c3a4 <_Balloc>
 800c8de:	4602      	mov	r2, r0
 800c8e0:	b928      	cbnz	r0, 800c8ee <__mdiff+0x2e>
 800c8e2:	4b3f      	ldr	r3, [pc, #252]	@ (800c9e0 <__mdiff+0x120>)
 800c8e4:	f240 2137 	movw	r1, #567	@ 0x237
 800c8e8:	483e      	ldr	r0, [pc, #248]	@ (800c9e4 <__mdiff+0x124>)
 800c8ea:	f000 fb65 	bl	800cfb8 <__assert_func>
 800c8ee:	2301      	movs	r3, #1
 800c8f0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c8f4:	4610      	mov	r0, r2
 800c8f6:	b003      	add	sp, #12
 800c8f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8fc:	bfbc      	itt	lt
 800c8fe:	464b      	movlt	r3, r9
 800c900:	46a1      	movlt	r9, r4
 800c902:	4630      	mov	r0, r6
 800c904:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c908:	bfba      	itte	lt
 800c90a:	461c      	movlt	r4, r3
 800c90c:	2501      	movlt	r5, #1
 800c90e:	2500      	movge	r5, #0
 800c910:	f7ff fd48 	bl	800c3a4 <_Balloc>
 800c914:	4602      	mov	r2, r0
 800c916:	b918      	cbnz	r0, 800c920 <__mdiff+0x60>
 800c918:	4b31      	ldr	r3, [pc, #196]	@ (800c9e0 <__mdiff+0x120>)
 800c91a:	f240 2145 	movw	r1, #581	@ 0x245
 800c91e:	e7e3      	b.n	800c8e8 <__mdiff+0x28>
 800c920:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c924:	6926      	ldr	r6, [r4, #16]
 800c926:	60c5      	str	r5, [r0, #12]
 800c928:	f109 0310 	add.w	r3, r9, #16
 800c92c:	f109 0514 	add.w	r5, r9, #20
 800c930:	f104 0e14 	add.w	lr, r4, #20
 800c934:	f100 0b14 	add.w	fp, r0, #20
 800c938:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c93c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c940:	9301      	str	r3, [sp, #4]
 800c942:	46d9      	mov	r9, fp
 800c944:	f04f 0c00 	mov.w	ip, #0
 800c948:	9b01      	ldr	r3, [sp, #4]
 800c94a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c94e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c952:	9301      	str	r3, [sp, #4]
 800c954:	fa1f f38a 	uxth.w	r3, sl
 800c958:	4619      	mov	r1, r3
 800c95a:	b283      	uxth	r3, r0
 800c95c:	1acb      	subs	r3, r1, r3
 800c95e:	0c00      	lsrs	r0, r0, #16
 800c960:	4463      	add	r3, ip
 800c962:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c966:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c96a:	b29b      	uxth	r3, r3
 800c96c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c970:	4576      	cmp	r6, lr
 800c972:	f849 3b04 	str.w	r3, [r9], #4
 800c976:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c97a:	d8e5      	bhi.n	800c948 <__mdiff+0x88>
 800c97c:	1b33      	subs	r3, r6, r4
 800c97e:	3b15      	subs	r3, #21
 800c980:	f023 0303 	bic.w	r3, r3, #3
 800c984:	3415      	adds	r4, #21
 800c986:	3304      	adds	r3, #4
 800c988:	42a6      	cmp	r6, r4
 800c98a:	bf38      	it	cc
 800c98c:	2304      	movcc	r3, #4
 800c98e:	441d      	add	r5, r3
 800c990:	445b      	add	r3, fp
 800c992:	461e      	mov	r6, r3
 800c994:	462c      	mov	r4, r5
 800c996:	4544      	cmp	r4, r8
 800c998:	d30e      	bcc.n	800c9b8 <__mdiff+0xf8>
 800c99a:	f108 0103 	add.w	r1, r8, #3
 800c99e:	1b49      	subs	r1, r1, r5
 800c9a0:	f021 0103 	bic.w	r1, r1, #3
 800c9a4:	3d03      	subs	r5, #3
 800c9a6:	45a8      	cmp	r8, r5
 800c9a8:	bf38      	it	cc
 800c9aa:	2100      	movcc	r1, #0
 800c9ac:	440b      	add	r3, r1
 800c9ae:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c9b2:	b191      	cbz	r1, 800c9da <__mdiff+0x11a>
 800c9b4:	6117      	str	r7, [r2, #16]
 800c9b6:	e79d      	b.n	800c8f4 <__mdiff+0x34>
 800c9b8:	f854 1b04 	ldr.w	r1, [r4], #4
 800c9bc:	46e6      	mov	lr, ip
 800c9be:	0c08      	lsrs	r0, r1, #16
 800c9c0:	fa1c fc81 	uxtah	ip, ip, r1
 800c9c4:	4471      	add	r1, lr
 800c9c6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c9ca:	b289      	uxth	r1, r1
 800c9cc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c9d0:	f846 1b04 	str.w	r1, [r6], #4
 800c9d4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c9d8:	e7dd      	b.n	800c996 <__mdiff+0xd6>
 800c9da:	3f01      	subs	r7, #1
 800c9dc:	e7e7      	b.n	800c9ae <__mdiff+0xee>
 800c9de:	bf00      	nop
 800c9e0:	0800d6d8 	.word	0x0800d6d8
 800c9e4:	0800d6e9 	.word	0x0800d6e9

0800c9e8 <__d2b>:
 800c9e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c9ec:	460f      	mov	r7, r1
 800c9ee:	2101      	movs	r1, #1
 800c9f0:	ec59 8b10 	vmov	r8, r9, d0
 800c9f4:	4616      	mov	r6, r2
 800c9f6:	f7ff fcd5 	bl	800c3a4 <_Balloc>
 800c9fa:	4604      	mov	r4, r0
 800c9fc:	b930      	cbnz	r0, 800ca0c <__d2b+0x24>
 800c9fe:	4602      	mov	r2, r0
 800ca00:	4b23      	ldr	r3, [pc, #140]	@ (800ca90 <__d2b+0xa8>)
 800ca02:	4824      	ldr	r0, [pc, #144]	@ (800ca94 <__d2b+0xac>)
 800ca04:	f240 310f 	movw	r1, #783	@ 0x30f
 800ca08:	f000 fad6 	bl	800cfb8 <__assert_func>
 800ca0c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ca10:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ca14:	b10d      	cbz	r5, 800ca1a <__d2b+0x32>
 800ca16:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ca1a:	9301      	str	r3, [sp, #4]
 800ca1c:	f1b8 0300 	subs.w	r3, r8, #0
 800ca20:	d023      	beq.n	800ca6a <__d2b+0x82>
 800ca22:	4668      	mov	r0, sp
 800ca24:	9300      	str	r3, [sp, #0]
 800ca26:	f7ff fd84 	bl	800c532 <__lo0bits>
 800ca2a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ca2e:	b1d0      	cbz	r0, 800ca66 <__d2b+0x7e>
 800ca30:	f1c0 0320 	rsb	r3, r0, #32
 800ca34:	fa02 f303 	lsl.w	r3, r2, r3
 800ca38:	430b      	orrs	r3, r1
 800ca3a:	40c2      	lsrs	r2, r0
 800ca3c:	6163      	str	r3, [r4, #20]
 800ca3e:	9201      	str	r2, [sp, #4]
 800ca40:	9b01      	ldr	r3, [sp, #4]
 800ca42:	61a3      	str	r3, [r4, #24]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	bf0c      	ite	eq
 800ca48:	2201      	moveq	r2, #1
 800ca4a:	2202      	movne	r2, #2
 800ca4c:	6122      	str	r2, [r4, #16]
 800ca4e:	b1a5      	cbz	r5, 800ca7a <__d2b+0x92>
 800ca50:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ca54:	4405      	add	r5, r0
 800ca56:	603d      	str	r5, [r7, #0]
 800ca58:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ca5c:	6030      	str	r0, [r6, #0]
 800ca5e:	4620      	mov	r0, r4
 800ca60:	b003      	add	sp, #12
 800ca62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ca66:	6161      	str	r1, [r4, #20]
 800ca68:	e7ea      	b.n	800ca40 <__d2b+0x58>
 800ca6a:	a801      	add	r0, sp, #4
 800ca6c:	f7ff fd61 	bl	800c532 <__lo0bits>
 800ca70:	9b01      	ldr	r3, [sp, #4]
 800ca72:	6163      	str	r3, [r4, #20]
 800ca74:	3020      	adds	r0, #32
 800ca76:	2201      	movs	r2, #1
 800ca78:	e7e8      	b.n	800ca4c <__d2b+0x64>
 800ca7a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ca7e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ca82:	6038      	str	r0, [r7, #0]
 800ca84:	6918      	ldr	r0, [r3, #16]
 800ca86:	f7ff fd35 	bl	800c4f4 <__hi0bits>
 800ca8a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ca8e:	e7e5      	b.n	800ca5c <__d2b+0x74>
 800ca90:	0800d6d8 	.word	0x0800d6d8
 800ca94:	0800d6e9 	.word	0x0800d6e9

0800ca98 <__sfputc_r>:
 800ca98:	6893      	ldr	r3, [r2, #8]
 800ca9a:	3b01      	subs	r3, #1
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	b410      	push	{r4}
 800caa0:	6093      	str	r3, [r2, #8]
 800caa2:	da08      	bge.n	800cab6 <__sfputc_r+0x1e>
 800caa4:	6994      	ldr	r4, [r2, #24]
 800caa6:	42a3      	cmp	r3, r4
 800caa8:	db01      	blt.n	800caae <__sfputc_r+0x16>
 800caaa:	290a      	cmp	r1, #10
 800caac:	d103      	bne.n	800cab6 <__sfputc_r+0x1e>
 800caae:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cab2:	f7fe bc7c 	b.w	800b3ae <__swbuf_r>
 800cab6:	6813      	ldr	r3, [r2, #0]
 800cab8:	1c58      	adds	r0, r3, #1
 800caba:	6010      	str	r0, [r2, #0]
 800cabc:	7019      	strb	r1, [r3, #0]
 800cabe:	4608      	mov	r0, r1
 800cac0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cac4:	4770      	bx	lr

0800cac6 <__sfputs_r>:
 800cac6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cac8:	4606      	mov	r6, r0
 800caca:	460f      	mov	r7, r1
 800cacc:	4614      	mov	r4, r2
 800cace:	18d5      	adds	r5, r2, r3
 800cad0:	42ac      	cmp	r4, r5
 800cad2:	d101      	bne.n	800cad8 <__sfputs_r+0x12>
 800cad4:	2000      	movs	r0, #0
 800cad6:	e007      	b.n	800cae8 <__sfputs_r+0x22>
 800cad8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cadc:	463a      	mov	r2, r7
 800cade:	4630      	mov	r0, r6
 800cae0:	f7ff ffda 	bl	800ca98 <__sfputc_r>
 800cae4:	1c43      	adds	r3, r0, #1
 800cae6:	d1f3      	bne.n	800cad0 <__sfputs_r+0xa>
 800cae8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800caec <_vfiprintf_r>:
 800caec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800caf0:	460d      	mov	r5, r1
 800caf2:	b09d      	sub	sp, #116	@ 0x74
 800caf4:	4614      	mov	r4, r2
 800caf6:	4698      	mov	r8, r3
 800caf8:	4606      	mov	r6, r0
 800cafa:	b118      	cbz	r0, 800cb04 <_vfiprintf_r+0x18>
 800cafc:	6a03      	ldr	r3, [r0, #32]
 800cafe:	b90b      	cbnz	r3, 800cb04 <_vfiprintf_r+0x18>
 800cb00:	f7fe fb6c 	bl	800b1dc <__sinit>
 800cb04:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cb06:	07d9      	lsls	r1, r3, #31
 800cb08:	d405      	bmi.n	800cb16 <_vfiprintf_r+0x2a>
 800cb0a:	89ab      	ldrh	r3, [r5, #12]
 800cb0c:	059a      	lsls	r2, r3, #22
 800cb0e:	d402      	bmi.n	800cb16 <_vfiprintf_r+0x2a>
 800cb10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cb12:	f7fe fd5e 	bl	800b5d2 <__retarget_lock_acquire_recursive>
 800cb16:	89ab      	ldrh	r3, [r5, #12]
 800cb18:	071b      	lsls	r3, r3, #28
 800cb1a:	d501      	bpl.n	800cb20 <_vfiprintf_r+0x34>
 800cb1c:	692b      	ldr	r3, [r5, #16]
 800cb1e:	b99b      	cbnz	r3, 800cb48 <_vfiprintf_r+0x5c>
 800cb20:	4629      	mov	r1, r5
 800cb22:	4630      	mov	r0, r6
 800cb24:	f7fe fc82 	bl	800b42c <__swsetup_r>
 800cb28:	b170      	cbz	r0, 800cb48 <_vfiprintf_r+0x5c>
 800cb2a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cb2c:	07dc      	lsls	r4, r3, #31
 800cb2e:	d504      	bpl.n	800cb3a <_vfiprintf_r+0x4e>
 800cb30:	f04f 30ff 	mov.w	r0, #4294967295
 800cb34:	b01d      	add	sp, #116	@ 0x74
 800cb36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb3a:	89ab      	ldrh	r3, [r5, #12]
 800cb3c:	0598      	lsls	r0, r3, #22
 800cb3e:	d4f7      	bmi.n	800cb30 <_vfiprintf_r+0x44>
 800cb40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cb42:	f7fe fd47 	bl	800b5d4 <__retarget_lock_release_recursive>
 800cb46:	e7f3      	b.n	800cb30 <_vfiprintf_r+0x44>
 800cb48:	2300      	movs	r3, #0
 800cb4a:	9309      	str	r3, [sp, #36]	@ 0x24
 800cb4c:	2320      	movs	r3, #32
 800cb4e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cb52:	f8cd 800c 	str.w	r8, [sp, #12]
 800cb56:	2330      	movs	r3, #48	@ 0x30
 800cb58:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800cd08 <_vfiprintf_r+0x21c>
 800cb5c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cb60:	f04f 0901 	mov.w	r9, #1
 800cb64:	4623      	mov	r3, r4
 800cb66:	469a      	mov	sl, r3
 800cb68:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cb6c:	b10a      	cbz	r2, 800cb72 <_vfiprintf_r+0x86>
 800cb6e:	2a25      	cmp	r2, #37	@ 0x25
 800cb70:	d1f9      	bne.n	800cb66 <_vfiprintf_r+0x7a>
 800cb72:	ebba 0b04 	subs.w	fp, sl, r4
 800cb76:	d00b      	beq.n	800cb90 <_vfiprintf_r+0xa4>
 800cb78:	465b      	mov	r3, fp
 800cb7a:	4622      	mov	r2, r4
 800cb7c:	4629      	mov	r1, r5
 800cb7e:	4630      	mov	r0, r6
 800cb80:	f7ff ffa1 	bl	800cac6 <__sfputs_r>
 800cb84:	3001      	adds	r0, #1
 800cb86:	f000 80a7 	beq.w	800ccd8 <_vfiprintf_r+0x1ec>
 800cb8a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cb8c:	445a      	add	r2, fp
 800cb8e:	9209      	str	r2, [sp, #36]	@ 0x24
 800cb90:	f89a 3000 	ldrb.w	r3, [sl]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	f000 809f 	beq.w	800ccd8 <_vfiprintf_r+0x1ec>
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	f04f 32ff 	mov.w	r2, #4294967295
 800cba0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cba4:	f10a 0a01 	add.w	sl, sl, #1
 800cba8:	9304      	str	r3, [sp, #16]
 800cbaa:	9307      	str	r3, [sp, #28]
 800cbac:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cbb0:	931a      	str	r3, [sp, #104]	@ 0x68
 800cbb2:	4654      	mov	r4, sl
 800cbb4:	2205      	movs	r2, #5
 800cbb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cbba:	4853      	ldr	r0, [pc, #332]	@ (800cd08 <_vfiprintf_r+0x21c>)
 800cbbc:	f7f3 fb90 	bl	80002e0 <memchr>
 800cbc0:	9a04      	ldr	r2, [sp, #16]
 800cbc2:	b9d8      	cbnz	r0, 800cbfc <_vfiprintf_r+0x110>
 800cbc4:	06d1      	lsls	r1, r2, #27
 800cbc6:	bf44      	itt	mi
 800cbc8:	2320      	movmi	r3, #32
 800cbca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cbce:	0713      	lsls	r3, r2, #28
 800cbd0:	bf44      	itt	mi
 800cbd2:	232b      	movmi	r3, #43	@ 0x2b
 800cbd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cbd8:	f89a 3000 	ldrb.w	r3, [sl]
 800cbdc:	2b2a      	cmp	r3, #42	@ 0x2a
 800cbde:	d015      	beq.n	800cc0c <_vfiprintf_r+0x120>
 800cbe0:	9a07      	ldr	r2, [sp, #28]
 800cbe2:	4654      	mov	r4, sl
 800cbe4:	2000      	movs	r0, #0
 800cbe6:	f04f 0c0a 	mov.w	ip, #10
 800cbea:	4621      	mov	r1, r4
 800cbec:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cbf0:	3b30      	subs	r3, #48	@ 0x30
 800cbf2:	2b09      	cmp	r3, #9
 800cbf4:	d94b      	bls.n	800cc8e <_vfiprintf_r+0x1a2>
 800cbf6:	b1b0      	cbz	r0, 800cc26 <_vfiprintf_r+0x13a>
 800cbf8:	9207      	str	r2, [sp, #28]
 800cbfa:	e014      	b.n	800cc26 <_vfiprintf_r+0x13a>
 800cbfc:	eba0 0308 	sub.w	r3, r0, r8
 800cc00:	fa09 f303 	lsl.w	r3, r9, r3
 800cc04:	4313      	orrs	r3, r2
 800cc06:	9304      	str	r3, [sp, #16]
 800cc08:	46a2      	mov	sl, r4
 800cc0a:	e7d2      	b.n	800cbb2 <_vfiprintf_r+0xc6>
 800cc0c:	9b03      	ldr	r3, [sp, #12]
 800cc0e:	1d19      	adds	r1, r3, #4
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	9103      	str	r1, [sp, #12]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	bfbb      	ittet	lt
 800cc18:	425b      	neglt	r3, r3
 800cc1a:	f042 0202 	orrlt.w	r2, r2, #2
 800cc1e:	9307      	strge	r3, [sp, #28]
 800cc20:	9307      	strlt	r3, [sp, #28]
 800cc22:	bfb8      	it	lt
 800cc24:	9204      	strlt	r2, [sp, #16]
 800cc26:	7823      	ldrb	r3, [r4, #0]
 800cc28:	2b2e      	cmp	r3, #46	@ 0x2e
 800cc2a:	d10a      	bne.n	800cc42 <_vfiprintf_r+0x156>
 800cc2c:	7863      	ldrb	r3, [r4, #1]
 800cc2e:	2b2a      	cmp	r3, #42	@ 0x2a
 800cc30:	d132      	bne.n	800cc98 <_vfiprintf_r+0x1ac>
 800cc32:	9b03      	ldr	r3, [sp, #12]
 800cc34:	1d1a      	adds	r2, r3, #4
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	9203      	str	r2, [sp, #12]
 800cc3a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cc3e:	3402      	adds	r4, #2
 800cc40:	9305      	str	r3, [sp, #20]
 800cc42:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800cd18 <_vfiprintf_r+0x22c>
 800cc46:	7821      	ldrb	r1, [r4, #0]
 800cc48:	2203      	movs	r2, #3
 800cc4a:	4650      	mov	r0, sl
 800cc4c:	f7f3 fb48 	bl	80002e0 <memchr>
 800cc50:	b138      	cbz	r0, 800cc62 <_vfiprintf_r+0x176>
 800cc52:	9b04      	ldr	r3, [sp, #16]
 800cc54:	eba0 000a 	sub.w	r0, r0, sl
 800cc58:	2240      	movs	r2, #64	@ 0x40
 800cc5a:	4082      	lsls	r2, r0
 800cc5c:	4313      	orrs	r3, r2
 800cc5e:	3401      	adds	r4, #1
 800cc60:	9304      	str	r3, [sp, #16]
 800cc62:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc66:	4829      	ldr	r0, [pc, #164]	@ (800cd0c <_vfiprintf_r+0x220>)
 800cc68:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cc6c:	2206      	movs	r2, #6
 800cc6e:	f7f3 fb37 	bl	80002e0 <memchr>
 800cc72:	2800      	cmp	r0, #0
 800cc74:	d03f      	beq.n	800ccf6 <_vfiprintf_r+0x20a>
 800cc76:	4b26      	ldr	r3, [pc, #152]	@ (800cd10 <_vfiprintf_r+0x224>)
 800cc78:	bb1b      	cbnz	r3, 800ccc2 <_vfiprintf_r+0x1d6>
 800cc7a:	9b03      	ldr	r3, [sp, #12]
 800cc7c:	3307      	adds	r3, #7
 800cc7e:	f023 0307 	bic.w	r3, r3, #7
 800cc82:	3308      	adds	r3, #8
 800cc84:	9303      	str	r3, [sp, #12]
 800cc86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc88:	443b      	add	r3, r7
 800cc8a:	9309      	str	r3, [sp, #36]	@ 0x24
 800cc8c:	e76a      	b.n	800cb64 <_vfiprintf_r+0x78>
 800cc8e:	fb0c 3202 	mla	r2, ip, r2, r3
 800cc92:	460c      	mov	r4, r1
 800cc94:	2001      	movs	r0, #1
 800cc96:	e7a8      	b.n	800cbea <_vfiprintf_r+0xfe>
 800cc98:	2300      	movs	r3, #0
 800cc9a:	3401      	adds	r4, #1
 800cc9c:	9305      	str	r3, [sp, #20]
 800cc9e:	4619      	mov	r1, r3
 800cca0:	f04f 0c0a 	mov.w	ip, #10
 800cca4:	4620      	mov	r0, r4
 800cca6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ccaa:	3a30      	subs	r2, #48	@ 0x30
 800ccac:	2a09      	cmp	r2, #9
 800ccae:	d903      	bls.n	800ccb8 <_vfiprintf_r+0x1cc>
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d0c6      	beq.n	800cc42 <_vfiprintf_r+0x156>
 800ccb4:	9105      	str	r1, [sp, #20]
 800ccb6:	e7c4      	b.n	800cc42 <_vfiprintf_r+0x156>
 800ccb8:	fb0c 2101 	mla	r1, ip, r1, r2
 800ccbc:	4604      	mov	r4, r0
 800ccbe:	2301      	movs	r3, #1
 800ccc0:	e7f0      	b.n	800cca4 <_vfiprintf_r+0x1b8>
 800ccc2:	ab03      	add	r3, sp, #12
 800ccc4:	9300      	str	r3, [sp, #0]
 800ccc6:	462a      	mov	r2, r5
 800ccc8:	4b12      	ldr	r3, [pc, #72]	@ (800cd14 <_vfiprintf_r+0x228>)
 800ccca:	a904      	add	r1, sp, #16
 800cccc:	4630      	mov	r0, r6
 800ccce:	f7fd fe53 	bl	800a978 <_printf_float>
 800ccd2:	4607      	mov	r7, r0
 800ccd4:	1c78      	adds	r0, r7, #1
 800ccd6:	d1d6      	bne.n	800cc86 <_vfiprintf_r+0x19a>
 800ccd8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ccda:	07d9      	lsls	r1, r3, #31
 800ccdc:	d405      	bmi.n	800ccea <_vfiprintf_r+0x1fe>
 800ccde:	89ab      	ldrh	r3, [r5, #12]
 800cce0:	059a      	lsls	r2, r3, #22
 800cce2:	d402      	bmi.n	800ccea <_vfiprintf_r+0x1fe>
 800cce4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cce6:	f7fe fc75 	bl	800b5d4 <__retarget_lock_release_recursive>
 800ccea:	89ab      	ldrh	r3, [r5, #12]
 800ccec:	065b      	lsls	r3, r3, #25
 800ccee:	f53f af1f 	bmi.w	800cb30 <_vfiprintf_r+0x44>
 800ccf2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ccf4:	e71e      	b.n	800cb34 <_vfiprintf_r+0x48>
 800ccf6:	ab03      	add	r3, sp, #12
 800ccf8:	9300      	str	r3, [sp, #0]
 800ccfa:	462a      	mov	r2, r5
 800ccfc:	4b05      	ldr	r3, [pc, #20]	@ (800cd14 <_vfiprintf_r+0x228>)
 800ccfe:	a904      	add	r1, sp, #16
 800cd00:	4630      	mov	r0, r6
 800cd02:	f7fe f8c1 	bl	800ae88 <_printf_i>
 800cd06:	e7e4      	b.n	800ccd2 <_vfiprintf_r+0x1e6>
 800cd08:	0800d742 	.word	0x0800d742
 800cd0c:	0800d74c 	.word	0x0800d74c
 800cd10:	0800a979 	.word	0x0800a979
 800cd14:	0800cac7 	.word	0x0800cac7
 800cd18:	0800d748 	.word	0x0800d748

0800cd1c <__sflush_r>:
 800cd1c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cd20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd24:	0716      	lsls	r6, r2, #28
 800cd26:	4605      	mov	r5, r0
 800cd28:	460c      	mov	r4, r1
 800cd2a:	d454      	bmi.n	800cdd6 <__sflush_r+0xba>
 800cd2c:	684b      	ldr	r3, [r1, #4]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	dc02      	bgt.n	800cd38 <__sflush_r+0x1c>
 800cd32:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	dd48      	ble.n	800cdca <__sflush_r+0xae>
 800cd38:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cd3a:	2e00      	cmp	r6, #0
 800cd3c:	d045      	beq.n	800cdca <__sflush_r+0xae>
 800cd3e:	2300      	movs	r3, #0
 800cd40:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800cd44:	682f      	ldr	r7, [r5, #0]
 800cd46:	6a21      	ldr	r1, [r4, #32]
 800cd48:	602b      	str	r3, [r5, #0]
 800cd4a:	d030      	beq.n	800cdae <__sflush_r+0x92>
 800cd4c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cd4e:	89a3      	ldrh	r3, [r4, #12]
 800cd50:	0759      	lsls	r1, r3, #29
 800cd52:	d505      	bpl.n	800cd60 <__sflush_r+0x44>
 800cd54:	6863      	ldr	r3, [r4, #4]
 800cd56:	1ad2      	subs	r2, r2, r3
 800cd58:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cd5a:	b10b      	cbz	r3, 800cd60 <__sflush_r+0x44>
 800cd5c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800cd5e:	1ad2      	subs	r2, r2, r3
 800cd60:	2300      	movs	r3, #0
 800cd62:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cd64:	6a21      	ldr	r1, [r4, #32]
 800cd66:	4628      	mov	r0, r5
 800cd68:	47b0      	blx	r6
 800cd6a:	1c43      	adds	r3, r0, #1
 800cd6c:	89a3      	ldrh	r3, [r4, #12]
 800cd6e:	d106      	bne.n	800cd7e <__sflush_r+0x62>
 800cd70:	6829      	ldr	r1, [r5, #0]
 800cd72:	291d      	cmp	r1, #29
 800cd74:	d82b      	bhi.n	800cdce <__sflush_r+0xb2>
 800cd76:	4a2a      	ldr	r2, [pc, #168]	@ (800ce20 <__sflush_r+0x104>)
 800cd78:	40ca      	lsrs	r2, r1
 800cd7a:	07d6      	lsls	r6, r2, #31
 800cd7c:	d527      	bpl.n	800cdce <__sflush_r+0xb2>
 800cd7e:	2200      	movs	r2, #0
 800cd80:	6062      	str	r2, [r4, #4]
 800cd82:	04d9      	lsls	r1, r3, #19
 800cd84:	6922      	ldr	r2, [r4, #16]
 800cd86:	6022      	str	r2, [r4, #0]
 800cd88:	d504      	bpl.n	800cd94 <__sflush_r+0x78>
 800cd8a:	1c42      	adds	r2, r0, #1
 800cd8c:	d101      	bne.n	800cd92 <__sflush_r+0x76>
 800cd8e:	682b      	ldr	r3, [r5, #0]
 800cd90:	b903      	cbnz	r3, 800cd94 <__sflush_r+0x78>
 800cd92:	6560      	str	r0, [r4, #84]	@ 0x54
 800cd94:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cd96:	602f      	str	r7, [r5, #0]
 800cd98:	b1b9      	cbz	r1, 800cdca <__sflush_r+0xae>
 800cd9a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cd9e:	4299      	cmp	r1, r3
 800cda0:	d002      	beq.n	800cda8 <__sflush_r+0x8c>
 800cda2:	4628      	mov	r0, r5
 800cda4:	f7ff f9fe 	bl	800c1a4 <_free_r>
 800cda8:	2300      	movs	r3, #0
 800cdaa:	6363      	str	r3, [r4, #52]	@ 0x34
 800cdac:	e00d      	b.n	800cdca <__sflush_r+0xae>
 800cdae:	2301      	movs	r3, #1
 800cdb0:	4628      	mov	r0, r5
 800cdb2:	47b0      	blx	r6
 800cdb4:	4602      	mov	r2, r0
 800cdb6:	1c50      	adds	r0, r2, #1
 800cdb8:	d1c9      	bne.n	800cd4e <__sflush_r+0x32>
 800cdba:	682b      	ldr	r3, [r5, #0]
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d0c6      	beq.n	800cd4e <__sflush_r+0x32>
 800cdc0:	2b1d      	cmp	r3, #29
 800cdc2:	d001      	beq.n	800cdc8 <__sflush_r+0xac>
 800cdc4:	2b16      	cmp	r3, #22
 800cdc6:	d11e      	bne.n	800ce06 <__sflush_r+0xea>
 800cdc8:	602f      	str	r7, [r5, #0]
 800cdca:	2000      	movs	r0, #0
 800cdcc:	e022      	b.n	800ce14 <__sflush_r+0xf8>
 800cdce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cdd2:	b21b      	sxth	r3, r3
 800cdd4:	e01b      	b.n	800ce0e <__sflush_r+0xf2>
 800cdd6:	690f      	ldr	r7, [r1, #16]
 800cdd8:	2f00      	cmp	r7, #0
 800cdda:	d0f6      	beq.n	800cdca <__sflush_r+0xae>
 800cddc:	0793      	lsls	r3, r2, #30
 800cdde:	680e      	ldr	r6, [r1, #0]
 800cde0:	bf08      	it	eq
 800cde2:	694b      	ldreq	r3, [r1, #20]
 800cde4:	600f      	str	r7, [r1, #0]
 800cde6:	bf18      	it	ne
 800cde8:	2300      	movne	r3, #0
 800cdea:	eba6 0807 	sub.w	r8, r6, r7
 800cdee:	608b      	str	r3, [r1, #8]
 800cdf0:	f1b8 0f00 	cmp.w	r8, #0
 800cdf4:	dde9      	ble.n	800cdca <__sflush_r+0xae>
 800cdf6:	6a21      	ldr	r1, [r4, #32]
 800cdf8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800cdfa:	4643      	mov	r3, r8
 800cdfc:	463a      	mov	r2, r7
 800cdfe:	4628      	mov	r0, r5
 800ce00:	47b0      	blx	r6
 800ce02:	2800      	cmp	r0, #0
 800ce04:	dc08      	bgt.n	800ce18 <__sflush_r+0xfc>
 800ce06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ce0e:	81a3      	strh	r3, [r4, #12]
 800ce10:	f04f 30ff 	mov.w	r0, #4294967295
 800ce14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce18:	4407      	add	r7, r0
 800ce1a:	eba8 0800 	sub.w	r8, r8, r0
 800ce1e:	e7e7      	b.n	800cdf0 <__sflush_r+0xd4>
 800ce20:	20400001 	.word	0x20400001

0800ce24 <_fflush_r>:
 800ce24:	b538      	push	{r3, r4, r5, lr}
 800ce26:	690b      	ldr	r3, [r1, #16]
 800ce28:	4605      	mov	r5, r0
 800ce2a:	460c      	mov	r4, r1
 800ce2c:	b913      	cbnz	r3, 800ce34 <_fflush_r+0x10>
 800ce2e:	2500      	movs	r5, #0
 800ce30:	4628      	mov	r0, r5
 800ce32:	bd38      	pop	{r3, r4, r5, pc}
 800ce34:	b118      	cbz	r0, 800ce3e <_fflush_r+0x1a>
 800ce36:	6a03      	ldr	r3, [r0, #32]
 800ce38:	b90b      	cbnz	r3, 800ce3e <_fflush_r+0x1a>
 800ce3a:	f7fe f9cf 	bl	800b1dc <__sinit>
 800ce3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d0f3      	beq.n	800ce2e <_fflush_r+0xa>
 800ce46:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ce48:	07d0      	lsls	r0, r2, #31
 800ce4a:	d404      	bmi.n	800ce56 <_fflush_r+0x32>
 800ce4c:	0599      	lsls	r1, r3, #22
 800ce4e:	d402      	bmi.n	800ce56 <_fflush_r+0x32>
 800ce50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ce52:	f7fe fbbe 	bl	800b5d2 <__retarget_lock_acquire_recursive>
 800ce56:	4628      	mov	r0, r5
 800ce58:	4621      	mov	r1, r4
 800ce5a:	f7ff ff5f 	bl	800cd1c <__sflush_r>
 800ce5e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ce60:	07da      	lsls	r2, r3, #31
 800ce62:	4605      	mov	r5, r0
 800ce64:	d4e4      	bmi.n	800ce30 <_fflush_r+0xc>
 800ce66:	89a3      	ldrh	r3, [r4, #12]
 800ce68:	059b      	lsls	r3, r3, #22
 800ce6a:	d4e1      	bmi.n	800ce30 <_fflush_r+0xc>
 800ce6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ce6e:	f7fe fbb1 	bl	800b5d4 <__retarget_lock_release_recursive>
 800ce72:	e7dd      	b.n	800ce30 <_fflush_r+0xc>

0800ce74 <__swhatbuf_r>:
 800ce74:	b570      	push	{r4, r5, r6, lr}
 800ce76:	460c      	mov	r4, r1
 800ce78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce7c:	2900      	cmp	r1, #0
 800ce7e:	b096      	sub	sp, #88	@ 0x58
 800ce80:	4615      	mov	r5, r2
 800ce82:	461e      	mov	r6, r3
 800ce84:	da0d      	bge.n	800cea2 <__swhatbuf_r+0x2e>
 800ce86:	89a3      	ldrh	r3, [r4, #12]
 800ce88:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ce8c:	f04f 0100 	mov.w	r1, #0
 800ce90:	bf14      	ite	ne
 800ce92:	2340      	movne	r3, #64	@ 0x40
 800ce94:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ce98:	2000      	movs	r0, #0
 800ce9a:	6031      	str	r1, [r6, #0]
 800ce9c:	602b      	str	r3, [r5, #0]
 800ce9e:	b016      	add	sp, #88	@ 0x58
 800cea0:	bd70      	pop	{r4, r5, r6, pc}
 800cea2:	466a      	mov	r2, sp
 800cea4:	f000 f848 	bl	800cf38 <_fstat_r>
 800cea8:	2800      	cmp	r0, #0
 800ceaa:	dbec      	blt.n	800ce86 <__swhatbuf_r+0x12>
 800ceac:	9901      	ldr	r1, [sp, #4]
 800ceae:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ceb2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ceb6:	4259      	negs	r1, r3
 800ceb8:	4159      	adcs	r1, r3
 800ceba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cebe:	e7eb      	b.n	800ce98 <__swhatbuf_r+0x24>

0800cec0 <__smakebuf_r>:
 800cec0:	898b      	ldrh	r3, [r1, #12]
 800cec2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cec4:	079d      	lsls	r5, r3, #30
 800cec6:	4606      	mov	r6, r0
 800cec8:	460c      	mov	r4, r1
 800ceca:	d507      	bpl.n	800cedc <__smakebuf_r+0x1c>
 800cecc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ced0:	6023      	str	r3, [r4, #0]
 800ced2:	6123      	str	r3, [r4, #16]
 800ced4:	2301      	movs	r3, #1
 800ced6:	6163      	str	r3, [r4, #20]
 800ced8:	b003      	add	sp, #12
 800ceda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cedc:	ab01      	add	r3, sp, #4
 800cede:	466a      	mov	r2, sp
 800cee0:	f7ff ffc8 	bl	800ce74 <__swhatbuf_r>
 800cee4:	9f00      	ldr	r7, [sp, #0]
 800cee6:	4605      	mov	r5, r0
 800cee8:	4639      	mov	r1, r7
 800ceea:	4630      	mov	r0, r6
 800ceec:	f7ff f9ce 	bl	800c28c <_malloc_r>
 800cef0:	b948      	cbnz	r0, 800cf06 <__smakebuf_r+0x46>
 800cef2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cef6:	059a      	lsls	r2, r3, #22
 800cef8:	d4ee      	bmi.n	800ced8 <__smakebuf_r+0x18>
 800cefa:	f023 0303 	bic.w	r3, r3, #3
 800cefe:	f043 0302 	orr.w	r3, r3, #2
 800cf02:	81a3      	strh	r3, [r4, #12]
 800cf04:	e7e2      	b.n	800cecc <__smakebuf_r+0xc>
 800cf06:	89a3      	ldrh	r3, [r4, #12]
 800cf08:	6020      	str	r0, [r4, #0]
 800cf0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cf0e:	81a3      	strh	r3, [r4, #12]
 800cf10:	9b01      	ldr	r3, [sp, #4]
 800cf12:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cf16:	b15b      	cbz	r3, 800cf30 <__smakebuf_r+0x70>
 800cf18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cf1c:	4630      	mov	r0, r6
 800cf1e:	f000 f81d 	bl	800cf5c <_isatty_r>
 800cf22:	b128      	cbz	r0, 800cf30 <__smakebuf_r+0x70>
 800cf24:	89a3      	ldrh	r3, [r4, #12]
 800cf26:	f023 0303 	bic.w	r3, r3, #3
 800cf2a:	f043 0301 	orr.w	r3, r3, #1
 800cf2e:	81a3      	strh	r3, [r4, #12]
 800cf30:	89a3      	ldrh	r3, [r4, #12]
 800cf32:	431d      	orrs	r5, r3
 800cf34:	81a5      	strh	r5, [r4, #12]
 800cf36:	e7cf      	b.n	800ced8 <__smakebuf_r+0x18>

0800cf38 <_fstat_r>:
 800cf38:	b538      	push	{r3, r4, r5, lr}
 800cf3a:	4d07      	ldr	r5, [pc, #28]	@ (800cf58 <_fstat_r+0x20>)
 800cf3c:	2300      	movs	r3, #0
 800cf3e:	4604      	mov	r4, r0
 800cf40:	4608      	mov	r0, r1
 800cf42:	4611      	mov	r1, r2
 800cf44:	602b      	str	r3, [r5, #0]
 800cf46:	f7f4 fd9d 	bl	8001a84 <_fstat>
 800cf4a:	1c43      	adds	r3, r0, #1
 800cf4c:	d102      	bne.n	800cf54 <_fstat_r+0x1c>
 800cf4e:	682b      	ldr	r3, [r5, #0]
 800cf50:	b103      	cbz	r3, 800cf54 <_fstat_r+0x1c>
 800cf52:	6023      	str	r3, [r4, #0]
 800cf54:	bd38      	pop	{r3, r4, r5, pc}
 800cf56:	bf00      	nop
 800cf58:	240008b4 	.word	0x240008b4

0800cf5c <_isatty_r>:
 800cf5c:	b538      	push	{r3, r4, r5, lr}
 800cf5e:	4d06      	ldr	r5, [pc, #24]	@ (800cf78 <_isatty_r+0x1c>)
 800cf60:	2300      	movs	r3, #0
 800cf62:	4604      	mov	r4, r0
 800cf64:	4608      	mov	r0, r1
 800cf66:	602b      	str	r3, [r5, #0]
 800cf68:	f7f4 fd9c 	bl	8001aa4 <_isatty>
 800cf6c:	1c43      	adds	r3, r0, #1
 800cf6e:	d102      	bne.n	800cf76 <_isatty_r+0x1a>
 800cf70:	682b      	ldr	r3, [r5, #0]
 800cf72:	b103      	cbz	r3, 800cf76 <_isatty_r+0x1a>
 800cf74:	6023      	str	r3, [r4, #0]
 800cf76:	bd38      	pop	{r3, r4, r5, pc}
 800cf78:	240008b4 	.word	0x240008b4

0800cf7c <_sbrk_r>:
 800cf7c:	b538      	push	{r3, r4, r5, lr}
 800cf7e:	4d06      	ldr	r5, [pc, #24]	@ (800cf98 <_sbrk_r+0x1c>)
 800cf80:	2300      	movs	r3, #0
 800cf82:	4604      	mov	r4, r0
 800cf84:	4608      	mov	r0, r1
 800cf86:	602b      	str	r3, [r5, #0]
 800cf88:	f7f4 fda4 	bl	8001ad4 <_sbrk>
 800cf8c:	1c43      	adds	r3, r0, #1
 800cf8e:	d102      	bne.n	800cf96 <_sbrk_r+0x1a>
 800cf90:	682b      	ldr	r3, [r5, #0]
 800cf92:	b103      	cbz	r3, 800cf96 <_sbrk_r+0x1a>
 800cf94:	6023      	str	r3, [r4, #0]
 800cf96:	bd38      	pop	{r3, r4, r5, pc}
 800cf98:	240008b4 	.word	0x240008b4

0800cf9c <memcpy>:
 800cf9c:	440a      	add	r2, r1
 800cf9e:	4291      	cmp	r1, r2
 800cfa0:	f100 33ff 	add.w	r3, r0, #4294967295
 800cfa4:	d100      	bne.n	800cfa8 <memcpy+0xc>
 800cfa6:	4770      	bx	lr
 800cfa8:	b510      	push	{r4, lr}
 800cfaa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cfae:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cfb2:	4291      	cmp	r1, r2
 800cfb4:	d1f9      	bne.n	800cfaa <memcpy+0xe>
 800cfb6:	bd10      	pop	{r4, pc}

0800cfb8 <__assert_func>:
 800cfb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cfba:	4614      	mov	r4, r2
 800cfbc:	461a      	mov	r2, r3
 800cfbe:	4b09      	ldr	r3, [pc, #36]	@ (800cfe4 <__assert_func+0x2c>)
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	4605      	mov	r5, r0
 800cfc4:	68d8      	ldr	r0, [r3, #12]
 800cfc6:	b14c      	cbz	r4, 800cfdc <__assert_func+0x24>
 800cfc8:	4b07      	ldr	r3, [pc, #28]	@ (800cfe8 <__assert_func+0x30>)
 800cfca:	9100      	str	r1, [sp, #0]
 800cfcc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cfd0:	4906      	ldr	r1, [pc, #24]	@ (800cfec <__assert_func+0x34>)
 800cfd2:	462b      	mov	r3, r5
 800cfd4:	f000 f842 	bl	800d05c <fiprintf>
 800cfd8:	f000 f852 	bl	800d080 <abort>
 800cfdc:	4b04      	ldr	r3, [pc, #16]	@ (800cff0 <__assert_func+0x38>)
 800cfde:	461c      	mov	r4, r3
 800cfe0:	e7f3      	b.n	800cfca <__assert_func+0x12>
 800cfe2:	bf00      	nop
 800cfe4:	2400003c 	.word	0x2400003c
 800cfe8:	0800d75d 	.word	0x0800d75d
 800cfec:	0800d76a 	.word	0x0800d76a
 800cff0:	0800d798 	.word	0x0800d798

0800cff4 <_calloc_r>:
 800cff4:	b570      	push	{r4, r5, r6, lr}
 800cff6:	fba1 5402 	umull	r5, r4, r1, r2
 800cffa:	b934      	cbnz	r4, 800d00a <_calloc_r+0x16>
 800cffc:	4629      	mov	r1, r5
 800cffe:	f7ff f945 	bl	800c28c <_malloc_r>
 800d002:	4606      	mov	r6, r0
 800d004:	b928      	cbnz	r0, 800d012 <_calloc_r+0x1e>
 800d006:	4630      	mov	r0, r6
 800d008:	bd70      	pop	{r4, r5, r6, pc}
 800d00a:	220c      	movs	r2, #12
 800d00c:	6002      	str	r2, [r0, #0]
 800d00e:	2600      	movs	r6, #0
 800d010:	e7f9      	b.n	800d006 <_calloc_r+0x12>
 800d012:	462a      	mov	r2, r5
 800d014:	4621      	mov	r1, r4
 800d016:	f7fe fa5f 	bl	800b4d8 <memset>
 800d01a:	e7f4      	b.n	800d006 <_calloc_r+0x12>

0800d01c <__ascii_mbtowc>:
 800d01c:	b082      	sub	sp, #8
 800d01e:	b901      	cbnz	r1, 800d022 <__ascii_mbtowc+0x6>
 800d020:	a901      	add	r1, sp, #4
 800d022:	b142      	cbz	r2, 800d036 <__ascii_mbtowc+0x1a>
 800d024:	b14b      	cbz	r3, 800d03a <__ascii_mbtowc+0x1e>
 800d026:	7813      	ldrb	r3, [r2, #0]
 800d028:	600b      	str	r3, [r1, #0]
 800d02a:	7812      	ldrb	r2, [r2, #0]
 800d02c:	1e10      	subs	r0, r2, #0
 800d02e:	bf18      	it	ne
 800d030:	2001      	movne	r0, #1
 800d032:	b002      	add	sp, #8
 800d034:	4770      	bx	lr
 800d036:	4610      	mov	r0, r2
 800d038:	e7fb      	b.n	800d032 <__ascii_mbtowc+0x16>
 800d03a:	f06f 0001 	mvn.w	r0, #1
 800d03e:	e7f8      	b.n	800d032 <__ascii_mbtowc+0x16>

0800d040 <__ascii_wctomb>:
 800d040:	4603      	mov	r3, r0
 800d042:	4608      	mov	r0, r1
 800d044:	b141      	cbz	r1, 800d058 <__ascii_wctomb+0x18>
 800d046:	2aff      	cmp	r2, #255	@ 0xff
 800d048:	d904      	bls.n	800d054 <__ascii_wctomb+0x14>
 800d04a:	228a      	movs	r2, #138	@ 0x8a
 800d04c:	601a      	str	r2, [r3, #0]
 800d04e:	f04f 30ff 	mov.w	r0, #4294967295
 800d052:	4770      	bx	lr
 800d054:	700a      	strb	r2, [r1, #0]
 800d056:	2001      	movs	r0, #1
 800d058:	4770      	bx	lr
	...

0800d05c <fiprintf>:
 800d05c:	b40e      	push	{r1, r2, r3}
 800d05e:	b503      	push	{r0, r1, lr}
 800d060:	4601      	mov	r1, r0
 800d062:	ab03      	add	r3, sp, #12
 800d064:	4805      	ldr	r0, [pc, #20]	@ (800d07c <fiprintf+0x20>)
 800d066:	f853 2b04 	ldr.w	r2, [r3], #4
 800d06a:	6800      	ldr	r0, [r0, #0]
 800d06c:	9301      	str	r3, [sp, #4]
 800d06e:	f7ff fd3d 	bl	800caec <_vfiprintf_r>
 800d072:	b002      	add	sp, #8
 800d074:	f85d eb04 	ldr.w	lr, [sp], #4
 800d078:	b003      	add	sp, #12
 800d07a:	4770      	bx	lr
 800d07c:	2400003c 	.word	0x2400003c

0800d080 <abort>:
 800d080:	b508      	push	{r3, lr}
 800d082:	2006      	movs	r0, #6
 800d084:	f000 f82c 	bl	800d0e0 <raise>
 800d088:	2001      	movs	r0, #1
 800d08a:	f7f4 fcab 	bl	80019e4 <_exit>

0800d08e <_raise_r>:
 800d08e:	291f      	cmp	r1, #31
 800d090:	b538      	push	{r3, r4, r5, lr}
 800d092:	4605      	mov	r5, r0
 800d094:	460c      	mov	r4, r1
 800d096:	d904      	bls.n	800d0a2 <_raise_r+0x14>
 800d098:	2316      	movs	r3, #22
 800d09a:	6003      	str	r3, [r0, #0]
 800d09c:	f04f 30ff 	mov.w	r0, #4294967295
 800d0a0:	bd38      	pop	{r3, r4, r5, pc}
 800d0a2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d0a4:	b112      	cbz	r2, 800d0ac <_raise_r+0x1e>
 800d0a6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d0aa:	b94b      	cbnz	r3, 800d0c0 <_raise_r+0x32>
 800d0ac:	4628      	mov	r0, r5
 800d0ae:	f000 f831 	bl	800d114 <_getpid_r>
 800d0b2:	4622      	mov	r2, r4
 800d0b4:	4601      	mov	r1, r0
 800d0b6:	4628      	mov	r0, r5
 800d0b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d0bc:	f000 b818 	b.w	800d0f0 <_kill_r>
 800d0c0:	2b01      	cmp	r3, #1
 800d0c2:	d00a      	beq.n	800d0da <_raise_r+0x4c>
 800d0c4:	1c59      	adds	r1, r3, #1
 800d0c6:	d103      	bne.n	800d0d0 <_raise_r+0x42>
 800d0c8:	2316      	movs	r3, #22
 800d0ca:	6003      	str	r3, [r0, #0]
 800d0cc:	2001      	movs	r0, #1
 800d0ce:	e7e7      	b.n	800d0a0 <_raise_r+0x12>
 800d0d0:	2100      	movs	r1, #0
 800d0d2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d0d6:	4620      	mov	r0, r4
 800d0d8:	4798      	blx	r3
 800d0da:	2000      	movs	r0, #0
 800d0dc:	e7e0      	b.n	800d0a0 <_raise_r+0x12>
	...

0800d0e0 <raise>:
 800d0e0:	4b02      	ldr	r3, [pc, #8]	@ (800d0ec <raise+0xc>)
 800d0e2:	4601      	mov	r1, r0
 800d0e4:	6818      	ldr	r0, [r3, #0]
 800d0e6:	f7ff bfd2 	b.w	800d08e <_raise_r>
 800d0ea:	bf00      	nop
 800d0ec:	2400003c 	.word	0x2400003c

0800d0f0 <_kill_r>:
 800d0f0:	b538      	push	{r3, r4, r5, lr}
 800d0f2:	4d07      	ldr	r5, [pc, #28]	@ (800d110 <_kill_r+0x20>)
 800d0f4:	2300      	movs	r3, #0
 800d0f6:	4604      	mov	r4, r0
 800d0f8:	4608      	mov	r0, r1
 800d0fa:	4611      	mov	r1, r2
 800d0fc:	602b      	str	r3, [r5, #0]
 800d0fe:	f7f4 fc61 	bl	80019c4 <_kill>
 800d102:	1c43      	adds	r3, r0, #1
 800d104:	d102      	bne.n	800d10c <_kill_r+0x1c>
 800d106:	682b      	ldr	r3, [r5, #0]
 800d108:	b103      	cbz	r3, 800d10c <_kill_r+0x1c>
 800d10a:	6023      	str	r3, [r4, #0]
 800d10c:	bd38      	pop	{r3, r4, r5, pc}
 800d10e:	bf00      	nop
 800d110:	240008b4 	.word	0x240008b4

0800d114 <_getpid_r>:
 800d114:	f7f4 bc4e 	b.w	80019b4 <_getpid>

0800d118 <checkint>:
 800d118:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800d11c:	2b7e      	cmp	r3, #126	@ 0x7e
 800d11e:	d910      	bls.n	800d142 <checkint+0x2a>
 800d120:	2b96      	cmp	r3, #150	@ 0x96
 800d122:	d80c      	bhi.n	800d13e <checkint+0x26>
 800d124:	2201      	movs	r2, #1
 800d126:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 800d12a:	fa02 f303 	lsl.w	r3, r2, r3
 800d12e:	1e5a      	subs	r2, r3, #1
 800d130:	4202      	tst	r2, r0
 800d132:	d106      	bne.n	800d142 <checkint+0x2a>
 800d134:	4203      	tst	r3, r0
 800d136:	bf14      	ite	ne
 800d138:	2001      	movne	r0, #1
 800d13a:	2002      	moveq	r0, #2
 800d13c:	4770      	bx	lr
 800d13e:	2002      	movs	r0, #2
 800d140:	4770      	bx	lr
 800d142:	2000      	movs	r0, #0
 800d144:	4770      	bx	lr
	...

0800d148 <powf>:
 800d148:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d14a:	ee10 1a10 	vmov	r1, s0
 800d14e:	ee10 4a90 	vmov	r4, s1
 800d152:	f5a1 0200 	sub.w	r2, r1, #8388608	@ 0x800000
 800d156:	0063      	lsls	r3, r4, #1
 800d158:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 800d15c:	eef0 7a40 	vmov.f32	s15, s0
 800d160:	eeb0 7a60 	vmov.f32	s14, s1
 800d164:	f103 30ff 	add.w	r0, r3, #4294967295
 800d168:	f06f 7280 	mvn.w	r2, #16777216	@ 0x1000000
 800d16c:	d252      	bcs.n	800d214 <powf+0xcc>
 800d16e:	4290      	cmp	r0, r2
 800d170:	d258      	bcs.n	800d224 <powf+0xdc>
 800d172:	2000      	movs	r0, #0
 800d174:	f101 4340 	add.w	r3, r1, #3221225472	@ 0xc0000000
 800d178:	f503 034d 	add.w	r3, r3, #13434880	@ 0xcd0000
 800d17c:	4a9e      	ldr	r2, [pc, #632]	@ (800d3f8 <powf+0x2b0>)
 800d17e:	eebf 2b00 	vmov.f64	d2, #240	@ 0xbf800000 -1.0
 800d182:	f3c3 44c3 	ubfx	r4, r3, #19, #4
 800d186:	f36f 0316 	bfc	r3, #0, #23
 800d18a:	1ac9      	subs	r1, r1, r3
 800d18c:	eb02 1404 	add.w	r4, r2, r4, lsl #4
 800d190:	ee07 1a90 	vmov	s15, r1
 800d194:	ed94 5b02 	vldr	d5, [r4, #8]
 800d198:	ed94 4b00 	vldr	d4, [r4]
 800d19c:	15db      	asrs	r3, r3, #23
 800d19e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800d1a2:	ee07 3a90 	vmov	s15, r3
 800d1a6:	eea4 2b06 	vfma.f64	d2, d4, d6
 800d1aa:	ed92 1b42 	vldr	d1, [r2, #264]	@ 0x108
 800d1ae:	ee22 4b02 	vmul.f64	d4, d2, d2
 800d1b2:	ee24 0b04 	vmul.f64	d0, d4, d4
 800d1b6:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800d1ba:	ee36 6b05 	vadd.f64	d6, d6, d5
 800d1be:	ed92 5b40 	vldr	d5, [r2, #256]	@ 0x100
 800d1c2:	ed92 3b44 	vldr	d3, [r2, #272]	@ 0x110
 800d1c6:	eea2 1b05 	vfma.f64	d1, d2, d5
 800d1ca:	ed92 5b46 	vldr	d5, [r2, #280]	@ 0x118
 800d1ce:	eea2 5b03 	vfma.f64	d5, d2, d3
 800d1d2:	ed92 3b48 	vldr	d3, [r2, #288]	@ 0x120
 800d1d6:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 800d1da:	eea2 6b03 	vfma.f64	d6, d2, d3
 800d1de:	eea4 6b05 	vfma.f64	d6, d4, d5
 800d1e2:	eea1 6b00 	vfma.f64	d6, d1, d0
 800d1e6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d1ea:	ee17 3a90 	vmov	r3, s15
 800d1ee:	f3c3 32cf 	ubfx	r2, r3, #15, #16
 800d1f2:	f248 03bf 	movw	r3, #32959	@ 0x80bf
 800d1f6:	429a      	cmp	r2, r3
 800d1f8:	f0c0 8098 	bcc.w	800d32c <powf+0x1e4>
 800d1fc:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 800d3d8 <powf+0x290>
 800d200:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d208:	dd79      	ble.n	800d2fe <powf+0x1b6>
 800d20a:	b003      	add	sp, #12
 800d20c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d210:	f000 b920 	b.w	800d454 <__math_oflowf>
 800d214:	4290      	cmp	r0, r2
 800d216:	d330      	bcc.n	800d27a <powf+0x132>
 800d218:	b12b      	cbz	r3, 800d226 <powf+0xde>
 800d21a:	0049      	lsls	r1, r1, #1
 800d21c:	f1b1 4f7f 	cmp.w	r1, #4278190080	@ 0xff000000
 800d220:	d808      	bhi.n	800d234 <powf+0xec>
 800d222:	e015      	b.n	800d250 <powf+0x108>
 800d224:	b953      	cbnz	r3, 800d23c <powf+0xf4>
 800d226:	f481 0180 	eor.w	r1, r1, #4194304	@ 0x400000
 800d22a:	0049      	lsls	r1, r1, #1
 800d22c:	f511 0f00 	cmn.w	r1, #8388608	@ 0x800000
 800d230:	f240 80ca 	bls.w	800d3c8 <powf+0x280>
 800d234:	ee37 0a87 	vadd.f32	s0, s15, s14
 800d238:	b003      	add	sp, #12
 800d23a:	bd30      	pop	{r4, r5, pc}
 800d23c:	f1b1 5f7e 	cmp.w	r1, #1065353216	@ 0x3f800000
 800d240:	d105      	bne.n	800d24e <powf+0x106>
 800d242:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 800d246:	0064      	lsls	r4, r4, #1
 800d248:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 800d24c:	e7f0      	b.n	800d230 <powf+0xe8>
 800d24e:	0049      	lsls	r1, r1, #1
 800d250:	f1b3 4f7f 	cmp.w	r3, #4278190080	@ 0xff000000
 800d254:	d1ee      	bne.n	800d234 <powf+0xec>
 800d256:	f1b1 4ffe 	cmp.w	r1, #2130706432	@ 0x7f000000
 800d25a:	f000 80b5 	beq.w	800d3c8 <powf+0x280>
 800d25e:	f1b1 4ffe 	cmp.w	r1, #2130706432	@ 0x7f000000
 800d262:	ea6f 0404 	mvn.w	r4, r4
 800d266:	bf34      	ite	cc
 800d268:	2100      	movcc	r1, #0
 800d26a:	2101      	movcs	r1, #1
 800d26c:	0fe4      	lsrs	r4, r4, #31
 800d26e:	42a1      	cmp	r1, r4
 800d270:	f040 80ad 	bne.w	800d3ce <powf+0x286>
 800d274:	ee27 0a07 	vmul.f32	s0, s14, s14
 800d278:	e7de      	b.n	800d238 <powf+0xf0>
 800d27a:	004d      	lsls	r5, r1, #1
 800d27c:	1e6b      	subs	r3, r5, #1
 800d27e:	4293      	cmp	r3, r2
 800d280:	d31b      	bcc.n	800d2ba <powf+0x172>
 800d282:	2900      	cmp	r1, #0
 800d284:	ee20 0a00 	vmul.f32	s0, s0, s0
 800d288:	da0e      	bge.n	800d2a8 <powf+0x160>
 800d28a:	4620      	mov	r0, r4
 800d28c:	f7ff ff44 	bl	800d118 <checkint>
 800d290:	2801      	cmp	r0, #1
 800d292:	d109      	bne.n	800d2a8 <powf+0x160>
 800d294:	eeb1 0a40 	vneg.f32	s0, s0
 800d298:	b945      	cbnz	r5, 800d2ac <powf+0x164>
 800d29a:	2c00      	cmp	r4, #0
 800d29c:	dacc      	bge.n	800d238 <powf+0xf0>
 800d29e:	b003      	add	sp, #12
 800d2a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d2a4:	f000 b8dc 	b.w	800d460 <__math_divzerof>
 800d2a8:	2000      	movs	r0, #0
 800d2aa:	e7f5      	b.n	800d298 <powf+0x150>
 800d2ac:	2c00      	cmp	r4, #0
 800d2ae:	dac3      	bge.n	800d238 <powf+0xf0>
 800d2b0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800d2b4:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800d2b8:	e7be      	b.n	800d238 <powf+0xf0>
 800d2ba:	2900      	cmp	r1, #0
 800d2bc:	da1d      	bge.n	800d2fa <powf+0x1b2>
 800d2be:	4620      	mov	r0, r4
 800d2c0:	f7ff ff2a 	bl	800d118 <checkint>
 800d2c4:	b920      	cbnz	r0, 800d2d0 <powf+0x188>
 800d2c6:	b003      	add	sp, #12
 800d2c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d2cc:	f000 b8da 	b.w	800d484 <__math_invalidf>
 800d2d0:	1e43      	subs	r3, r0, #1
 800d2d2:	4258      	negs	r0, r3
 800d2d4:	4158      	adcs	r0, r3
 800d2d6:	0400      	lsls	r0, r0, #16
 800d2d8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800d2dc:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 800d2e0:	f4bf af48 	bcs.w	800d174 <powf+0x2c>
 800d2e4:	eddf 6a45 	vldr	s13, [pc, #276]	@ 800d3fc <powf+0x2b4>
 800d2e8:	ee27 0aa6 	vmul.f32	s0, s15, s13
 800d2ec:	ee10 3a10 	vmov	r3, s0
 800d2f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d2f4:	f1a3 6138 	sub.w	r1, r3, #192937984	@ 0xb800000
 800d2f8:	e73c      	b.n	800d174 <powf+0x2c>
 800d2fa:	2000      	movs	r0, #0
 800d2fc:	e7ee      	b.n	800d2dc <powf+0x194>
 800d2fe:	ed9f 6b38 	vldr	d6, [pc, #224]	@ 800d3e0 <powf+0x298>
 800d302:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d30a:	dd45      	ble.n	800d398 <powf+0x250>
 800d30c:	f04f 534c 	mov.w	r3, #855638016	@ 0x33000000
 800d310:	b3d0      	cbz	r0, 800d388 <powf+0x240>
 800d312:	9301      	str	r3, [sp, #4]
 800d314:	eddd 6a01 	vldr	s13, [sp, #4]
 800d318:	eebf 6a00 	vmov.f32	s12, #240	@ 0xbf800000 -1.0
 800d31c:	ee76 6a66 	vsub.f32	s13, s12, s13
 800d320:	eef4 6a46 	vcmp.f32	s13, s12
 800d324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d328:	f47f af6f 	bne.w	800d20a <powf+0xc2>
 800d32c:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800d330:	4b33      	ldr	r3, [pc, #204]	@ (800d400 <powf+0x2b8>)
 800d332:	ed93 5b40 	vldr	d5, [r3, #256]	@ 0x100
 800d336:	ee37 6b05 	vadd.f64	d6, d7, d5
 800d33a:	ee16 2a10 	vmov	r2, s12
 800d33e:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d342:	f002 011f 	and.w	r1, r2, #31
 800d346:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d34a:	ed93 5b42 	vldr	d5, [r3, #264]	@ 0x108
 800d34e:	ee27 4b07 	vmul.f64	d4, d7, d7
 800d352:	ed93 6b44 	vldr	d6, [r3, #272]	@ 0x110
 800d356:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
 800d35a:	f853 4031 	ldr.w	r4, [r3, r1, lsl #3]
 800d35e:	eea7 6b05 	vfma.f64	d6, d7, d5
 800d362:	686d      	ldr	r5, [r5, #4]
 800d364:	ed93 5b46 	vldr	d5, [r3, #280]	@ 0x118
 800d368:	1880      	adds	r0, r0, r2
 800d36a:	2100      	movs	r1, #0
 800d36c:	190a      	adds	r2, r1, r4
 800d36e:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 800d372:	eea7 0b05 	vfma.f64	d0, d7, d5
 800d376:	ec43 2b17 	vmov	d7, r2, r3
 800d37a:	eea6 0b04 	vfma.f64	d0, d6, d4
 800d37e:	ee20 0b07 	vmul.f64	d0, d0, d7
 800d382:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800d386:	e757      	b.n	800d238 <powf+0xf0>
 800d388:	9300      	str	r3, [sp, #0]
 800d38a:	eddd 6a00 	vldr	s13, [sp]
 800d38e:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800d392:	ee76 6a86 	vadd.f32	s13, s13, s12
 800d396:	e7c3      	b.n	800d320 <powf+0x1d8>
 800d398:	ed9f 6b13 	vldr	d6, [pc, #76]	@ 800d3e8 <powf+0x2a0>
 800d39c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d3a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3a4:	d804      	bhi.n	800d3b0 <powf+0x268>
 800d3a6:	b003      	add	sp, #12
 800d3a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d3ac:	f000 b846 	b.w	800d43c <__math_uflowf>
 800d3b0:	ed9f 6b0f 	vldr	d6, [pc, #60]	@ 800d3f0 <powf+0x2a8>
 800d3b4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d3b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3bc:	d5b6      	bpl.n	800d32c <powf+0x1e4>
 800d3be:	b003      	add	sp, #12
 800d3c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d3c4:	f000 b840 	b.w	800d448 <__math_may_uflowf>
 800d3c8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800d3cc:	e734      	b.n	800d238 <powf+0xf0>
 800d3ce:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 800d404 <powf+0x2bc>
 800d3d2:	e731      	b.n	800d238 <powf+0xf0>
 800d3d4:	f3af 8000 	nop.w
 800d3d8:	ffd1d571 	.word	0xffd1d571
 800d3dc:	405fffff 	.word	0x405fffff
 800d3e0:	ffa3aae2 	.word	0xffa3aae2
 800d3e4:	405fffff 	.word	0x405fffff
 800d3e8:	00000000 	.word	0x00000000
 800d3ec:	c062c000 	.word	0xc062c000
 800d3f0:	00000000 	.word	0x00000000
 800d3f4:	c062a000 	.word	0xc062a000
 800d3f8:	0800dae8 	.word	0x0800dae8
 800d3fc:	4b000000 	.word	0x4b000000
 800d400:	0800d9a0 	.word	0x0800d9a0
 800d404:	00000000 	.word	0x00000000

0800d408 <with_errnof>:
 800d408:	b510      	push	{r4, lr}
 800d40a:	ed2d 8b02 	vpush	{d8}
 800d40e:	eeb0 8a40 	vmov.f32	s16, s0
 800d412:	4604      	mov	r4, r0
 800d414:	f7fe f8b2 	bl	800b57c <__errno>
 800d418:	eeb0 0a48 	vmov.f32	s0, s16
 800d41c:	ecbd 8b02 	vpop	{d8}
 800d420:	6004      	str	r4, [r0, #0]
 800d422:	bd10      	pop	{r4, pc}

0800d424 <xflowf>:
 800d424:	b130      	cbz	r0, 800d434 <xflowf+0x10>
 800d426:	eef1 7a40 	vneg.f32	s15, s0
 800d42a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800d42e:	2022      	movs	r0, #34	@ 0x22
 800d430:	f7ff bfea 	b.w	800d408 <with_errnof>
 800d434:	eef0 7a40 	vmov.f32	s15, s0
 800d438:	e7f7      	b.n	800d42a <xflowf+0x6>
	...

0800d43c <__math_uflowf>:
 800d43c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800d444 <__math_uflowf+0x8>
 800d440:	f7ff bff0 	b.w	800d424 <xflowf>
 800d444:	10000000 	.word	0x10000000

0800d448 <__math_may_uflowf>:
 800d448:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800d450 <__math_may_uflowf+0x8>
 800d44c:	f7ff bfea 	b.w	800d424 <xflowf>
 800d450:	1a200000 	.word	0x1a200000

0800d454 <__math_oflowf>:
 800d454:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800d45c <__math_oflowf+0x8>
 800d458:	f7ff bfe4 	b.w	800d424 <xflowf>
 800d45c:	70000000 	.word	0x70000000

0800d460 <__math_divzerof>:
 800d460:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 800d480 <__math_divzerof+0x20>
 800d464:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800d468:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800d46c:	2800      	cmp	r0, #0
 800d46e:	f04f 0022 	mov.w	r0, #34	@ 0x22
 800d472:	fe47 7a87 	vseleq.f32	s15, s15, s14
 800d476:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800d47a:	f7ff bfc5 	b.w	800d408 <with_errnof>
 800d47e:	bf00      	nop
 800d480:	00000000 	.word	0x00000000

0800d484 <__math_invalidf>:
 800d484:	eef0 7a40 	vmov.f32	s15, s0
 800d488:	ee30 7a40 	vsub.f32	s14, s0, s0
 800d48c:	eef4 7a67 	vcmp.f32	s15, s15
 800d490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d494:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800d498:	d602      	bvs.n	800d4a0 <__math_invalidf+0x1c>
 800d49a:	2021      	movs	r0, #33	@ 0x21
 800d49c:	f7ff bfb4 	b.w	800d408 <with_errnof>
 800d4a0:	4770      	bx	lr
	...

0800d4a4 <_init>:
 800d4a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4a6:	bf00      	nop
 800d4a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d4aa:	bc08      	pop	{r3}
 800d4ac:	469e      	mov	lr, r3
 800d4ae:	4770      	bx	lr

0800d4b0 <_fini>:
 800d4b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4b2:	bf00      	nop
 800d4b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d4b6:	bc08      	pop	{r3}
 800d4b8:	469e      	mov	lr, r3
 800d4ba:	4770      	bx	lr
