
nucleo-h753-state-detect.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009038  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c4  080092d8  080092d8  0000a2d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800979c  0800979c  0000a79c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080097a4  080097a4  0000a7a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080097a8  080097a8  0000a7a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001f8  24000000  080097ac  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000390  240001f8  080099a4  0000b1f8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000588  080099a4  0000b588  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000b1f8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00018d8d  00000000  00000000  0000b226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000301b  00000000  00000000  00023fb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000012b8  00000000  00000000  00026fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000e74  00000000  00000000  00028288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000043da  00000000  00000000  000290fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00018665  00000000  00000000  0002d4d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001687c1  00000000  00000000  00045b3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001ae2fc  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005bfc  00000000  00000000  001ae340  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000074  00000000  00000000  001b3f3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001f8 	.word	0x240001f8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080092c0 	.word	0x080092c0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001fc 	.word	0x240001fc
 80002dc:	080092c0 	.word	0x080092c0

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <FlightState_Init>:
static uint16_t consecutiveReadingsLanding = 0;
static float previousAltitude = 0.0f;


/* Init flight state machine */
void FlightState_Init(void) {
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
    currentState = FLIGHT_STATE_GROUND_IDLE;
 80006c0:	4b05      	ldr	r3, [pc, #20]	@ (80006d8 <FlightState_Init+0x1c>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	701a      	strb	r2, [r3, #0]
    groundAltitude = IMU_CalculateGroundAltitude();
 80006c6:	f000 f8eb 	bl	80008a0 <IMU_CalculateGroundAltitude>
 80006ca:	eef0 7a40 	vmov.f32	s15, s0
 80006ce:	4b03      	ldr	r3, [pc, #12]	@ (80006dc <FlightState_Init+0x20>)
 80006d0:	edc3 7a00 	vstr	s15, [r3]

}
 80006d4:	bf00      	nop
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	24000214 	.word	0x24000214
 80006dc:	24000218 	.word	0x24000218

080006e0 <FlightState_Update>:

void FlightState_Update(void) {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b088      	sub	sp, #32
 80006e4:	af00      	add	r7, sp, #0
    IMU_Data_t imuData = IMU_GetLatestData();
 80006e6:	f000 f8e4 	bl	80008b2 <IMU_GetLatestData>
 80006ea:	eeb0 6a40 	vmov.f32	s12, s0
 80006ee:	eef0 6a60 	vmov.f32	s13, s1
 80006f2:	eeb0 7a41 	vmov.f32	s14, s2
 80006f6:	eef0 7a61 	vmov.f32	s15, s3
 80006fa:	ed87 6a03 	vstr	s12, [r7, #12]
 80006fe:	edc7 6a04 	vstr	s13, [r7, #16]
 8000702:	ed87 7a05 	vstr	s14, [r7, #20]
 8000706:	edc7 7a06 	vstr	s15, [r7, #24]

    float altitude = imuData.altitude;
 800070a:	69bb      	ldr	r3, [r7, #24]
 800070c:	61fb      	str	r3, [r7, #28]
    float filteredAltitude, filteredVelocity;

    KalmanFilter_Update(altitude, &filteredAltitude, &filteredVelocity);
 800070e:	1d3a      	adds	r2, r7, #4
 8000710:	f107 0308 	add.w	r3, r7, #8
 8000714:	4611      	mov	r1, r2
 8000716:	4618      	mov	r0, r3
 8000718:	ed97 0a07 	vldr	s0, [r7, #28]
 800071c:	f000 f9d4 	bl	8000ac8 <KalmanFilter_Update>

    /*Ground Logic*/
    if (currentState == FLIGHT_STATE_GROUND_IDLE) {
 8000720:	4b4f      	ldr	r3, [pc, #316]	@ (8000860 <FlightState_Update+0x180>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d120      	bne.n	800076a <FlightState_Update+0x8a>
        if (fabsf(imuData.accelX) > LAUNCH_ACCELERATION_THRESHOLD) {
 8000728:	edd7 7a03 	vldr	s15, [r7, #12]
 800072c:	eef0 7ae7 	vabs.f32	s15, s15
 8000730:	eeb7 7a04 	vmov.f32	s14, #116	@ 0x3fa00000  1.250
 8000734:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800073c:	dd06      	ble.n	800074c <FlightState_Update+0x6c>
            consecutiveReadingsLaunch++;
 800073e:	4b49      	ldr	r3, [pc, #292]	@ (8000864 <FlightState_Update+0x184>)
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	3301      	adds	r3, #1
 8000744:	b2da      	uxtb	r2, r3
 8000746:	4b47      	ldr	r3, [pc, #284]	@ (8000864 <FlightState_Update+0x184>)
 8000748:	701a      	strb	r2, [r3, #0]
 800074a:	e002      	b.n	8000752 <FlightState_Update+0x72>
        } else {
            consecutiveReadingsLaunch = 0;
 800074c:	4b45      	ldr	r3, [pc, #276]	@ (8000864 <FlightState_Update+0x184>)
 800074e:	2200      	movs	r2, #0
 8000750:	701a      	strb	r2, [r3, #0]
        }

        if (consecutiveReadingsLaunch >= LAUNCH_DETECTION_COUNT) {
 8000752:	4b44      	ldr	r3, [pc, #272]	@ (8000864 <FlightState_Update+0x184>)
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	2b09      	cmp	r3, #9
 8000758:	d907      	bls.n	800076a <FlightState_Update+0x8a>
            currentState = FLIGHT_STATE_POWERED_FLIGHT;
 800075a:	4b41      	ldr	r3, [pc, #260]	@ (8000860 <FlightState_Update+0x180>)
 800075c:	2201      	movs	r2, #1
 800075e:	701a      	strb	r2, [r3, #0]
            launchTime = HAL_GetTick(); // or whatever function polls the RTS on the STM32
 8000760:	f001 facc 	bl	8001cfc <HAL_GetTick>
 8000764:	4603      	mov	r3, r0
 8000766:	4a40      	ldr	r2, [pc, #256]	@ (8000868 <FlightState_Update+0x188>)
 8000768:	6013      	str	r3, [r2, #0]
            // DataLogger_LogEvent("Launch Detected");
        }
    }

    /*Apogee Detection*/
    if (currentState == FLIGHT_STATE_POWERED_FLIGHT || currentState == FLIGHT_STATE_UNPOWERED_FLIGHT) {
 800076a:	4b3d      	ldr	r3, [pc, #244]	@ (8000860 <FlightState_Update+0x180>)
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	2b01      	cmp	r3, #1
 8000770:	d003      	beq.n	800077a <FlightState_Update+0x9a>
 8000772:	4b3b      	ldr	r3, [pc, #236]	@ (8000860 <FlightState_Update+0x180>)
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	2b02      	cmp	r3, #2
 8000778:	d13d      	bne.n	80007f6 <FlightState_Update+0x116>

        /*State Change from powered to unpowered ascent*/
        if (currentState == FLIGHT_STATE_POWERED_FLIGHT &&
 800077a:	4b39      	ldr	r3, [pc, #228]	@ (8000860 <FlightState_Update+0x180>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	2b01      	cmp	r3, #1
 8000780:	d10b      	bne.n	800079a <FlightState_Update+0xba>
            (HAL_GetTick() - launchTime) > MOTOR_BURN_TIME_MS)
 8000782:	f001 fabb 	bl	8001cfc <HAL_GetTick>
 8000786:	4602      	mov	r2, r0
 8000788:	4b37      	ldr	r3, [pc, #220]	@ (8000868 <FlightState_Update+0x188>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	1ad3      	subs	r3, r2, r3
        if (currentState == FLIGHT_STATE_POWERED_FLIGHT &&
 800078e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000792:	d902      	bls.n	800079a <FlightState_Update+0xba>
            currentState = FLIGHT_STATE_UNPOWERED_FLIGHT;
 8000794:	4b32      	ldr	r3, [pc, #200]	@ (8000860 <FlightState_Update+0x180>)
 8000796:	2202      	movs	r2, #2
 8000798:	701a      	strb	r2, [r3, #0]
            //DataLogger_LogEvent("Motor Burnout")

        /*Check for Apogee*/
        if (filteredVelocity < 0.0f && altitude > (groundAltitude + MIN_ALTITUDE_FOR_APOGEE)) {
 800079a:	edd7 7a01 	vldr	s15, [r7, #4]
 800079e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80007a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007a6:	d514      	bpl.n	80007d2 <FlightState_Update+0xf2>
 80007a8:	4b30      	ldr	r3, [pc, #192]	@ (800086c <FlightState_Update+0x18c>)
 80007aa:	edd3 7a00 	vldr	s15, [r3]
 80007ae:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8000870 <FlightState_Update+0x190>
 80007b2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80007b6:	ed97 7a07 	vldr	s14, [r7, #28]
 80007ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80007be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007c2:	dd06      	ble.n	80007d2 <FlightState_Update+0xf2>
            consecutiveReadingsApogee++;
 80007c4:	4b2b      	ldr	r3, [pc, #172]	@ (8000874 <FlightState_Update+0x194>)
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	3301      	adds	r3, #1
 80007ca:	b2da      	uxtb	r2, r3
 80007cc:	4b29      	ldr	r3, [pc, #164]	@ (8000874 <FlightState_Update+0x194>)
 80007ce:	701a      	strb	r2, [r3, #0]
 80007d0:	e002      	b.n	80007d8 <FlightState_Update+0xf8>
        } else {
            consecutiveReadingsApogee = 0;
 80007d2:	4b28      	ldr	r3, [pc, #160]	@ (8000874 <FlightState_Update+0x194>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	701a      	strb	r2, [r3, #0]
        }

        if (consecutiveReadingsApogee >= APOGEE_DETECTION_COUNT) {
 80007d8:	4b26      	ldr	r3, [pc, #152]	@ (8000874 <FlightState_Update+0x194>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	2b31      	cmp	r3, #49	@ 0x31
 80007de:	d90a      	bls.n	80007f6 <FlightState_Update+0x116>
            currentState = FLIGHT_STATE_DESCENT;
 80007e0:	4b1f      	ldr	r3, [pc, #124]	@ (8000860 <FlightState_Update+0x180>)
 80007e2:	2203      	movs	r2, #3
 80007e4:	701a      	strb	r2, [r3, #0]
            apogeeTime = HAL_GetTick();
 80007e6:	f001 fa89 	bl	8001cfc <HAL_GetTick>
 80007ea:	4603      	mov	r3, r0
 80007ec:	4a22      	ldr	r2, [pc, #136]	@ (8000878 <FlightState_Update+0x198>)
 80007ee:	6013      	str	r3, [r2, #0]
            //DataLogger_LogEvent("Apogee Detected");
            previousAltitude = altitude;
 80007f0:	4a22      	ldr	r2, [pc, #136]	@ (800087c <FlightState_Update+0x19c>)
 80007f2:	69fb      	ldr	r3, [r7, #28]
 80007f4:	6013      	str	r3, [r2, #0]
        }
    }

    /*Landing Detection*/
    if (currentState == FLIGHT_STATE_DESCENT) {
 80007f6:	4b1a      	ldr	r3, [pc, #104]	@ (8000860 <FlightState_Update+0x180>)
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	2b03      	cmp	r3, #3
 80007fc:	d12c      	bne.n	8000858 <FlightState_Update+0x178>
        //     currentState = FLIGHT_STATE_MAIN_DESCENT;
        //     //DataLogger_LogEvent("Main Descent Detected")
        // }

        /*Landed State Condition - No New Altitude in (x) cycles*/
        if (altitude < previousAltitude && altitude < groundAltitude + LAUNCH_LANDING_ALT_DELTA) {
 80007fe:	4b1f      	ldr	r3, [pc, #124]	@ (800087c <FlightState_Update+0x19c>)
 8000800:	edd3 7a00 	vldr	s15, [r3]
 8000804:	ed97 7a07 	vldr	s14, [r7, #28]
 8000808:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800080c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000810:	d514      	bpl.n	800083c <FlightState_Update+0x15c>
 8000812:	4b16      	ldr	r3, [pc, #88]	@ (800086c <FlightState_Update+0x18c>)
 8000814:	edd3 7a00 	vldr	s15, [r3]
 8000818:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8000880 <FlightState_Update+0x1a0>
 800081c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000820:	ed97 7a07 	vldr	s14, [r7, #28]
 8000824:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000828:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800082c:	d506      	bpl.n	800083c <FlightState_Update+0x15c>
            previousAltitude = altitude;
 800082e:	4a13      	ldr	r2, [pc, #76]	@ (800087c <FlightState_Update+0x19c>)
 8000830:	69fb      	ldr	r3, [r7, #28]
 8000832:	6013      	str	r3, [r2, #0]
            consecutiveReadingsLanding = 0;
 8000834:	4b13      	ldr	r3, [pc, #76]	@ (8000884 <FlightState_Update+0x1a4>)
 8000836:	2200      	movs	r2, #0
 8000838:	801a      	strh	r2, [r3, #0]
 800083a:	e005      	b.n	8000848 <FlightState_Update+0x168>
        } else {
            consecutiveReadingsLanding++;
 800083c:	4b11      	ldr	r3, [pc, #68]	@ (8000884 <FlightState_Update+0x1a4>)
 800083e:	881b      	ldrh	r3, [r3, #0]
 8000840:	3301      	adds	r3, #1
 8000842:	b29a      	uxth	r2, r3
 8000844:	4b0f      	ldr	r3, [pc, #60]	@ (8000884 <FlightState_Update+0x1a4>)
 8000846:	801a      	strh	r2, [r3, #0]
        }

        if (consecutiveReadingsLanding > LANDING_DETECTION_COUNT) {
 8000848:	4b0e      	ldr	r3, [pc, #56]	@ (8000884 <FlightState_Update+0x1a4>)
 800084a:	881b      	ldrh	r3, [r3, #0]
 800084c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000850:	d902      	bls.n	8000858 <FlightState_Update+0x178>
            currentState = FLIGHT_STATE_LANDED;
 8000852:	4b03      	ldr	r3, [pc, #12]	@ (8000860 <FlightState_Update+0x180>)
 8000854:	2204      	movs	r2, #4
 8000856:	701a      	strb	r2, [r3, #0]
            // PayloadActivate();
        }
    }

//    DataLogger_LogState(currentState, altitude, filteredAltitude, filteredVelocity);
}
 8000858:	bf00      	nop
 800085a:	3720      	adds	r7, #32
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	24000214 	.word	0x24000214
 8000864:	24000224 	.word	0x24000224
 8000868:	2400021c 	.word	0x2400021c
 800086c:	24000218 	.word	0x24000218
 8000870:	42c80000 	.word	0x42c80000
 8000874:	24000225 	.word	0x24000225
 8000878:	24000220 	.word	0x24000220
 800087c:	24000228 	.word	0x24000228
 8000880:	42480000 	.word	0x42480000
 8000884:	24000226 	.word	0x24000226

08000888 <FlightState_GetCurrent>:

/* Get the current flight state */
FlightState_t FlightState_GetCurrent(void) {
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
    return currentState;
 800088c:	4b03      	ldr	r3, [pc, #12]	@ (800089c <FlightState_GetCurrent+0x14>)
 800088e:	781b      	ldrb	r3, [r3, #0]
}
 8000890:	4618      	mov	r0, r3
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop
 800089c:	24000214 	.word	0x24000214

080008a0 <IMU_CalculateGroundAltitude>:
#include "imu.h"
//#include "imu_real.h"
#include "imu_source.h"

/* Calculate ground altitude */
float IMU_CalculateGroundAltitude(void) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
        // Use the simulated ground altitude
//        extern float IMU_Sim_CalculateGroundAltitude(void);
//        return IMU_Sim_CalculateGroundAltitude();
//    }
	extern float IMU_Sim_CalculateGroundAltitude(void);
	return IMU_Sim_CalculateGroundAltitude();
 80008a4:	f000 f8d8 	bl	8000a58 <IMU_Sim_CalculateGroundAltitude>
 80008a8:	eef0 7a40 	vmov.f32	s15, s0
}
 80008ac:	eeb0 0a67 	vmov.f32	s0, s15
 80008b0:	bd80      	pop	{r7, pc}

080008b2 <IMU_GetLatestData>:

/* Get latest IMU data from selected source */
IMU_Data_t IMU_GetLatestData(void) {
 80008b2:	b580      	push	{r7, lr}
 80008b4:	b088      	sub	sp, #32
 80008b6:	af00      	add	r7, sp, #0
//        // Use the simulated data
//        extern IMU_Data_t IMU_Sim_GetLatestData(void);
//        return IMU_Sim_GetLatestData();
//    }
    extern IMU_Data_t IMU_Sim_GetLatestData(void);
	return IMU_Sim_GetLatestData();
 80008b8:	f000 f8e2 	bl	8000a80 <IMU_Sim_GetLatestData>
 80008bc:	eeb0 6a40 	vmov.f32	s12, s0
 80008c0:	eef0 6a60 	vmov.f32	s13, s1
 80008c4:	eeb0 7a41 	vmov.f32	s14, s2
 80008c8:	eef0 7a61 	vmov.f32	s15, s3
 80008cc:	ed87 6a04 	vstr	s12, [r7, #16]
 80008d0:	edc7 6a05 	vstr	s13, [r7, #20]
 80008d4:	ed87 7a06 	vstr	s14, [r7, #24]
 80008d8:	edc7 7a07 	vstr	s15, [r7, #28]
 80008dc:	6938      	ldr	r0, [r7, #16]
 80008de:	6979      	ldr	r1, [r7, #20]
 80008e0:	69ba      	ldr	r2, [r7, #24]
 80008e2:	69fb      	ldr	r3, [r7, #28]
 80008e4:	ee06 0a10 	vmov	s12, r0
 80008e8:	ee06 1a90 	vmov	s13, r1
 80008ec:	ee07 2a10 	vmov	s14, r2
 80008f0:	ee07 3a90 	vmov	s15, r3
}
 80008f4:	eeb0 0a46 	vmov.f32	s0, s12
 80008f8:	eef0 0a66 	vmov.f32	s1, s13
 80008fc:	eeb0 1a47 	vmov.f32	s2, s14
 8000900:	eef0 1a67 	vmov.f32	s3, s15
 8000904:	3720      	adds	r7, #32
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
	...

0800090c <IMU_Sim_Tick_200Hz>:
// simple scripted profile: PAD 2s → POWER 1s → COAST 3s → DESCENT 5s → LANDED
static volatile IMU_Data_t g_latest;
volatile uint32_t t_ms = 0;
static float ground_ft = 0.0f;

void IMU_Sim_Tick_200Hz(void) {
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
  t_ms += 5;
 8000912:	4b47      	ldr	r3, [pc, #284]	@ (8000a30 <IMU_Sim_Tick_200Hz+0x124>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	3305      	adds	r3, #5
 8000918:	4a45      	ldr	r2, [pc, #276]	@ (8000a30 <IMU_Sim_Tick_200Hz+0x124>)
 800091a:	6013      	str	r3, [r2, #0]
  float ax_g = 0.0f, alt_ft = ground_ft;
 800091c:	f04f 0300 	mov.w	r3, #0
 8000920:	607b      	str	r3, [r7, #4]
 8000922:	4b44      	ldr	r3, [pc, #272]	@ (8000a34 <IMU_Sim_Tick_200Hz+0x128>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	603b      	str	r3, [r7, #0]

  if (t_ms < 2000) {                // PAD
 8000928:	4b41      	ldr	r3, [pc, #260]	@ (8000a30 <IMU_Sim_Tick_200Hz+0x124>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000930:	d206      	bcs.n	8000940 <IMU_Sim_Tick_200Hz+0x34>
    ax_g = 0.0f;  alt_ft = ground_ft;
 8000932:	f04f 0300 	mov.w	r3, #0
 8000936:	607b      	str	r3, [r7, #4]
 8000938:	4b3e      	ldr	r3, [pc, #248]	@ (8000a34 <IMU_Sim_Tick_200Hz+0x128>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	603b      	str	r3, [r7, #0]
 800093e:	e063      	b.n	8000a08 <IMU_Sim_Tick_200Hz+0xfc>
  } else if (t_ms < 3000) {         // POWERED
 8000940:	4b3b      	ldr	r3, [pc, #236]	@ (8000a30 <IMU_Sim_Tick_200Hz+0x124>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8000948:	4293      	cmp	r3, r2
 800094a:	d81e      	bhi.n	800098a <IMU_Sim_Tick_200Hz+0x7e>
    ax_g = 2.0f;  alt_ft = ground_ft + 200.0f + 50.0f * ((t_ms-2000)/1000.0f);
 800094c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000950:	607b      	str	r3, [r7, #4]
 8000952:	4b38      	ldr	r3, [pc, #224]	@ (8000a34 <IMU_Sim_Tick_200Hz+0x128>)
 8000954:	edd3 7a00 	vldr	s15, [r3]
 8000958:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8000a38 <IMU_Sim_Tick_200Hz+0x12c>
 800095c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8000960:	4b33      	ldr	r3, [pc, #204]	@ (8000a30 <IMU_Sim_Tick_200Hz+0x124>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8000968:	ee07 3a90 	vmov	s15, r3
 800096c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000970:	ed9f 6a32 	vldr	s12, [pc, #200]	@ 8000a3c <IMU_Sim_Tick_200Hz+0x130>
 8000974:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000978:	eddf 6a31 	vldr	s13, [pc, #196]	@ 8000a40 <IMU_Sim_Tick_200Hz+0x134>
 800097c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000980:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000984:	edc7 7a00 	vstr	s15, [r7]
 8000988:	e03e      	b.n	8000a08 <IMU_Sim_Tick_200Hz+0xfc>
  } else if (t_ms < 6000) {         // UNPOWERED/COAST
 800098a:	4b29      	ldr	r3, [pc, #164]	@ (8000a30 <IMU_Sim_Tick_200Hz+0x124>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	f241 726f 	movw	r2, #5999	@ 0x176f
 8000992:	4293      	cmp	r3, r2
 8000994:	d80c      	bhi.n	80009b0 <IMU_Sim_Tick_200Hz+0xa4>
    ax_g = 0.0f;  alt_ft = ground_ft + 300.0f;
 8000996:	f04f 0300 	mov.w	r3, #0
 800099a:	607b      	str	r3, [r7, #4]
 800099c:	4b25      	ldr	r3, [pc, #148]	@ (8000a34 <IMU_Sim_Tick_200Hz+0x128>)
 800099e:	edd3 7a00 	vldr	s15, [r3]
 80009a2:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8000a44 <IMU_Sim_Tick_200Hz+0x138>
 80009a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80009aa:	edc7 7a00 	vstr	s15, [r7]
 80009ae:	e02b      	b.n	8000a08 <IMU_Sim_Tick_200Hz+0xfc>
  } else if (t_ms < 11000) {        // DESCENT
 80009b0:	4b1f      	ldr	r3, [pc, #124]	@ (8000a30 <IMU_Sim_Tick_200Hz+0x124>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	f642 22f7 	movw	r2, #10999	@ 0x2af7
 80009b8:	4293      	cmp	r3, r2
 80009ba:	d819      	bhi.n	80009f0 <IMU_Sim_Tick_200Hz+0xe4>
    ax_g = -0.2f; alt_ft = ground_ft + 300.0f - 0.05f*(t_ms-6000);
 80009bc:	4b22      	ldr	r3, [pc, #136]	@ (8000a48 <IMU_Sim_Tick_200Hz+0x13c>)
 80009be:	607b      	str	r3, [r7, #4]
 80009c0:	4b1c      	ldr	r3, [pc, #112]	@ (8000a34 <IMU_Sim_Tick_200Hz+0x128>)
 80009c2:	edd3 7a00 	vldr	s15, [r3]
 80009c6:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8000a44 <IMU_Sim_Tick_200Hz+0x138>
 80009ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80009ce:	4b18      	ldr	r3, [pc, #96]	@ (8000a30 <IMU_Sim_Tick_200Hz+0x124>)
 80009d0:	681a      	ldr	r2, [r3, #0]
 80009d2:	4b1e      	ldr	r3, [pc, #120]	@ (8000a4c <IMU_Sim_Tick_200Hz+0x140>)
 80009d4:	4413      	add	r3, r2
 80009d6:	ee07 3a90 	vmov	s15, r3
 80009da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80009de:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 8000a50 <IMU_Sim_Tick_200Hz+0x144>
 80009e2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80009e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80009ea:	edc7 7a00 	vstr	s15, [r7]
 80009ee:	e00b      	b.n	8000a08 <IMU_Sim_Tick_200Hz+0xfc>
  } else {                          // LANDED
    ax_g = 0.0f;  alt_ft = ground_ft + 5.0f;
 80009f0:	f04f 0300 	mov.w	r3, #0
 80009f4:	607b      	str	r3, [r7, #4]
 80009f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000a34 <IMU_Sim_Tick_200Hz+0x128>)
 80009f8:	edd3 7a00 	vldr	s15, [r3]
 80009fc:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8000a00:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000a04:	edc7 7a00 	vstr	s15, [r7]
  }

  g_latest.accelX = ax_g;           // we only use accelX for launch detection in legacy code
 8000a08:	4a12      	ldr	r2, [pc, #72]	@ (8000a54 <IMU_Sim_Tick_200Hz+0x148>)
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	6013      	str	r3, [r2, #0]
  g_latest.accelY = 0.0f;
 8000a0e:	4b11      	ldr	r3, [pc, #68]	@ (8000a54 <IMU_Sim_Tick_200Hz+0x148>)
 8000a10:	f04f 0200 	mov.w	r2, #0
 8000a14:	605a      	str	r2, [r3, #4]
  g_latest.accelZ = 1.0f;           // keep ~1g if you need it later
 8000a16:	4b0f      	ldr	r3, [pc, #60]	@ (8000a54 <IMU_Sim_Tick_200Hz+0x148>)
 8000a18:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000a1c:	609a      	str	r2, [r3, #8]
  g_latest.altitude = alt_ft;
 8000a1e:	4a0d      	ldr	r2, [pc, #52]	@ (8000a54 <IMU_Sim_Tick_200Hz+0x148>)
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	60d3      	str	r3, [r2, #12]
}
 8000a24:	bf00      	nop
 8000a26:	370c      	adds	r7, #12
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr
 8000a30:	2400023c 	.word	0x2400023c
 8000a34:	24000240 	.word	0x24000240
 8000a38:	43480000 	.word	0x43480000
 8000a3c:	447a0000 	.word	0x447a0000
 8000a40:	42480000 	.word	0x42480000
 8000a44:	43960000 	.word	0x43960000
 8000a48:	be4ccccd 	.word	0xbe4ccccd
 8000a4c:	ffffe890 	.word	0xffffe890
 8000a50:	3d4ccccd 	.word	0x3d4ccccd
 8000a54:	2400022c 	.word	0x2400022c

08000a58 <IMU_Sim_CalculateGroundAltitude>:

float IMU_Sim_CalculateGroundAltitude(void) { ground_ft = 500.0f; return ground_ft; }
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	4b06      	ldr	r3, [pc, #24]	@ (8000a78 <IMU_Sim_CalculateGroundAltitude+0x20>)
 8000a5e:	4a07      	ldr	r2, [pc, #28]	@ (8000a7c <IMU_Sim_CalculateGroundAltitude+0x24>)
 8000a60:	601a      	str	r2, [r3, #0]
 8000a62:	4b05      	ldr	r3, [pc, #20]	@ (8000a78 <IMU_Sim_CalculateGroundAltitude+0x20>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	ee07 3a90 	vmov	s15, r3
 8000a6a:	eeb0 0a67 	vmov.f32	s0, s15
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	24000240 	.word	0x24000240
 8000a7c:	43fa0000 	.word	0x43fa0000

08000a80 <IMU_Sim_GetLatestData>:
IMU_Data_t IMU_Sim_GetLatestData(void) { return g_latest; }
 8000a80:	b490      	push	{r4, r7}
 8000a82:	b088      	sub	sp, #32
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	4b0f      	ldr	r3, [pc, #60]	@ (8000ac4 <IMU_Sim_GetLatestData+0x44>)
 8000a88:	f107 0410 	add.w	r4, r7, #16
 8000a8c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a8e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000a92:	6938      	ldr	r0, [r7, #16]
 8000a94:	6979      	ldr	r1, [r7, #20]
 8000a96:	69ba      	ldr	r2, [r7, #24]
 8000a98:	69fb      	ldr	r3, [r7, #28]
 8000a9a:	ee06 0a10 	vmov	s12, r0
 8000a9e:	ee06 1a90 	vmov	s13, r1
 8000aa2:	ee07 2a10 	vmov	s14, r2
 8000aa6:	ee07 3a90 	vmov	s15, r3
 8000aaa:	eeb0 0a46 	vmov.f32	s0, s12
 8000aae:	eef0 0a66 	vmov.f32	s1, s13
 8000ab2:	eeb0 1a47 	vmov.f32	s2, s14
 8000ab6:	eef0 1a67 	vmov.f32	s3, s15
 8000aba:	3720      	adds	r7, #32
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bc90      	pop	{r4, r7}
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	2400022c 	.word	0x2400022c

08000ac8 <KalmanFilter_Update>:
 */


#include "kalman.h"
static float prev_alt = 0.0f;
void KalmanFilter_Update(float z, float* zf, float* vf) {
 8000ac8:	b480      	push	{r7}
 8000aca:	b085      	sub	sp, #20
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	ed87 0a03 	vstr	s0, [r7, #12]
 8000ad2:	60b8      	str	r0, [r7, #8]
 8000ad4:	6079      	str	r1, [r7, #4]
  static int first = 1;
  if (first) { prev_alt = z; first = 0; }
 8000ad6:	4b19      	ldr	r3, [pc, #100]	@ (8000b3c <KalmanFilter_Update+0x74>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d005      	beq.n	8000aea <KalmanFilter_Update+0x22>
 8000ade:	4a18      	ldr	r2, [pc, #96]	@ (8000b40 <KalmanFilter_Update+0x78>)
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	6013      	str	r3, [r2, #0]
 8000ae4:	4b15      	ldr	r3, [pc, #84]	@ (8000b3c <KalmanFilter_Update+0x74>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	601a      	str	r2, [r3, #0]
  *zf = 0.8f*prev_alt + 0.2f*z;      // light LPF
 8000aea:	4b15      	ldr	r3, [pc, #84]	@ (8000b40 <KalmanFilter_Update+0x78>)
 8000aec:	edd3 7a00 	vldr	s15, [r3]
 8000af0:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8000b44 <KalmanFilter_Update+0x7c>
 8000af4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000af8:	edd7 7a03 	vldr	s15, [r7, #12]
 8000afc:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8000b48 <KalmanFilter_Update+0x80>
 8000b00:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000b04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	edc3 7a00 	vstr	s15, [r3]
  *vf = (z - prev_alt) * 6.5617f;     // fake “ft/s” from delta(ft)/0.05s (≈ *20), scaled a bit calmer
 8000b0e:	4b0c      	ldr	r3, [pc, #48]	@ (8000b40 <KalmanFilter_Update+0x78>)
 8000b10:	edd3 7a00 	vldr	s15, [r3]
 8000b14:	ed97 7a03 	vldr	s14, [r7, #12]
 8000b18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b1c:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8000b4c <KalmanFilter_Update+0x84>
 8000b20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	edc3 7a00 	vstr	s15, [r3]
  prev_alt = z;
 8000b2a:	4a05      	ldr	r2, [pc, #20]	@ (8000b40 <KalmanFilter_Update+0x78>)
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	6013      	str	r3, [r2, #0]
}
 8000b30:	bf00      	nop
 8000b32:	3714      	adds	r7, #20
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr
 8000b3c:	24000000 	.word	0x24000000
 8000b40:	24000244 	.word	0x24000244
 8000b44:	3f4ccccd 	.word	0x3f4ccccd
 8000b48:	3e4ccccd 	.word	0x3e4ccccd
 8000b4c:	40d1f972 	.word	0x40d1f972

08000b50 <PrintState>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// UART print of state transitions using printf routed to COM1 by BSP
static void PrintState(FlightState_t s) {
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	4603      	mov	r3, r0
 8000b58:	71fb      	strb	r3, [r7, #7]
	const char *name = "UNK";
 8000b5a:	4b15      	ldr	r3, [pc, #84]	@ (8000bb0 <PrintState+0x60>)
 8000b5c:	60fb      	str	r3, [r7, #12]
	switch (s) {
 8000b5e:	79fb      	ldrb	r3, [r7, #7]
 8000b60:	2b04      	cmp	r3, #4
 8000b62:	d81c      	bhi.n	8000b9e <PrintState+0x4e>
 8000b64:	a201      	add	r2, pc, #4	@ (adr r2, 8000b6c <PrintState+0x1c>)
 8000b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b6a:	bf00      	nop
 8000b6c:	08000b81 	.word	0x08000b81
 8000b70:	08000b87 	.word	0x08000b87
 8000b74:	08000b8d 	.word	0x08000b8d
 8000b78:	08000b93 	.word	0x08000b93
 8000b7c:	08000b99 	.word	0x08000b99
	case FLIGHT_STATE_GROUND_IDLE:
		name = "GROUND";
 8000b80:	4b0c      	ldr	r3, [pc, #48]	@ (8000bb4 <PrintState+0x64>)
 8000b82:	60fb      	str	r3, [r7, #12]
		break;
 8000b84:	e00c      	b.n	8000ba0 <PrintState+0x50>
	case FLIGHT_STATE_POWERED_FLIGHT:
		name = "POWERED";
 8000b86:	4b0c      	ldr	r3, [pc, #48]	@ (8000bb8 <PrintState+0x68>)
 8000b88:	60fb      	str	r3, [r7, #12]
		break;
 8000b8a:	e009      	b.n	8000ba0 <PrintState+0x50>
	case FLIGHT_STATE_UNPOWERED_FLIGHT:
		name = "UNPOWERED";
 8000b8c:	4b0b      	ldr	r3, [pc, #44]	@ (8000bbc <PrintState+0x6c>)
 8000b8e:	60fb      	str	r3, [r7, #12]
		break;
 8000b90:	e006      	b.n	8000ba0 <PrintState+0x50>
	case FLIGHT_STATE_DESCENT:
		name = "DESCENT";
 8000b92:	4b0b      	ldr	r3, [pc, #44]	@ (8000bc0 <PrintState+0x70>)
 8000b94:	60fb      	str	r3, [r7, #12]
		break;
 8000b96:	e003      	b.n	8000ba0 <PrintState+0x50>
	case FLIGHT_STATE_LANDED:
		name = "LANDED";
 8000b98:	4b0a      	ldr	r3, [pc, #40]	@ (8000bc4 <PrintState+0x74>)
 8000b9a:	60fb      	str	r3, [r7, #12]
		break;
 8000b9c:	e000      	b.n	8000ba0 <PrintState+0x50>
	default:
		break;
 8000b9e:	bf00      	nop
	}
	printf("STATE -> %s\r\n", name);
 8000ba0:	68f9      	ldr	r1, [r7, #12]
 8000ba2:	4809      	ldr	r0, [pc, #36]	@ (8000bc8 <PrintState+0x78>)
 8000ba4:	f006 fc24 	bl	80073f0 <iprintf>
}
 8000ba8:	bf00      	nop
 8000baa:	3710      	adds	r7, #16
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	080092d8 	.word	0x080092d8
 8000bb4:	080092dc 	.word	0x080092dc
 8000bb8:	080092e4 	.word	0x080092e4
 8000bbc:	080092ec 	.word	0x080092ec
 8000bc0:	080092f8 	.word	0x080092f8
 8000bc4:	08009300 	.word	0x08009300
 8000bc8:	08009308 	.word	0x08009308

08000bcc <PrintIMUData>:

// Printing IMU data
static void PrintIMUData(IMU_Data_t data) {
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b08a      	sub	sp, #40	@ 0x28
 8000bd0:	af06      	add	r7, sp, #24
 8000bd2:	eeb0 6a40 	vmov.f32	s12, s0
 8000bd6:	eef0 6a60 	vmov.f32	s13, s1
 8000bda:	eeb0 7a41 	vmov.f32	s14, s2
 8000bde:	eef0 7a61 	vmov.f32	s15, s3
 8000be2:	ed87 6a00 	vstr	s12, [r7]
 8000be6:	edc7 6a01 	vstr	s13, [r7, #4]
 8000bea:	ed87 7a02 	vstr	s14, [r7, #8]
 8000bee:	edc7 7a03 	vstr	s15, [r7, #12]
	printf("IMU: accel=%.2f,%.2f,%.2f g alt=%.1f ft\r\n", data.accelX,
 8000bf2:	edd7 7a00 	vldr	s15, [r7]
 8000bf6:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
			data.accelY, data.accelZ, data.altitude);
 8000bfa:	edd7 7a01 	vldr	s15, [r7, #4]
	printf("IMU: accel=%.2f,%.2f,%.2f g alt=%.1f ft\r\n", data.accelX,
 8000bfe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
			data.accelY, data.accelZ, data.altitude);
 8000c02:	edd7 6a02 	vldr	s13, [r7, #8]
	printf("IMU: accel=%.2f,%.2f,%.2f g alt=%.1f ft\r\n", data.accelX,
 8000c06:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
			data.accelY, data.accelZ, data.altitude);
 8000c0a:	edd7 5a03 	vldr	s11, [r7, #12]
	printf("IMU: accel=%.2f,%.2f,%.2f g alt=%.1f ft\r\n", data.accelX,
 8000c0e:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 8000c12:	ed8d 5b04 	vstr	d5, [sp, #16]
 8000c16:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000c1a:	ed8d 7b00 	vstr	d7, [sp]
 8000c1e:	ec53 2b14 	vmov	r2, r3, d4
 8000c22:	4803      	ldr	r0, [pc, #12]	@ (8000c30 <PrintIMUData+0x64>)
 8000c24:	f006 fbe4 	bl	80073f0 <iprintf>
}
 8000c28:	bf00      	nop
 8000c2a:	3710      	adds	r7, #16
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	08009318 	.word	0x08009318

08000c34 <DriveStateLED>:

// Simple visual LED mapping per state (uses Nucleo BSP LEDs)
static void DriveStateLED(FlightState_t s) {
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	71fb      	strb	r3, [r7, #7]
	static uint32_t last_toggle_ms = 0;
	uint32_t now = HAL_GetTick();
 8000c3e:	f001 f85d 	bl	8001cfc <HAL_GetTick>
 8000c42:	60f8      	str	r0, [r7, #12]

	// Example mapping:
	// GREEN for “active flight”, BLUE for descent modes, RED for LANDED solid
	switch (s) {
 8000c44:	79fb      	ldrb	r3, [r7, #7]
 8000c46:	2b04      	cmp	r3, #4
 8000c48:	d851      	bhi.n	8000cee <DriveStateLED+0xba>
 8000c4a:	a201      	add	r2, pc, #4	@ (adr r2, 8000c50 <DriveStateLED+0x1c>)
 8000c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c50:	08000c65 	.word	0x08000c65
 8000c54:	08000c79 	.word	0x08000c79
 8000c58:	08000c9f 	.word	0x08000c9f
 8000c5c:	08000cb3 	.word	0x08000cb3
 8000c60:	08000cdb 	.word	0x08000cdb
	case FLIGHT_STATE_GROUND_IDLE:
		BSP_LED_Off(LED_GREEN);
 8000c64:	2000      	movs	r0, #0
 8000c66:	f000 fe43 	bl	80018f0 <BSP_LED_Off>
		BSP_LED_Off(LED_BLUE);
 8000c6a:	2001      	movs	r0, #1
 8000c6c:	f000 fe40 	bl	80018f0 <BSP_LED_Off>
		BSP_LED_Off(LED_RED);
 8000c70:	2002      	movs	r0, #2
 8000c72:	f000 fe3d 	bl	80018f0 <BSP_LED_Off>
		break;
 8000c76:	e03a      	b.n	8000cee <DriveStateLED+0xba>

	case FLIGHT_STATE_POWERED_FLIGHT:
		if (now - last_toggle_ms > 100) {
 8000c78:	4b1f      	ldr	r3, [pc, #124]	@ (8000cf8 <DriveStateLED+0xc4>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	68fa      	ldr	r2, [r7, #12]
 8000c7e:	1ad3      	subs	r3, r2, r3
 8000c80:	2b64      	cmp	r3, #100	@ 0x64
 8000c82:	d905      	bls.n	8000c90 <DriveStateLED+0x5c>
			BSP_LED_Toggle(LED_GREEN);
 8000c84:	2000      	movs	r0, #0
 8000c86:	f000 fe5d 	bl	8001944 <BSP_LED_Toggle>
			last_toggle_ms = now;
 8000c8a:	4a1b      	ldr	r2, [pc, #108]	@ (8000cf8 <DriveStateLED+0xc4>)
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	6013      	str	r3, [r2, #0]
		}
		BSP_LED_Off(LED_BLUE);
 8000c90:	2001      	movs	r0, #1
 8000c92:	f000 fe2d 	bl	80018f0 <BSP_LED_Off>
		BSP_LED_Off(LED_RED);
 8000c96:	2002      	movs	r0, #2
 8000c98:	f000 fe2a 	bl	80018f0 <BSP_LED_Off>
		break;
 8000c9c:	e027      	b.n	8000cee <DriveStateLED+0xba>

	case FLIGHT_STATE_UNPOWERED_FLIGHT:
		BSP_LED_On(LED_GREEN);
 8000c9e:	2000      	movs	r0, #0
 8000ca0:	f000 fdfc 	bl	800189c <BSP_LED_On>
		BSP_LED_Off(LED_BLUE);
 8000ca4:	2001      	movs	r0, #1
 8000ca6:	f000 fe23 	bl	80018f0 <BSP_LED_Off>
		BSP_LED_Off(LED_RED);
 8000caa:	2002      	movs	r0, #2
 8000cac:	f000 fe20 	bl	80018f0 <BSP_LED_Off>
		break;
 8000cb0:	e01d      	b.n	8000cee <DriveStateLED+0xba>

	case FLIGHT_STATE_DESCENT:
		if (now - last_toggle_ms > 600) {
 8000cb2:	4b11      	ldr	r3, [pc, #68]	@ (8000cf8 <DriveStateLED+0xc4>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	68fa      	ldr	r2, [r7, #12]
 8000cb8:	1ad3      	subs	r3, r2, r3
 8000cba:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8000cbe:	d905      	bls.n	8000ccc <DriveStateLED+0x98>
			BSP_LED_Toggle(LED_BLUE);
 8000cc0:	2001      	movs	r0, #1
 8000cc2:	f000 fe3f 	bl	8001944 <BSP_LED_Toggle>
			last_toggle_ms = now;
 8000cc6:	4a0c      	ldr	r2, [pc, #48]	@ (8000cf8 <DriveStateLED+0xc4>)
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	6013      	str	r3, [r2, #0]
		}
		BSP_LED_Off(LED_GREEN);
 8000ccc:	2000      	movs	r0, #0
 8000cce:	f000 fe0f 	bl	80018f0 <BSP_LED_Off>
		BSP_LED_Off(LED_RED);
 8000cd2:	2002      	movs	r0, #2
 8000cd4:	f000 fe0c 	bl	80018f0 <BSP_LED_Off>
		break;
 8000cd8:	e009      	b.n	8000cee <DriveStateLED+0xba>

	case FLIGHT_STATE_LANDED:
		BSP_LED_Off(LED_GREEN);
 8000cda:	2000      	movs	r0, #0
 8000cdc:	f000 fe08 	bl	80018f0 <BSP_LED_Off>
		BSP_LED_Off(LED_BLUE);
 8000ce0:	2001      	movs	r0, #1
 8000ce2:	f000 fe05 	bl	80018f0 <BSP_LED_Off>
		BSP_LED_On(LED_RED);
 8000ce6:	2002      	movs	r0, #2
 8000ce8:	f000 fdd8 	bl	800189c <BSP_LED_On>
		break;
 8000cec:	bf00      	nop
	}
}
 8000cee:	bf00      	nop
 8000cf0:	3710      	adds	r7, #16
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	24000344 	.word	0x24000344

08000cfc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b086      	sub	sp, #24
 8000d00:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000d02:	f000 ffab 	bl	8001c5c <HAL_Init>
	/* USER CODE BEGIN Init */
	// (nothing needed here)
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000d06:	f000 f8e9 	bl	8000edc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */
	// (nothing needed here)
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000d0a:	f000 f9d3 	bl	80010b4 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000d0e:	f000 f985 	bl	800101c <MX_USART2_UART_Init>
	MX_TIM7_Init();
 8000d12:	f000 f94d 	bl	8000fb0 <MX_TIM7_Init>
	/* USER CODE BEGIN 2 */

	// Initialize legacy flight state machine; it will call IMU_CalculateGroundAltitude()
	FlightState_Init();
 8000d16:	f7ff fcd1 	bl	80006bc <FlightState_Init>
	// Record initial state for transition prints
	g_last_state = FlightState_GetCurrent();
 8000d1a:	f7ff fdb5 	bl	8000888 <FlightState_GetCurrent>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	461a      	mov	r2, r3
 8000d22:	4b63      	ldr	r3, [pc, #396]	@ (8000eb0 <main+0x1b4>)
 8000d24:	701a      	strb	r2, [r3, #0]
	PrintState(g_last_state);
 8000d26:	4b62      	ldr	r3, [pc, #392]	@ (8000eb0 <main+0x1b4>)
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff ff10 	bl	8000b50 <PrintState>
	/* USER CODE END 2 */

	/* USER CODE BEGIN BSP */

	/* Initialize leds */
	BSP_LED_Init(LED_GREEN);
 8000d30:	2000      	movs	r0, #0
 8000d32:	f000 fd3d 	bl	80017b0 <BSP_LED_Init>
	BSP_LED_Init(LED_BLUE);
 8000d36:	2001      	movs	r0, #1
 8000d38:	f000 fd3a 	bl	80017b0 <BSP_LED_Init>
	BSP_LED_Init(LED_RED);
 8000d3c:	2002      	movs	r0, #2
 8000d3e:	f000 fd37 	bl	80017b0 <BSP_LED_Init>

	/* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
	BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000d42:	2101      	movs	r1, #1
 8000d44:	2000      	movs	r0, #0
 8000d46:	f000 fe27 	bl	8001998 <BSP_PB_Init>

	/* Initialize COM1 port so that it can be used with PuTTy (115200, 8 bits (7-bit data + 1 stop bit), no parity */
	BspCOMInit.BaudRate = 115200;
 8000d4a:	4b5a      	ldr	r3, [pc, #360]	@ (8000eb4 <main+0x1b8>)
 8000d4c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d50:	601a      	str	r2, [r3, #0]
	BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000d52:	4b58      	ldr	r3, [pc, #352]	@ (8000eb4 <main+0x1b8>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	605a      	str	r2, [r3, #4]
	BspCOMInit.StopBits = COM_STOPBITS_1;
 8000d58:	4b56      	ldr	r3, [pc, #344]	@ (8000eb4 <main+0x1b8>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	811a      	strh	r2, [r3, #8]
	BspCOMInit.Parity = COM_PARITY_NONE;
 8000d5e:	4b55      	ldr	r3, [pc, #340]	@ (8000eb4 <main+0x1b8>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	815a      	strh	r2, [r3, #10]
	BspCOMInit.HwFlowCtl = COM_HWCONTROL_NONE;
 8000d64:	4b53      	ldr	r3, [pc, #332]	@ (8000eb4 <main+0x1b8>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	819a      	strh	r2, [r3, #12]
	if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE) {
 8000d6a:	4952      	ldr	r1, [pc, #328]	@ (8000eb4 <main+0x1b8>)
 8000d6c:	2000      	movs	r0, #0
 8000d6e:	f000 fe97 	bl	8001aa0 <BSP_COM_Init>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <main+0x80>
		Error_Handler();
 8000d78:	f000 fa08 	bl	800118c <Error_Handler>
	}

	/* -- Sample board code to send message over COM1 port ---- */
	printf("\r\n\r\n*** IMU Simulator & Flight State Demo ***\r\n");
 8000d7c:	484e      	ldr	r0, [pc, #312]	@ (8000eb8 <main+0x1bc>)
 8000d7e:	f006 fb9f 	bl	80074c0 <puts>
	printf("Press USER button to start/stop simulation\r\n");
 8000d82:	484e      	ldr	r0, [pc, #312]	@ (8000ebc <main+0x1c0>)
 8000d84:	f006 fb9c 	bl	80074c0 <puts>

	/* -- Sample board code to switch on leds ---- */
	BSP_LED_On(LED_GREEN);
 8000d88:	2000      	movs	r0, #0
 8000d8a:	f000 fd87 	bl	800189c <BSP_LED_On>
	BSP_LED_On(LED_BLUE);
 8000d8e:	2001      	movs	r0, #1
 8000d90:	f000 fd84 	bl	800189c <BSP_LED_On>
	BSP_LED_On(LED_RED);
 8000d94:	2002      	movs	r0, #2
 8000d96:	f000 fd81 	bl	800189c <BSP_LED_On>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		/* -- Sample board code for User push-button in interrupt mode ---- */
		if (BspButtonState == BUTTON_PRESSED) {
 8000d9a:	4b49      	ldr	r3, [pc, #292]	@ (8000ec0 <main+0x1c4>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d132      	bne.n	8000e08 <main+0x10c>
			/* Update button state */
			BspButtonState = BUTTON_RELEASED;
 8000da2:	4b47      	ldr	r3, [pc, #284]	@ (8000ec0 <main+0x1c4>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]

			/* Toggle Simulated IMU */
			simulation_active = !simulation_active;
 8000da8:	4b46      	ldr	r3, [pc, #280]	@ (8000ec4 <main+0x1c8>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	bf0c      	ite	eq
 8000db2:	2301      	moveq	r3, #1
 8000db4:	2300      	movne	r3, #0
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	461a      	mov	r2, r3
 8000dba:	4b42      	ldr	r3, [pc, #264]	@ (8000ec4 <main+0x1c8>)
 8000dbc:	701a      	strb	r2, [r3, #0]

			if (simulation_active) {
 8000dbe:	4b41      	ldr	r3, [pc, #260]	@ (8000ec4 <main+0x1c8>)
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d013      	beq.n	8000df0 <main+0xf4>
				printf("\r\n *** SIMULATION STARTED ***\r\n");
 8000dc8:	483f      	ldr	r0, [pc, #252]	@ (8000ec8 <main+0x1cc>)
 8000dca:	f006 fb79 	bl	80074c0 <puts>
				extern volatile uint32_t t_ms;
				t_ms = 0;
 8000dce:	4b3f      	ldr	r3, [pc, #252]	@ (8000ecc <main+0x1d0>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
				/* Reset flight state */
				FlightState_Init();
 8000dd4:	f7ff fc72 	bl	80006bc <FlightState_Init>
				g_last_state = FlightState_GetCurrent();
 8000dd8:	f7ff fd56 	bl	8000888 <FlightState_GetCurrent>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	461a      	mov	r2, r3
 8000de0:	4b33      	ldr	r3, [pc, #204]	@ (8000eb0 <main+0x1b4>)
 8000de2:	701a      	strb	r2, [r3, #0]
				PrintState(g_last_state);
 8000de4:	4b32      	ldr	r3, [pc, #200]	@ (8000eb0 <main+0x1b4>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff feb1 	bl	8000b50 <PrintState>
 8000dee:	e00b      	b.n	8000e08 <main+0x10c>
			} else {
				printf("\r\n*** SIMULATION STOPPED ***\r\n");
 8000df0:	4837      	ldr	r0, [pc, #220]	@ (8000ed0 <main+0x1d4>)
 8000df2:	f006 fb65 	bl	80074c0 <puts>
				/* Turn off all LEDs when simulation stops */
				BSP_LED_Off(LED_GREEN);
 8000df6:	2000      	movs	r0, #0
 8000df8:	f000 fd7a 	bl	80018f0 <BSP_LED_Off>
				BSP_LED_Off(LED_BLUE);
 8000dfc:	2001      	movs	r0, #1
 8000dfe:	f000 fd77 	bl	80018f0 <BSP_LED_Off>
				BSP_LED_Off(LED_RED);
 8000e02:	2002      	movs	r0, #2
 8000e04:	f000 fd74 	bl	80018f0 <BSP_LED_Off>
			}
		}

		/* USER CODE BEGIN 3 */
		// ---- SUPERLOOP: run legacy state update at 200 Hz when the TIM7 flag is set ----
		if (g_state_tick && simulation_active) {
 8000e08:	4b32      	ldr	r3, [pc, #200]	@ (8000ed4 <main+0x1d8>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d0c3      	beq.n	8000d9a <main+0x9e>
 8000e12:	4b2c      	ldr	r3, [pc, #176]	@ (8000ec4 <main+0x1c8>)
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d0be      	beq.n	8000d9a <main+0x9e>
			g_state_tick = 0;
 8000e1c:	4b2d      	ldr	r3, [pc, #180]	@ (8000ed4 <main+0x1d8>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	701a      	strb	r2, [r3, #0]

			// Run your legacy state machine once per tick.
			FlightState_Update();
 8000e22:	f7ff fc5d 	bl	80006e0 <FlightState_Update>

			// If state changed, print and update LED pattern
			FlightState_t now = FlightState_GetCurrent();
 8000e26:	f7ff fd2f 	bl	8000888 <FlightState_GetCurrent>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	75fb      	strb	r3, [r7, #23]
			if (now != g_last_state) {
 8000e2e:	4b20      	ldr	r3, [pc, #128]	@ (8000eb0 <main+0x1b4>)
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	7dfa      	ldrb	r2, [r7, #23]
 8000e34:	429a      	cmp	r2, r3
 8000e36:	d006      	beq.n	8000e46 <main+0x14a>
				PrintState(now);
 8000e38:	7dfb      	ldrb	r3, [r7, #23]
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f7ff fe88 	bl	8000b50 <PrintState>
				g_last_state = now;
 8000e40:	4a1b      	ldr	r2, [pc, #108]	@ (8000eb0 <main+0x1b4>)
 8000e42:	7dfb      	ldrb	r3, [r7, #23]
 8000e44:	7013      	strb	r3, [r2, #0]
			}
			DriveStateLED(now);
 8000e46:	7dfb      	ldrb	r3, [r7, #23]
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f7ff fef3 	bl	8000c34 <DriveStateLED>

			print_counter++;
 8000e4e:	4b22      	ldr	r3, [pc, #136]	@ (8000ed8 <main+0x1dc>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	3301      	adds	r3, #1
 8000e54:	4a20      	ldr	r2, [pc, #128]	@ (8000ed8 <main+0x1dc>)
 8000e56:	6013      	str	r3, [r2, #0]
			if (print_counter >= 20) {
 8000e58:	4b1f      	ldr	r3, [pc, #124]	@ (8000ed8 <main+0x1dc>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	2b13      	cmp	r3, #19
 8000e5e:	d99c      	bls.n	8000d9a <main+0x9e>
				IMU_Data_t imu_data = IMU_GetLatestData();
 8000e60:	f7ff fd27 	bl	80008b2 <IMU_GetLatestData>
 8000e64:	eeb0 6a40 	vmov.f32	s12, s0
 8000e68:	eef0 6a60 	vmov.f32	s13, s1
 8000e6c:	eeb0 7a41 	vmov.f32	s14, s2
 8000e70:	eef0 7a61 	vmov.f32	s15, s3
 8000e74:	ed87 6a01 	vstr	s12, [r7, #4]
 8000e78:	edc7 6a02 	vstr	s13, [r7, #8]
 8000e7c:	ed87 7a03 	vstr	s14, [r7, #12]
 8000e80:	edc7 7a04 	vstr	s15, [r7, #16]
				PrintIMUData(imu_data);
 8000e84:	ed97 6a01 	vldr	s12, [r7, #4]
 8000e88:	edd7 6a02 	vldr	s13, [r7, #8]
 8000e8c:	ed97 7a03 	vldr	s14, [r7, #12]
 8000e90:	edd7 7a04 	vldr	s15, [r7, #16]
 8000e94:	eeb0 0a46 	vmov.f32	s0, s12
 8000e98:	eef0 0a66 	vmov.f32	s1, s13
 8000e9c:	eeb0 1a47 	vmov.f32	s2, s14
 8000ea0:	eef0 1a67 	vmov.f32	s3, s15
 8000ea4:	f7ff fe92 	bl	8000bcc <PrintIMUData>
				print_counter = 0;
 8000ea8:	4b0b      	ldr	r3, [pc, #44]	@ (8000ed8 <main+0x1dc>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]
		if (BspButtonState == BUTTON_PRESSED) {
 8000eae:	e774      	b.n	8000d9a <main+0x9e>
 8000eb0:	2400033d 	.word	0x2400033d
 8000eb4:	24000248 	.word	0x24000248
 8000eb8:	08009344 	.word	0x08009344
 8000ebc:	08009374 	.word	0x08009374
 8000ec0:	24000258 	.word	0x24000258
 8000ec4:	2400033e 	.word	0x2400033e
 8000ec8:	080093a0 	.word	0x080093a0
 8000ecc:	2400023c 	.word	0x2400023c
 8000ed0:	080093c0 	.word	0x080093c0
 8000ed4:	2400033c 	.word	0x2400033c
 8000ed8:	24000340 	.word	0x24000340

08000edc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b09c      	sub	sp, #112	@ 0x70
 8000ee0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000ee2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ee6:	224c      	movs	r2, #76	@ 0x4c
 8000ee8:	2100      	movs	r1, #0
 8000eea:	4618      	mov	r0, r3
 8000eec:	f006 fbc8 	bl	8007680 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000ef0:	1d3b      	adds	r3, r7, #4
 8000ef2:	2220      	movs	r2, #32
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f006 fbc2 	bl	8007680 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000efc:	2002      	movs	r0, #2
 8000efe:	f001 fa3d 	bl	800237c <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f02:	2300      	movs	r3, #0
 8000f04:	603b      	str	r3, [r7, #0]
 8000f06:	4b28      	ldr	r3, [pc, #160]	@ (8000fa8 <SystemClock_Config+0xcc>)
 8000f08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f0a:	4a27      	ldr	r2, [pc, #156]	@ (8000fa8 <SystemClock_Config+0xcc>)
 8000f0c:	f023 0301 	bic.w	r3, r3, #1
 8000f10:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000f12:	4b25      	ldr	r3, [pc, #148]	@ (8000fa8 <SystemClock_Config+0xcc>)
 8000f14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f16:	f003 0301 	and.w	r3, r3, #1
 8000f1a:	603b      	str	r3, [r7, #0]
 8000f1c:	4b23      	ldr	r3, [pc, #140]	@ (8000fac <SystemClock_Config+0xd0>)
 8000f1e:	699b      	ldr	r3, [r3, #24]
 8000f20:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000f24:	4a21      	ldr	r2, [pc, #132]	@ (8000fac <SystemClock_Config+0xd0>)
 8000f26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000f2a:	6193      	str	r3, [r2, #24]
 8000f2c:	4b1f      	ldr	r3, [pc, #124]	@ (8000fac <SystemClock_Config+0xd0>)
 8000f2e:	699b      	ldr	r3, [r3, #24]
 8000f30:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f34:	603b      	str	r3, [r7, #0]
 8000f36:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 8000f38:	bf00      	nop
 8000f3a:	4b1c      	ldr	r3, [pc, #112]	@ (8000fac <SystemClock_Config+0xd0>)
 8000f3c:	699b      	ldr	r3, [r3, #24]
 8000f3e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000f46:	d1f8      	bne.n	8000f3a <SystemClock_Config+0x5e>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f48:	2302      	movs	r3, #2
 8000f4a:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f50:	2340      	movs	r3, #64	@ 0x40
 8000f52:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f54:	2300      	movs	r3, #0
 8000f56:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000f58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f001 fa47 	bl	80023f0 <HAL_RCC_OscConfig>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <SystemClock_Config+0x90>
		Error_Handler();
 8000f68:	f000 f910 	bl	800118c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000f6c:	233f      	movs	r3, #63	@ 0x3f
 8000f6e:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f70:	2300      	movs	r3, #0
 8000f72:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000f74:	2300      	movs	r3, #0
 8000f76:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000f80:	2300      	movs	r3, #0
 8000f82:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000f84:	2300      	movs	r3, #0
 8000f86:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8000f8c:	1d3b      	adds	r3, r7, #4
 8000f8e:	2101      	movs	r1, #1
 8000f90:	4618      	mov	r0, r3
 8000f92:	f001 fe87 	bl	8002ca4 <HAL_RCC_ClockConfig>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <SystemClock_Config+0xc4>
		Error_Handler();
 8000f9c:	f000 f8f6 	bl	800118c <Error_Handler>
	}
}
 8000fa0:	bf00      	nop
 8000fa2:	3770      	adds	r7, #112	@ 0x70
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	58000400 	.word	0x58000400
 8000fac:	58024800 	.word	0x58024800

08000fb0 <MX_TIM7_Init>:
/**
 * @brief TIM7 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM7_Init(void) {
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM7_Init 0 */

	/* USER CODE END TIM7_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000fb6:	1d3b      	adds	r3, r7, #4
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM7_Init 1 */

	/* USER CODE END TIM7_Init 1 */
	htim7.Instance = TIM7;
 8000fc0:	4b14      	ldr	r3, [pc, #80]	@ (8001014 <MX_TIM7_Init+0x64>)
 8000fc2:	4a15      	ldr	r2, [pc, #84]	@ (8001018 <MX_TIM7_Init+0x68>)
 8000fc4:	601a      	str	r2, [r3, #0]
	htim7.Init.Prescaler = 0;
 8000fc6:	4b13      	ldr	r3, [pc, #76]	@ (8001014 <MX_TIM7_Init+0x64>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	605a      	str	r2, [r3, #4]
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fcc:	4b11      	ldr	r3, [pc, #68]	@ (8001014 <MX_TIM7_Init+0x64>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	609a      	str	r2, [r3, #8]
	htim7.Init.Period = 65535;
 8000fd2:	4b10      	ldr	r3, [pc, #64]	@ (8001014 <MX_TIM7_Init+0x64>)
 8000fd4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000fd8:	60da      	str	r2, [r3, #12]
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fda:	4b0e      	ldr	r3, [pc, #56]	@ (8001014 <MX_TIM7_Init+0x64>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK) {
 8000fe0:	480c      	ldr	r0, [pc, #48]	@ (8001014 <MX_TIM7_Init+0x64>)
 8000fe2:	f004 f859 	bl	8005098 <HAL_TIM_Base_Init>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_TIM7_Init+0x40>
		Error_Handler();
 8000fec:	f000 f8ce 	bl	800118c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig)
 8000ff8:	1d3b      	adds	r3, r7, #4
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4805      	ldr	r0, [pc, #20]	@ (8001014 <MX_TIM7_Init+0x64>)
 8000ffe:	f004 faeb 	bl	80055d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <MX_TIM7_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8001008:	f000 f8c0 	bl	800118c <Error_Handler>
	}
	/* USER CODE BEGIN TIM7_Init 2 */

	/* USER CODE END TIM7_Init 2 */

}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	2400025c 	.word	0x2400025c
 8001018:	40001400 	.word	0x40001400

0800101c <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001020:	4b22      	ldr	r3, [pc, #136]	@ (80010ac <MX_USART2_UART_Init+0x90>)
 8001022:	4a23      	ldr	r2, [pc, #140]	@ (80010b0 <MX_USART2_UART_Init+0x94>)
 8001024:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001026:	4b21      	ldr	r3, [pc, #132]	@ (80010ac <MX_USART2_UART_Init+0x90>)
 8001028:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800102c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800102e:	4b1f      	ldr	r3, [pc, #124]	@ (80010ac <MX_USART2_UART_Init+0x90>)
 8001030:	2200      	movs	r2, #0
 8001032:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001034:	4b1d      	ldr	r3, [pc, #116]	@ (80010ac <MX_USART2_UART_Init+0x90>)
 8001036:	2200      	movs	r2, #0
 8001038:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800103a:	4b1c      	ldr	r3, [pc, #112]	@ (80010ac <MX_USART2_UART_Init+0x90>)
 800103c:	2200      	movs	r2, #0
 800103e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001040:	4b1a      	ldr	r3, [pc, #104]	@ (80010ac <MX_USART2_UART_Init+0x90>)
 8001042:	220c      	movs	r2, #12
 8001044:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001046:	4b19      	ldr	r3, [pc, #100]	@ (80010ac <MX_USART2_UART_Init+0x90>)
 8001048:	2200      	movs	r2, #0
 800104a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800104c:	4b17      	ldr	r3, [pc, #92]	@ (80010ac <MX_USART2_UART_Init+0x90>)
 800104e:	2200      	movs	r2, #0
 8001050:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001052:	4b16      	ldr	r3, [pc, #88]	@ (80010ac <MX_USART2_UART_Init+0x90>)
 8001054:	2200      	movs	r2, #0
 8001056:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001058:	4b14      	ldr	r3, [pc, #80]	@ (80010ac <MX_USART2_UART_Init+0x90>)
 800105a:	2200      	movs	r2, #0
 800105c:	625a      	str	r2, [r3, #36]	@ 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800105e:	4b13      	ldr	r3, [pc, #76]	@ (80010ac <MX_USART2_UART_Init+0x90>)
 8001060:	2200      	movs	r2, #0
 8001062:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8001064:	4811      	ldr	r0, [pc, #68]	@ (80010ac <MX_USART2_UART_Init+0x90>)
 8001066:	f004 fb63 	bl	8005730 <HAL_UART_Init>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_USART2_UART_Init+0x58>
		Error_Handler();
 8001070:	f000 f88c 	bl	800118c <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8)
 8001074:	2100      	movs	r1, #0
 8001076:	480d      	ldr	r0, [pc, #52]	@ (80010ac <MX_USART2_UART_Init+0x90>)
 8001078:	f005 fbf9 	bl	800686e <HAL_UARTEx_SetTxFifoThreshold>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_USART2_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 8001082:	f000 f883 	bl	800118c <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8)
 8001086:	2100      	movs	r1, #0
 8001088:	4808      	ldr	r0, [pc, #32]	@ (80010ac <MX_USART2_UART_Init+0x90>)
 800108a:	f005 fc2e 	bl	80068ea <HAL_UARTEx_SetRxFifoThreshold>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <MX_USART2_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 8001094:	f000 f87a 	bl	800118c <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK) {
 8001098:	4804      	ldr	r0, [pc, #16]	@ (80010ac <MX_USART2_UART_Init+0x90>)
 800109a:	f005 fbaf 	bl	80067fc <HAL_UARTEx_DisableFifoMode>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_USART2_UART_Init+0x8c>
		Error_Handler();
 80010a4:	f000 f872 	bl	800118c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80010a8:	bf00      	nop
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	240002a8 	.word	0x240002a8
 80010b0:	40004400 	.word	0x40004400

080010b4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80010b4:	b480      	push	{r7}
 80010b6:	b085      	sub	sp, #20
 80010b8:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	// (CubeMX will generate GPIO inits for LEDs if you checked them; BSP can also handle LEDs)
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80010ba:	4b19      	ldr	r3, [pc, #100]	@ (8001120 <MX_GPIO_Init+0x6c>)
 80010bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010c0:	4a17      	ldr	r2, [pc, #92]	@ (8001120 <MX_GPIO_Init+0x6c>)
 80010c2:	f043 0304 	orr.w	r3, r3, #4
 80010c6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010ca:	4b15      	ldr	r3, [pc, #84]	@ (8001120 <MX_GPIO_Init+0x6c>)
 80010cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010d0:	f003 0304 	and.w	r3, r3, #4
 80010d4:	60fb      	str	r3, [r7, #12]
 80010d6:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80010d8:	4b11      	ldr	r3, [pc, #68]	@ (8001120 <MX_GPIO_Init+0x6c>)
 80010da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010de:	4a10      	ldr	r2, [pc, #64]	@ (8001120 <MX_GPIO_Init+0x6c>)
 80010e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010e8:	4b0d      	ldr	r3, [pc, #52]	@ (8001120 <MX_GPIO_Init+0x6c>)
 80010ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010f2:	60bb      	str	r3, [r7, #8]
 80010f4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80010f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001120 <MX_GPIO_Init+0x6c>)
 80010f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010fc:	4a08      	ldr	r2, [pc, #32]	@ (8001120 <MX_GPIO_Init+0x6c>)
 80010fe:	f043 0301 	orr.w	r3, r3, #1
 8001102:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001106:	4b06      	ldr	r3, [pc, #24]	@ (8001120 <MX_GPIO_Init+0x6c>)
 8001108:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800110c:	f003 0301 	and.w	r3, r3, #1
 8001110:	607b      	str	r3, [r7, #4]
 8001112:	687b      	ldr	r3, [r7, #4]

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	// (no manual GPIO here; using BSP LEDs)
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001114:	bf00      	nop
 8001116:	3714      	adds	r7, #20
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	58024400 	.word	0x58024400

08001124 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */
	// IMU simulation code from first definition
	// also htim->Instance == TIM7 works for this
	// htim == &htim7
	if (htim->Instance == TIM7) {
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a09      	ldr	r2, [pc, #36]	@ (8001158 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d10b      	bne.n	800114e <HAL_TIM_PeriodElapsedCallback+0x2a>
		if (simulation_active) {
 8001136:	4b09      	ldr	r3, [pc, #36]	@ (800115c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	b2db      	uxtb	r3, r3
 800113c:	2b00      	cmp	r3, #0
 800113e:	d004      	beq.n	800114a <HAL_TIM_PeriodElapsedCallback+0x26>
			IMU_Sim_Tick_200Hz();   // synthesize IMU data at 200 Hz
 8001140:	f7ff fbe4 	bl	800090c <IMU_Sim_Tick_200Hz>
			g_state_tick = 1;  // ask main loop to run FlightState_Update() once
 8001144:	4b06      	ldr	r3, [pc, #24]	@ (8001160 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001146:	2201      	movs	r2, #1
 8001148:	701a      	strb	r2, [r3, #0]
		}
		HAL_IncTick();
 800114a:	f000 fdc3 	bl	8001cd4 <HAL_IncTick>
	}
}
 800114e:	bf00      	nop
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40001400 	.word	0x40001400
 800115c:	2400033e 	.word	0x2400033e
 8001160:	2400033c 	.word	0x2400033c

08001164 <BSP_PB_Callback>:
/**
 * @brief BSP Push Button callback
 * @param Button Specifies the pressed button
 * @retval None
 */
void BSP_PB_Callback(Button_TypeDef Button) {
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	71fb      	strb	r3, [r7, #7]
	if (Button == BUTTON_USER) {
 800116e:	79fb      	ldrb	r3, [r7, #7]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d102      	bne.n	800117a <BSP_PB_Callback+0x16>
		BspButtonState = BUTTON_PRESSED;
 8001174:	4b04      	ldr	r3, [pc, #16]	@ (8001188 <BSP_PB_Callback+0x24>)
 8001176:	2201      	movs	r2, #1
 8001178:	601a      	str	r2, [r3, #0]
	}
}
 800117a:	bf00      	nop
 800117c:	370c      	adds	r7, #12
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	24000258 	.word	0x24000258

0800118c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001190:	b672      	cpsid	i
}
 8001192:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001194:	bf00      	nop
 8001196:	e7fd      	b.n	8001194 <Error_Handler+0x8>

08001198 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800119e:	4b0a      	ldr	r3, [pc, #40]	@ (80011c8 <HAL_MspInit+0x30>)
 80011a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80011a4:	4a08      	ldr	r2, [pc, #32]	@ (80011c8 <HAL_MspInit+0x30>)
 80011a6:	f043 0302 	orr.w	r3, r3, #2
 80011aa:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80011ae:	4b06      	ldr	r3, [pc, #24]	@ (80011c8 <HAL_MspInit+0x30>)
 80011b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80011b4:	f003 0302 	and.w	r3, r3, #2
 80011b8:	607b      	str	r3, [r7, #4]
 80011ba:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011bc:	bf00      	nop
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	58024400 	.word	0x58024400

080011cc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a0e      	ldr	r2, [pc, #56]	@ (8001214 <HAL_TIM_Base_MspInit+0x48>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d116      	bne.n	800120c <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM7_MspInit 0 */

    /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80011de:	4b0e      	ldr	r3, [pc, #56]	@ (8001218 <HAL_TIM_Base_MspInit+0x4c>)
 80011e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80011e4:	4a0c      	ldr	r2, [pc, #48]	@ (8001218 <HAL_TIM_Base_MspInit+0x4c>)
 80011e6:	f043 0320 	orr.w	r3, r3, #32
 80011ea:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80011ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001218 <HAL_TIM_Base_MspInit+0x4c>)
 80011f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80011f4:	f003 0320 	and.w	r3, r3, #32
 80011f8:	60fb      	str	r3, [r7, #12]
 80011fa:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80011fc:	2200      	movs	r2, #0
 80011fe:	2100      	movs	r1, #0
 8001200:	2037      	movs	r0, #55	@ 0x37
 8001202:	f000 fe4b 	bl	8001e9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001206:	2037      	movs	r0, #55	@ 0x37
 8001208:	f000 fe62 	bl	8001ed0 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM7_MspInit 1 */

  }

}
 800120c:	bf00      	nop
 800120e:	3710      	adds	r7, #16
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	40001400 	.word	0x40001400
 8001218:	58024400 	.word	0x58024400

0800121c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b0ba      	sub	sp, #232	@ 0xe8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001224:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	60da      	str	r2, [r3, #12]
 8001232:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001234:	f107 0310 	add.w	r3, r7, #16
 8001238:	22c0      	movs	r2, #192	@ 0xc0
 800123a:	2100      	movs	r1, #0
 800123c:	4618      	mov	r0, r3
 800123e:	f006 fa1f 	bl	8007680 <memset>
  if(huart->Instance==USART2)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a26      	ldr	r2, [pc, #152]	@ (80012e0 <HAL_UART_MspInit+0xc4>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d145      	bne.n	80012d8 <HAL_UART_MspInit+0xbc>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800124c:	f04f 0202 	mov.w	r2, #2
 8001250:	f04f 0300 	mov.w	r3, #0
 8001254:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001258:	2300      	movs	r3, #0
 800125a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800125e:	f107 0310 	add.w	r3, r7, #16
 8001262:	4618      	mov	r0, r3
 8001264:	f002 f8ec 	bl	8003440 <HAL_RCCEx_PeriphCLKConfig>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800126e:	f7ff ff8d 	bl	800118c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001272:	4b1c      	ldr	r3, [pc, #112]	@ (80012e4 <HAL_UART_MspInit+0xc8>)
 8001274:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001278:	4a1a      	ldr	r2, [pc, #104]	@ (80012e4 <HAL_UART_MspInit+0xc8>)
 800127a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800127e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001282:	4b18      	ldr	r3, [pc, #96]	@ (80012e4 <HAL_UART_MspInit+0xc8>)
 8001284:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001288:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800128c:	60fb      	str	r3, [r7, #12]
 800128e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001290:	4b14      	ldr	r3, [pc, #80]	@ (80012e4 <HAL_UART_MspInit+0xc8>)
 8001292:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001296:	4a13      	ldr	r2, [pc, #76]	@ (80012e4 <HAL_UART_MspInit+0xc8>)
 8001298:	f043 0301 	orr.w	r3, r3, #1
 800129c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012a0:	4b10      	ldr	r3, [pc, #64]	@ (80012e4 <HAL_UART_MspInit+0xc8>)
 80012a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	60bb      	str	r3, [r7, #8]
 80012ac:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80012ae:	230c      	movs	r3, #12
 80012b0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b4:	2302      	movs	r3, #2
 80012b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ba:	2300      	movs	r3, #0
 80012bc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c0:	2300      	movs	r3, #0
 80012c2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012c6:	2307      	movs	r3, #7
 80012c8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012cc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80012d0:	4619      	mov	r1, r3
 80012d2:	4805      	ldr	r0, [pc, #20]	@ (80012e8 <HAL_UART_MspInit+0xcc>)
 80012d4:	f000 fe6e 	bl	8001fb4 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80012d8:	bf00      	nop
 80012da:	37e8      	adds	r7, #232	@ 0xe8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	40004400 	.word	0x40004400
 80012e4:	58024400 	.word	0x58024400
 80012e8:	58020000 	.word	0x58020000

080012ec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b090      	sub	sp, #64	@ 0x40
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2b0f      	cmp	r3, #15
 80012f8:	d827      	bhi.n	800134a <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80012fa:	2200      	movs	r2, #0
 80012fc:	6879      	ldr	r1, [r7, #4]
 80012fe:	2036      	movs	r0, #54	@ 0x36
 8001300:	f000 fdcc 	bl	8001e9c <HAL_NVIC_SetPriority>

     /* Enable the TIM6 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001304:	2036      	movs	r0, #54	@ 0x36
 8001306:	f000 fde3 	bl	8001ed0 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 800130a:	4a29      	ldr	r2, [pc, #164]	@ (80013b0 <HAL_InitTick+0xc4>)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001310:	4b28      	ldr	r3, [pc, #160]	@ (80013b4 <HAL_InitTick+0xc8>)
 8001312:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001316:	4a27      	ldr	r2, [pc, #156]	@ (80013b4 <HAL_InitTick+0xc8>)
 8001318:	f043 0310 	orr.w	r3, r3, #16
 800131c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001320:	4b24      	ldr	r3, [pc, #144]	@ (80013b4 <HAL_InitTick+0xc8>)
 8001322:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001326:	f003 0310 	and.w	r3, r3, #16
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800132e:	f107 0210 	add.w	r2, r7, #16
 8001332:	f107 0314 	add.w	r3, r7, #20
 8001336:	4611      	mov	r1, r2
 8001338:	4618      	mov	r0, r3
 800133a:	f002 f83f 	bl	80033bc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800133e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001340:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001342:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001344:	2b00      	cmp	r3, #0
 8001346:	d106      	bne.n	8001356 <HAL_InitTick+0x6a>
 8001348:	e001      	b.n	800134e <HAL_InitTick+0x62>
    return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e02b      	b.n	80013a6 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800134e:	f002 f809 	bl	8003364 <HAL_RCC_GetPCLK1Freq>
 8001352:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8001354:	e004      	b.n	8001360 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001356:	f002 f805 	bl	8003364 <HAL_RCC_GetPCLK1Freq>
 800135a:	4603      	mov	r3, r0
 800135c:	005b      	lsls	r3, r3, #1
 800135e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001360:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001362:	4a15      	ldr	r2, [pc, #84]	@ (80013b8 <HAL_InitTick+0xcc>)
 8001364:	fba2 2303 	umull	r2, r3, r2, r3
 8001368:	0c9b      	lsrs	r3, r3, #18
 800136a:	3b01      	subs	r3, #1
 800136c:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800136e:	4b13      	ldr	r3, [pc, #76]	@ (80013bc <HAL_InitTick+0xd0>)
 8001370:	4a13      	ldr	r2, [pc, #76]	@ (80013c0 <HAL_InitTick+0xd4>)
 8001372:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001374:	4b11      	ldr	r3, [pc, #68]	@ (80013bc <HAL_InitTick+0xd0>)
 8001376:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800137a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800137c:	4a0f      	ldr	r2, [pc, #60]	@ (80013bc <HAL_InitTick+0xd0>)
 800137e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001380:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001382:	4b0e      	ldr	r3, [pc, #56]	@ (80013bc <HAL_InitTick+0xd0>)
 8001384:	2200      	movs	r2, #0
 8001386:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001388:	4b0c      	ldr	r3, [pc, #48]	@ (80013bc <HAL_InitTick+0xd0>)
 800138a:	2200      	movs	r2, #0
 800138c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800138e:	480b      	ldr	r0, [pc, #44]	@ (80013bc <HAL_InitTick+0xd0>)
 8001390:	f003 fe82 	bl	8005098 <HAL_TIM_Base_Init>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d104      	bne.n	80013a4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800139a:	4808      	ldr	r0, [pc, #32]	@ (80013bc <HAL_InitTick+0xd0>)
 800139c:	f003 fed4 	bl	8005148 <HAL_TIM_Base_Start_IT>
 80013a0:	4603      	mov	r3, r0
 80013a2:	e000      	b.n	80013a6 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80013a4:	2301      	movs	r3, #1
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3740      	adds	r7, #64	@ 0x40
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	24000028 	.word	0x24000028
 80013b4:	58024400 	.word	0x58024400
 80013b8:	431bde83 	.word	0x431bde83
 80013bc:	24000348 	.word	0x24000348
 80013c0:	40001000 	.word	0x40001000

080013c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013c8:	bf00      	nop
 80013ca:	e7fd      	b.n	80013c8 <NMI_Handler+0x4>

080013cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013d0:	bf00      	nop
 80013d2:	e7fd      	b.n	80013d0 <HardFault_Handler+0x4>

080013d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013d8:	bf00      	nop
 80013da:	e7fd      	b.n	80013d8 <MemManage_Handler+0x4>

080013dc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013e0:	bf00      	nop
 80013e2:	e7fd      	b.n	80013e0 <BusFault_Handler+0x4>

080013e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013e8:	bf00      	nop
 80013ea:	e7fd      	b.n	80013e8 <UsageFault_Handler+0x4>

080013ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013f0:	bf00      	nop
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr

080013fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013fa:	b480      	push	{r7}
 80013fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013fe:	bf00      	nop
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr

08001408 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800140c:	bf00      	nop
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr

08001416 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001416:	b480      	push	{r7}
 8001418:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800141a:	bf00      	nop
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr

08001424 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8001428:	2000      	movs	r0, #0
 800142a:	f000 fb27 	bl	8001a7c <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}
	...

08001434 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001438:	4802      	ldr	r0, [pc, #8]	@ (8001444 <TIM6_DAC_IRQHandler+0x10>)
 800143a:	f003 fefd 	bl	8005238 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	24000348 	.word	0x24000348

08001448 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800144c:	4802      	ldr	r0, [pc, #8]	@ (8001458 <TIM7_IRQHandler+0x10>)
 800144e:	f003 fef3 	bl	8005238 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	2400025c 	.word	0x2400025c

0800145c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  return 1;
 8001460:	2301      	movs	r3, #1
}
 8001462:	4618      	mov	r0, r3
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <_kill>:

int _kill(int pid, int sig)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001476:	f006 f955 	bl	8007724 <__errno>
 800147a:	4603      	mov	r3, r0
 800147c:	2216      	movs	r2, #22
 800147e:	601a      	str	r2, [r3, #0]
  return -1;
 8001480:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001484:	4618      	mov	r0, r3
 8001486:	3708      	adds	r7, #8
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}

0800148c <_exit>:

void _exit (int status)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001494:	f04f 31ff 	mov.w	r1, #4294967295
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f7ff ffe7 	bl	800146c <_kill>
  while (1) {}    /* Make sure we hang here */
 800149e:	bf00      	nop
 80014a0:	e7fd      	b.n	800149e <_exit+0x12>

080014a2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b086      	sub	sp, #24
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	60f8      	str	r0, [r7, #12]
 80014aa:	60b9      	str	r1, [r7, #8]
 80014ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ae:	2300      	movs	r3, #0
 80014b0:	617b      	str	r3, [r7, #20]
 80014b2:	e00a      	b.n	80014ca <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014b4:	f3af 8000 	nop.w
 80014b8:	4601      	mov	r1, r0
 80014ba:	68bb      	ldr	r3, [r7, #8]
 80014bc:	1c5a      	adds	r2, r3, #1
 80014be:	60ba      	str	r2, [r7, #8]
 80014c0:	b2ca      	uxtb	r2, r1
 80014c2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	3301      	adds	r3, #1
 80014c8:	617b      	str	r3, [r7, #20]
 80014ca:	697a      	ldr	r2, [r7, #20]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	429a      	cmp	r2, r3
 80014d0:	dbf0      	blt.n	80014b4 <_read+0x12>
  }

  return len;
 80014d2:	687b      	ldr	r3, [r7, #4]
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3718      	adds	r7, #24
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}

080014dc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b086      	sub	sp, #24
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	60f8      	str	r0, [r7, #12]
 80014e4:	60b9      	str	r1, [r7, #8]
 80014e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014e8:	2300      	movs	r3, #0
 80014ea:	617b      	str	r3, [r7, #20]
 80014ec:	e009      	b.n	8001502 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	1c5a      	adds	r2, r3, #1
 80014f2:	60ba      	str	r2, [r7, #8]
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	4618      	mov	r0, r3
 80014f8:	f000 fb34 	bl	8001b64 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	3301      	adds	r3, #1
 8001500:	617b      	str	r3, [r7, #20]
 8001502:	697a      	ldr	r2, [r7, #20]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	429a      	cmp	r2, r3
 8001508:	dbf1      	blt.n	80014ee <_write+0x12>
  }
  return len;
 800150a:	687b      	ldr	r3, [r7, #4]
}
 800150c:	4618      	mov	r0, r3
 800150e:	3718      	adds	r7, #24
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}

08001514 <_close>:

int _close(int file)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800151c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001520:	4618      	mov	r0, r3
 8001522:	370c      	adds	r7, #12
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800153c:	605a      	str	r2, [r3, #4]
  return 0;
 800153e:	2300      	movs	r3, #0
}
 8001540:	4618      	mov	r0, r3
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr

0800154c <_isatty>:

int _isatty(int file)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001554:	2301      	movs	r3, #1
}
 8001556:	4618      	mov	r0, r3
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr

08001562 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001562:	b480      	push	{r7}
 8001564:	b085      	sub	sp, #20
 8001566:	af00      	add	r7, sp, #0
 8001568:	60f8      	str	r0, [r7, #12]
 800156a:	60b9      	str	r1, [r7, #8]
 800156c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800156e:	2300      	movs	r3, #0
}
 8001570:	4618      	mov	r0, r3
 8001572:	3714      	adds	r7, #20
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr

0800157c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b086      	sub	sp, #24
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001584:	4a14      	ldr	r2, [pc, #80]	@ (80015d8 <_sbrk+0x5c>)
 8001586:	4b15      	ldr	r3, [pc, #84]	@ (80015dc <_sbrk+0x60>)
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001590:	4b13      	ldr	r3, [pc, #76]	@ (80015e0 <_sbrk+0x64>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d102      	bne.n	800159e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001598:	4b11      	ldr	r3, [pc, #68]	@ (80015e0 <_sbrk+0x64>)
 800159a:	4a12      	ldr	r2, [pc, #72]	@ (80015e4 <_sbrk+0x68>)
 800159c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800159e:	4b10      	ldr	r3, [pc, #64]	@ (80015e0 <_sbrk+0x64>)
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4413      	add	r3, r2
 80015a6:	693a      	ldr	r2, [r7, #16]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d207      	bcs.n	80015bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015ac:	f006 f8ba 	bl	8007724 <__errno>
 80015b0:	4603      	mov	r3, r0
 80015b2:	220c      	movs	r2, #12
 80015b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015b6:	f04f 33ff 	mov.w	r3, #4294967295
 80015ba:	e009      	b.n	80015d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015bc:	4b08      	ldr	r3, [pc, #32]	@ (80015e0 <_sbrk+0x64>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015c2:	4b07      	ldr	r3, [pc, #28]	@ (80015e0 <_sbrk+0x64>)
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4413      	add	r3, r2
 80015ca:	4a05      	ldr	r2, [pc, #20]	@ (80015e0 <_sbrk+0x64>)
 80015cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015ce:	68fb      	ldr	r3, [r7, #12]
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3718      	adds	r7, #24
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	24080000 	.word	0x24080000
 80015dc:	00000400 	.word	0x00000400
 80015e0:	24000394 	.word	0x24000394
 80015e4:	24000588 	.word	0x24000588

080015e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80015ec:	4b43      	ldr	r3, [pc, #268]	@ (80016fc <SystemInit+0x114>)
 80015ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015f2:	4a42      	ldr	r2, [pc, #264]	@ (80016fc <SystemInit+0x114>)
 80015f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80015fc:	4b40      	ldr	r3, [pc, #256]	@ (8001700 <SystemInit+0x118>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 030f 	and.w	r3, r3, #15
 8001604:	2b06      	cmp	r3, #6
 8001606:	d807      	bhi.n	8001618 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001608:	4b3d      	ldr	r3, [pc, #244]	@ (8001700 <SystemInit+0x118>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f023 030f 	bic.w	r3, r3, #15
 8001610:	4a3b      	ldr	r2, [pc, #236]	@ (8001700 <SystemInit+0x118>)
 8001612:	f043 0307 	orr.w	r3, r3, #7
 8001616:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001618:	4b3a      	ldr	r3, [pc, #232]	@ (8001704 <SystemInit+0x11c>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a39      	ldr	r2, [pc, #228]	@ (8001704 <SystemInit+0x11c>)
 800161e:	f043 0301 	orr.w	r3, r3, #1
 8001622:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001624:	4b37      	ldr	r3, [pc, #220]	@ (8001704 <SystemInit+0x11c>)
 8001626:	2200      	movs	r2, #0
 8001628:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800162a:	4b36      	ldr	r3, [pc, #216]	@ (8001704 <SystemInit+0x11c>)
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	4935      	ldr	r1, [pc, #212]	@ (8001704 <SystemInit+0x11c>)
 8001630:	4b35      	ldr	r3, [pc, #212]	@ (8001708 <SystemInit+0x120>)
 8001632:	4013      	ands	r3, r2
 8001634:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001636:	4b32      	ldr	r3, [pc, #200]	@ (8001700 <SystemInit+0x118>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0308 	and.w	r3, r3, #8
 800163e:	2b00      	cmp	r3, #0
 8001640:	d007      	beq.n	8001652 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001642:	4b2f      	ldr	r3, [pc, #188]	@ (8001700 <SystemInit+0x118>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f023 030f 	bic.w	r3, r3, #15
 800164a:	4a2d      	ldr	r2, [pc, #180]	@ (8001700 <SystemInit+0x118>)
 800164c:	f043 0307 	orr.w	r3, r3, #7
 8001650:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001652:	4b2c      	ldr	r3, [pc, #176]	@ (8001704 <SystemInit+0x11c>)
 8001654:	2200      	movs	r2, #0
 8001656:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001658:	4b2a      	ldr	r3, [pc, #168]	@ (8001704 <SystemInit+0x11c>)
 800165a:	2200      	movs	r2, #0
 800165c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800165e:	4b29      	ldr	r3, [pc, #164]	@ (8001704 <SystemInit+0x11c>)
 8001660:	2200      	movs	r2, #0
 8001662:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001664:	4b27      	ldr	r3, [pc, #156]	@ (8001704 <SystemInit+0x11c>)
 8001666:	4a29      	ldr	r2, [pc, #164]	@ (800170c <SystemInit+0x124>)
 8001668:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800166a:	4b26      	ldr	r3, [pc, #152]	@ (8001704 <SystemInit+0x11c>)
 800166c:	4a28      	ldr	r2, [pc, #160]	@ (8001710 <SystemInit+0x128>)
 800166e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001670:	4b24      	ldr	r3, [pc, #144]	@ (8001704 <SystemInit+0x11c>)
 8001672:	4a28      	ldr	r2, [pc, #160]	@ (8001714 <SystemInit+0x12c>)
 8001674:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001676:	4b23      	ldr	r3, [pc, #140]	@ (8001704 <SystemInit+0x11c>)
 8001678:	2200      	movs	r2, #0
 800167a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800167c:	4b21      	ldr	r3, [pc, #132]	@ (8001704 <SystemInit+0x11c>)
 800167e:	4a25      	ldr	r2, [pc, #148]	@ (8001714 <SystemInit+0x12c>)
 8001680:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001682:	4b20      	ldr	r3, [pc, #128]	@ (8001704 <SystemInit+0x11c>)
 8001684:	2200      	movs	r2, #0
 8001686:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001688:	4b1e      	ldr	r3, [pc, #120]	@ (8001704 <SystemInit+0x11c>)
 800168a:	4a22      	ldr	r2, [pc, #136]	@ (8001714 <SystemInit+0x12c>)
 800168c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800168e:	4b1d      	ldr	r3, [pc, #116]	@ (8001704 <SystemInit+0x11c>)
 8001690:	2200      	movs	r2, #0
 8001692:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001694:	4b1b      	ldr	r3, [pc, #108]	@ (8001704 <SystemInit+0x11c>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a1a      	ldr	r2, [pc, #104]	@ (8001704 <SystemInit+0x11c>)
 800169a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800169e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80016a0:	4b18      	ldr	r3, [pc, #96]	@ (8001704 <SystemInit+0x11c>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80016a6:	4b1c      	ldr	r3, [pc, #112]	@ (8001718 <SystemInit+0x130>)
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	4b1c      	ldr	r3, [pc, #112]	@ (800171c <SystemInit+0x134>)
 80016ac:	4013      	ands	r3, r2
 80016ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80016b2:	d202      	bcs.n	80016ba <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80016b4:	4b1a      	ldr	r3, [pc, #104]	@ (8001720 <SystemInit+0x138>)
 80016b6:	2201      	movs	r2, #1
 80016b8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80016ba:	4b12      	ldr	r3, [pc, #72]	@ (8001704 <SystemInit+0x11c>)
 80016bc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80016c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d113      	bne.n	80016f0 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80016c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001704 <SystemInit+0x11c>)
 80016ca:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80016ce:	4a0d      	ldr	r2, [pc, #52]	@ (8001704 <SystemInit+0x11c>)
 80016d0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80016d4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80016d8:	4b12      	ldr	r3, [pc, #72]	@ (8001724 <SystemInit+0x13c>)
 80016da:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80016de:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80016e0:	4b08      	ldr	r3, [pc, #32]	@ (8001704 <SystemInit+0x11c>)
 80016e2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80016e6:	4a07      	ldr	r2, [pc, #28]	@ (8001704 <SystemInit+0x11c>)
 80016e8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80016ec:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80016f0:	bf00      	nop
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	e000ed00 	.word	0xe000ed00
 8001700:	52002000 	.word	0x52002000
 8001704:	58024400 	.word	0x58024400
 8001708:	eaf6ed7f 	.word	0xeaf6ed7f
 800170c:	02020200 	.word	0x02020200
 8001710:	01ff0000 	.word	0x01ff0000
 8001714:	01010280 	.word	0x01010280
 8001718:	5c001000 	.word	0x5c001000
 800171c:	ffff0000 	.word	0xffff0000
 8001720:	51008108 	.word	0x51008108
 8001724:	52004000 	.word	0x52004000

08001728 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 800172c:	4b09      	ldr	r3, [pc, #36]	@ (8001754 <ExitRun0Mode+0x2c>)
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	4a08      	ldr	r2, [pc, #32]	@ (8001754 <ExitRun0Mode+0x2c>)
 8001732:	f043 0302 	orr.w	r3, r3, #2
 8001736:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001738:	bf00      	nop
 800173a:	4b06      	ldr	r3, [pc, #24]	@ (8001754 <ExitRun0Mode+0x2c>)
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d0f9      	beq.n	800173a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8001746:	bf00      	nop
 8001748:	bf00      	nop
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	58024800 	.word	0x58024800

08001758 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001758:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001794 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 800175c:	f7ff ffe4 	bl	8001728 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001760:	f7ff ff42 	bl	80015e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001764:	480c      	ldr	r0, [pc, #48]	@ (8001798 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001766:	490d      	ldr	r1, [pc, #52]	@ (800179c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001768:	4a0d      	ldr	r2, [pc, #52]	@ (80017a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800176a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800176c:	e002      	b.n	8001774 <LoopCopyDataInit>

0800176e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800176e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001770:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001772:	3304      	adds	r3, #4

08001774 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001774:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001776:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001778:	d3f9      	bcc.n	800176e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800177a:	4a0a      	ldr	r2, [pc, #40]	@ (80017a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800177c:	4c0a      	ldr	r4, [pc, #40]	@ (80017a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800177e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001780:	e001      	b.n	8001786 <LoopFillZerobss>

08001782 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001782:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001784:	3204      	adds	r2, #4

08001786 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001786:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001788:	d3fb      	bcc.n	8001782 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800178a:	f005 ffd1 	bl	8007730 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800178e:	f7ff fab5 	bl	8000cfc <main>
  bx  lr
 8001792:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001794:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001798:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800179c:	240001f8 	.word	0x240001f8
  ldr r2, =_sidata
 80017a0:	080097ac 	.word	0x080097ac
  ldr r2, =_sbss
 80017a4:	240001f8 	.word	0x240001f8
  ldr r4, =_ebss
 80017a8:	24000588 	.word	0x24000588

080017ac <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017ac:	e7fe      	b.n	80017ac <ADC3_IRQHandler>
	...

080017b0 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b08c      	sub	sp, #48	@ 0x30
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	4603      	mov	r3, r0
 80017b8:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80017ba:	2300      	movs	r3, #0
 80017bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80017be:	79fb      	ldrb	r3, [r7, #7]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d009      	beq.n	80017d8 <BSP_LED_Init+0x28>
 80017c4:	79fb      	ldrb	r3, [r7, #7]
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d006      	beq.n	80017d8 <BSP_LED_Init+0x28>
 80017ca:	79fb      	ldrb	r3, [r7, #7]
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d003      	beq.n	80017d8 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80017d0:	f06f 0301 	mvn.w	r3, #1
 80017d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80017d6:	e055      	b.n	8001884 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 80017d8:	79fb      	ldrb	r3, [r7, #7]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d10f      	bne.n	80017fe <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 80017de:	4b2c      	ldr	r3, [pc, #176]	@ (8001890 <BSP_LED_Init+0xe0>)
 80017e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017e4:	4a2a      	ldr	r2, [pc, #168]	@ (8001890 <BSP_LED_Init+0xe0>)
 80017e6:	f043 0302 	orr.w	r3, r3, #2
 80017ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017ee:	4b28      	ldr	r3, [pc, #160]	@ (8001890 <BSP_LED_Init+0xe0>)
 80017f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017f4:	f003 0302 	and.w	r3, r3, #2
 80017f8:	617b      	str	r3, [r7, #20]
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	e021      	b.n	8001842 <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 80017fe:	79fb      	ldrb	r3, [r7, #7]
 8001800:	2b01      	cmp	r3, #1
 8001802:	d10f      	bne.n	8001824 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8001804:	4b22      	ldr	r3, [pc, #136]	@ (8001890 <BSP_LED_Init+0xe0>)
 8001806:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800180a:	4a21      	ldr	r2, [pc, #132]	@ (8001890 <BSP_LED_Init+0xe0>)
 800180c:	f043 0302 	orr.w	r3, r3, #2
 8001810:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001814:	4b1e      	ldr	r3, [pc, #120]	@ (8001890 <BSP_LED_Init+0xe0>)
 8001816:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	613b      	str	r3, [r7, #16]
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	e00e      	b.n	8001842 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8001824:	4b1a      	ldr	r3, [pc, #104]	@ (8001890 <BSP_LED_Init+0xe0>)
 8001826:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800182a:	4a19      	ldr	r2, [pc, #100]	@ (8001890 <BSP_LED_Init+0xe0>)
 800182c:	f043 0302 	orr.w	r3, r3, #2
 8001830:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001834:	4b16      	ldr	r3, [pc, #88]	@ (8001890 <BSP_LED_Init+0xe0>)
 8001836:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	60fb      	str	r3, [r7, #12]
 8001840:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8001842:	79fb      	ldrb	r3, [r7, #7]
 8001844:	4a13      	ldr	r2, [pc, #76]	@ (8001894 <BSP_LED_Init+0xe4>)
 8001846:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800184a:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800184c:	2301      	movs	r3, #1
 800184e:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8001850:	2300      	movs	r3, #0
 8001852:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001854:	2303      	movs	r3, #3
 8001856:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001858:	79fb      	ldrb	r3, [r7, #7]
 800185a:	4a0f      	ldr	r2, [pc, #60]	@ (8001898 <BSP_LED_Init+0xe8>)
 800185c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001860:	f107 0218 	add.w	r2, r7, #24
 8001864:	4611      	mov	r1, r2
 8001866:	4618      	mov	r0, r3
 8001868:	f000 fba4 	bl	8001fb4 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 800186c:	79fb      	ldrb	r3, [r7, #7]
 800186e:	4a0a      	ldr	r2, [pc, #40]	@ (8001898 <BSP_LED_Init+0xe8>)
 8001870:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001874:	79fb      	ldrb	r3, [r7, #7]
 8001876:	4a07      	ldr	r2, [pc, #28]	@ (8001894 <BSP_LED_Init+0xe4>)
 8001878:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800187c:	2200      	movs	r2, #0
 800187e:	4619      	mov	r1, r3
 8001880:	f000 fd48 	bl	8002314 <HAL_GPIO_WritePin>
  }

  return ret;
 8001884:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8001886:	4618      	mov	r0, r3
 8001888:	3730      	adds	r7, #48	@ 0x30
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	58024400 	.word	0x58024400
 8001894:	080093f0 	.word	0x080093f0
 8001898:	24000010 	.word	0x24000010

0800189c <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	4603      	mov	r3, r0
 80018a4:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80018a6:	2300      	movs	r3, #0
 80018a8:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80018aa:	79fb      	ldrb	r3, [r7, #7]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d009      	beq.n	80018c4 <BSP_LED_On+0x28>
 80018b0:	79fb      	ldrb	r3, [r7, #7]
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d006      	beq.n	80018c4 <BSP_LED_On+0x28>
 80018b6:	79fb      	ldrb	r3, [r7, #7]
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d003      	beq.n	80018c4 <BSP_LED_On+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80018bc:	f06f 0301 	mvn.w	r3, #1
 80018c0:	60fb      	str	r3, [r7, #12]
 80018c2:	e00b      	b.n	80018dc <BSP_LED_On+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 80018c4:	79fb      	ldrb	r3, [r7, #7]
 80018c6:	4a08      	ldr	r2, [pc, #32]	@ (80018e8 <BSP_LED_On+0x4c>)
 80018c8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80018cc:	79fb      	ldrb	r3, [r7, #7]
 80018ce:	4a07      	ldr	r2, [pc, #28]	@ (80018ec <BSP_LED_On+0x50>)
 80018d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80018d4:	2201      	movs	r2, #1
 80018d6:	4619      	mov	r1, r3
 80018d8:	f000 fd1c 	bl	8002314 <HAL_GPIO_WritePin>
  }

  return ret;
 80018dc:	68fb      	ldr	r3, [r7, #12]
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3710      	adds	r7, #16
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	24000010 	.word	0x24000010
 80018ec:	080093f0 	.word	0x080093f0

080018f0 <BSP_LED_Off>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4603      	mov	r3, r0
 80018f8:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80018fa:	2300      	movs	r3, #0
 80018fc:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80018fe:	79fb      	ldrb	r3, [r7, #7]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d009      	beq.n	8001918 <BSP_LED_Off+0x28>
 8001904:	79fb      	ldrb	r3, [r7, #7]
 8001906:	2b01      	cmp	r3, #1
 8001908:	d006      	beq.n	8001918 <BSP_LED_Off+0x28>
 800190a:	79fb      	ldrb	r3, [r7, #7]
 800190c:	2b02      	cmp	r3, #2
 800190e:	d003      	beq.n	8001918 <BSP_LED_Off+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001910:	f06f 0301 	mvn.w	r3, #1
 8001914:	60fb      	str	r3, [r7, #12]
 8001916:	e00b      	b.n	8001930 <BSP_LED_Off+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001918:	79fb      	ldrb	r3, [r7, #7]
 800191a:	4a08      	ldr	r2, [pc, #32]	@ (800193c <BSP_LED_Off+0x4c>)
 800191c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001920:	79fb      	ldrb	r3, [r7, #7]
 8001922:	4a07      	ldr	r2, [pc, #28]	@ (8001940 <BSP_LED_Off+0x50>)
 8001924:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001928:	2200      	movs	r2, #0
 800192a:	4619      	mov	r1, r3
 800192c:	f000 fcf2 	bl	8002314 <HAL_GPIO_WritePin>
  }

  return ret;
 8001930:	68fb      	ldr	r3, [r7, #12]
}
 8001932:	4618      	mov	r0, r3
 8001934:	3710      	adds	r7, #16
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	24000010 	.word	0x24000010
 8001940:	080093f0 	.word	0x080093f0

08001944 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	4603      	mov	r3, r0
 800194c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800194e:	2300      	movs	r3, #0
 8001950:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001952:	79fb      	ldrb	r3, [r7, #7]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d009      	beq.n	800196c <BSP_LED_Toggle+0x28>
 8001958:	79fb      	ldrb	r3, [r7, #7]
 800195a:	2b01      	cmp	r3, #1
 800195c:	d006      	beq.n	800196c <BSP_LED_Toggle+0x28>
 800195e:	79fb      	ldrb	r3, [r7, #7]
 8001960:	2b02      	cmp	r3, #2
 8001962:	d003      	beq.n	800196c <BSP_LED_Toggle+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001964:	f06f 0301 	mvn.w	r3, #1
 8001968:	60fb      	str	r3, [r7, #12]
 800196a:	e00b      	b.n	8001984 <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 800196c:	79fb      	ldrb	r3, [r7, #7]
 800196e:	4a08      	ldr	r2, [pc, #32]	@ (8001990 <BSP_LED_Toggle+0x4c>)
 8001970:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001974:	79fb      	ldrb	r3, [r7, #7]
 8001976:	4907      	ldr	r1, [pc, #28]	@ (8001994 <BSP_LED_Toggle+0x50>)
 8001978:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800197c:	4619      	mov	r1, r3
 800197e:	4610      	mov	r0, r2
 8001980:	f000 fce1 	bl	8002346 <HAL_GPIO_TogglePin>
  }

  return ret;
 8001984:	68fb      	ldr	r3, [r7, #12]
}
 8001986:	4618      	mov	r0, r3
 8001988:	3710      	adds	r7, #16
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	24000010 	.word	0x24000010
 8001994:	080093f0 	.word	0x080093f0

08001998 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b088      	sub	sp, #32
 800199c:	af00      	add	r7, sp, #0
 800199e:	4603      	mov	r3, r0
 80019a0:	460a      	mov	r2, r1
 80019a2:	71fb      	strb	r3, [r7, #7]
 80019a4:	4613      	mov	r3, r2
 80019a6:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 80019a8:	4b2e      	ldr	r3, [pc, #184]	@ (8001a64 <BSP_PB_Init+0xcc>)
 80019aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019ae:	4a2d      	ldr	r2, [pc, #180]	@ (8001a64 <BSP_PB_Init+0xcc>)
 80019b0:	f043 0304 	orr.w	r3, r3, #4
 80019b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80019b8:	4b2a      	ldr	r3, [pc, #168]	@ (8001a64 <BSP_PB_Init+0xcc>)
 80019ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019be:	f003 0304 	and.w	r3, r3, #4
 80019c2:	60bb      	str	r3, [r7, #8]
 80019c4:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 80019c6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80019ca:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 80019cc:	2302      	movs	r3, #2
 80019ce:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80019d0:	2302      	movs	r3, #2
 80019d2:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 80019d4:	79bb      	ldrb	r3, [r7, #6]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d10c      	bne.n	80019f4 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80019da:	2300      	movs	r3, #0
 80019dc:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 80019de:	79fb      	ldrb	r3, [r7, #7]
 80019e0:	4a21      	ldr	r2, [pc, #132]	@ (8001a68 <BSP_PB_Init+0xd0>)
 80019e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019e6:	f107 020c 	add.w	r2, r7, #12
 80019ea:	4611      	mov	r1, r2
 80019ec:	4618      	mov	r0, r3
 80019ee:	f000 fae1 	bl	8001fb4 <HAL_GPIO_Init>
 80019f2:	e031      	b.n	8001a58 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80019f4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80019f8:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80019fa:	79fb      	ldrb	r3, [r7, #7]
 80019fc:	4a1a      	ldr	r2, [pc, #104]	@ (8001a68 <BSP_PB_Init+0xd0>)
 80019fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a02:	f107 020c 	add.w	r2, r7, #12
 8001a06:	4611      	mov	r1, r2
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f000 fad3 	bl	8001fb4 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8001a0e:	79fb      	ldrb	r3, [r7, #7]
 8001a10:	00db      	lsls	r3, r3, #3
 8001a12:	4a16      	ldr	r2, [pc, #88]	@ (8001a6c <BSP_PB_Init+0xd4>)
 8001a14:	441a      	add	r2, r3
 8001a16:	79fb      	ldrb	r3, [r7, #7]
 8001a18:	4915      	ldr	r1, [pc, #84]	@ (8001a70 <BSP_PB_Init+0xd8>)
 8001a1a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001a1e:	4619      	mov	r1, r3
 8001a20:	4610      	mov	r0, r2
 8001a22:	f000 fa82 	bl	8001f2a <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8001a26:	79fb      	ldrb	r3, [r7, #7]
 8001a28:	00db      	lsls	r3, r3, #3
 8001a2a:	4a10      	ldr	r2, [pc, #64]	@ (8001a6c <BSP_PB_Init+0xd4>)
 8001a2c:	1898      	adds	r0, r3, r2
 8001a2e:	79fb      	ldrb	r3, [r7, #7]
 8001a30:	4a10      	ldr	r2, [pc, #64]	@ (8001a74 <BSP_PB_Init+0xdc>)
 8001a32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a36:	461a      	mov	r2, r3
 8001a38:	2100      	movs	r1, #0
 8001a3a:	f000 fa57 	bl	8001eec <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001a3e:	2028      	movs	r0, #40	@ 0x28
 8001a40:	79fb      	ldrb	r3, [r7, #7]
 8001a42:	4a0d      	ldr	r2, [pc, #52]	@ (8001a78 <BSP_PB_Init+0xe0>)
 8001a44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	f000 fa26 	bl	8001e9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001a50:	2328      	movs	r3, #40	@ 0x28
 8001a52:	4618      	mov	r0, r3
 8001a54:	f000 fa3c 	bl	8001ed0 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3720      	adds	r7, #32
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	58024400 	.word	0x58024400
 8001a68:	2400001c 	.word	0x2400001c
 8001a6c:	24000398 	.word	0x24000398
 8001a70:	080093f8 	.word	0x080093f8
 8001a74:	24000020 	.word	0x24000020
 8001a78:	24000024 	.word	0x24000024

08001a7c <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	4603      	mov	r3, r0
 8001a84:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8001a86:	79fb      	ldrb	r3, [r7, #7]
 8001a88:	00db      	lsls	r3, r3, #3
 8001a8a:	4a04      	ldr	r2, [pc, #16]	@ (8001a9c <BSP_PB_IRQHandler+0x20>)
 8001a8c:	4413      	add	r3, r2
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f000 fa60 	bl	8001f54 <HAL_EXTI_IRQHandler>
}
 8001a94:	bf00      	nop
 8001a96:	3708      	adds	r7, #8
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	24000398 	.word	0x24000398

08001aa0 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	6039      	str	r1, [r7, #0]
 8001aaa:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001aac:	2300      	movs	r3, #0
 8001aae:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 8001ab0:	79fb      	ldrb	r3, [r7, #7]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d003      	beq.n	8001abe <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001ab6:	f06f 0301 	mvn.w	r3, #1
 8001aba:	60fb      	str	r3, [r7, #12]
 8001abc:	e018      	b.n	8001af0 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8001abe:	79fb      	ldrb	r3, [r7, #7]
 8001ac0:	2294      	movs	r2, #148	@ 0x94
 8001ac2:	fb02 f303 	mul.w	r3, r2, r3
 8001ac6:	4a0d      	ldr	r2, [pc, #52]	@ (8001afc <BSP_COM_Init+0x5c>)
 8001ac8:	4413      	add	r3, r2
 8001aca:	4618      	mov	r0, r3
 8001acc:	f000 f86e 	bl	8001bac <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8001ad0:	79fb      	ldrb	r3, [r7, #7]
 8001ad2:	2294      	movs	r2, #148	@ 0x94
 8001ad4:	fb02 f303 	mul.w	r3, r2, r3
 8001ad8:	4a08      	ldr	r2, [pc, #32]	@ (8001afc <BSP_COM_Init+0x5c>)
 8001ada:	4413      	add	r3, r2
 8001adc:	6839      	ldr	r1, [r7, #0]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f000 f80e 	bl	8001b00 <MX_USART3_Init>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d002      	beq.n	8001af0 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001aea:	f06f 0303 	mvn.w	r3, #3
 8001aee:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001af0:	68fb      	ldr	r3, [r7, #12]
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3710      	adds	r7, #16
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	240003a0 	.word	0x240003a0

08001b00 <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8001b0a:	4b15      	ldr	r3, [pc, #84]	@ (8001b60 <MX_USART3_Init+0x60>)
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	220c      	movs	r2, #12
 8001b1e:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	895b      	ldrh	r3, [r3, #10]
 8001b24:	461a      	mov	r2, r3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	685a      	ldr	r2, [r3, #4]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	891b      	ldrh	r3, [r3, #8]
 8001b36:	461a      	mov	r2, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	899b      	ldrh	r3, [r3, #12]
 8001b40:	461a      	mov	r2, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001b4c:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f003 fdee 	bl	8005730 <HAL_UART_Init>
 8001b54:	4603      	mov	r3, r0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	2400000c 	.word	0x2400000c

08001b64 <__io_putchar>:
 #ifdef __GNUC__
 int __io_putchar (int ch)
 #else
 int fputc (int ch, FILE *f)
 #endif /* __GNUC__ */
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit (&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8001b6c:	4b09      	ldr	r3, [pc, #36]	@ (8001b94 <__io_putchar+0x30>)
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	461a      	mov	r2, r3
 8001b72:	2394      	movs	r3, #148	@ 0x94
 8001b74:	fb02 f303 	mul.w	r3, r2, r3
 8001b78:	4a07      	ldr	r2, [pc, #28]	@ (8001b98 <__io_putchar+0x34>)
 8001b7a:	1898      	adds	r0, r3, r2
 8001b7c:	1d39      	adds	r1, r7, #4
 8001b7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b82:	2201      	movs	r2, #1
 8001b84:	f003 fe24 	bl	80057d0 <HAL_UART_Transmit>
  return ch;
 8001b88:	687b      	ldr	r3, [r7, #4]
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	24000434 	.word	0x24000434
 8001b98:	240003a0 	.word	0x240003a0

08001b9c <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001ba0:	2000      	movs	r0, #0
 8001ba2:	f7ff fadf 	bl	8001164 <BSP_PB_Callback>
}
 8001ba6:	bf00      	nop
 8001ba8:	bd80      	pop	{r7, pc}
	...

08001bac <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b08a      	sub	sp, #40	@ 0x28
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001bb4:	4b27      	ldr	r3, [pc, #156]	@ (8001c54 <COM1_MspInit+0xa8>)
 8001bb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bba:	4a26      	ldr	r2, [pc, #152]	@ (8001c54 <COM1_MspInit+0xa8>)
 8001bbc:	f043 0308 	orr.w	r3, r3, #8
 8001bc0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001bc4:	4b23      	ldr	r3, [pc, #140]	@ (8001c54 <COM1_MspInit+0xa8>)
 8001bc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bca:	f003 0308 	and.w	r3, r3, #8
 8001bce:	613b      	str	r3, [r7, #16]
 8001bd0:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8001bd2:	4b20      	ldr	r3, [pc, #128]	@ (8001c54 <COM1_MspInit+0xa8>)
 8001bd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bd8:	4a1e      	ldr	r2, [pc, #120]	@ (8001c54 <COM1_MspInit+0xa8>)
 8001bda:	f043 0308 	orr.w	r3, r3, #8
 8001bde:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001be2:	4b1c      	ldr	r3, [pc, #112]	@ (8001c54 <COM1_MspInit+0xa8>)
 8001be4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001be8:	f003 0308 	and.w	r3, r3, #8
 8001bec:	60fb      	str	r3, [r7, #12]
 8001bee:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001bf0:	4b18      	ldr	r3, [pc, #96]	@ (8001c54 <COM1_MspInit+0xa8>)
 8001bf2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001bf6:	4a17      	ldr	r2, [pc, #92]	@ (8001c54 <COM1_MspInit+0xa8>)
 8001bf8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001bfc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001c00:	4b14      	ldr	r3, [pc, #80]	@ (8001c54 <COM1_MspInit+0xa8>)
 8001c02:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c06:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c0a:	60bb      	str	r3, [r7, #8]
 8001c0c:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 8001c0e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c12:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001c14:	2302      	movs	r3, #2
 8001c16:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c18:	2302      	movs	r3, #2
 8001c1a:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001c20:	2307      	movs	r3, #7
 8001c22:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001c24:	f107 0314 	add.w	r3, r7, #20
 8001c28:	4619      	mov	r1, r3
 8001c2a:	480b      	ldr	r0, [pc, #44]	@ (8001c58 <COM1_MspInit+0xac>)
 8001c2c:	f000 f9c2 	bl	8001fb4 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8001c30:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001c34:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001c36:	2302      	movs	r3, #2
 8001c38:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8001c3a:	2307      	movs	r3, #7
 8001c3c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8001c3e:	f107 0314 	add.w	r3, r7, #20
 8001c42:	4619      	mov	r1, r3
 8001c44:	4804      	ldr	r0, [pc, #16]	@ (8001c58 <COM1_MspInit+0xac>)
 8001c46:	f000 f9b5 	bl	8001fb4 <HAL_GPIO_Init>
}
 8001c4a:	bf00      	nop
 8001c4c:	3728      	adds	r7, #40	@ 0x28
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	58024400 	.word	0x58024400
 8001c58:	58020c00 	.word	0x58020c00

08001c5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c62:	2003      	movs	r0, #3
 8001c64:	f000 f90f 	bl	8001e86 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001c68:	f001 f9d2 	bl	8003010 <HAL_RCC_GetSysClockFreq>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	4b15      	ldr	r3, [pc, #84]	@ (8001cc4 <HAL_Init+0x68>)
 8001c70:	699b      	ldr	r3, [r3, #24]
 8001c72:	0a1b      	lsrs	r3, r3, #8
 8001c74:	f003 030f 	and.w	r3, r3, #15
 8001c78:	4913      	ldr	r1, [pc, #76]	@ (8001cc8 <HAL_Init+0x6c>)
 8001c7a:	5ccb      	ldrb	r3, [r1, r3]
 8001c7c:	f003 031f 	and.w	r3, r3, #31
 8001c80:	fa22 f303 	lsr.w	r3, r2, r3
 8001c84:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001c86:	4b0f      	ldr	r3, [pc, #60]	@ (8001cc4 <HAL_Init+0x68>)
 8001c88:	699b      	ldr	r3, [r3, #24]
 8001c8a:	f003 030f 	and.w	r3, r3, #15
 8001c8e:	4a0e      	ldr	r2, [pc, #56]	@ (8001cc8 <HAL_Init+0x6c>)
 8001c90:	5cd3      	ldrb	r3, [r2, r3]
 8001c92:	f003 031f 	and.w	r3, r3, #31
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	fa22 f303 	lsr.w	r3, r2, r3
 8001c9c:	4a0b      	ldr	r2, [pc, #44]	@ (8001ccc <HAL_Init+0x70>)
 8001c9e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001ca0:	4a0b      	ldr	r2, [pc, #44]	@ (8001cd0 <HAL_Init+0x74>)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ca6:	200f      	movs	r0, #15
 8001ca8:	f7ff fb20 	bl	80012ec <HAL_InitTick>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e002      	b.n	8001cbc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001cb6:	f7ff fa6f 	bl	8001198 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cba:	2300      	movs	r3, #0
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3708      	adds	r7, #8
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	58024400 	.word	0x58024400
 8001cc8:	080093e0 	.word	0x080093e0
 8001ccc:	24000008 	.word	0x24000008
 8001cd0:	24000004 	.word	0x24000004

08001cd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001cd8:	4b06      	ldr	r3, [pc, #24]	@ (8001cf4 <HAL_IncTick+0x20>)
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	461a      	mov	r2, r3
 8001cde:	4b06      	ldr	r3, [pc, #24]	@ (8001cf8 <HAL_IncTick+0x24>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	4a04      	ldr	r2, [pc, #16]	@ (8001cf8 <HAL_IncTick+0x24>)
 8001ce6:	6013      	str	r3, [r2, #0]
}
 8001ce8:	bf00      	nop
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	2400002c 	.word	0x2400002c
 8001cf8:	24000438 	.word	0x24000438

08001cfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  return uwTick;
 8001d00:	4b03      	ldr	r3, [pc, #12]	@ (8001d10 <HAL_GetTick+0x14>)
 8001d02:	681b      	ldr	r3, [r3, #0]
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	24000438 	.word	0x24000438

08001d14 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001d18:	4b03      	ldr	r3, [pc, #12]	@ (8001d28 <HAL_GetREVID+0x14>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	0c1b      	lsrs	r3, r3, #16
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr
 8001d28:	5c001000 	.word	0x5c001000

08001d2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f003 0307 	and.w	r3, r3, #7
 8001d3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d3c:	4b0b      	ldr	r3, [pc, #44]	@ (8001d6c <__NVIC_SetPriorityGrouping+0x40>)
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d42:	68ba      	ldr	r2, [r7, #8]
 8001d44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d48:	4013      	ands	r3, r2
 8001d4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001d54:	4b06      	ldr	r3, [pc, #24]	@ (8001d70 <__NVIC_SetPriorityGrouping+0x44>)
 8001d56:	4313      	orrs	r3, r2
 8001d58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d5a:	4a04      	ldr	r2, [pc, #16]	@ (8001d6c <__NVIC_SetPriorityGrouping+0x40>)
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	60d3      	str	r3, [r2, #12]
}
 8001d60:	bf00      	nop
 8001d62:	3714      	adds	r7, #20
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr
 8001d6c:	e000ed00 	.word	0xe000ed00
 8001d70:	05fa0000 	.word	0x05fa0000

08001d74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d78:	4b04      	ldr	r3, [pc, #16]	@ (8001d8c <__NVIC_GetPriorityGrouping+0x18>)
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	0a1b      	lsrs	r3, r3, #8
 8001d7e:	f003 0307 	and.w	r3, r3, #7
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr
 8001d8c:	e000ed00 	.word	0xe000ed00

08001d90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	4603      	mov	r3, r0
 8001d98:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	db0b      	blt.n	8001dba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001da2:	88fb      	ldrh	r3, [r7, #6]
 8001da4:	f003 021f 	and.w	r2, r3, #31
 8001da8:	4907      	ldr	r1, [pc, #28]	@ (8001dc8 <__NVIC_EnableIRQ+0x38>)
 8001daa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dae:	095b      	lsrs	r3, r3, #5
 8001db0:	2001      	movs	r0, #1
 8001db2:	fa00 f202 	lsl.w	r2, r0, r2
 8001db6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001dba:	bf00      	nop
 8001dbc:	370c      	adds	r7, #12
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	e000e100 	.word	0xe000e100

08001dcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	6039      	str	r1, [r7, #0]
 8001dd6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001dd8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	db0a      	blt.n	8001df6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	b2da      	uxtb	r2, r3
 8001de4:	490c      	ldr	r1, [pc, #48]	@ (8001e18 <__NVIC_SetPriority+0x4c>)
 8001de6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dea:	0112      	lsls	r2, r2, #4
 8001dec:	b2d2      	uxtb	r2, r2
 8001dee:	440b      	add	r3, r1
 8001df0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001df4:	e00a      	b.n	8001e0c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	b2da      	uxtb	r2, r3
 8001dfa:	4908      	ldr	r1, [pc, #32]	@ (8001e1c <__NVIC_SetPriority+0x50>)
 8001dfc:	88fb      	ldrh	r3, [r7, #6]
 8001dfe:	f003 030f 	and.w	r3, r3, #15
 8001e02:	3b04      	subs	r3, #4
 8001e04:	0112      	lsls	r2, r2, #4
 8001e06:	b2d2      	uxtb	r2, r2
 8001e08:	440b      	add	r3, r1
 8001e0a:	761a      	strb	r2, [r3, #24]
}
 8001e0c:	bf00      	nop
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr
 8001e18:	e000e100 	.word	0xe000e100
 8001e1c:	e000ed00 	.word	0xe000ed00

08001e20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b089      	sub	sp, #36	@ 0x24
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	60b9      	str	r1, [r7, #8]
 8001e2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	f003 0307 	and.w	r3, r3, #7
 8001e32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	f1c3 0307 	rsb	r3, r3, #7
 8001e3a:	2b04      	cmp	r3, #4
 8001e3c:	bf28      	it	cs
 8001e3e:	2304      	movcs	r3, #4
 8001e40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	3304      	adds	r3, #4
 8001e46:	2b06      	cmp	r3, #6
 8001e48:	d902      	bls.n	8001e50 <NVIC_EncodePriority+0x30>
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	3b03      	subs	r3, #3
 8001e4e:	e000      	b.n	8001e52 <NVIC_EncodePriority+0x32>
 8001e50:	2300      	movs	r3, #0
 8001e52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e54:	f04f 32ff 	mov.w	r2, #4294967295
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5e:	43da      	mvns	r2, r3
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	401a      	ands	r2, r3
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e68:	f04f 31ff 	mov.w	r1, #4294967295
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e72:	43d9      	mvns	r1, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e78:	4313      	orrs	r3, r2
         );
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3724      	adds	r7, #36	@ 0x24
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr

08001e86 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b082      	sub	sp, #8
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f7ff ff4c 	bl	8001d2c <__NVIC_SetPriorityGrouping>
}
 8001e94:	bf00      	nop
 8001e96:	3708      	adds	r7, #8
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b086      	sub	sp, #24
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	60b9      	str	r1, [r7, #8]
 8001ea6:	607a      	str	r2, [r7, #4]
 8001ea8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001eaa:	f7ff ff63 	bl	8001d74 <__NVIC_GetPriorityGrouping>
 8001eae:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eb0:	687a      	ldr	r2, [r7, #4]
 8001eb2:	68b9      	ldr	r1, [r7, #8]
 8001eb4:	6978      	ldr	r0, [r7, #20]
 8001eb6:	f7ff ffb3 	bl	8001e20 <NVIC_EncodePriority>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ec0:	4611      	mov	r1, r2
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7ff ff82 	bl	8001dcc <__NVIC_SetPriority>
}
 8001ec8:	bf00      	nop
 8001eca:	3718      	adds	r7, #24
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001eda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7ff ff56 	bl	8001d90 <__NVIC_EnableIRQ>
}
 8001ee4:	bf00      	nop
 8001ee6:	3708      	adds	r7, #8
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}

08001eec <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8001eec:	b480      	push	{r7}
 8001eee:	b087      	sub	sp, #28
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	60f8      	str	r0, [r7, #12]
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	607a      	str	r2, [r7, #4]
 8001ef8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8001efa:	2300      	movs	r3, #0
 8001efc:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d101      	bne.n	8001f08 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e00a      	b.n	8001f1e <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8001f08:	7afb      	ldrb	r3, [r7, #11]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d103      	bne.n	8001f16 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	605a      	str	r2, [r3, #4]
      break;
 8001f14:	e002      	b.n	8001f1c <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	75fb      	strb	r3, [r7, #23]
      break;
 8001f1a:	bf00      	nop
  }

  return status;
 8001f1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	371c      	adds	r7, #28
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr

08001f2a <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8001f2a:	b480      	push	{r7}
 8001f2c:	b083      	sub	sp, #12
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
 8001f32:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d101      	bne.n	8001f3e <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e003      	b.n	8001f46 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	683a      	ldr	r2, [r7, #0]
 8001f42:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001f44:	2300      	movs	r3, #0
  }
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	370c      	adds	r7, #12
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
	...

08001f54 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b086      	sub	sp, #24
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	0c1b      	lsrs	r3, r3, #16
 8001f62:	f003 0303 	and.w	r3, r3, #3
 8001f66:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 031f 	and.w	r3, r3, #31
 8001f70:	2201      	movs	r2, #1
 8001f72:	fa02 f303 	lsl.w	r3, r2, r3
 8001f76:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	011a      	lsls	r2, r3, #4
 8001f7c:	4b0c      	ldr	r3, [pc, #48]	@ (8001fb0 <HAL_EXTI_IRQHandler+0x5c>)
 8001f7e:	4413      	add	r3, r2
 8001f80:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	693a      	ldr	r2, [r7, #16]
 8001f88:	4013      	ands	r3, r2
 8001f8a:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d009      	beq.n	8001fa6 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	693a      	ldr	r2, [r7, #16]
 8001f96:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d002      	beq.n	8001fa6 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	4798      	blx	r3
    }
  }
}
 8001fa6:	bf00      	nop
 8001fa8:	3718      	adds	r7, #24
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	58000088 	.word	0x58000088

08001fb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b089      	sub	sp, #36	@ 0x24
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001fc2:	4b89      	ldr	r3, [pc, #548]	@ (80021e8 <HAL_GPIO_Init+0x234>)
 8001fc4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001fc6:	e194      	b.n	80022f2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	2101      	movs	r1, #1
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	f000 8186 	beq.w	80022ec <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f003 0303 	and.w	r3, r3, #3
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d005      	beq.n	8001ff8 <HAL_GPIO_Init+0x44>
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f003 0303 	and.w	r3, r3, #3
 8001ff4:	2b02      	cmp	r3, #2
 8001ff6:	d130      	bne.n	800205a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	005b      	lsls	r3, r3, #1
 8002002:	2203      	movs	r2, #3
 8002004:	fa02 f303 	lsl.w	r3, r2, r3
 8002008:	43db      	mvns	r3, r3
 800200a:	69ba      	ldr	r2, [r7, #24]
 800200c:	4013      	ands	r3, r2
 800200e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	68da      	ldr	r2, [r3, #12]
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	005b      	lsls	r3, r3, #1
 8002018:	fa02 f303 	lsl.w	r3, r2, r3
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	4313      	orrs	r3, r2
 8002020:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800202e:	2201      	movs	r2, #1
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	fa02 f303 	lsl.w	r3, r2, r3
 8002036:	43db      	mvns	r3, r3
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	4013      	ands	r3, r2
 800203c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	091b      	lsrs	r3, r3, #4
 8002044:	f003 0201 	and.w	r2, r3, #1
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	fa02 f303 	lsl.w	r3, r2, r3
 800204e:	69ba      	ldr	r2, [r7, #24]
 8002050:	4313      	orrs	r3, r2
 8002052:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	69ba      	ldr	r2, [r7, #24]
 8002058:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f003 0303 	and.w	r3, r3, #3
 8002062:	2b03      	cmp	r3, #3
 8002064:	d017      	beq.n	8002096 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	68db      	ldr	r3, [r3, #12]
 800206a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	005b      	lsls	r3, r3, #1
 8002070:	2203      	movs	r2, #3
 8002072:	fa02 f303 	lsl.w	r3, r2, r3
 8002076:	43db      	mvns	r3, r3
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	4013      	ands	r3, r2
 800207c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	689a      	ldr	r2, [r3, #8]
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	fa02 f303 	lsl.w	r3, r2, r3
 800208a:	69ba      	ldr	r2, [r7, #24]
 800208c:	4313      	orrs	r3, r2
 800208e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	69ba      	ldr	r2, [r7, #24]
 8002094:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f003 0303 	and.w	r3, r3, #3
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d123      	bne.n	80020ea <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	08da      	lsrs	r2, r3, #3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	3208      	adds	r2, #8
 80020aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	f003 0307 	and.w	r3, r3, #7
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	220f      	movs	r2, #15
 80020ba:	fa02 f303 	lsl.w	r3, r2, r3
 80020be:	43db      	mvns	r3, r3
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	4013      	ands	r3, r2
 80020c4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	691a      	ldr	r2, [r3, #16]
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	f003 0307 	and.w	r3, r3, #7
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	fa02 f303 	lsl.w	r3, r2, r3
 80020d6:	69ba      	ldr	r2, [r7, #24]
 80020d8:	4313      	orrs	r3, r2
 80020da:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	08da      	lsrs	r2, r3, #3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	3208      	adds	r2, #8
 80020e4:	69b9      	ldr	r1, [r7, #24]
 80020e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	005b      	lsls	r3, r3, #1
 80020f4:	2203      	movs	r2, #3
 80020f6:	fa02 f303 	lsl.w	r3, r2, r3
 80020fa:	43db      	mvns	r3, r3
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	4013      	ands	r3, r2
 8002100:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f003 0203 	and.w	r2, r3, #3
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	fa02 f303 	lsl.w	r3, r2, r3
 8002112:	69ba      	ldr	r2, [r7, #24]
 8002114:	4313      	orrs	r3, r2
 8002116:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	69ba      	ldr	r2, [r7, #24]
 800211c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002126:	2b00      	cmp	r3, #0
 8002128:	f000 80e0 	beq.w	80022ec <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800212c:	4b2f      	ldr	r3, [pc, #188]	@ (80021ec <HAL_GPIO_Init+0x238>)
 800212e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002132:	4a2e      	ldr	r2, [pc, #184]	@ (80021ec <HAL_GPIO_Init+0x238>)
 8002134:	f043 0302 	orr.w	r3, r3, #2
 8002138:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800213c:	4b2b      	ldr	r3, [pc, #172]	@ (80021ec <HAL_GPIO_Init+0x238>)
 800213e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002142:	f003 0302 	and.w	r3, r3, #2
 8002146:	60fb      	str	r3, [r7, #12]
 8002148:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800214a:	4a29      	ldr	r2, [pc, #164]	@ (80021f0 <HAL_GPIO_Init+0x23c>)
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	089b      	lsrs	r3, r3, #2
 8002150:	3302      	adds	r3, #2
 8002152:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002156:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	f003 0303 	and.w	r3, r3, #3
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	220f      	movs	r2, #15
 8002162:	fa02 f303 	lsl.w	r3, r2, r3
 8002166:	43db      	mvns	r3, r3
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	4013      	ands	r3, r2
 800216c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a20      	ldr	r2, [pc, #128]	@ (80021f4 <HAL_GPIO_Init+0x240>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d052      	beq.n	800221c <HAL_GPIO_Init+0x268>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a1f      	ldr	r2, [pc, #124]	@ (80021f8 <HAL_GPIO_Init+0x244>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d031      	beq.n	80021e2 <HAL_GPIO_Init+0x22e>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a1e      	ldr	r2, [pc, #120]	@ (80021fc <HAL_GPIO_Init+0x248>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d02b      	beq.n	80021de <HAL_GPIO_Init+0x22a>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a1d      	ldr	r2, [pc, #116]	@ (8002200 <HAL_GPIO_Init+0x24c>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d025      	beq.n	80021da <HAL_GPIO_Init+0x226>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a1c      	ldr	r2, [pc, #112]	@ (8002204 <HAL_GPIO_Init+0x250>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d01f      	beq.n	80021d6 <HAL_GPIO_Init+0x222>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a1b      	ldr	r2, [pc, #108]	@ (8002208 <HAL_GPIO_Init+0x254>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d019      	beq.n	80021d2 <HAL_GPIO_Init+0x21e>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a1a      	ldr	r2, [pc, #104]	@ (800220c <HAL_GPIO_Init+0x258>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d013      	beq.n	80021ce <HAL_GPIO_Init+0x21a>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a19      	ldr	r2, [pc, #100]	@ (8002210 <HAL_GPIO_Init+0x25c>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d00d      	beq.n	80021ca <HAL_GPIO_Init+0x216>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a18      	ldr	r2, [pc, #96]	@ (8002214 <HAL_GPIO_Init+0x260>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d007      	beq.n	80021c6 <HAL_GPIO_Init+0x212>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a17      	ldr	r2, [pc, #92]	@ (8002218 <HAL_GPIO_Init+0x264>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d101      	bne.n	80021c2 <HAL_GPIO_Init+0x20e>
 80021be:	2309      	movs	r3, #9
 80021c0:	e02d      	b.n	800221e <HAL_GPIO_Init+0x26a>
 80021c2:	230a      	movs	r3, #10
 80021c4:	e02b      	b.n	800221e <HAL_GPIO_Init+0x26a>
 80021c6:	2308      	movs	r3, #8
 80021c8:	e029      	b.n	800221e <HAL_GPIO_Init+0x26a>
 80021ca:	2307      	movs	r3, #7
 80021cc:	e027      	b.n	800221e <HAL_GPIO_Init+0x26a>
 80021ce:	2306      	movs	r3, #6
 80021d0:	e025      	b.n	800221e <HAL_GPIO_Init+0x26a>
 80021d2:	2305      	movs	r3, #5
 80021d4:	e023      	b.n	800221e <HAL_GPIO_Init+0x26a>
 80021d6:	2304      	movs	r3, #4
 80021d8:	e021      	b.n	800221e <HAL_GPIO_Init+0x26a>
 80021da:	2303      	movs	r3, #3
 80021dc:	e01f      	b.n	800221e <HAL_GPIO_Init+0x26a>
 80021de:	2302      	movs	r3, #2
 80021e0:	e01d      	b.n	800221e <HAL_GPIO_Init+0x26a>
 80021e2:	2301      	movs	r3, #1
 80021e4:	e01b      	b.n	800221e <HAL_GPIO_Init+0x26a>
 80021e6:	bf00      	nop
 80021e8:	58000080 	.word	0x58000080
 80021ec:	58024400 	.word	0x58024400
 80021f0:	58000400 	.word	0x58000400
 80021f4:	58020000 	.word	0x58020000
 80021f8:	58020400 	.word	0x58020400
 80021fc:	58020800 	.word	0x58020800
 8002200:	58020c00 	.word	0x58020c00
 8002204:	58021000 	.word	0x58021000
 8002208:	58021400 	.word	0x58021400
 800220c:	58021800 	.word	0x58021800
 8002210:	58021c00 	.word	0x58021c00
 8002214:	58022000 	.word	0x58022000
 8002218:	58022400 	.word	0x58022400
 800221c:	2300      	movs	r3, #0
 800221e:	69fa      	ldr	r2, [r7, #28]
 8002220:	f002 0203 	and.w	r2, r2, #3
 8002224:	0092      	lsls	r2, r2, #2
 8002226:	4093      	lsls	r3, r2
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	4313      	orrs	r3, r2
 800222c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800222e:	4938      	ldr	r1, [pc, #224]	@ (8002310 <HAL_GPIO_Init+0x35c>)
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	089b      	lsrs	r3, r3, #2
 8002234:	3302      	adds	r3, #2
 8002236:	69ba      	ldr	r2, [r7, #24]
 8002238:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800223c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	43db      	mvns	r3, r3
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	4013      	ands	r3, r2
 800224c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d003      	beq.n	8002262 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	4313      	orrs	r3, r2
 8002260:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002262:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002266:	69bb      	ldr	r3, [r7, #24]
 8002268:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800226a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	43db      	mvns	r3, r3
 8002276:	69ba      	ldr	r2, [r7, #24]
 8002278:	4013      	ands	r3, r2
 800227a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d003      	beq.n	8002290 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	4313      	orrs	r3, r2
 800228e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002290:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002294:	69bb      	ldr	r3, [r7, #24]
 8002296:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	43db      	mvns	r3, r3
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	4013      	ands	r3, r2
 80022a6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d003      	beq.n	80022bc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	69ba      	ldr	r2, [r7, #24]
 80022c0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	43db      	mvns	r3, r3
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	4013      	ands	r3, r2
 80022d0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d003      	beq.n	80022e6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	3301      	adds	r3, #1
 80022f0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	fa22 f303 	lsr.w	r3, r2, r3
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	f47f ae63 	bne.w	8001fc8 <HAL_GPIO_Init+0x14>
  }
}
 8002302:	bf00      	nop
 8002304:	bf00      	nop
 8002306:	3724      	adds	r7, #36	@ 0x24
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr
 8002310:	58000400 	.word	0x58000400

08002314 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	460b      	mov	r3, r1
 800231e:	807b      	strh	r3, [r7, #2]
 8002320:	4613      	mov	r3, r2
 8002322:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002324:	787b      	ldrb	r3, [r7, #1]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d003      	beq.n	8002332 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800232a:	887a      	ldrh	r2, [r7, #2]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002330:	e003      	b.n	800233a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002332:	887b      	ldrh	r3, [r7, #2]
 8002334:	041a      	lsls	r2, r3, #16
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	619a      	str	r2, [r3, #24]
}
 800233a:	bf00      	nop
 800233c:	370c      	adds	r7, #12
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr

08002346 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002346:	b480      	push	{r7}
 8002348:	b085      	sub	sp, #20
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]
 800234e:	460b      	mov	r3, r1
 8002350:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	695b      	ldr	r3, [r3, #20]
 8002356:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002358:	887a      	ldrh	r2, [r7, #2]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	4013      	ands	r3, r2
 800235e:	041a      	lsls	r2, r3, #16
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	43d9      	mvns	r1, r3
 8002364:	887b      	ldrh	r3, [r7, #2]
 8002366:	400b      	ands	r3, r1
 8002368:	431a      	orrs	r2, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	619a      	str	r2, [r3, #24]
}
 800236e:	bf00      	nop
 8002370:	3714      	adds	r7, #20
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
	...

0800237c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002384:	4b19      	ldr	r3, [pc, #100]	@ (80023ec <HAL_PWREx_ConfigSupply+0x70>)
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	f003 0304 	and.w	r3, r3, #4
 800238c:	2b04      	cmp	r3, #4
 800238e:	d00a      	beq.n	80023a6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002390:	4b16      	ldr	r3, [pc, #88]	@ (80023ec <HAL_PWREx_ConfigSupply+0x70>)
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	f003 0307 	and.w	r3, r3, #7
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	429a      	cmp	r2, r3
 800239c:	d001      	beq.n	80023a2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e01f      	b.n	80023e2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80023a2:	2300      	movs	r3, #0
 80023a4:	e01d      	b.n	80023e2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80023a6:	4b11      	ldr	r3, [pc, #68]	@ (80023ec <HAL_PWREx_ConfigSupply+0x70>)
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	f023 0207 	bic.w	r2, r3, #7
 80023ae:	490f      	ldr	r1, [pc, #60]	@ (80023ec <HAL_PWREx_ConfigSupply+0x70>)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	4313      	orrs	r3, r2
 80023b4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80023b6:	f7ff fca1 	bl	8001cfc <HAL_GetTick>
 80023ba:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80023bc:	e009      	b.n	80023d2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80023be:	f7ff fc9d 	bl	8001cfc <HAL_GetTick>
 80023c2:	4602      	mov	r2, r0
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80023cc:	d901      	bls.n	80023d2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e007      	b.n	80023e2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80023d2:	4b06      	ldr	r3, [pc, #24]	@ (80023ec <HAL_PWREx_ConfigSupply+0x70>)
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80023da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80023de:	d1ee      	bne.n	80023be <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80023e0:	2300      	movs	r3, #0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3710      	adds	r7, #16
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	58024800 	.word	0x58024800

080023f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b08c      	sub	sp, #48	@ 0x30
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d102      	bne.n	8002404 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	f000 bc48 	b.w	8002c94 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0301 	and.w	r3, r3, #1
 800240c:	2b00      	cmp	r3, #0
 800240e:	f000 8088 	beq.w	8002522 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002412:	4b99      	ldr	r3, [pc, #612]	@ (8002678 <HAL_RCC_OscConfig+0x288>)
 8002414:	691b      	ldr	r3, [r3, #16]
 8002416:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800241a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800241c:	4b96      	ldr	r3, [pc, #600]	@ (8002678 <HAL_RCC_OscConfig+0x288>)
 800241e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002420:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002422:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002424:	2b10      	cmp	r3, #16
 8002426:	d007      	beq.n	8002438 <HAL_RCC_OscConfig+0x48>
 8002428:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800242a:	2b18      	cmp	r3, #24
 800242c:	d111      	bne.n	8002452 <HAL_RCC_OscConfig+0x62>
 800242e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002430:	f003 0303 	and.w	r3, r3, #3
 8002434:	2b02      	cmp	r3, #2
 8002436:	d10c      	bne.n	8002452 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002438:	4b8f      	ldr	r3, [pc, #572]	@ (8002678 <HAL_RCC_OscConfig+0x288>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d06d      	beq.n	8002520 <HAL_RCC_OscConfig+0x130>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d169      	bne.n	8002520 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	f000 bc21 	b.w	8002c94 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800245a:	d106      	bne.n	800246a <HAL_RCC_OscConfig+0x7a>
 800245c:	4b86      	ldr	r3, [pc, #536]	@ (8002678 <HAL_RCC_OscConfig+0x288>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a85      	ldr	r2, [pc, #532]	@ (8002678 <HAL_RCC_OscConfig+0x288>)
 8002462:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002466:	6013      	str	r3, [r2, #0]
 8002468:	e02e      	b.n	80024c8 <HAL_RCC_OscConfig+0xd8>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d10c      	bne.n	800248c <HAL_RCC_OscConfig+0x9c>
 8002472:	4b81      	ldr	r3, [pc, #516]	@ (8002678 <HAL_RCC_OscConfig+0x288>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a80      	ldr	r2, [pc, #512]	@ (8002678 <HAL_RCC_OscConfig+0x288>)
 8002478:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800247c:	6013      	str	r3, [r2, #0]
 800247e:	4b7e      	ldr	r3, [pc, #504]	@ (8002678 <HAL_RCC_OscConfig+0x288>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a7d      	ldr	r2, [pc, #500]	@ (8002678 <HAL_RCC_OscConfig+0x288>)
 8002484:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002488:	6013      	str	r3, [r2, #0]
 800248a:	e01d      	b.n	80024c8 <HAL_RCC_OscConfig+0xd8>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002494:	d10c      	bne.n	80024b0 <HAL_RCC_OscConfig+0xc0>
 8002496:	4b78      	ldr	r3, [pc, #480]	@ (8002678 <HAL_RCC_OscConfig+0x288>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a77      	ldr	r2, [pc, #476]	@ (8002678 <HAL_RCC_OscConfig+0x288>)
 800249c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024a0:	6013      	str	r3, [r2, #0]
 80024a2:	4b75      	ldr	r3, [pc, #468]	@ (8002678 <HAL_RCC_OscConfig+0x288>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a74      	ldr	r2, [pc, #464]	@ (8002678 <HAL_RCC_OscConfig+0x288>)
 80024a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024ac:	6013      	str	r3, [r2, #0]
 80024ae:	e00b      	b.n	80024c8 <HAL_RCC_OscConfig+0xd8>
 80024b0:	4b71      	ldr	r3, [pc, #452]	@ (8002678 <HAL_RCC_OscConfig+0x288>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a70      	ldr	r2, [pc, #448]	@ (8002678 <HAL_RCC_OscConfig+0x288>)
 80024b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024ba:	6013      	str	r3, [r2, #0]
 80024bc:	4b6e      	ldr	r3, [pc, #440]	@ (8002678 <HAL_RCC_OscConfig+0x288>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a6d      	ldr	r2, [pc, #436]	@ (8002678 <HAL_RCC_OscConfig+0x288>)
 80024c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d013      	beq.n	80024f8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d0:	f7ff fc14 	bl	8001cfc <HAL_GetTick>
 80024d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80024d6:	e008      	b.n	80024ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024d8:	f7ff fc10 	bl	8001cfc <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	2b64      	cmp	r3, #100	@ 0x64
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e3d4      	b.n	8002c94 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80024ea:	4b63      	ldr	r3, [pc, #396]	@ (8002678 <HAL_RCC_OscConfig+0x288>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d0f0      	beq.n	80024d8 <HAL_RCC_OscConfig+0xe8>
 80024f6:	e014      	b.n	8002522 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f8:	f7ff fc00 	bl	8001cfc <HAL_GetTick>
 80024fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80024fe:	e008      	b.n	8002512 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002500:	f7ff fbfc 	bl	8001cfc <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b64      	cmp	r3, #100	@ 0x64
 800250c:	d901      	bls.n	8002512 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e3c0      	b.n	8002c94 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002512:	4b59      	ldr	r3, [pc, #356]	@ (8002678 <HAL_RCC_OscConfig+0x288>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d1f0      	bne.n	8002500 <HAL_RCC_OscConfig+0x110>
 800251e:	e000      	b.n	8002522 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002520:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0302 	and.w	r3, r3, #2
 800252a:	2b00      	cmp	r3, #0
 800252c:	f000 80ca 	beq.w	80026c4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002530:	4b51      	ldr	r3, [pc, #324]	@ (8002678 <HAL_RCC_OscConfig+0x288>)
 8002532:	691b      	ldr	r3, [r3, #16]
 8002534:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002538:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800253a:	4b4f      	ldr	r3, [pc, #316]	@ (8002678 <HAL_RCC_OscConfig+0x288>)
 800253c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800253e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002540:	6a3b      	ldr	r3, [r7, #32]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d007      	beq.n	8002556 <HAL_RCC_OscConfig+0x166>
 8002546:	6a3b      	ldr	r3, [r7, #32]
 8002548:	2b18      	cmp	r3, #24
 800254a:	d156      	bne.n	80025fa <HAL_RCC_OscConfig+0x20a>
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	f003 0303 	and.w	r3, r3, #3
 8002552:	2b00      	cmp	r3, #0
 8002554:	d151      	bne.n	80025fa <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002556:	4b48      	ldr	r3, [pc, #288]	@ (8002678 <HAL_RCC_OscConfig+0x288>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0304 	and.w	r3, r3, #4
 800255e:	2b00      	cmp	r3, #0
 8002560:	d005      	beq.n	800256e <HAL_RCC_OscConfig+0x17e>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d101      	bne.n	800256e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e392      	b.n	8002c94 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800256e:	4b42      	ldr	r3, [pc, #264]	@ (8002678 <HAL_RCC_OscConfig+0x288>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f023 0219 	bic.w	r2, r3, #25
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	493f      	ldr	r1, [pc, #252]	@ (8002678 <HAL_RCC_OscConfig+0x288>)
 800257c:	4313      	orrs	r3, r2
 800257e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002580:	f7ff fbbc 	bl	8001cfc <HAL_GetTick>
 8002584:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002586:	e008      	b.n	800259a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002588:	f7ff fbb8 	bl	8001cfc <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	2b02      	cmp	r3, #2
 8002594:	d901      	bls.n	800259a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e37c      	b.n	8002c94 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800259a:	4b37      	ldr	r3, [pc, #220]	@ (8002678 <HAL_RCC_OscConfig+0x288>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0304 	and.w	r3, r3, #4
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d0f0      	beq.n	8002588 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025a6:	f7ff fbb5 	bl	8001d14 <HAL_GetREVID>
 80025aa:	4603      	mov	r3, r0
 80025ac:	f241 0203 	movw	r2, #4099	@ 0x1003
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d817      	bhi.n	80025e4 <HAL_RCC_OscConfig+0x1f4>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	691b      	ldr	r3, [r3, #16]
 80025b8:	2b40      	cmp	r3, #64	@ 0x40
 80025ba:	d108      	bne.n	80025ce <HAL_RCC_OscConfig+0x1de>
 80025bc:	4b2e      	ldr	r3, [pc, #184]	@ (8002678 <HAL_RCC_OscConfig+0x288>)
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80025c4:	4a2c      	ldr	r2, [pc, #176]	@ (8002678 <HAL_RCC_OscConfig+0x288>)
 80025c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025ca:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025cc:	e07a      	b.n	80026c4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025ce:	4b2a      	ldr	r3, [pc, #168]	@ (8002678 <HAL_RCC_OscConfig+0x288>)
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	691b      	ldr	r3, [r3, #16]
 80025da:	031b      	lsls	r3, r3, #12
 80025dc:	4926      	ldr	r1, [pc, #152]	@ (8002678 <HAL_RCC_OscConfig+0x288>)
 80025de:	4313      	orrs	r3, r2
 80025e0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025e2:	e06f      	b.n	80026c4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025e4:	4b24      	ldr	r3, [pc, #144]	@ (8002678 <HAL_RCC_OscConfig+0x288>)
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	691b      	ldr	r3, [r3, #16]
 80025f0:	061b      	lsls	r3, r3, #24
 80025f2:	4921      	ldr	r1, [pc, #132]	@ (8002678 <HAL_RCC_OscConfig+0x288>)
 80025f4:	4313      	orrs	r3, r2
 80025f6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025f8:	e064      	b.n	80026c4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d047      	beq.n	8002692 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002602:	4b1d      	ldr	r3, [pc, #116]	@ (8002678 <HAL_RCC_OscConfig+0x288>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f023 0219 	bic.w	r2, r3, #25
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	491a      	ldr	r1, [pc, #104]	@ (8002678 <HAL_RCC_OscConfig+0x288>)
 8002610:	4313      	orrs	r3, r2
 8002612:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002614:	f7ff fb72 	bl	8001cfc <HAL_GetTick>
 8002618:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800261a:	e008      	b.n	800262e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800261c:	f7ff fb6e 	bl	8001cfc <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	2b02      	cmp	r3, #2
 8002628:	d901      	bls.n	800262e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e332      	b.n	8002c94 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800262e:	4b12      	ldr	r3, [pc, #72]	@ (8002678 <HAL_RCC_OscConfig+0x288>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0304 	and.w	r3, r3, #4
 8002636:	2b00      	cmp	r3, #0
 8002638:	d0f0      	beq.n	800261c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800263a:	f7ff fb6b 	bl	8001d14 <HAL_GetREVID>
 800263e:	4603      	mov	r3, r0
 8002640:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002644:	4293      	cmp	r3, r2
 8002646:	d819      	bhi.n	800267c <HAL_RCC_OscConfig+0x28c>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	691b      	ldr	r3, [r3, #16]
 800264c:	2b40      	cmp	r3, #64	@ 0x40
 800264e:	d108      	bne.n	8002662 <HAL_RCC_OscConfig+0x272>
 8002650:	4b09      	ldr	r3, [pc, #36]	@ (8002678 <HAL_RCC_OscConfig+0x288>)
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002658:	4a07      	ldr	r2, [pc, #28]	@ (8002678 <HAL_RCC_OscConfig+0x288>)
 800265a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800265e:	6053      	str	r3, [r2, #4]
 8002660:	e030      	b.n	80026c4 <HAL_RCC_OscConfig+0x2d4>
 8002662:	4b05      	ldr	r3, [pc, #20]	@ (8002678 <HAL_RCC_OscConfig+0x288>)
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	691b      	ldr	r3, [r3, #16]
 800266e:	031b      	lsls	r3, r3, #12
 8002670:	4901      	ldr	r1, [pc, #4]	@ (8002678 <HAL_RCC_OscConfig+0x288>)
 8002672:	4313      	orrs	r3, r2
 8002674:	604b      	str	r3, [r1, #4]
 8002676:	e025      	b.n	80026c4 <HAL_RCC_OscConfig+0x2d4>
 8002678:	58024400 	.word	0x58024400
 800267c:	4b9a      	ldr	r3, [pc, #616]	@ (80028e8 <HAL_RCC_OscConfig+0x4f8>)
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	691b      	ldr	r3, [r3, #16]
 8002688:	061b      	lsls	r3, r3, #24
 800268a:	4997      	ldr	r1, [pc, #604]	@ (80028e8 <HAL_RCC_OscConfig+0x4f8>)
 800268c:	4313      	orrs	r3, r2
 800268e:	604b      	str	r3, [r1, #4]
 8002690:	e018      	b.n	80026c4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002692:	4b95      	ldr	r3, [pc, #596]	@ (80028e8 <HAL_RCC_OscConfig+0x4f8>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a94      	ldr	r2, [pc, #592]	@ (80028e8 <HAL_RCC_OscConfig+0x4f8>)
 8002698:	f023 0301 	bic.w	r3, r3, #1
 800269c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800269e:	f7ff fb2d 	bl	8001cfc <HAL_GetTick>
 80026a2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80026a4:	e008      	b.n	80026b8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026a6:	f7ff fb29 	bl	8001cfc <HAL_GetTick>
 80026aa:	4602      	mov	r2, r0
 80026ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d901      	bls.n	80026b8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80026b4:	2303      	movs	r3, #3
 80026b6:	e2ed      	b.n	8002c94 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80026b8:	4b8b      	ldr	r3, [pc, #556]	@ (80028e8 <HAL_RCC_OscConfig+0x4f8>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0304 	and.w	r3, r3, #4
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d1f0      	bne.n	80026a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0310 	and.w	r3, r3, #16
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	f000 80a9 	beq.w	8002824 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026d2:	4b85      	ldr	r3, [pc, #532]	@ (80028e8 <HAL_RCC_OscConfig+0x4f8>)
 80026d4:	691b      	ldr	r3, [r3, #16]
 80026d6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80026da:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80026dc:	4b82      	ldr	r3, [pc, #520]	@ (80028e8 <HAL_RCC_OscConfig+0x4f8>)
 80026de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026e0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	2b08      	cmp	r3, #8
 80026e6:	d007      	beq.n	80026f8 <HAL_RCC_OscConfig+0x308>
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	2b18      	cmp	r3, #24
 80026ec:	d13a      	bne.n	8002764 <HAL_RCC_OscConfig+0x374>
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	f003 0303 	and.w	r3, r3, #3
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d135      	bne.n	8002764 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80026f8:	4b7b      	ldr	r3, [pc, #492]	@ (80028e8 <HAL_RCC_OscConfig+0x4f8>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002700:	2b00      	cmp	r3, #0
 8002702:	d005      	beq.n	8002710 <HAL_RCC_OscConfig+0x320>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	69db      	ldr	r3, [r3, #28]
 8002708:	2b80      	cmp	r3, #128	@ 0x80
 800270a:	d001      	beq.n	8002710 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e2c1      	b.n	8002c94 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002710:	f7ff fb00 	bl	8001d14 <HAL_GetREVID>
 8002714:	4603      	mov	r3, r0
 8002716:	f241 0203 	movw	r2, #4099	@ 0x1003
 800271a:	4293      	cmp	r3, r2
 800271c:	d817      	bhi.n	800274e <HAL_RCC_OscConfig+0x35e>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a1b      	ldr	r3, [r3, #32]
 8002722:	2b20      	cmp	r3, #32
 8002724:	d108      	bne.n	8002738 <HAL_RCC_OscConfig+0x348>
 8002726:	4b70      	ldr	r3, [pc, #448]	@ (80028e8 <HAL_RCC_OscConfig+0x4f8>)
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800272e:	4a6e      	ldr	r2, [pc, #440]	@ (80028e8 <HAL_RCC_OscConfig+0x4f8>)
 8002730:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002734:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002736:	e075      	b.n	8002824 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002738:	4b6b      	ldr	r3, [pc, #428]	@ (80028e8 <HAL_RCC_OscConfig+0x4f8>)
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6a1b      	ldr	r3, [r3, #32]
 8002744:	069b      	lsls	r3, r3, #26
 8002746:	4968      	ldr	r1, [pc, #416]	@ (80028e8 <HAL_RCC_OscConfig+0x4f8>)
 8002748:	4313      	orrs	r3, r2
 800274a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800274c:	e06a      	b.n	8002824 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800274e:	4b66      	ldr	r3, [pc, #408]	@ (80028e8 <HAL_RCC_OscConfig+0x4f8>)
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a1b      	ldr	r3, [r3, #32]
 800275a:	061b      	lsls	r3, r3, #24
 800275c:	4962      	ldr	r1, [pc, #392]	@ (80028e8 <HAL_RCC_OscConfig+0x4f8>)
 800275e:	4313      	orrs	r3, r2
 8002760:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002762:	e05f      	b.n	8002824 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	69db      	ldr	r3, [r3, #28]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d042      	beq.n	80027f2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800276c:	4b5e      	ldr	r3, [pc, #376]	@ (80028e8 <HAL_RCC_OscConfig+0x4f8>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a5d      	ldr	r2, [pc, #372]	@ (80028e8 <HAL_RCC_OscConfig+0x4f8>)
 8002772:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002776:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002778:	f7ff fac0 	bl	8001cfc <HAL_GetTick>
 800277c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800277e:	e008      	b.n	8002792 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002780:	f7ff fabc 	bl	8001cfc <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	2b02      	cmp	r3, #2
 800278c:	d901      	bls.n	8002792 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e280      	b.n	8002c94 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002792:	4b55      	ldr	r3, [pc, #340]	@ (80028e8 <HAL_RCC_OscConfig+0x4f8>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800279a:	2b00      	cmp	r3, #0
 800279c:	d0f0      	beq.n	8002780 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800279e:	f7ff fab9 	bl	8001d14 <HAL_GetREVID>
 80027a2:	4603      	mov	r3, r0
 80027a4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d817      	bhi.n	80027dc <HAL_RCC_OscConfig+0x3ec>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6a1b      	ldr	r3, [r3, #32]
 80027b0:	2b20      	cmp	r3, #32
 80027b2:	d108      	bne.n	80027c6 <HAL_RCC_OscConfig+0x3d6>
 80027b4:	4b4c      	ldr	r3, [pc, #304]	@ (80028e8 <HAL_RCC_OscConfig+0x4f8>)
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80027bc:	4a4a      	ldr	r2, [pc, #296]	@ (80028e8 <HAL_RCC_OscConfig+0x4f8>)
 80027be:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80027c2:	6053      	str	r3, [r2, #4]
 80027c4:	e02e      	b.n	8002824 <HAL_RCC_OscConfig+0x434>
 80027c6:	4b48      	ldr	r3, [pc, #288]	@ (80028e8 <HAL_RCC_OscConfig+0x4f8>)
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6a1b      	ldr	r3, [r3, #32]
 80027d2:	069b      	lsls	r3, r3, #26
 80027d4:	4944      	ldr	r1, [pc, #272]	@ (80028e8 <HAL_RCC_OscConfig+0x4f8>)
 80027d6:	4313      	orrs	r3, r2
 80027d8:	604b      	str	r3, [r1, #4]
 80027da:	e023      	b.n	8002824 <HAL_RCC_OscConfig+0x434>
 80027dc:	4b42      	ldr	r3, [pc, #264]	@ (80028e8 <HAL_RCC_OscConfig+0x4f8>)
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a1b      	ldr	r3, [r3, #32]
 80027e8:	061b      	lsls	r3, r3, #24
 80027ea:	493f      	ldr	r1, [pc, #252]	@ (80028e8 <HAL_RCC_OscConfig+0x4f8>)
 80027ec:	4313      	orrs	r3, r2
 80027ee:	60cb      	str	r3, [r1, #12]
 80027f0:	e018      	b.n	8002824 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80027f2:	4b3d      	ldr	r3, [pc, #244]	@ (80028e8 <HAL_RCC_OscConfig+0x4f8>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a3c      	ldr	r2, [pc, #240]	@ (80028e8 <HAL_RCC_OscConfig+0x4f8>)
 80027f8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80027fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027fe:	f7ff fa7d 	bl	8001cfc <HAL_GetTick>
 8002802:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002804:	e008      	b.n	8002818 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002806:	f7ff fa79 	bl	8001cfc <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	2b02      	cmp	r3, #2
 8002812:	d901      	bls.n	8002818 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002814:	2303      	movs	r3, #3
 8002816:	e23d      	b.n	8002c94 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002818:	4b33      	ldr	r3, [pc, #204]	@ (80028e8 <HAL_RCC_OscConfig+0x4f8>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002820:	2b00      	cmp	r3, #0
 8002822:	d1f0      	bne.n	8002806 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0308 	and.w	r3, r3, #8
 800282c:	2b00      	cmp	r3, #0
 800282e:	d036      	beq.n	800289e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	695b      	ldr	r3, [r3, #20]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d019      	beq.n	800286c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002838:	4b2b      	ldr	r3, [pc, #172]	@ (80028e8 <HAL_RCC_OscConfig+0x4f8>)
 800283a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800283c:	4a2a      	ldr	r2, [pc, #168]	@ (80028e8 <HAL_RCC_OscConfig+0x4f8>)
 800283e:	f043 0301 	orr.w	r3, r3, #1
 8002842:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002844:	f7ff fa5a 	bl	8001cfc <HAL_GetTick>
 8002848:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800284a:	e008      	b.n	800285e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800284c:	f7ff fa56 	bl	8001cfc <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	2b02      	cmp	r3, #2
 8002858:	d901      	bls.n	800285e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e21a      	b.n	8002c94 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800285e:	4b22      	ldr	r3, [pc, #136]	@ (80028e8 <HAL_RCC_OscConfig+0x4f8>)
 8002860:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002862:	f003 0302 	and.w	r3, r3, #2
 8002866:	2b00      	cmp	r3, #0
 8002868:	d0f0      	beq.n	800284c <HAL_RCC_OscConfig+0x45c>
 800286a:	e018      	b.n	800289e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800286c:	4b1e      	ldr	r3, [pc, #120]	@ (80028e8 <HAL_RCC_OscConfig+0x4f8>)
 800286e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002870:	4a1d      	ldr	r2, [pc, #116]	@ (80028e8 <HAL_RCC_OscConfig+0x4f8>)
 8002872:	f023 0301 	bic.w	r3, r3, #1
 8002876:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002878:	f7ff fa40 	bl	8001cfc <HAL_GetTick>
 800287c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800287e:	e008      	b.n	8002892 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002880:	f7ff fa3c 	bl	8001cfc <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	2b02      	cmp	r3, #2
 800288c:	d901      	bls.n	8002892 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e200      	b.n	8002c94 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002892:	4b15      	ldr	r3, [pc, #84]	@ (80028e8 <HAL_RCC_OscConfig+0x4f8>)
 8002894:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002896:	f003 0302 	and.w	r3, r3, #2
 800289a:	2b00      	cmp	r3, #0
 800289c:	d1f0      	bne.n	8002880 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0320 	and.w	r3, r3, #32
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d039      	beq.n	800291e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	699b      	ldr	r3, [r3, #24]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d01c      	beq.n	80028ec <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80028b2:	4b0d      	ldr	r3, [pc, #52]	@ (80028e8 <HAL_RCC_OscConfig+0x4f8>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a0c      	ldr	r2, [pc, #48]	@ (80028e8 <HAL_RCC_OscConfig+0x4f8>)
 80028b8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80028bc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80028be:	f7ff fa1d 	bl	8001cfc <HAL_GetTick>
 80028c2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80028c4:	e008      	b.n	80028d8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028c6:	f7ff fa19 	bl	8001cfc <HAL_GetTick>
 80028ca:	4602      	mov	r2, r0
 80028cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d901      	bls.n	80028d8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80028d4:	2303      	movs	r3, #3
 80028d6:	e1dd      	b.n	8002c94 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80028d8:	4b03      	ldr	r3, [pc, #12]	@ (80028e8 <HAL_RCC_OscConfig+0x4f8>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d0f0      	beq.n	80028c6 <HAL_RCC_OscConfig+0x4d6>
 80028e4:	e01b      	b.n	800291e <HAL_RCC_OscConfig+0x52e>
 80028e6:	bf00      	nop
 80028e8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80028ec:	4b9b      	ldr	r3, [pc, #620]	@ (8002b5c <HAL_RCC_OscConfig+0x76c>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a9a      	ldr	r2, [pc, #616]	@ (8002b5c <HAL_RCC_OscConfig+0x76c>)
 80028f2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80028f6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80028f8:	f7ff fa00 	bl	8001cfc <HAL_GetTick>
 80028fc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80028fe:	e008      	b.n	8002912 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002900:	f7ff f9fc 	bl	8001cfc <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	2b02      	cmp	r3, #2
 800290c:	d901      	bls.n	8002912 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e1c0      	b.n	8002c94 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002912:	4b92      	ldr	r3, [pc, #584]	@ (8002b5c <HAL_RCC_OscConfig+0x76c>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d1f0      	bne.n	8002900 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0304 	and.w	r3, r3, #4
 8002926:	2b00      	cmp	r3, #0
 8002928:	f000 8081 	beq.w	8002a2e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800292c:	4b8c      	ldr	r3, [pc, #560]	@ (8002b60 <HAL_RCC_OscConfig+0x770>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a8b      	ldr	r2, [pc, #556]	@ (8002b60 <HAL_RCC_OscConfig+0x770>)
 8002932:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002936:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002938:	f7ff f9e0 	bl	8001cfc <HAL_GetTick>
 800293c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800293e:	e008      	b.n	8002952 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002940:	f7ff f9dc 	bl	8001cfc <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	2b64      	cmp	r3, #100	@ 0x64
 800294c:	d901      	bls.n	8002952 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e1a0      	b.n	8002c94 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002952:	4b83      	ldr	r3, [pc, #524]	@ (8002b60 <HAL_RCC_OscConfig+0x770>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800295a:	2b00      	cmp	r3, #0
 800295c:	d0f0      	beq.n	8002940 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	2b01      	cmp	r3, #1
 8002964:	d106      	bne.n	8002974 <HAL_RCC_OscConfig+0x584>
 8002966:	4b7d      	ldr	r3, [pc, #500]	@ (8002b5c <HAL_RCC_OscConfig+0x76c>)
 8002968:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800296a:	4a7c      	ldr	r2, [pc, #496]	@ (8002b5c <HAL_RCC_OscConfig+0x76c>)
 800296c:	f043 0301 	orr.w	r3, r3, #1
 8002970:	6713      	str	r3, [r2, #112]	@ 0x70
 8002972:	e02d      	b.n	80029d0 <HAL_RCC_OscConfig+0x5e0>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d10c      	bne.n	8002996 <HAL_RCC_OscConfig+0x5a6>
 800297c:	4b77      	ldr	r3, [pc, #476]	@ (8002b5c <HAL_RCC_OscConfig+0x76c>)
 800297e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002980:	4a76      	ldr	r2, [pc, #472]	@ (8002b5c <HAL_RCC_OscConfig+0x76c>)
 8002982:	f023 0301 	bic.w	r3, r3, #1
 8002986:	6713      	str	r3, [r2, #112]	@ 0x70
 8002988:	4b74      	ldr	r3, [pc, #464]	@ (8002b5c <HAL_RCC_OscConfig+0x76c>)
 800298a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800298c:	4a73      	ldr	r2, [pc, #460]	@ (8002b5c <HAL_RCC_OscConfig+0x76c>)
 800298e:	f023 0304 	bic.w	r3, r3, #4
 8002992:	6713      	str	r3, [r2, #112]	@ 0x70
 8002994:	e01c      	b.n	80029d0 <HAL_RCC_OscConfig+0x5e0>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	2b05      	cmp	r3, #5
 800299c:	d10c      	bne.n	80029b8 <HAL_RCC_OscConfig+0x5c8>
 800299e:	4b6f      	ldr	r3, [pc, #444]	@ (8002b5c <HAL_RCC_OscConfig+0x76c>)
 80029a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029a2:	4a6e      	ldr	r2, [pc, #440]	@ (8002b5c <HAL_RCC_OscConfig+0x76c>)
 80029a4:	f043 0304 	orr.w	r3, r3, #4
 80029a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80029aa:	4b6c      	ldr	r3, [pc, #432]	@ (8002b5c <HAL_RCC_OscConfig+0x76c>)
 80029ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029ae:	4a6b      	ldr	r2, [pc, #428]	@ (8002b5c <HAL_RCC_OscConfig+0x76c>)
 80029b0:	f043 0301 	orr.w	r3, r3, #1
 80029b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80029b6:	e00b      	b.n	80029d0 <HAL_RCC_OscConfig+0x5e0>
 80029b8:	4b68      	ldr	r3, [pc, #416]	@ (8002b5c <HAL_RCC_OscConfig+0x76c>)
 80029ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029bc:	4a67      	ldr	r2, [pc, #412]	@ (8002b5c <HAL_RCC_OscConfig+0x76c>)
 80029be:	f023 0301 	bic.w	r3, r3, #1
 80029c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80029c4:	4b65      	ldr	r3, [pc, #404]	@ (8002b5c <HAL_RCC_OscConfig+0x76c>)
 80029c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029c8:	4a64      	ldr	r2, [pc, #400]	@ (8002b5c <HAL_RCC_OscConfig+0x76c>)
 80029ca:	f023 0304 	bic.w	r3, r3, #4
 80029ce:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d015      	beq.n	8002a04 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029d8:	f7ff f990 	bl	8001cfc <HAL_GetTick>
 80029dc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029de:	e00a      	b.n	80029f6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029e0:	f7ff f98c 	bl	8001cfc <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e14e      	b.n	8002c94 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029f6:	4b59      	ldr	r3, [pc, #356]	@ (8002b5c <HAL_RCC_OscConfig+0x76c>)
 80029f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d0ee      	beq.n	80029e0 <HAL_RCC_OscConfig+0x5f0>
 8002a02:	e014      	b.n	8002a2e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a04:	f7ff f97a 	bl	8001cfc <HAL_GetTick>
 8002a08:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002a0a:	e00a      	b.n	8002a22 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a0c:	f7ff f976 	bl	8001cfc <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d901      	bls.n	8002a22 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e138      	b.n	8002c94 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002a22:	4b4e      	ldr	r3, [pc, #312]	@ (8002b5c <HAL_RCC_OscConfig+0x76c>)
 8002a24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a26:	f003 0302 	and.w	r3, r3, #2
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d1ee      	bne.n	8002a0c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	f000 812d 	beq.w	8002c92 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002a38:	4b48      	ldr	r3, [pc, #288]	@ (8002b5c <HAL_RCC_OscConfig+0x76c>)
 8002a3a:	691b      	ldr	r3, [r3, #16]
 8002a3c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002a40:	2b18      	cmp	r3, #24
 8002a42:	f000 80bd 	beq.w	8002bc0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	f040 809e 	bne.w	8002b8c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a50:	4b42      	ldr	r3, [pc, #264]	@ (8002b5c <HAL_RCC_OscConfig+0x76c>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a41      	ldr	r2, [pc, #260]	@ (8002b5c <HAL_RCC_OscConfig+0x76c>)
 8002a56:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a5c:	f7ff f94e 	bl	8001cfc <HAL_GetTick>
 8002a60:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a62:	e008      	b.n	8002a76 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a64:	f7ff f94a 	bl	8001cfc <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d901      	bls.n	8002a76 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e10e      	b.n	8002c94 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a76:	4b39      	ldr	r3, [pc, #228]	@ (8002b5c <HAL_RCC_OscConfig+0x76c>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d1f0      	bne.n	8002a64 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a82:	4b36      	ldr	r3, [pc, #216]	@ (8002b5c <HAL_RCC_OscConfig+0x76c>)
 8002a84:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002a86:	4b37      	ldr	r3, [pc, #220]	@ (8002b64 <HAL_RCC_OscConfig+0x774>)
 8002a88:	4013      	ands	r3, r2
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002a92:	0112      	lsls	r2, r2, #4
 8002a94:	430a      	orrs	r2, r1
 8002a96:	4931      	ldr	r1, [pc, #196]	@ (8002b5c <HAL_RCC_OscConfig+0x76c>)
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	628b      	str	r3, [r1, #40]	@ 0x28
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aa0:	3b01      	subs	r3, #1
 8002aa2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002aaa:	3b01      	subs	r3, #1
 8002aac:	025b      	lsls	r3, r3, #9
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	431a      	orrs	r2, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	041b      	lsls	r3, r3, #16
 8002aba:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002abe:	431a      	orrs	r2, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ac4:	3b01      	subs	r3, #1
 8002ac6:	061b      	lsls	r3, r3, #24
 8002ac8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002acc:	4923      	ldr	r1, [pc, #140]	@ (8002b5c <HAL_RCC_OscConfig+0x76c>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002ad2:	4b22      	ldr	r3, [pc, #136]	@ (8002b5c <HAL_RCC_OscConfig+0x76c>)
 8002ad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ad6:	4a21      	ldr	r2, [pc, #132]	@ (8002b5c <HAL_RCC_OscConfig+0x76c>)
 8002ad8:	f023 0301 	bic.w	r3, r3, #1
 8002adc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002ade:	4b1f      	ldr	r3, [pc, #124]	@ (8002b5c <HAL_RCC_OscConfig+0x76c>)
 8002ae0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ae2:	4b21      	ldr	r3, [pc, #132]	@ (8002b68 <HAL_RCC_OscConfig+0x778>)
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002aea:	00d2      	lsls	r2, r2, #3
 8002aec:	491b      	ldr	r1, [pc, #108]	@ (8002b5c <HAL_RCC_OscConfig+0x76c>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002af2:	4b1a      	ldr	r3, [pc, #104]	@ (8002b5c <HAL_RCC_OscConfig+0x76c>)
 8002af4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002af6:	f023 020c 	bic.w	r2, r3, #12
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002afe:	4917      	ldr	r1, [pc, #92]	@ (8002b5c <HAL_RCC_OscConfig+0x76c>)
 8002b00:	4313      	orrs	r3, r2
 8002b02:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002b04:	4b15      	ldr	r3, [pc, #84]	@ (8002b5c <HAL_RCC_OscConfig+0x76c>)
 8002b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b08:	f023 0202 	bic.w	r2, r3, #2
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b10:	4912      	ldr	r1, [pc, #72]	@ (8002b5c <HAL_RCC_OscConfig+0x76c>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002b16:	4b11      	ldr	r3, [pc, #68]	@ (8002b5c <HAL_RCC_OscConfig+0x76c>)
 8002b18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b1a:	4a10      	ldr	r2, [pc, #64]	@ (8002b5c <HAL_RCC_OscConfig+0x76c>)
 8002b1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b20:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b22:	4b0e      	ldr	r3, [pc, #56]	@ (8002b5c <HAL_RCC_OscConfig+0x76c>)
 8002b24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b26:	4a0d      	ldr	r2, [pc, #52]	@ (8002b5c <HAL_RCC_OscConfig+0x76c>)
 8002b28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b2c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002b2e:	4b0b      	ldr	r3, [pc, #44]	@ (8002b5c <HAL_RCC_OscConfig+0x76c>)
 8002b30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b32:	4a0a      	ldr	r2, [pc, #40]	@ (8002b5c <HAL_RCC_OscConfig+0x76c>)
 8002b34:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b38:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002b3a:	4b08      	ldr	r3, [pc, #32]	@ (8002b5c <HAL_RCC_OscConfig+0x76c>)
 8002b3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b3e:	4a07      	ldr	r2, [pc, #28]	@ (8002b5c <HAL_RCC_OscConfig+0x76c>)
 8002b40:	f043 0301 	orr.w	r3, r3, #1
 8002b44:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b46:	4b05      	ldr	r3, [pc, #20]	@ (8002b5c <HAL_RCC_OscConfig+0x76c>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a04      	ldr	r2, [pc, #16]	@ (8002b5c <HAL_RCC_OscConfig+0x76c>)
 8002b4c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b52:	f7ff f8d3 	bl	8001cfc <HAL_GetTick>
 8002b56:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b58:	e011      	b.n	8002b7e <HAL_RCC_OscConfig+0x78e>
 8002b5a:	bf00      	nop
 8002b5c:	58024400 	.word	0x58024400
 8002b60:	58024800 	.word	0x58024800
 8002b64:	fffffc0c 	.word	0xfffffc0c
 8002b68:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b6c:	f7ff f8c6 	bl	8001cfc <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e08a      	b.n	8002c94 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b7e:	4b47      	ldr	r3, [pc, #284]	@ (8002c9c <HAL_RCC_OscConfig+0x8ac>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d0f0      	beq.n	8002b6c <HAL_RCC_OscConfig+0x77c>
 8002b8a:	e082      	b.n	8002c92 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b8c:	4b43      	ldr	r3, [pc, #268]	@ (8002c9c <HAL_RCC_OscConfig+0x8ac>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a42      	ldr	r2, [pc, #264]	@ (8002c9c <HAL_RCC_OscConfig+0x8ac>)
 8002b92:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b98:	f7ff f8b0 	bl	8001cfc <HAL_GetTick>
 8002b9c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b9e:	e008      	b.n	8002bb2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ba0:	f7ff f8ac 	bl	8001cfc <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d901      	bls.n	8002bb2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e070      	b.n	8002c94 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002bb2:	4b3a      	ldr	r3, [pc, #232]	@ (8002c9c <HAL_RCC_OscConfig+0x8ac>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d1f0      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x7b0>
 8002bbe:	e068      	b.n	8002c92 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002bc0:	4b36      	ldr	r3, [pc, #216]	@ (8002c9c <HAL_RCC_OscConfig+0x8ac>)
 8002bc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bc4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002bc6:	4b35      	ldr	r3, [pc, #212]	@ (8002c9c <HAL_RCC_OscConfig+0x8ac>)
 8002bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bca:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d031      	beq.n	8002c38 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	f003 0203 	and.w	r2, r3, #3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d12a      	bne.n	8002c38 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	091b      	lsrs	r3, r3, #4
 8002be6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d122      	bne.n	8002c38 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bfc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d11a      	bne.n	8002c38 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	0a5b      	lsrs	r3, r3, #9
 8002c06:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c0e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d111      	bne.n	8002c38 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	0c1b      	lsrs	r3, r3, #16
 8002c18:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c20:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d108      	bne.n	8002c38 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	0e1b      	lsrs	r3, r3, #24
 8002c2a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c32:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d001      	beq.n	8002c3c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e02b      	b.n	8002c94 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002c3c:	4b17      	ldr	r3, [pc, #92]	@ (8002c9c <HAL_RCC_OscConfig+0x8ac>)
 8002c3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c40:	08db      	lsrs	r3, r3, #3
 8002c42:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002c46:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c4c:	693a      	ldr	r2, [r7, #16]
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d01f      	beq.n	8002c92 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002c52:	4b12      	ldr	r3, [pc, #72]	@ (8002c9c <HAL_RCC_OscConfig+0x8ac>)
 8002c54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c56:	4a11      	ldr	r2, [pc, #68]	@ (8002c9c <HAL_RCC_OscConfig+0x8ac>)
 8002c58:	f023 0301 	bic.w	r3, r3, #1
 8002c5c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c5e:	f7ff f84d 	bl	8001cfc <HAL_GetTick>
 8002c62:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002c64:	bf00      	nop
 8002c66:	f7ff f849 	bl	8001cfc <HAL_GetTick>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d0f9      	beq.n	8002c66 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002c72:	4b0a      	ldr	r3, [pc, #40]	@ (8002c9c <HAL_RCC_OscConfig+0x8ac>)
 8002c74:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c76:	4b0a      	ldr	r3, [pc, #40]	@ (8002ca0 <HAL_RCC_OscConfig+0x8b0>)
 8002c78:	4013      	ands	r3, r2
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002c7e:	00d2      	lsls	r2, r2, #3
 8002c80:	4906      	ldr	r1, [pc, #24]	@ (8002c9c <HAL_RCC_OscConfig+0x8ac>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002c86:	4b05      	ldr	r3, [pc, #20]	@ (8002c9c <HAL_RCC_OscConfig+0x8ac>)
 8002c88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c8a:	4a04      	ldr	r2, [pc, #16]	@ (8002c9c <HAL_RCC_OscConfig+0x8ac>)
 8002c8c:	f043 0301 	orr.w	r3, r3, #1
 8002c90:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002c92:	2300      	movs	r3, #0
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3730      	adds	r7, #48	@ 0x30
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	58024400 	.word	0x58024400
 8002ca0:	ffff0007 	.word	0xffff0007

08002ca4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b086      	sub	sp, #24
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d101      	bne.n	8002cb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e19c      	b.n	8002ff2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cb8:	4b8a      	ldr	r3, [pc, #552]	@ (8002ee4 <HAL_RCC_ClockConfig+0x240>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 030f 	and.w	r3, r3, #15
 8002cc0:	683a      	ldr	r2, [r7, #0]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d910      	bls.n	8002ce8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cc6:	4b87      	ldr	r3, [pc, #540]	@ (8002ee4 <HAL_RCC_ClockConfig+0x240>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f023 020f 	bic.w	r2, r3, #15
 8002cce:	4985      	ldr	r1, [pc, #532]	@ (8002ee4 <HAL_RCC_ClockConfig+0x240>)
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cd6:	4b83      	ldr	r3, [pc, #524]	@ (8002ee4 <HAL_RCC_ClockConfig+0x240>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 030f 	and.w	r3, r3, #15
 8002cde:	683a      	ldr	r2, [r7, #0]
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d001      	beq.n	8002ce8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e184      	b.n	8002ff2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0304 	and.w	r3, r3, #4
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d010      	beq.n	8002d16 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	691a      	ldr	r2, [r3, #16]
 8002cf8:	4b7b      	ldr	r3, [pc, #492]	@ (8002ee8 <HAL_RCC_ClockConfig+0x244>)
 8002cfa:	699b      	ldr	r3, [r3, #24]
 8002cfc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d908      	bls.n	8002d16 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002d04:	4b78      	ldr	r3, [pc, #480]	@ (8002ee8 <HAL_RCC_ClockConfig+0x244>)
 8002d06:	699b      	ldr	r3, [r3, #24]
 8002d08:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	691b      	ldr	r3, [r3, #16]
 8002d10:	4975      	ldr	r1, [pc, #468]	@ (8002ee8 <HAL_RCC_ClockConfig+0x244>)
 8002d12:	4313      	orrs	r3, r2
 8002d14:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0308 	and.w	r3, r3, #8
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d010      	beq.n	8002d44 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	695a      	ldr	r2, [r3, #20]
 8002d26:	4b70      	ldr	r3, [pc, #448]	@ (8002ee8 <HAL_RCC_ClockConfig+0x244>)
 8002d28:	69db      	ldr	r3, [r3, #28]
 8002d2a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d908      	bls.n	8002d44 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002d32:	4b6d      	ldr	r3, [pc, #436]	@ (8002ee8 <HAL_RCC_ClockConfig+0x244>)
 8002d34:	69db      	ldr	r3, [r3, #28]
 8002d36:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	695b      	ldr	r3, [r3, #20]
 8002d3e:	496a      	ldr	r1, [pc, #424]	@ (8002ee8 <HAL_RCC_ClockConfig+0x244>)
 8002d40:	4313      	orrs	r3, r2
 8002d42:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0310 	and.w	r3, r3, #16
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d010      	beq.n	8002d72 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	699a      	ldr	r2, [r3, #24]
 8002d54:	4b64      	ldr	r3, [pc, #400]	@ (8002ee8 <HAL_RCC_ClockConfig+0x244>)
 8002d56:	69db      	ldr	r3, [r3, #28]
 8002d58:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d908      	bls.n	8002d72 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002d60:	4b61      	ldr	r3, [pc, #388]	@ (8002ee8 <HAL_RCC_ClockConfig+0x244>)
 8002d62:	69db      	ldr	r3, [r3, #28]
 8002d64:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	699b      	ldr	r3, [r3, #24]
 8002d6c:	495e      	ldr	r1, [pc, #376]	@ (8002ee8 <HAL_RCC_ClockConfig+0x244>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0320 	and.w	r3, r3, #32
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d010      	beq.n	8002da0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	69da      	ldr	r2, [r3, #28]
 8002d82:	4b59      	ldr	r3, [pc, #356]	@ (8002ee8 <HAL_RCC_ClockConfig+0x244>)
 8002d84:	6a1b      	ldr	r3, [r3, #32]
 8002d86:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d908      	bls.n	8002da0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002d8e:	4b56      	ldr	r3, [pc, #344]	@ (8002ee8 <HAL_RCC_ClockConfig+0x244>)
 8002d90:	6a1b      	ldr	r3, [r3, #32]
 8002d92:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	69db      	ldr	r3, [r3, #28]
 8002d9a:	4953      	ldr	r1, [pc, #332]	@ (8002ee8 <HAL_RCC_ClockConfig+0x244>)
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0302 	and.w	r3, r3, #2
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d010      	beq.n	8002dce <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	68da      	ldr	r2, [r3, #12]
 8002db0:	4b4d      	ldr	r3, [pc, #308]	@ (8002ee8 <HAL_RCC_ClockConfig+0x244>)
 8002db2:	699b      	ldr	r3, [r3, #24]
 8002db4:	f003 030f 	and.w	r3, r3, #15
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d908      	bls.n	8002dce <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dbc:	4b4a      	ldr	r3, [pc, #296]	@ (8002ee8 <HAL_RCC_ClockConfig+0x244>)
 8002dbe:	699b      	ldr	r3, [r3, #24]
 8002dc0:	f023 020f 	bic.w	r2, r3, #15
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	4947      	ldr	r1, [pc, #284]	@ (8002ee8 <HAL_RCC_ClockConfig+0x244>)
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0301 	and.w	r3, r3, #1
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d055      	beq.n	8002e86 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002dda:	4b43      	ldr	r3, [pc, #268]	@ (8002ee8 <HAL_RCC_ClockConfig+0x244>)
 8002ddc:	699b      	ldr	r3, [r3, #24]
 8002dde:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	4940      	ldr	r1, [pc, #256]	@ (8002ee8 <HAL_RCC_ClockConfig+0x244>)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d107      	bne.n	8002e04 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002df4:	4b3c      	ldr	r3, [pc, #240]	@ (8002ee8 <HAL_RCC_ClockConfig+0x244>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d121      	bne.n	8002e44 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e0f6      	b.n	8002ff2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	2b03      	cmp	r3, #3
 8002e0a:	d107      	bne.n	8002e1c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e0c:	4b36      	ldr	r3, [pc, #216]	@ (8002ee8 <HAL_RCC_ClockConfig+0x244>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d115      	bne.n	8002e44 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e0ea      	b.n	8002ff2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d107      	bne.n	8002e34 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002e24:	4b30      	ldr	r3, [pc, #192]	@ (8002ee8 <HAL_RCC_ClockConfig+0x244>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d109      	bne.n	8002e44 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e0de      	b.n	8002ff2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e34:	4b2c      	ldr	r3, [pc, #176]	@ (8002ee8 <HAL_RCC_ClockConfig+0x244>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0304 	and.w	r3, r3, #4
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d101      	bne.n	8002e44 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e0d6      	b.n	8002ff2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e44:	4b28      	ldr	r3, [pc, #160]	@ (8002ee8 <HAL_RCC_ClockConfig+0x244>)
 8002e46:	691b      	ldr	r3, [r3, #16]
 8002e48:	f023 0207 	bic.w	r2, r3, #7
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	4925      	ldr	r1, [pc, #148]	@ (8002ee8 <HAL_RCC_ClockConfig+0x244>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e56:	f7fe ff51 	bl	8001cfc <HAL_GetTick>
 8002e5a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e5c:	e00a      	b.n	8002e74 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e5e:	f7fe ff4d 	bl	8001cfc <HAL_GetTick>
 8002e62:	4602      	mov	r2, r0
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d901      	bls.n	8002e74 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002e70:	2303      	movs	r3, #3
 8002e72:	e0be      	b.n	8002ff2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e74:	4b1c      	ldr	r3, [pc, #112]	@ (8002ee8 <HAL_RCC_ClockConfig+0x244>)
 8002e76:	691b      	ldr	r3, [r3, #16]
 8002e78:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	00db      	lsls	r3, r3, #3
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d1eb      	bne.n	8002e5e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0302 	and.w	r3, r3, #2
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d010      	beq.n	8002eb4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	68da      	ldr	r2, [r3, #12]
 8002e96:	4b14      	ldr	r3, [pc, #80]	@ (8002ee8 <HAL_RCC_ClockConfig+0x244>)
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	f003 030f 	and.w	r3, r3, #15
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d208      	bcs.n	8002eb4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ea2:	4b11      	ldr	r3, [pc, #68]	@ (8002ee8 <HAL_RCC_ClockConfig+0x244>)
 8002ea4:	699b      	ldr	r3, [r3, #24]
 8002ea6:	f023 020f 	bic.w	r2, r3, #15
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	490e      	ldr	r1, [pc, #56]	@ (8002ee8 <HAL_RCC_ClockConfig+0x244>)
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002eb4:	4b0b      	ldr	r3, [pc, #44]	@ (8002ee4 <HAL_RCC_ClockConfig+0x240>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 030f 	and.w	r3, r3, #15
 8002ebc:	683a      	ldr	r2, [r7, #0]
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d214      	bcs.n	8002eec <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ec2:	4b08      	ldr	r3, [pc, #32]	@ (8002ee4 <HAL_RCC_ClockConfig+0x240>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f023 020f 	bic.w	r2, r3, #15
 8002eca:	4906      	ldr	r1, [pc, #24]	@ (8002ee4 <HAL_RCC_ClockConfig+0x240>)
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ed2:	4b04      	ldr	r3, [pc, #16]	@ (8002ee4 <HAL_RCC_ClockConfig+0x240>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 030f 	and.w	r3, r3, #15
 8002eda:	683a      	ldr	r2, [r7, #0]
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d005      	beq.n	8002eec <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e086      	b.n	8002ff2 <HAL_RCC_ClockConfig+0x34e>
 8002ee4:	52002000 	.word	0x52002000
 8002ee8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0304 	and.w	r3, r3, #4
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d010      	beq.n	8002f1a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	691a      	ldr	r2, [r3, #16]
 8002efc:	4b3f      	ldr	r3, [pc, #252]	@ (8002ffc <HAL_RCC_ClockConfig+0x358>)
 8002efe:	699b      	ldr	r3, [r3, #24]
 8002f00:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d208      	bcs.n	8002f1a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002f08:	4b3c      	ldr	r3, [pc, #240]	@ (8002ffc <HAL_RCC_ClockConfig+0x358>)
 8002f0a:	699b      	ldr	r3, [r3, #24]
 8002f0c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	691b      	ldr	r3, [r3, #16]
 8002f14:	4939      	ldr	r1, [pc, #228]	@ (8002ffc <HAL_RCC_ClockConfig+0x358>)
 8002f16:	4313      	orrs	r3, r2
 8002f18:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0308 	and.w	r3, r3, #8
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d010      	beq.n	8002f48 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	695a      	ldr	r2, [r3, #20]
 8002f2a:	4b34      	ldr	r3, [pc, #208]	@ (8002ffc <HAL_RCC_ClockConfig+0x358>)
 8002f2c:	69db      	ldr	r3, [r3, #28]
 8002f2e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d208      	bcs.n	8002f48 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002f36:	4b31      	ldr	r3, [pc, #196]	@ (8002ffc <HAL_RCC_ClockConfig+0x358>)
 8002f38:	69db      	ldr	r3, [r3, #28]
 8002f3a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	695b      	ldr	r3, [r3, #20]
 8002f42:	492e      	ldr	r1, [pc, #184]	@ (8002ffc <HAL_RCC_ClockConfig+0x358>)
 8002f44:	4313      	orrs	r3, r2
 8002f46:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0310 	and.w	r3, r3, #16
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d010      	beq.n	8002f76 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	699a      	ldr	r2, [r3, #24]
 8002f58:	4b28      	ldr	r3, [pc, #160]	@ (8002ffc <HAL_RCC_ClockConfig+0x358>)
 8002f5a:	69db      	ldr	r3, [r3, #28]
 8002f5c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d208      	bcs.n	8002f76 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002f64:	4b25      	ldr	r3, [pc, #148]	@ (8002ffc <HAL_RCC_ClockConfig+0x358>)
 8002f66:	69db      	ldr	r3, [r3, #28]
 8002f68:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	699b      	ldr	r3, [r3, #24]
 8002f70:	4922      	ldr	r1, [pc, #136]	@ (8002ffc <HAL_RCC_ClockConfig+0x358>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0320 	and.w	r3, r3, #32
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d010      	beq.n	8002fa4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	69da      	ldr	r2, [r3, #28]
 8002f86:	4b1d      	ldr	r3, [pc, #116]	@ (8002ffc <HAL_RCC_ClockConfig+0x358>)
 8002f88:	6a1b      	ldr	r3, [r3, #32]
 8002f8a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d208      	bcs.n	8002fa4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002f92:	4b1a      	ldr	r3, [pc, #104]	@ (8002ffc <HAL_RCC_ClockConfig+0x358>)
 8002f94:	6a1b      	ldr	r3, [r3, #32]
 8002f96:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	69db      	ldr	r3, [r3, #28]
 8002f9e:	4917      	ldr	r1, [pc, #92]	@ (8002ffc <HAL_RCC_ClockConfig+0x358>)
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002fa4:	f000 f834 	bl	8003010 <HAL_RCC_GetSysClockFreq>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	4b14      	ldr	r3, [pc, #80]	@ (8002ffc <HAL_RCC_ClockConfig+0x358>)
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	0a1b      	lsrs	r3, r3, #8
 8002fb0:	f003 030f 	and.w	r3, r3, #15
 8002fb4:	4912      	ldr	r1, [pc, #72]	@ (8003000 <HAL_RCC_ClockConfig+0x35c>)
 8002fb6:	5ccb      	ldrb	r3, [r1, r3]
 8002fb8:	f003 031f 	and.w	r3, r3, #31
 8002fbc:	fa22 f303 	lsr.w	r3, r2, r3
 8002fc0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002fc2:	4b0e      	ldr	r3, [pc, #56]	@ (8002ffc <HAL_RCC_ClockConfig+0x358>)
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	f003 030f 	and.w	r3, r3, #15
 8002fca:	4a0d      	ldr	r2, [pc, #52]	@ (8003000 <HAL_RCC_ClockConfig+0x35c>)
 8002fcc:	5cd3      	ldrb	r3, [r2, r3]
 8002fce:	f003 031f 	and.w	r3, r3, #31
 8002fd2:	693a      	ldr	r2, [r7, #16]
 8002fd4:	fa22 f303 	lsr.w	r3, r2, r3
 8002fd8:	4a0a      	ldr	r2, [pc, #40]	@ (8003004 <HAL_RCC_ClockConfig+0x360>)
 8002fda:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002fdc:	4a0a      	ldr	r2, [pc, #40]	@ (8003008 <HAL_RCC_ClockConfig+0x364>)
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002fe2:	4b0a      	ldr	r3, [pc, #40]	@ (800300c <HAL_RCC_ClockConfig+0x368>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f7fe f980 	bl	80012ec <HAL_InitTick>
 8002fec:	4603      	mov	r3, r0
 8002fee:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3718      	adds	r7, #24
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	58024400 	.word	0x58024400
 8003000:	080093e0 	.word	0x080093e0
 8003004:	24000008 	.word	0x24000008
 8003008:	24000004 	.word	0x24000004
 800300c:	24000028 	.word	0x24000028

08003010 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003010:	b480      	push	{r7}
 8003012:	b089      	sub	sp, #36	@ 0x24
 8003014:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003016:	4bb3      	ldr	r3, [pc, #716]	@ (80032e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800301e:	2b18      	cmp	r3, #24
 8003020:	f200 8155 	bhi.w	80032ce <HAL_RCC_GetSysClockFreq+0x2be>
 8003024:	a201      	add	r2, pc, #4	@ (adr r2, 800302c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800302a:	bf00      	nop
 800302c:	08003091 	.word	0x08003091
 8003030:	080032cf 	.word	0x080032cf
 8003034:	080032cf 	.word	0x080032cf
 8003038:	080032cf 	.word	0x080032cf
 800303c:	080032cf 	.word	0x080032cf
 8003040:	080032cf 	.word	0x080032cf
 8003044:	080032cf 	.word	0x080032cf
 8003048:	080032cf 	.word	0x080032cf
 800304c:	080030b7 	.word	0x080030b7
 8003050:	080032cf 	.word	0x080032cf
 8003054:	080032cf 	.word	0x080032cf
 8003058:	080032cf 	.word	0x080032cf
 800305c:	080032cf 	.word	0x080032cf
 8003060:	080032cf 	.word	0x080032cf
 8003064:	080032cf 	.word	0x080032cf
 8003068:	080032cf 	.word	0x080032cf
 800306c:	080030bd 	.word	0x080030bd
 8003070:	080032cf 	.word	0x080032cf
 8003074:	080032cf 	.word	0x080032cf
 8003078:	080032cf 	.word	0x080032cf
 800307c:	080032cf 	.word	0x080032cf
 8003080:	080032cf 	.word	0x080032cf
 8003084:	080032cf 	.word	0x080032cf
 8003088:	080032cf 	.word	0x080032cf
 800308c:	080030c3 	.word	0x080030c3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003090:	4b94      	ldr	r3, [pc, #592]	@ (80032e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0320 	and.w	r3, r3, #32
 8003098:	2b00      	cmp	r3, #0
 800309a:	d009      	beq.n	80030b0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800309c:	4b91      	ldr	r3, [pc, #580]	@ (80032e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	08db      	lsrs	r3, r3, #3
 80030a2:	f003 0303 	and.w	r3, r3, #3
 80030a6:	4a90      	ldr	r2, [pc, #576]	@ (80032e8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80030a8:	fa22 f303 	lsr.w	r3, r2, r3
 80030ac:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80030ae:	e111      	b.n	80032d4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80030b0:	4b8d      	ldr	r3, [pc, #564]	@ (80032e8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80030b2:	61bb      	str	r3, [r7, #24]
      break;
 80030b4:	e10e      	b.n	80032d4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80030b6:	4b8d      	ldr	r3, [pc, #564]	@ (80032ec <HAL_RCC_GetSysClockFreq+0x2dc>)
 80030b8:	61bb      	str	r3, [r7, #24]
      break;
 80030ba:	e10b      	b.n	80032d4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80030bc:	4b8c      	ldr	r3, [pc, #560]	@ (80032f0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80030be:	61bb      	str	r3, [r7, #24]
      break;
 80030c0:	e108      	b.n	80032d4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80030c2:	4b88      	ldr	r3, [pc, #544]	@ (80032e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030c6:	f003 0303 	and.w	r3, r3, #3
 80030ca:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80030cc:	4b85      	ldr	r3, [pc, #532]	@ (80032e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030d0:	091b      	lsrs	r3, r3, #4
 80030d2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80030d6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80030d8:	4b82      	ldr	r3, [pc, #520]	@ (80032e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030dc:	f003 0301 	and.w	r3, r3, #1
 80030e0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80030e2:	4b80      	ldr	r3, [pc, #512]	@ (80032e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030e6:	08db      	lsrs	r3, r3, #3
 80030e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80030ec:	68fa      	ldr	r2, [r7, #12]
 80030ee:	fb02 f303 	mul.w	r3, r2, r3
 80030f2:	ee07 3a90 	vmov	s15, r3
 80030f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030fa:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	2b00      	cmp	r3, #0
 8003102:	f000 80e1 	beq.w	80032c8 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	2b02      	cmp	r3, #2
 800310a:	f000 8083 	beq.w	8003214 <HAL_RCC_GetSysClockFreq+0x204>
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	2b02      	cmp	r3, #2
 8003112:	f200 80a1 	bhi.w	8003258 <HAL_RCC_GetSysClockFreq+0x248>
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d003      	beq.n	8003124 <HAL_RCC_GetSysClockFreq+0x114>
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	2b01      	cmp	r3, #1
 8003120:	d056      	beq.n	80031d0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003122:	e099      	b.n	8003258 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003124:	4b6f      	ldr	r3, [pc, #444]	@ (80032e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0320 	and.w	r3, r3, #32
 800312c:	2b00      	cmp	r3, #0
 800312e:	d02d      	beq.n	800318c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003130:	4b6c      	ldr	r3, [pc, #432]	@ (80032e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	08db      	lsrs	r3, r3, #3
 8003136:	f003 0303 	and.w	r3, r3, #3
 800313a:	4a6b      	ldr	r2, [pc, #428]	@ (80032e8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800313c:	fa22 f303 	lsr.w	r3, r2, r3
 8003140:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	ee07 3a90 	vmov	s15, r3
 8003148:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	ee07 3a90 	vmov	s15, r3
 8003152:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003156:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800315a:	4b62      	ldr	r3, [pc, #392]	@ (80032e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800315c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800315e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003162:	ee07 3a90 	vmov	s15, r3
 8003166:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800316a:	ed97 6a02 	vldr	s12, [r7, #8]
 800316e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80032f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003172:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003176:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800317a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800317e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003182:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003186:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800318a:	e087      	b.n	800329c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	ee07 3a90 	vmov	s15, r3
 8003192:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003196:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80032f8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800319a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800319e:	4b51      	ldr	r3, [pc, #324]	@ (80032e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031a6:	ee07 3a90 	vmov	s15, r3
 80031aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80031b2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80032f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80031b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80031c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031ca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80031ce:	e065      	b.n	800329c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	ee07 3a90 	vmov	s15, r3
 80031d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031da:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80032fc <HAL_RCC_GetSysClockFreq+0x2ec>
 80031de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031e2:	4b40      	ldr	r3, [pc, #256]	@ (80032e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031ea:	ee07 3a90 	vmov	s15, r3
 80031ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80031f6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80032f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80031fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003202:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003206:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800320a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800320e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003212:	e043      	b.n	800329c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	ee07 3a90 	vmov	s15, r3
 800321a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800321e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003300 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003222:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003226:	4b2f      	ldr	r3, [pc, #188]	@ (80032e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800322a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800322e:	ee07 3a90 	vmov	s15, r3
 8003232:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003236:	ed97 6a02 	vldr	s12, [r7, #8]
 800323a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80032f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800323e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003242:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003246:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800324a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800324e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003252:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003256:	e021      	b.n	800329c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	ee07 3a90 	vmov	s15, r3
 800325e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003262:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80032fc <HAL_RCC_GetSysClockFreq+0x2ec>
 8003266:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800326a:	4b1e      	ldr	r3, [pc, #120]	@ (80032e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800326c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800326e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003272:	ee07 3a90 	vmov	s15, r3
 8003276:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800327a:	ed97 6a02 	vldr	s12, [r7, #8]
 800327e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80032f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003282:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003286:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800328a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800328e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003292:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003296:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800329a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800329c:	4b11      	ldr	r3, [pc, #68]	@ (80032e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800329e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032a0:	0a5b      	lsrs	r3, r3, #9
 80032a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80032a6:	3301      	adds	r3, #1
 80032a8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	ee07 3a90 	vmov	s15, r3
 80032b0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80032b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80032b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80032c0:	ee17 3a90 	vmov	r3, s15
 80032c4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80032c6:	e005      	b.n	80032d4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80032c8:	2300      	movs	r3, #0
 80032ca:	61bb      	str	r3, [r7, #24]
      break;
 80032cc:	e002      	b.n	80032d4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80032ce:	4b07      	ldr	r3, [pc, #28]	@ (80032ec <HAL_RCC_GetSysClockFreq+0x2dc>)
 80032d0:	61bb      	str	r3, [r7, #24]
      break;
 80032d2:	bf00      	nop
  }

  return sysclockfreq;
 80032d4:	69bb      	ldr	r3, [r7, #24]
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3724      	adds	r7, #36	@ 0x24
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop
 80032e4:	58024400 	.word	0x58024400
 80032e8:	03d09000 	.word	0x03d09000
 80032ec:	003d0900 	.word	0x003d0900
 80032f0:	007a1200 	.word	0x007a1200
 80032f4:	46000000 	.word	0x46000000
 80032f8:	4c742400 	.word	0x4c742400
 80032fc:	4a742400 	.word	0x4a742400
 8003300:	4af42400 	.word	0x4af42400

08003304 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800330a:	f7ff fe81 	bl	8003010 <HAL_RCC_GetSysClockFreq>
 800330e:	4602      	mov	r2, r0
 8003310:	4b10      	ldr	r3, [pc, #64]	@ (8003354 <HAL_RCC_GetHCLKFreq+0x50>)
 8003312:	699b      	ldr	r3, [r3, #24]
 8003314:	0a1b      	lsrs	r3, r3, #8
 8003316:	f003 030f 	and.w	r3, r3, #15
 800331a:	490f      	ldr	r1, [pc, #60]	@ (8003358 <HAL_RCC_GetHCLKFreq+0x54>)
 800331c:	5ccb      	ldrb	r3, [r1, r3]
 800331e:	f003 031f 	and.w	r3, r3, #31
 8003322:	fa22 f303 	lsr.w	r3, r2, r3
 8003326:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003328:	4b0a      	ldr	r3, [pc, #40]	@ (8003354 <HAL_RCC_GetHCLKFreq+0x50>)
 800332a:	699b      	ldr	r3, [r3, #24]
 800332c:	f003 030f 	and.w	r3, r3, #15
 8003330:	4a09      	ldr	r2, [pc, #36]	@ (8003358 <HAL_RCC_GetHCLKFreq+0x54>)
 8003332:	5cd3      	ldrb	r3, [r2, r3]
 8003334:	f003 031f 	and.w	r3, r3, #31
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	fa22 f303 	lsr.w	r3, r2, r3
 800333e:	4a07      	ldr	r2, [pc, #28]	@ (800335c <HAL_RCC_GetHCLKFreq+0x58>)
 8003340:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003342:	4a07      	ldr	r2, [pc, #28]	@ (8003360 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003348:	4b04      	ldr	r3, [pc, #16]	@ (800335c <HAL_RCC_GetHCLKFreq+0x58>)
 800334a:	681b      	ldr	r3, [r3, #0]
}
 800334c:	4618      	mov	r0, r3
 800334e:	3708      	adds	r7, #8
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}
 8003354:	58024400 	.word	0x58024400
 8003358:	080093e0 	.word	0x080093e0
 800335c:	24000008 	.word	0x24000008
 8003360:	24000004 	.word	0x24000004

08003364 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003368:	f7ff ffcc 	bl	8003304 <HAL_RCC_GetHCLKFreq>
 800336c:	4602      	mov	r2, r0
 800336e:	4b06      	ldr	r3, [pc, #24]	@ (8003388 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003370:	69db      	ldr	r3, [r3, #28]
 8003372:	091b      	lsrs	r3, r3, #4
 8003374:	f003 0307 	and.w	r3, r3, #7
 8003378:	4904      	ldr	r1, [pc, #16]	@ (800338c <HAL_RCC_GetPCLK1Freq+0x28>)
 800337a:	5ccb      	ldrb	r3, [r1, r3]
 800337c:	f003 031f 	and.w	r3, r3, #31
 8003380:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003384:	4618      	mov	r0, r3
 8003386:	bd80      	pop	{r7, pc}
 8003388:	58024400 	.word	0x58024400
 800338c:	080093e0 	.word	0x080093e0

08003390 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003394:	f7ff ffb6 	bl	8003304 <HAL_RCC_GetHCLKFreq>
 8003398:	4602      	mov	r2, r0
 800339a:	4b06      	ldr	r3, [pc, #24]	@ (80033b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800339c:	69db      	ldr	r3, [r3, #28]
 800339e:	0a1b      	lsrs	r3, r3, #8
 80033a0:	f003 0307 	and.w	r3, r3, #7
 80033a4:	4904      	ldr	r1, [pc, #16]	@ (80033b8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80033a6:	5ccb      	ldrb	r3, [r1, r3]
 80033a8:	f003 031f 	and.w	r3, r3, #31
 80033ac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	58024400 	.word	0x58024400
 80033b8:	080093e0 	.word	0x080093e0

080033bc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	223f      	movs	r2, #63	@ 0x3f
 80033ca:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80033cc:	4b1a      	ldr	r3, [pc, #104]	@ (8003438 <HAL_RCC_GetClockConfig+0x7c>)
 80033ce:	691b      	ldr	r3, [r3, #16]
 80033d0:	f003 0207 	and.w	r2, r3, #7
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80033d8:	4b17      	ldr	r3, [pc, #92]	@ (8003438 <HAL_RCC_GetClockConfig+0x7c>)
 80033da:	699b      	ldr	r3, [r3, #24]
 80033dc:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80033e4:	4b14      	ldr	r3, [pc, #80]	@ (8003438 <HAL_RCC_GetClockConfig+0x7c>)
 80033e6:	699b      	ldr	r3, [r3, #24]
 80033e8:	f003 020f 	and.w	r2, r3, #15
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80033f0:	4b11      	ldr	r3, [pc, #68]	@ (8003438 <HAL_RCC_GetClockConfig+0x7c>)
 80033f2:	699b      	ldr	r3, [r3, #24]
 80033f4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80033fc:	4b0e      	ldr	r3, [pc, #56]	@ (8003438 <HAL_RCC_GetClockConfig+0x7c>)
 80033fe:	69db      	ldr	r3, [r3, #28]
 8003400:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8003408:	4b0b      	ldr	r3, [pc, #44]	@ (8003438 <HAL_RCC_GetClockConfig+0x7c>)
 800340a:	69db      	ldr	r3, [r3, #28]
 800340c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8003414:	4b08      	ldr	r3, [pc, #32]	@ (8003438 <HAL_RCC_GetClockConfig+0x7c>)
 8003416:	6a1b      	ldr	r3, [r3, #32]
 8003418:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003420:	4b06      	ldr	r3, [pc, #24]	@ (800343c <HAL_RCC_GetClockConfig+0x80>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 020f 	and.w	r2, r3, #15
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	601a      	str	r2, [r3, #0]
}
 800342c:	bf00      	nop
 800342e:	370c      	adds	r7, #12
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr
 8003438:	58024400 	.word	0x58024400
 800343c:	52002000 	.word	0x52002000

08003440 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003440:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003444:	b0ca      	sub	sp, #296	@ 0x128
 8003446:	af00      	add	r7, sp, #0
 8003448:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800344c:	2300      	movs	r3, #0
 800344e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003452:	2300      	movs	r3, #0
 8003454:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003458:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800345c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003460:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003464:	2500      	movs	r5, #0
 8003466:	ea54 0305 	orrs.w	r3, r4, r5
 800346a:	d049      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800346c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003470:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003472:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003476:	d02f      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003478:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800347c:	d828      	bhi.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800347e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003482:	d01a      	beq.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003484:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003488:	d822      	bhi.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800348a:	2b00      	cmp	r3, #0
 800348c:	d003      	beq.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800348e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003492:	d007      	beq.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003494:	e01c      	b.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003496:	4bb8      	ldr	r3, [pc, #736]	@ (8003778 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800349a:	4ab7      	ldr	r2, [pc, #732]	@ (8003778 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800349c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80034a2:	e01a      	b.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80034a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034a8:	3308      	adds	r3, #8
 80034aa:	2102      	movs	r1, #2
 80034ac:	4618      	mov	r0, r3
 80034ae:	f001 fc8f 	bl	8004dd0 <RCCEx_PLL2_Config>
 80034b2:	4603      	mov	r3, r0
 80034b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80034b8:	e00f      	b.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80034ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034be:	3328      	adds	r3, #40	@ 0x28
 80034c0:	2102      	movs	r1, #2
 80034c2:	4618      	mov	r0, r3
 80034c4:	f001 fd36 	bl	8004f34 <RCCEx_PLL3_Config>
 80034c8:	4603      	mov	r3, r0
 80034ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80034ce:	e004      	b.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80034d6:	e000      	b.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80034d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d10a      	bne.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80034e2:	4ba5      	ldr	r3, [pc, #660]	@ (8003778 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034e6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80034ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034ee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80034f0:	4aa1      	ldr	r2, [pc, #644]	@ (8003778 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034f2:	430b      	orrs	r3, r1
 80034f4:	6513      	str	r3, [r2, #80]	@ 0x50
 80034f6:	e003      	b.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003500:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003508:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800350c:	f04f 0900 	mov.w	r9, #0
 8003510:	ea58 0309 	orrs.w	r3, r8, r9
 8003514:	d047      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003516:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800351a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800351c:	2b04      	cmp	r3, #4
 800351e:	d82a      	bhi.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003520:	a201      	add	r2, pc, #4	@ (adr r2, 8003528 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003526:	bf00      	nop
 8003528:	0800353d 	.word	0x0800353d
 800352c:	0800354b 	.word	0x0800354b
 8003530:	08003561 	.word	0x08003561
 8003534:	0800357f 	.word	0x0800357f
 8003538:	0800357f 	.word	0x0800357f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800353c:	4b8e      	ldr	r3, [pc, #568]	@ (8003778 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800353e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003540:	4a8d      	ldr	r2, [pc, #564]	@ (8003778 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003542:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003546:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003548:	e01a      	b.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800354a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800354e:	3308      	adds	r3, #8
 8003550:	2100      	movs	r1, #0
 8003552:	4618      	mov	r0, r3
 8003554:	f001 fc3c 	bl	8004dd0 <RCCEx_PLL2_Config>
 8003558:	4603      	mov	r3, r0
 800355a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800355e:	e00f      	b.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003560:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003564:	3328      	adds	r3, #40	@ 0x28
 8003566:	2100      	movs	r1, #0
 8003568:	4618      	mov	r0, r3
 800356a:	f001 fce3 	bl	8004f34 <RCCEx_PLL3_Config>
 800356e:	4603      	mov	r3, r0
 8003570:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003574:	e004      	b.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800357c:	e000      	b.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800357e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003580:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003584:	2b00      	cmp	r3, #0
 8003586:	d10a      	bne.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003588:	4b7b      	ldr	r3, [pc, #492]	@ (8003778 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800358a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800358c:	f023 0107 	bic.w	r1, r3, #7
 8003590:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003594:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003596:	4a78      	ldr	r2, [pc, #480]	@ (8003778 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003598:	430b      	orrs	r3, r1
 800359a:	6513      	str	r3, [r2, #80]	@ 0x50
 800359c:	e003      	b.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800359e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80035a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ae:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80035b2:	f04f 0b00 	mov.w	fp, #0
 80035b6:	ea5a 030b 	orrs.w	r3, sl, fp
 80035ba:	d04c      	beq.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80035bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035c6:	d030      	beq.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80035c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035cc:	d829      	bhi.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80035ce:	2bc0      	cmp	r3, #192	@ 0xc0
 80035d0:	d02d      	beq.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80035d2:	2bc0      	cmp	r3, #192	@ 0xc0
 80035d4:	d825      	bhi.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80035d6:	2b80      	cmp	r3, #128	@ 0x80
 80035d8:	d018      	beq.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80035da:	2b80      	cmp	r3, #128	@ 0x80
 80035dc:	d821      	bhi.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d002      	beq.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80035e2:	2b40      	cmp	r3, #64	@ 0x40
 80035e4:	d007      	beq.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80035e6:	e01c      	b.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035e8:	4b63      	ldr	r3, [pc, #396]	@ (8003778 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035ec:	4a62      	ldr	r2, [pc, #392]	@ (8003778 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80035f4:	e01c      	b.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80035f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035fa:	3308      	adds	r3, #8
 80035fc:	2100      	movs	r1, #0
 80035fe:	4618      	mov	r0, r3
 8003600:	f001 fbe6 	bl	8004dd0 <RCCEx_PLL2_Config>
 8003604:	4603      	mov	r3, r0
 8003606:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800360a:	e011      	b.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800360c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003610:	3328      	adds	r3, #40	@ 0x28
 8003612:	2100      	movs	r1, #0
 8003614:	4618      	mov	r0, r3
 8003616:	f001 fc8d 	bl	8004f34 <RCCEx_PLL3_Config>
 800361a:	4603      	mov	r3, r0
 800361c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003620:	e006      	b.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003628:	e002      	b.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800362a:	bf00      	nop
 800362c:	e000      	b.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800362e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003630:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003634:	2b00      	cmp	r3, #0
 8003636:	d10a      	bne.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003638:	4b4f      	ldr	r3, [pc, #316]	@ (8003778 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800363a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800363c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003640:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003644:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003646:	4a4c      	ldr	r2, [pc, #304]	@ (8003778 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003648:	430b      	orrs	r3, r1
 800364a:	6513      	str	r3, [r2, #80]	@ 0x50
 800364c:	e003      	b.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800364e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003652:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003656:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800365a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800365e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003662:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003666:	2300      	movs	r3, #0
 8003668:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800366c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003670:	460b      	mov	r3, r1
 8003672:	4313      	orrs	r3, r2
 8003674:	d053      	beq.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003676:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800367a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800367e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003682:	d035      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003684:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003688:	d82e      	bhi.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800368a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800368e:	d031      	beq.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003690:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003694:	d828      	bhi.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003696:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800369a:	d01a      	beq.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800369c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80036a0:	d822      	bhi.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d003      	beq.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80036a6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80036aa:	d007      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80036ac:	e01c      	b.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036ae:	4b32      	ldr	r3, [pc, #200]	@ (8003778 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036b2:	4a31      	ldr	r2, [pc, #196]	@ (8003778 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80036ba:	e01c      	b.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80036bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036c0:	3308      	adds	r3, #8
 80036c2:	2100      	movs	r1, #0
 80036c4:	4618      	mov	r0, r3
 80036c6:	f001 fb83 	bl	8004dd0 <RCCEx_PLL2_Config>
 80036ca:	4603      	mov	r3, r0
 80036cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80036d0:	e011      	b.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80036d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036d6:	3328      	adds	r3, #40	@ 0x28
 80036d8:	2100      	movs	r1, #0
 80036da:	4618      	mov	r0, r3
 80036dc:	f001 fc2a 	bl	8004f34 <RCCEx_PLL3_Config>
 80036e0:	4603      	mov	r3, r0
 80036e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80036e6:	e006      	b.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80036ee:	e002      	b.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80036f0:	bf00      	nop
 80036f2:	e000      	b.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80036f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d10b      	bne.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80036fe:	4b1e      	ldr	r3, [pc, #120]	@ (8003778 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003700:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003702:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003706:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800370a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800370e:	4a1a      	ldr	r2, [pc, #104]	@ (8003778 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003710:	430b      	orrs	r3, r1
 8003712:	6593      	str	r3, [r2, #88]	@ 0x58
 8003714:	e003      	b.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003716:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800371a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800371e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003726:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800372a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800372e:	2300      	movs	r3, #0
 8003730:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003734:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003738:	460b      	mov	r3, r1
 800373a:	4313      	orrs	r3, r2
 800373c:	d056      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800373e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003742:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003746:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800374a:	d038      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800374c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003750:	d831      	bhi.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003752:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003756:	d034      	beq.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003758:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800375c:	d82b      	bhi.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800375e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003762:	d01d      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003764:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003768:	d825      	bhi.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800376a:	2b00      	cmp	r3, #0
 800376c:	d006      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800376e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003772:	d00a      	beq.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003774:	e01f      	b.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003776:	bf00      	nop
 8003778:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800377c:	4ba2      	ldr	r3, [pc, #648]	@ (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800377e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003780:	4aa1      	ldr	r2, [pc, #644]	@ (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003782:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003786:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003788:	e01c      	b.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800378a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800378e:	3308      	adds	r3, #8
 8003790:	2100      	movs	r1, #0
 8003792:	4618      	mov	r0, r3
 8003794:	f001 fb1c 	bl	8004dd0 <RCCEx_PLL2_Config>
 8003798:	4603      	mov	r3, r0
 800379a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800379e:	e011      	b.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80037a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037a4:	3328      	adds	r3, #40	@ 0x28
 80037a6:	2100      	movs	r1, #0
 80037a8:	4618      	mov	r0, r3
 80037aa:	f001 fbc3 	bl	8004f34 <RCCEx_PLL3_Config>
 80037ae:	4603      	mov	r3, r0
 80037b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80037b4:	e006      	b.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80037bc:	e002      	b.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80037be:	bf00      	nop
 80037c0:	e000      	b.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80037c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d10b      	bne.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80037cc:	4b8e      	ldr	r3, [pc, #568]	@ (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037d0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80037d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037d8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80037dc:	4a8a      	ldr	r2, [pc, #552]	@ (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037de:	430b      	orrs	r3, r1
 80037e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80037e2:	e003      	b.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80037ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037f4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80037f8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80037fc:	2300      	movs	r3, #0
 80037fe:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003802:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003806:	460b      	mov	r3, r1
 8003808:	4313      	orrs	r3, r2
 800380a:	d03a      	beq.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800380c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003810:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003812:	2b30      	cmp	r3, #48	@ 0x30
 8003814:	d01f      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003816:	2b30      	cmp	r3, #48	@ 0x30
 8003818:	d819      	bhi.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800381a:	2b20      	cmp	r3, #32
 800381c:	d00c      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800381e:	2b20      	cmp	r3, #32
 8003820:	d815      	bhi.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003822:	2b00      	cmp	r3, #0
 8003824:	d019      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003826:	2b10      	cmp	r3, #16
 8003828:	d111      	bne.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800382a:	4b77      	ldr	r3, [pc, #476]	@ (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800382c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800382e:	4a76      	ldr	r2, [pc, #472]	@ (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003830:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003834:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003836:	e011      	b.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003838:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800383c:	3308      	adds	r3, #8
 800383e:	2102      	movs	r1, #2
 8003840:	4618      	mov	r0, r3
 8003842:	f001 fac5 	bl	8004dd0 <RCCEx_PLL2_Config>
 8003846:	4603      	mov	r3, r0
 8003848:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800384c:	e006      	b.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003854:	e002      	b.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003856:	bf00      	nop
 8003858:	e000      	b.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800385a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800385c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003860:	2b00      	cmp	r3, #0
 8003862:	d10a      	bne.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003864:	4b68      	ldr	r3, [pc, #416]	@ (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003866:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003868:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800386c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003872:	4a65      	ldr	r2, [pc, #404]	@ (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003874:	430b      	orrs	r3, r1
 8003876:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003878:	e003      	b.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800387a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800387e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003882:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800388a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800388e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003892:	2300      	movs	r3, #0
 8003894:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003898:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800389c:	460b      	mov	r3, r1
 800389e:	4313      	orrs	r3, r2
 80038a0:	d051      	beq.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80038a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038a8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80038ac:	d035      	beq.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80038ae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80038b2:	d82e      	bhi.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80038b4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80038b8:	d031      	beq.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80038ba:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80038be:	d828      	bhi.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80038c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038c4:	d01a      	beq.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80038c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038ca:	d822      	bhi.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d003      	beq.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80038d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038d4:	d007      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80038d6:	e01c      	b.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038d8:	4b4b      	ldr	r3, [pc, #300]	@ (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038dc:	4a4a      	ldr	r2, [pc, #296]	@ (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80038e4:	e01c      	b.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80038e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038ea:	3308      	adds	r3, #8
 80038ec:	2100      	movs	r1, #0
 80038ee:	4618      	mov	r0, r3
 80038f0:	f001 fa6e 	bl	8004dd0 <RCCEx_PLL2_Config>
 80038f4:	4603      	mov	r3, r0
 80038f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80038fa:	e011      	b.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80038fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003900:	3328      	adds	r3, #40	@ 0x28
 8003902:	2100      	movs	r1, #0
 8003904:	4618      	mov	r0, r3
 8003906:	f001 fb15 	bl	8004f34 <RCCEx_PLL3_Config>
 800390a:	4603      	mov	r3, r0
 800390c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003910:	e006      	b.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003918:	e002      	b.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800391a:	bf00      	nop
 800391c:	e000      	b.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800391e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003920:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003924:	2b00      	cmp	r3, #0
 8003926:	d10a      	bne.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003928:	4b37      	ldr	r3, [pc, #220]	@ (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800392a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800392c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003930:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003934:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003936:	4a34      	ldr	r2, [pc, #208]	@ (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003938:	430b      	orrs	r3, r1
 800393a:	6513      	str	r3, [r2, #80]	@ 0x50
 800393c:	e003      	b.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800393e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003942:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003946:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800394a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800394e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003952:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003956:	2300      	movs	r3, #0
 8003958:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800395c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003960:	460b      	mov	r3, r1
 8003962:	4313      	orrs	r3, r2
 8003964:	d056      	beq.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003966:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800396a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800396c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003970:	d033      	beq.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003972:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003976:	d82c      	bhi.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003978:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800397c:	d02f      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800397e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003982:	d826      	bhi.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003984:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003988:	d02b      	beq.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800398a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800398e:	d820      	bhi.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003990:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003994:	d012      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003996:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800399a:	d81a      	bhi.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800399c:	2b00      	cmp	r3, #0
 800399e:	d022      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80039a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039a4:	d115      	bne.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80039a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039aa:	3308      	adds	r3, #8
 80039ac:	2101      	movs	r1, #1
 80039ae:	4618      	mov	r0, r3
 80039b0:	f001 fa0e 	bl	8004dd0 <RCCEx_PLL2_Config>
 80039b4:	4603      	mov	r3, r0
 80039b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80039ba:	e015      	b.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80039bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039c0:	3328      	adds	r3, #40	@ 0x28
 80039c2:	2101      	movs	r1, #1
 80039c4:	4618      	mov	r0, r3
 80039c6:	f001 fab5 	bl	8004f34 <RCCEx_PLL3_Config>
 80039ca:	4603      	mov	r3, r0
 80039cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80039d0:	e00a      	b.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80039d8:	e006      	b.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80039da:	bf00      	nop
 80039dc:	e004      	b.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80039de:	bf00      	nop
 80039e0:	e002      	b.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80039e2:	bf00      	nop
 80039e4:	e000      	b.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80039e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d10d      	bne.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80039f0:	4b05      	ldr	r3, [pc, #20]	@ (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039f4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80039f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80039fe:	4a02      	ldr	r2, [pc, #8]	@ (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a00:	430b      	orrs	r3, r1
 8003a02:	6513      	str	r3, [r2, #80]	@ 0x50
 8003a04:	e006      	b.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003a06:	bf00      	nop
 8003a08:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a10:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003a14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a1c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003a20:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003a24:	2300      	movs	r3, #0
 8003a26:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003a2a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003a2e:	460b      	mov	r3, r1
 8003a30:	4313      	orrs	r3, r2
 8003a32:	d055      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003a34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a38:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003a3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a40:	d033      	beq.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003a42:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a46:	d82c      	bhi.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003a48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a4c:	d02f      	beq.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003a4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a52:	d826      	bhi.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003a54:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003a58:	d02b      	beq.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003a5a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003a5e:	d820      	bhi.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003a60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a64:	d012      	beq.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003a66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a6a:	d81a      	bhi.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d022      	beq.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003a70:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003a74:	d115      	bne.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a7a:	3308      	adds	r3, #8
 8003a7c:	2101      	movs	r1, #1
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f001 f9a6 	bl	8004dd0 <RCCEx_PLL2_Config>
 8003a84:	4603      	mov	r3, r0
 8003a86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003a8a:	e015      	b.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003a8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a90:	3328      	adds	r3, #40	@ 0x28
 8003a92:	2101      	movs	r1, #1
 8003a94:	4618      	mov	r0, r3
 8003a96:	f001 fa4d 	bl	8004f34 <RCCEx_PLL3_Config>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003aa0:	e00a      	b.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003aa8:	e006      	b.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003aaa:	bf00      	nop
 8003aac:	e004      	b.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003aae:	bf00      	nop
 8003ab0:	e002      	b.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003ab2:	bf00      	nop
 8003ab4:	e000      	b.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003ab6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ab8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d10b      	bne.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003ac0:	4ba3      	ldr	r3, [pc, #652]	@ (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ac2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ac4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003ac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003acc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003ad0:	4a9f      	ldr	r2, [pc, #636]	@ (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ad2:	430b      	orrs	r3, r1
 8003ad4:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ad6:	e003      	b.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ad8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003adc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003ae0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ae8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003aec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003af0:	2300      	movs	r3, #0
 8003af2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003af6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003afa:	460b      	mov	r3, r1
 8003afc:	4313      	orrs	r3, r2
 8003afe:	d037      	beq.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003b00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b0a:	d00e      	beq.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003b0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b10:	d816      	bhi.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d018      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003b16:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003b1a:	d111      	bne.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b1c:	4b8c      	ldr	r3, [pc, #560]	@ (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b20:	4a8b      	ldr	r2, [pc, #556]	@ (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003b28:	e00f      	b.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b2e:	3308      	adds	r3, #8
 8003b30:	2101      	movs	r1, #1
 8003b32:	4618      	mov	r0, r3
 8003b34:	f001 f94c 	bl	8004dd0 <RCCEx_PLL2_Config>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003b3e:	e004      	b.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b46:	e000      	b.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003b48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d10a      	bne.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003b52:	4b7f      	ldr	r3, [pc, #508]	@ (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b56:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003b5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b60:	4a7b      	ldr	r2, [pc, #492]	@ (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b62:	430b      	orrs	r3, r1
 8003b64:	6513      	str	r3, [r2, #80]	@ 0x50
 8003b66:	e003      	b.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b6c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003b70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b78:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003b7c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003b80:	2300      	movs	r3, #0
 8003b82:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003b86:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003b8a:	460b      	mov	r3, r1
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	d039      	beq.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003b90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b96:	2b03      	cmp	r3, #3
 8003b98:	d81c      	bhi.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003b9a:	a201      	add	r2, pc, #4	@ (adr r2, 8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ba0:	08003bdd 	.word	0x08003bdd
 8003ba4:	08003bb1 	.word	0x08003bb1
 8003ba8:	08003bbf 	.word	0x08003bbf
 8003bac:	08003bdd 	.word	0x08003bdd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bb0:	4b67      	ldr	r3, [pc, #412]	@ (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bb4:	4a66      	ldr	r2, [pc, #408]	@ (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bb6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003bbc:	e00f      	b.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bc2:	3308      	adds	r3, #8
 8003bc4:	2102      	movs	r1, #2
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f001 f902 	bl	8004dd0 <RCCEx_PLL2_Config>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003bd2:	e004      	b.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003bda:	e000      	b.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003bdc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d10a      	bne.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003be6:	4b5a      	ldr	r3, [pc, #360]	@ (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003be8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bea:	f023 0103 	bic.w	r1, r3, #3
 8003bee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bf2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bf4:	4a56      	ldr	r2, [pc, #344]	@ (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bf6:	430b      	orrs	r3, r1
 8003bf8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003bfa:	e003      	b.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bfc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c00:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c0c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003c10:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003c14:	2300      	movs	r3, #0
 8003c16:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003c1a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003c1e:	460b      	mov	r3, r1
 8003c20:	4313      	orrs	r3, r2
 8003c22:	f000 809f 	beq.w	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c26:	4b4b      	ldr	r3, [pc, #300]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a4a      	ldr	r2, [pc, #296]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003c2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c30:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c32:	f7fe f863 	bl	8001cfc <HAL_GetTick>
 8003c36:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c3a:	e00b      	b.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c3c:	f7fe f85e 	bl	8001cfc <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	2b64      	cmp	r3, #100	@ 0x64
 8003c4a:	d903      	bls.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003c4c:	2303      	movs	r3, #3
 8003c4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c52:	e005      	b.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c54:	4b3f      	ldr	r3, [pc, #252]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d0ed      	beq.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003c60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d179      	bne.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003c68:	4b39      	ldr	r3, [pc, #228]	@ (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c6a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003c6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c70:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003c74:	4053      	eors	r3, r2
 8003c76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d015      	beq.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c7e:	4b34      	ldr	r3, [pc, #208]	@ (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c86:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c8a:	4b31      	ldr	r3, [pc, #196]	@ (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c8e:	4a30      	ldr	r2, [pc, #192]	@ (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c94:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c96:	4b2e      	ldr	r3, [pc, #184]	@ (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c9a:	4a2d      	ldr	r2, [pc, #180]	@ (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ca0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003ca2:	4a2b      	ldr	r2, [pc, #172]	@ (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ca4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003ca8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003caa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003cb2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003cb6:	d118      	bne.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb8:	f7fe f820 	bl	8001cfc <HAL_GetTick>
 8003cbc:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003cc0:	e00d      	b.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cc2:	f7fe f81b 	bl	8001cfc <HAL_GetTick>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003ccc:	1ad2      	subs	r2, r2, r3
 8003cce:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d903      	bls.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003cdc:	e005      	b.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003cde:	4b1c      	ldr	r3, [pc, #112]	@ (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ce0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ce2:	f003 0302 	and.w	r3, r3, #2
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d0eb      	beq.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003cea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d129      	bne.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cf6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003cfa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003cfe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003d02:	d10e      	bne.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003d04:	4b12      	ldr	r3, [pc, #72]	@ (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d06:	691b      	ldr	r3, [r3, #16]
 8003d08:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003d0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d10:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003d14:	091a      	lsrs	r2, r3, #4
 8003d16:	4b10      	ldr	r3, [pc, #64]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003d18:	4013      	ands	r3, r2
 8003d1a:	4a0d      	ldr	r2, [pc, #52]	@ (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d1c:	430b      	orrs	r3, r1
 8003d1e:	6113      	str	r3, [r2, #16]
 8003d20:	e005      	b.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003d22:	4b0b      	ldr	r3, [pc, #44]	@ (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d24:	691b      	ldr	r3, [r3, #16]
 8003d26:	4a0a      	ldr	r2, [pc, #40]	@ (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d28:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003d2c:	6113      	str	r3, [r2, #16]
 8003d2e:	4b08      	ldr	r3, [pc, #32]	@ (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d30:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003d32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d36:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003d3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d3e:	4a04      	ldr	r2, [pc, #16]	@ (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d40:	430b      	orrs	r3, r1
 8003d42:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d44:	e00e      	b.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d4a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8003d4e:	e009      	b.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003d50:	58024400 	.word	0x58024400
 8003d54:	58024800 	.word	0x58024800
 8003d58:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d60:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003d64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d6c:	f002 0301 	and.w	r3, r2, #1
 8003d70:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003d74:	2300      	movs	r3, #0
 8003d76:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003d7a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003d7e:	460b      	mov	r3, r1
 8003d80:	4313      	orrs	r3, r2
 8003d82:	f000 8089 	beq.w	8003e98 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003d86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d8a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d8c:	2b28      	cmp	r3, #40	@ 0x28
 8003d8e:	d86b      	bhi.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003d90:	a201      	add	r2, pc, #4	@ (adr r2, 8003d98 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d96:	bf00      	nop
 8003d98:	08003e71 	.word	0x08003e71
 8003d9c:	08003e69 	.word	0x08003e69
 8003da0:	08003e69 	.word	0x08003e69
 8003da4:	08003e69 	.word	0x08003e69
 8003da8:	08003e69 	.word	0x08003e69
 8003dac:	08003e69 	.word	0x08003e69
 8003db0:	08003e69 	.word	0x08003e69
 8003db4:	08003e69 	.word	0x08003e69
 8003db8:	08003e3d 	.word	0x08003e3d
 8003dbc:	08003e69 	.word	0x08003e69
 8003dc0:	08003e69 	.word	0x08003e69
 8003dc4:	08003e69 	.word	0x08003e69
 8003dc8:	08003e69 	.word	0x08003e69
 8003dcc:	08003e69 	.word	0x08003e69
 8003dd0:	08003e69 	.word	0x08003e69
 8003dd4:	08003e69 	.word	0x08003e69
 8003dd8:	08003e53 	.word	0x08003e53
 8003ddc:	08003e69 	.word	0x08003e69
 8003de0:	08003e69 	.word	0x08003e69
 8003de4:	08003e69 	.word	0x08003e69
 8003de8:	08003e69 	.word	0x08003e69
 8003dec:	08003e69 	.word	0x08003e69
 8003df0:	08003e69 	.word	0x08003e69
 8003df4:	08003e69 	.word	0x08003e69
 8003df8:	08003e71 	.word	0x08003e71
 8003dfc:	08003e69 	.word	0x08003e69
 8003e00:	08003e69 	.word	0x08003e69
 8003e04:	08003e69 	.word	0x08003e69
 8003e08:	08003e69 	.word	0x08003e69
 8003e0c:	08003e69 	.word	0x08003e69
 8003e10:	08003e69 	.word	0x08003e69
 8003e14:	08003e69 	.word	0x08003e69
 8003e18:	08003e71 	.word	0x08003e71
 8003e1c:	08003e69 	.word	0x08003e69
 8003e20:	08003e69 	.word	0x08003e69
 8003e24:	08003e69 	.word	0x08003e69
 8003e28:	08003e69 	.word	0x08003e69
 8003e2c:	08003e69 	.word	0x08003e69
 8003e30:	08003e69 	.word	0x08003e69
 8003e34:	08003e69 	.word	0x08003e69
 8003e38:	08003e71 	.word	0x08003e71
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e40:	3308      	adds	r3, #8
 8003e42:	2101      	movs	r1, #1
 8003e44:	4618      	mov	r0, r3
 8003e46:	f000 ffc3 	bl	8004dd0 <RCCEx_PLL2_Config>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003e50:	e00f      	b.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e56:	3328      	adds	r3, #40	@ 0x28
 8003e58:	2101      	movs	r1, #1
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f001 f86a 	bl	8004f34 <RCCEx_PLL3_Config>
 8003e60:	4603      	mov	r3, r0
 8003e62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003e66:	e004      	b.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e6e:	e000      	b.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003e70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d10a      	bne.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003e7a:	4bbf      	ldr	r3, [pc, #764]	@ (8004178 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e7e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003e82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e86:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e88:	4abb      	ldr	r2, [pc, #748]	@ (8004178 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e8a:	430b      	orrs	r3, r1
 8003e8c:	6553      	str	r3, [r2, #84]	@ 0x54
 8003e8e:	e003      	b.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e94:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003e98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ea0:	f002 0302 	and.w	r3, r2, #2
 8003ea4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003eae:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003eb2:	460b      	mov	r3, r1
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	d041      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003eb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ebc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ebe:	2b05      	cmp	r3, #5
 8003ec0:	d824      	bhi.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003ec2:	a201      	add	r2, pc, #4	@ (adr r2, 8003ec8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ec8:	08003f15 	.word	0x08003f15
 8003ecc:	08003ee1 	.word	0x08003ee1
 8003ed0:	08003ef7 	.word	0x08003ef7
 8003ed4:	08003f15 	.word	0x08003f15
 8003ed8:	08003f15 	.word	0x08003f15
 8003edc:	08003f15 	.word	0x08003f15
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ee0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ee4:	3308      	adds	r3, #8
 8003ee6:	2101      	movs	r1, #1
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f000 ff71 	bl	8004dd0 <RCCEx_PLL2_Config>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003ef4:	e00f      	b.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003ef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003efa:	3328      	adds	r3, #40	@ 0x28
 8003efc:	2101      	movs	r1, #1
 8003efe:	4618      	mov	r0, r3
 8003f00:	f001 f818 	bl	8004f34 <RCCEx_PLL3_Config>
 8003f04:	4603      	mov	r3, r0
 8003f06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003f0a:	e004      	b.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f12:	e000      	b.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003f14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d10a      	bne.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003f1e:	4b96      	ldr	r3, [pc, #600]	@ (8004178 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f22:	f023 0107 	bic.w	r1, r3, #7
 8003f26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f2a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f2c:	4a92      	ldr	r2, [pc, #584]	@ (8004178 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f2e:	430b      	orrs	r3, r1
 8003f30:	6553      	str	r3, [r2, #84]	@ 0x54
 8003f32:	e003      	b.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f38:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f44:	f002 0304 	and.w	r3, r2, #4
 8003f48:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003f52:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003f56:	460b      	mov	r3, r1
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	d044      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003f5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f64:	2b05      	cmp	r3, #5
 8003f66:	d825      	bhi.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003f68:	a201      	add	r2, pc, #4	@ (adr r2, 8003f70 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f6e:	bf00      	nop
 8003f70:	08003fbd 	.word	0x08003fbd
 8003f74:	08003f89 	.word	0x08003f89
 8003f78:	08003f9f 	.word	0x08003f9f
 8003f7c:	08003fbd 	.word	0x08003fbd
 8003f80:	08003fbd 	.word	0x08003fbd
 8003f84:	08003fbd 	.word	0x08003fbd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f8c:	3308      	adds	r3, #8
 8003f8e:	2101      	movs	r1, #1
 8003f90:	4618      	mov	r0, r3
 8003f92:	f000 ff1d 	bl	8004dd0 <RCCEx_PLL2_Config>
 8003f96:	4603      	mov	r3, r0
 8003f98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003f9c:	e00f      	b.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fa2:	3328      	adds	r3, #40	@ 0x28
 8003fa4:	2101      	movs	r1, #1
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f000 ffc4 	bl	8004f34 <RCCEx_PLL3_Config>
 8003fac:	4603      	mov	r3, r0
 8003fae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003fb2:	e004      	b.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003fba:	e000      	b.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003fbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d10b      	bne.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003fc6:	4b6c      	ldr	r3, [pc, #432]	@ (8004178 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003fc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fca:	f023 0107 	bic.w	r1, r3, #7
 8003fce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003fd6:	4a68      	ldr	r2, [pc, #416]	@ (8004178 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003fd8:	430b      	orrs	r3, r1
 8003fda:	6593      	str	r3, [r2, #88]	@ 0x58
 8003fdc:	e003      	b.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fe2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fee:	f002 0320 	and.w	r3, r2, #32
 8003ff2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003ffc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004000:	460b      	mov	r3, r1
 8004002:	4313      	orrs	r3, r2
 8004004:	d055      	beq.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004006:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800400a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800400e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004012:	d033      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004014:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004018:	d82c      	bhi.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800401a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800401e:	d02f      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004020:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004024:	d826      	bhi.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004026:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800402a:	d02b      	beq.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800402c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004030:	d820      	bhi.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004032:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004036:	d012      	beq.n	800405e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004038:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800403c:	d81a      	bhi.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800403e:	2b00      	cmp	r3, #0
 8004040:	d022      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8004042:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004046:	d115      	bne.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004048:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800404c:	3308      	adds	r3, #8
 800404e:	2100      	movs	r1, #0
 8004050:	4618      	mov	r0, r3
 8004052:	f000 febd 	bl	8004dd0 <RCCEx_PLL2_Config>
 8004056:	4603      	mov	r3, r0
 8004058:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800405c:	e015      	b.n	800408a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800405e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004062:	3328      	adds	r3, #40	@ 0x28
 8004064:	2102      	movs	r1, #2
 8004066:	4618      	mov	r0, r3
 8004068:	f000 ff64 	bl	8004f34 <RCCEx_PLL3_Config>
 800406c:	4603      	mov	r3, r0
 800406e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004072:	e00a      	b.n	800408a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800407a:	e006      	b.n	800408a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800407c:	bf00      	nop
 800407e:	e004      	b.n	800408a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004080:	bf00      	nop
 8004082:	e002      	b.n	800408a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004084:	bf00      	nop
 8004086:	e000      	b.n	800408a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004088:	bf00      	nop
    }

    if (ret == HAL_OK)
 800408a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800408e:	2b00      	cmp	r3, #0
 8004090:	d10b      	bne.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004092:	4b39      	ldr	r3, [pc, #228]	@ (8004178 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004094:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004096:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800409a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800409e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040a2:	4a35      	ldr	r2, [pc, #212]	@ (8004178 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80040a4:	430b      	orrs	r3, r1
 80040a6:	6553      	str	r3, [r2, #84]	@ 0x54
 80040a8:	e003      	b.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80040b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ba:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80040be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80040c2:	2300      	movs	r3, #0
 80040c4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80040c8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80040cc:	460b      	mov	r3, r1
 80040ce:	4313      	orrs	r3, r2
 80040d0:	d058      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80040d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80040da:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80040de:	d033      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80040e0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80040e4:	d82c      	bhi.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80040e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040ea:	d02f      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80040ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040f0:	d826      	bhi.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80040f2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80040f6:	d02b      	beq.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80040f8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80040fc:	d820      	bhi.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80040fe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004102:	d012      	beq.n	800412a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004104:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004108:	d81a      	bhi.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800410a:	2b00      	cmp	r3, #0
 800410c:	d022      	beq.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800410e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004112:	d115      	bne.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004114:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004118:	3308      	adds	r3, #8
 800411a:	2100      	movs	r1, #0
 800411c:	4618      	mov	r0, r3
 800411e:	f000 fe57 	bl	8004dd0 <RCCEx_PLL2_Config>
 8004122:	4603      	mov	r3, r0
 8004124:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004128:	e015      	b.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800412a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800412e:	3328      	adds	r3, #40	@ 0x28
 8004130:	2102      	movs	r1, #2
 8004132:	4618      	mov	r0, r3
 8004134:	f000 fefe 	bl	8004f34 <RCCEx_PLL3_Config>
 8004138:	4603      	mov	r3, r0
 800413a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800413e:	e00a      	b.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004146:	e006      	b.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004148:	bf00      	nop
 800414a:	e004      	b.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800414c:	bf00      	nop
 800414e:	e002      	b.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004150:	bf00      	nop
 8004152:	e000      	b.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004154:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004156:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800415a:	2b00      	cmp	r3, #0
 800415c:	d10e      	bne.n	800417c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800415e:	4b06      	ldr	r3, [pc, #24]	@ (8004178 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004160:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004162:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004166:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800416a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800416e:	4a02      	ldr	r2, [pc, #8]	@ (8004178 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004170:	430b      	orrs	r3, r1
 8004172:	6593      	str	r3, [r2, #88]	@ 0x58
 8004174:	e006      	b.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004176:	bf00      	nop
 8004178:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800417c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004180:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004184:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800418c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004190:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004194:	2300      	movs	r3, #0
 8004196:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800419a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800419e:	460b      	mov	r3, r1
 80041a0:	4313      	orrs	r3, r2
 80041a2:	d055      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80041a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041a8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80041ac:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80041b0:	d033      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80041b2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80041b6:	d82c      	bhi.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80041b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80041bc:	d02f      	beq.n	800421e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80041be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80041c2:	d826      	bhi.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80041c4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80041c8:	d02b      	beq.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80041ca:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80041ce:	d820      	bhi.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80041d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80041d4:	d012      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80041d6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80041da:	d81a      	bhi.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d022      	beq.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80041e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041e4:	d115      	bne.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80041e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041ea:	3308      	adds	r3, #8
 80041ec:	2100      	movs	r1, #0
 80041ee:	4618      	mov	r0, r3
 80041f0:	f000 fdee 	bl	8004dd0 <RCCEx_PLL2_Config>
 80041f4:	4603      	mov	r3, r0
 80041f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80041fa:	e015      	b.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80041fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004200:	3328      	adds	r3, #40	@ 0x28
 8004202:	2102      	movs	r1, #2
 8004204:	4618      	mov	r0, r3
 8004206:	f000 fe95 	bl	8004f34 <RCCEx_PLL3_Config>
 800420a:	4603      	mov	r3, r0
 800420c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004210:	e00a      	b.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004218:	e006      	b.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800421a:	bf00      	nop
 800421c:	e004      	b.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800421e:	bf00      	nop
 8004220:	e002      	b.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004222:	bf00      	nop
 8004224:	e000      	b.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004226:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004228:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800422c:	2b00      	cmp	r3, #0
 800422e:	d10b      	bne.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004230:	4ba1      	ldr	r3, [pc, #644]	@ (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004232:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004234:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004238:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800423c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004240:	4a9d      	ldr	r2, [pc, #628]	@ (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004242:	430b      	orrs	r3, r1
 8004244:	6593      	str	r3, [r2, #88]	@ 0x58
 8004246:	e003      	b.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004248:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800424c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004250:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004258:	f002 0308 	and.w	r3, r2, #8
 800425c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004260:	2300      	movs	r3, #0
 8004262:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004266:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800426a:	460b      	mov	r3, r1
 800426c:	4313      	orrs	r3, r2
 800426e:	d01e      	beq.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004270:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004274:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004278:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800427c:	d10c      	bne.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800427e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004282:	3328      	adds	r3, #40	@ 0x28
 8004284:	2102      	movs	r1, #2
 8004286:	4618      	mov	r0, r3
 8004288:	f000 fe54 	bl	8004f34 <RCCEx_PLL3_Config>
 800428c:	4603      	mov	r3, r0
 800428e:	2b00      	cmp	r3, #0
 8004290:	d002      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004298:	4b87      	ldr	r3, [pc, #540]	@ (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800429a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800429c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80042a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042a8:	4a83      	ldr	r2, [pc, #524]	@ (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042aa:	430b      	orrs	r3, r1
 80042ac:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80042ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042b6:	f002 0310 	and.w	r3, r2, #16
 80042ba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80042be:	2300      	movs	r3, #0
 80042c0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80042c4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80042c8:	460b      	mov	r3, r1
 80042ca:	4313      	orrs	r3, r2
 80042cc:	d01e      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80042ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80042d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042da:	d10c      	bne.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80042dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042e0:	3328      	adds	r3, #40	@ 0x28
 80042e2:	2102      	movs	r1, #2
 80042e4:	4618      	mov	r0, r3
 80042e6:	f000 fe25 	bl	8004f34 <RCCEx_PLL3_Config>
 80042ea:	4603      	mov	r3, r0
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d002      	beq.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80042f6:	4b70      	ldr	r3, [pc, #448]	@ (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042fa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80042fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004302:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004306:	4a6c      	ldr	r2, [pc, #432]	@ (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004308:	430b      	orrs	r3, r1
 800430a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800430c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004314:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004318:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800431c:	2300      	movs	r3, #0
 800431e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004322:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004326:	460b      	mov	r3, r1
 8004328:	4313      	orrs	r3, r2
 800432a:	d03e      	beq.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800432c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004330:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004334:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004338:	d022      	beq.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800433a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800433e:	d81b      	bhi.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004340:	2b00      	cmp	r3, #0
 8004342:	d003      	beq.n	800434c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004344:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004348:	d00b      	beq.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800434a:	e015      	b.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800434c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004350:	3308      	adds	r3, #8
 8004352:	2100      	movs	r1, #0
 8004354:	4618      	mov	r0, r3
 8004356:	f000 fd3b 	bl	8004dd0 <RCCEx_PLL2_Config>
 800435a:	4603      	mov	r3, r0
 800435c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004360:	e00f      	b.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004362:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004366:	3328      	adds	r3, #40	@ 0x28
 8004368:	2102      	movs	r1, #2
 800436a:	4618      	mov	r0, r3
 800436c:	f000 fde2 	bl	8004f34 <RCCEx_PLL3_Config>
 8004370:	4603      	mov	r3, r0
 8004372:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004376:	e004      	b.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800437e:	e000      	b.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004380:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004382:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004386:	2b00      	cmp	r3, #0
 8004388:	d10b      	bne.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800438a:	4b4b      	ldr	r3, [pc, #300]	@ (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800438c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800438e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004392:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004396:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800439a:	4a47      	ldr	r2, [pc, #284]	@ (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800439c:	430b      	orrs	r3, r1
 800439e:	6593      	str	r3, [r2, #88]	@ 0x58
 80043a0:	e003      	b.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80043aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043b2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80043b6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80043b8:	2300      	movs	r3, #0
 80043ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80043bc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80043c0:	460b      	mov	r3, r1
 80043c2:	4313      	orrs	r3, r2
 80043c4:	d03b      	beq.n	800443e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80043c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043ce:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80043d2:	d01f      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80043d4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80043d8:	d818      	bhi.n	800440c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80043da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80043de:	d003      	beq.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80043e0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80043e4:	d007      	beq.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80043e6:	e011      	b.n	800440c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043e8:	4b33      	ldr	r3, [pc, #204]	@ (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ec:	4a32      	ldr	r2, [pc, #200]	@ (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80043f4:	e00f      	b.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80043f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043fa:	3328      	adds	r3, #40	@ 0x28
 80043fc:	2101      	movs	r1, #1
 80043fe:	4618      	mov	r0, r3
 8004400:	f000 fd98 	bl	8004f34 <RCCEx_PLL3_Config>
 8004404:	4603      	mov	r3, r0
 8004406:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800440a:	e004      	b.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004412:	e000      	b.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004414:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004416:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800441a:	2b00      	cmp	r3, #0
 800441c:	d10b      	bne.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800441e:	4b26      	ldr	r3, [pc, #152]	@ (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004420:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004422:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004426:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800442a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800442e:	4a22      	ldr	r2, [pc, #136]	@ (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004430:	430b      	orrs	r3, r1
 8004432:	6553      	str	r3, [r2, #84]	@ 0x54
 8004434:	e003      	b.n	800443e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004436:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800443a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800443e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004446:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800444a:	673b      	str	r3, [r7, #112]	@ 0x70
 800444c:	2300      	movs	r3, #0
 800444e:	677b      	str	r3, [r7, #116]	@ 0x74
 8004450:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004454:	460b      	mov	r3, r1
 8004456:	4313      	orrs	r3, r2
 8004458:	d034      	beq.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800445a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800445e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004460:	2b00      	cmp	r3, #0
 8004462:	d003      	beq.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004464:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004468:	d007      	beq.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800446a:	e011      	b.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800446c:	4b12      	ldr	r3, [pc, #72]	@ (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800446e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004470:	4a11      	ldr	r2, [pc, #68]	@ (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004472:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004476:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004478:	e00e      	b.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800447a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800447e:	3308      	adds	r3, #8
 8004480:	2102      	movs	r1, #2
 8004482:	4618      	mov	r0, r3
 8004484:	f000 fca4 	bl	8004dd0 <RCCEx_PLL2_Config>
 8004488:	4603      	mov	r3, r0
 800448a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800448e:	e003      	b.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004496:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004498:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800449c:	2b00      	cmp	r3, #0
 800449e:	d10d      	bne.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80044a0:	4b05      	ldr	r3, [pc, #20]	@ (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044a4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80044a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044ae:	4a02      	ldr	r2, [pc, #8]	@ (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044b0:	430b      	orrs	r3, r1
 80044b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80044b4:	e006      	b.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80044b6:	bf00      	nop
 80044b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80044c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044cc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80044d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80044d2:	2300      	movs	r3, #0
 80044d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80044d6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80044da:	460b      	mov	r3, r1
 80044dc:	4313      	orrs	r3, r2
 80044de:	d00c      	beq.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80044e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044e4:	3328      	adds	r3, #40	@ 0x28
 80044e6:	2102      	movs	r1, #2
 80044e8:	4618      	mov	r0, r3
 80044ea:	f000 fd23 	bl	8004f34 <RCCEx_PLL3_Config>
 80044ee:	4603      	mov	r3, r0
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d002      	beq.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80044fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004502:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004506:	663b      	str	r3, [r7, #96]	@ 0x60
 8004508:	2300      	movs	r3, #0
 800450a:	667b      	str	r3, [r7, #100]	@ 0x64
 800450c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004510:	460b      	mov	r3, r1
 8004512:	4313      	orrs	r3, r2
 8004514:	d038      	beq.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004516:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800451a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800451e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004522:	d018      	beq.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004524:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004528:	d811      	bhi.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800452a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800452e:	d014      	beq.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004530:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004534:	d80b      	bhi.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004536:	2b00      	cmp	r3, #0
 8004538:	d011      	beq.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800453a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800453e:	d106      	bne.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004540:	4bc3      	ldr	r3, [pc, #780]	@ (8004850 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004544:	4ac2      	ldr	r2, [pc, #776]	@ (8004850 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004546:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800454a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800454c:	e008      	b.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004554:	e004      	b.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004556:	bf00      	nop
 8004558:	e002      	b.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800455a:	bf00      	nop
 800455c:	e000      	b.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800455e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004560:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004564:	2b00      	cmp	r3, #0
 8004566:	d10b      	bne.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004568:	4bb9      	ldr	r3, [pc, #740]	@ (8004850 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800456a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800456c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004570:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004574:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004578:	4ab5      	ldr	r2, [pc, #724]	@ (8004850 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800457a:	430b      	orrs	r3, r1
 800457c:	6553      	str	r3, [r2, #84]	@ 0x54
 800457e:	e003      	b.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004580:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004584:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004588:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800458c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004590:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004594:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004596:	2300      	movs	r3, #0
 8004598:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800459a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800459e:	460b      	mov	r3, r1
 80045a0:	4313      	orrs	r3, r2
 80045a2:	d009      	beq.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80045a4:	4baa      	ldr	r3, [pc, #680]	@ (8004850 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045a8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80045ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045b2:	4aa7      	ldr	r2, [pc, #668]	@ (8004850 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045b4:	430b      	orrs	r3, r1
 80045b6:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80045b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045c0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80045c4:	653b      	str	r3, [r7, #80]	@ 0x50
 80045c6:	2300      	movs	r3, #0
 80045c8:	657b      	str	r3, [r7, #84]	@ 0x54
 80045ca:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80045ce:	460b      	mov	r3, r1
 80045d0:	4313      	orrs	r3, r2
 80045d2:	d00a      	beq.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80045d4:	4b9e      	ldr	r3, [pc, #632]	@ (8004850 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045d6:	691b      	ldr	r3, [r3, #16]
 80045d8:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80045dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045e0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80045e4:	4a9a      	ldr	r2, [pc, #616]	@ (8004850 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045e6:	430b      	orrs	r3, r1
 80045e8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80045ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045f2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80045f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80045f8:	2300      	movs	r3, #0
 80045fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80045fc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004600:	460b      	mov	r3, r1
 8004602:	4313      	orrs	r3, r2
 8004604:	d009      	beq.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004606:	4b92      	ldr	r3, [pc, #584]	@ (8004850 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004608:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800460a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800460e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004612:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004614:	4a8e      	ldr	r2, [pc, #568]	@ (8004850 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004616:	430b      	orrs	r3, r1
 8004618:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800461a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800461e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004622:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004626:	643b      	str	r3, [r7, #64]	@ 0x40
 8004628:	2300      	movs	r3, #0
 800462a:	647b      	str	r3, [r7, #68]	@ 0x44
 800462c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004630:	460b      	mov	r3, r1
 8004632:	4313      	orrs	r3, r2
 8004634:	d00e      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004636:	4b86      	ldr	r3, [pc, #536]	@ (8004850 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004638:	691b      	ldr	r3, [r3, #16]
 800463a:	4a85      	ldr	r2, [pc, #532]	@ (8004850 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800463c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004640:	6113      	str	r3, [r2, #16]
 8004642:	4b83      	ldr	r3, [pc, #524]	@ (8004850 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004644:	6919      	ldr	r1, [r3, #16]
 8004646:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800464a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800464e:	4a80      	ldr	r2, [pc, #512]	@ (8004850 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004650:	430b      	orrs	r3, r1
 8004652:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004654:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800465c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004660:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004662:	2300      	movs	r3, #0
 8004664:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004666:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800466a:	460b      	mov	r3, r1
 800466c:	4313      	orrs	r3, r2
 800466e:	d009      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004670:	4b77      	ldr	r3, [pc, #476]	@ (8004850 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004672:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004674:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004678:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800467c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800467e:	4a74      	ldr	r2, [pc, #464]	@ (8004850 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004680:	430b      	orrs	r3, r1
 8004682:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004684:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800468c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004690:	633b      	str	r3, [r7, #48]	@ 0x30
 8004692:	2300      	movs	r3, #0
 8004694:	637b      	str	r3, [r7, #52]	@ 0x34
 8004696:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800469a:	460b      	mov	r3, r1
 800469c:	4313      	orrs	r3, r2
 800469e:	d00a      	beq.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80046a0:	4b6b      	ldr	r3, [pc, #428]	@ (8004850 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046a4:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80046a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80046b0:	4a67      	ldr	r2, [pc, #412]	@ (8004850 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046b2:	430b      	orrs	r3, r1
 80046b4:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80046b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046be:	2100      	movs	r1, #0
 80046c0:	62b9      	str	r1, [r7, #40]	@ 0x28
 80046c2:	f003 0301 	and.w	r3, r3, #1
 80046c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80046c8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80046cc:	460b      	mov	r3, r1
 80046ce:	4313      	orrs	r3, r2
 80046d0:	d011      	beq.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80046d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046d6:	3308      	adds	r3, #8
 80046d8:	2100      	movs	r1, #0
 80046da:	4618      	mov	r0, r3
 80046dc:	f000 fb78 	bl	8004dd0 <RCCEx_PLL2_Config>
 80046e0:	4603      	mov	r3, r0
 80046e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80046e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d003      	beq.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80046f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046fe:	2100      	movs	r1, #0
 8004700:	6239      	str	r1, [r7, #32]
 8004702:	f003 0302 	and.w	r3, r3, #2
 8004706:	627b      	str	r3, [r7, #36]	@ 0x24
 8004708:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800470c:	460b      	mov	r3, r1
 800470e:	4313      	orrs	r3, r2
 8004710:	d011      	beq.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004712:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004716:	3308      	adds	r3, #8
 8004718:	2101      	movs	r1, #1
 800471a:	4618      	mov	r0, r3
 800471c:	f000 fb58 	bl	8004dd0 <RCCEx_PLL2_Config>
 8004720:	4603      	mov	r3, r0
 8004722:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004726:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800472a:	2b00      	cmp	r3, #0
 800472c:	d003      	beq.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800472e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004732:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004736:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800473a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800473e:	2100      	movs	r1, #0
 8004740:	61b9      	str	r1, [r7, #24]
 8004742:	f003 0304 	and.w	r3, r3, #4
 8004746:	61fb      	str	r3, [r7, #28]
 8004748:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800474c:	460b      	mov	r3, r1
 800474e:	4313      	orrs	r3, r2
 8004750:	d011      	beq.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004752:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004756:	3308      	adds	r3, #8
 8004758:	2102      	movs	r1, #2
 800475a:	4618      	mov	r0, r3
 800475c:	f000 fb38 	bl	8004dd0 <RCCEx_PLL2_Config>
 8004760:	4603      	mov	r3, r0
 8004762:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004766:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800476a:	2b00      	cmp	r3, #0
 800476c:	d003      	beq.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800476e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004772:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004776:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800477a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800477e:	2100      	movs	r1, #0
 8004780:	6139      	str	r1, [r7, #16]
 8004782:	f003 0308 	and.w	r3, r3, #8
 8004786:	617b      	str	r3, [r7, #20]
 8004788:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800478c:	460b      	mov	r3, r1
 800478e:	4313      	orrs	r3, r2
 8004790:	d011      	beq.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004792:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004796:	3328      	adds	r3, #40	@ 0x28
 8004798:	2100      	movs	r1, #0
 800479a:	4618      	mov	r0, r3
 800479c:	f000 fbca 	bl	8004f34 <RCCEx_PLL3_Config>
 80047a0:	4603      	mov	r3, r0
 80047a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80047a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d003      	beq.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80047b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047be:	2100      	movs	r1, #0
 80047c0:	60b9      	str	r1, [r7, #8]
 80047c2:	f003 0310 	and.w	r3, r3, #16
 80047c6:	60fb      	str	r3, [r7, #12]
 80047c8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80047cc:	460b      	mov	r3, r1
 80047ce:	4313      	orrs	r3, r2
 80047d0:	d011      	beq.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80047d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047d6:	3328      	adds	r3, #40	@ 0x28
 80047d8:	2101      	movs	r1, #1
 80047da:	4618      	mov	r0, r3
 80047dc:	f000 fbaa 	bl	8004f34 <RCCEx_PLL3_Config>
 80047e0:	4603      	mov	r3, r0
 80047e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80047e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d003      	beq.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80047f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047fe:	2100      	movs	r1, #0
 8004800:	6039      	str	r1, [r7, #0]
 8004802:	f003 0320 	and.w	r3, r3, #32
 8004806:	607b      	str	r3, [r7, #4]
 8004808:	e9d7 1200 	ldrd	r1, r2, [r7]
 800480c:	460b      	mov	r3, r1
 800480e:	4313      	orrs	r3, r2
 8004810:	d011      	beq.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004812:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004816:	3328      	adds	r3, #40	@ 0x28
 8004818:	2102      	movs	r1, #2
 800481a:	4618      	mov	r0, r3
 800481c:	f000 fb8a 	bl	8004f34 <RCCEx_PLL3_Config>
 8004820:	4603      	mov	r3, r0
 8004822:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004826:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800482a:	2b00      	cmp	r3, #0
 800482c:	d003      	beq.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800482e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004832:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8004836:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800483a:	2b00      	cmp	r3, #0
 800483c:	d101      	bne.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800483e:	2300      	movs	r3, #0
 8004840:	e000      	b.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
}
 8004844:	4618      	mov	r0, r3
 8004846:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800484a:	46bd      	mov	sp, r7
 800484c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004850:	58024400 	.word	0x58024400

08004854 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004858:	f7fe fd54 	bl	8003304 <HAL_RCC_GetHCLKFreq>
 800485c:	4602      	mov	r2, r0
 800485e:	4b06      	ldr	r3, [pc, #24]	@ (8004878 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004860:	6a1b      	ldr	r3, [r3, #32]
 8004862:	091b      	lsrs	r3, r3, #4
 8004864:	f003 0307 	and.w	r3, r3, #7
 8004868:	4904      	ldr	r1, [pc, #16]	@ (800487c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800486a:	5ccb      	ldrb	r3, [r1, r3]
 800486c:	f003 031f 	and.w	r3, r3, #31
 8004870:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004874:	4618      	mov	r0, r3
 8004876:	bd80      	pop	{r7, pc}
 8004878:	58024400 	.word	0x58024400
 800487c:	080093e0 	.word	0x080093e0

08004880 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004880:	b480      	push	{r7}
 8004882:	b089      	sub	sp, #36	@ 0x24
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004888:	4ba1      	ldr	r3, [pc, #644]	@ (8004b10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800488a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800488c:	f003 0303 	and.w	r3, r3, #3
 8004890:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004892:	4b9f      	ldr	r3, [pc, #636]	@ (8004b10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004896:	0b1b      	lsrs	r3, r3, #12
 8004898:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800489c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800489e:	4b9c      	ldr	r3, [pc, #624]	@ (8004b10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048a2:	091b      	lsrs	r3, r3, #4
 80048a4:	f003 0301 	and.w	r3, r3, #1
 80048a8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80048aa:	4b99      	ldr	r3, [pc, #612]	@ (8004b10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048ae:	08db      	lsrs	r3, r3, #3
 80048b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80048b4:	693a      	ldr	r2, [r7, #16]
 80048b6:	fb02 f303 	mul.w	r3, r2, r3
 80048ba:	ee07 3a90 	vmov	s15, r3
 80048be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048c2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	f000 8111 	beq.w	8004af0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80048ce:	69bb      	ldr	r3, [r7, #24]
 80048d0:	2b02      	cmp	r3, #2
 80048d2:	f000 8083 	beq.w	80049dc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80048d6:	69bb      	ldr	r3, [r7, #24]
 80048d8:	2b02      	cmp	r3, #2
 80048da:	f200 80a1 	bhi.w	8004a20 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80048de:	69bb      	ldr	r3, [r7, #24]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d003      	beq.n	80048ec <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80048e4:	69bb      	ldr	r3, [r7, #24]
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d056      	beq.n	8004998 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80048ea:	e099      	b.n	8004a20 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80048ec:	4b88      	ldr	r3, [pc, #544]	@ (8004b10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 0320 	and.w	r3, r3, #32
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d02d      	beq.n	8004954 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80048f8:	4b85      	ldr	r3, [pc, #532]	@ (8004b10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	08db      	lsrs	r3, r3, #3
 80048fe:	f003 0303 	and.w	r3, r3, #3
 8004902:	4a84      	ldr	r2, [pc, #528]	@ (8004b14 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004904:	fa22 f303 	lsr.w	r3, r2, r3
 8004908:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	ee07 3a90 	vmov	s15, r3
 8004910:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	ee07 3a90 	vmov	s15, r3
 800491a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800491e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004922:	4b7b      	ldr	r3, [pc, #492]	@ (8004b10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004924:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004926:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800492a:	ee07 3a90 	vmov	s15, r3
 800492e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004932:	ed97 6a03 	vldr	s12, [r7, #12]
 8004936:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004b18 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800493a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800493e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004942:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004946:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800494a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800494e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004952:	e087      	b.n	8004a64 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	ee07 3a90 	vmov	s15, r3
 800495a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800495e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004b1c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004962:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004966:	4b6a      	ldr	r3, [pc, #424]	@ (8004b10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004968:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800496a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800496e:	ee07 3a90 	vmov	s15, r3
 8004972:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004976:	ed97 6a03 	vldr	s12, [r7, #12]
 800497a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004b18 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800497e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004982:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004986:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800498a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800498e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004992:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004996:	e065      	b.n	8004a64 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	ee07 3a90 	vmov	s15, r3
 800499e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049a2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004b20 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80049a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049aa:	4b59      	ldr	r3, [pc, #356]	@ (8004b10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049b2:	ee07 3a90 	vmov	s15, r3
 80049b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80049be:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004b18 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80049c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80049da:	e043      	b.n	8004a64 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	ee07 3a90 	vmov	s15, r3
 80049e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049e6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004b24 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80049ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049ee:	4b48      	ldr	r3, [pc, #288]	@ (8004b10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049f6:	ee07 3a90 	vmov	s15, r3
 80049fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a02:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004b18 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004a06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a1e:	e021      	b.n	8004a64 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	ee07 3a90 	vmov	s15, r3
 8004a26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a2a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004b20 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004a2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a32:	4b37      	ldr	r3, [pc, #220]	@ (8004b10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a3a:	ee07 3a90 	vmov	s15, r3
 8004a3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a42:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a46:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004b18 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004a4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a62:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004a64:	4b2a      	ldr	r3, [pc, #168]	@ (8004b10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a68:	0a5b      	lsrs	r3, r3, #9
 8004a6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a6e:	ee07 3a90 	vmov	s15, r3
 8004a72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a76:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004a7a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a7e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a8a:	ee17 2a90 	vmov	r2, s15
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004a92:	4b1f      	ldr	r3, [pc, #124]	@ (8004b10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a96:	0c1b      	lsrs	r3, r3, #16
 8004a98:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a9c:	ee07 3a90 	vmov	s15, r3
 8004aa0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aa4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004aa8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004aac:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ab0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ab4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ab8:	ee17 2a90 	vmov	r2, s15
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004ac0:	4b13      	ldr	r3, [pc, #76]	@ (8004b10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ac2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ac4:	0e1b      	lsrs	r3, r3, #24
 8004ac6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004aca:	ee07 3a90 	vmov	s15, r3
 8004ace:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ad2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004ad6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ada:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ade:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ae2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ae6:	ee17 2a90 	vmov	r2, s15
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004aee:	e008      	b.n	8004b02 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2200      	movs	r2, #0
 8004af4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	609a      	str	r2, [r3, #8]
}
 8004b02:	bf00      	nop
 8004b04:	3724      	adds	r7, #36	@ 0x24
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr
 8004b0e:	bf00      	nop
 8004b10:	58024400 	.word	0x58024400
 8004b14:	03d09000 	.word	0x03d09000
 8004b18:	46000000 	.word	0x46000000
 8004b1c:	4c742400 	.word	0x4c742400
 8004b20:	4a742400 	.word	0x4a742400
 8004b24:	4af42400 	.word	0x4af42400

08004b28 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b089      	sub	sp, #36	@ 0x24
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004b30:	4ba1      	ldr	r3, [pc, #644]	@ (8004db8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b34:	f003 0303 	and.w	r3, r3, #3
 8004b38:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004b3a:	4b9f      	ldr	r3, [pc, #636]	@ (8004db8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b3e:	0d1b      	lsrs	r3, r3, #20
 8004b40:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b44:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004b46:	4b9c      	ldr	r3, [pc, #624]	@ (8004db8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b4a:	0a1b      	lsrs	r3, r3, #8
 8004b4c:	f003 0301 	and.w	r3, r3, #1
 8004b50:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004b52:	4b99      	ldr	r3, [pc, #612]	@ (8004db8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b56:	08db      	lsrs	r3, r3, #3
 8004b58:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004b5c:	693a      	ldr	r2, [r7, #16]
 8004b5e:	fb02 f303 	mul.w	r3, r2, r3
 8004b62:	ee07 3a90 	vmov	s15, r3
 8004b66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b6a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	f000 8111 	beq.w	8004d98 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004b76:	69bb      	ldr	r3, [r7, #24]
 8004b78:	2b02      	cmp	r3, #2
 8004b7a:	f000 8083 	beq.w	8004c84 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004b7e:	69bb      	ldr	r3, [r7, #24]
 8004b80:	2b02      	cmp	r3, #2
 8004b82:	f200 80a1 	bhi.w	8004cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004b86:	69bb      	ldr	r3, [r7, #24]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d003      	beq.n	8004b94 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004b8c:	69bb      	ldr	r3, [r7, #24]
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d056      	beq.n	8004c40 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004b92:	e099      	b.n	8004cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b94:	4b88      	ldr	r3, [pc, #544]	@ (8004db8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 0320 	and.w	r3, r3, #32
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d02d      	beq.n	8004bfc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004ba0:	4b85      	ldr	r3, [pc, #532]	@ (8004db8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	08db      	lsrs	r3, r3, #3
 8004ba6:	f003 0303 	and.w	r3, r3, #3
 8004baa:	4a84      	ldr	r2, [pc, #528]	@ (8004dbc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004bac:	fa22 f303 	lsr.w	r3, r2, r3
 8004bb0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	ee07 3a90 	vmov	s15, r3
 8004bb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	ee07 3a90 	vmov	s15, r3
 8004bc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bca:	4b7b      	ldr	r3, [pc, #492]	@ (8004db8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bd2:	ee07 3a90 	vmov	s15, r3
 8004bd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bda:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bde:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004dc0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004be2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004be6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004bee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bf6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004bfa:	e087      	b.n	8004d0c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	ee07 3a90 	vmov	s15, r3
 8004c02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c06:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004c0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c0e:	4b6a      	ldr	r3, [pc, #424]	@ (8004db8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c16:	ee07 3a90 	vmov	s15, r3
 8004c1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c22:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004dc0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004c26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c3e:	e065      	b.n	8004d0c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	ee07 3a90 	vmov	s15, r3
 8004c46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c4a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004c4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c52:	4b59      	ldr	r3, [pc, #356]	@ (8004db8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c5a:	ee07 3a90 	vmov	s15, r3
 8004c5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c62:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c66:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004dc0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004c6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c82:	e043      	b.n	8004d0c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	ee07 3a90 	vmov	s15, r3
 8004c8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c8e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004dcc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004c92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c96:	4b48      	ldr	r3, [pc, #288]	@ (8004db8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c9e:	ee07 3a90 	vmov	s15, r3
 8004ca2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ca6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004caa:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004dc0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004cae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004cba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004cc6:	e021      	b.n	8004d0c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	ee07 3a90 	vmov	s15, r3
 8004cce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cd2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004cd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cda:	4b37      	ldr	r3, [pc, #220]	@ (8004db8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ce2:	ee07 3a90 	vmov	s15, r3
 8004ce6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cea:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cee:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004dc0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004cf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cfa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004cfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d0a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004d0c:	4b2a      	ldr	r3, [pc, #168]	@ (8004db8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d10:	0a5b      	lsrs	r3, r3, #9
 8004d12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d16:	ee07 3a90 	vmov	s15, r3
 8004d1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d1e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004d22:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d26:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d32:	ee17 2a90 	vmov	r2, s15
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004d3a:	4b1f      	ldr	r3, [pc, #124]	@ (8004db8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d3e:	0c1b      	lsrs	r3, r3, #16
 8004d40:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d44:	ee07 3a90 	vmov	s15, r3
 8004d48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d4c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004d50:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d54:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d60:	ee17 2a90 	vmov	r2, s15
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004d68:	4b13      	ldr	r3, [pc, #76]	@ (8004db8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d6c:	0e1b      	lsrs	r3, r3, #24
 8004d6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d72:	ee07 3a90 	vmov	s15, r3
 8004d76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d7a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004d7e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d82:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d8e:	ee17 2a90 	vmov	r2, s15
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004d96:	e008      	b.n	8004daa <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	609a      	str	r2, [r3, #8]
}
 8004daa:	bf00      	nop
 8004dac:	3724      	adds	r7, #36	@ 0x24
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr
 8004db6:	bf00      	nop
 8004db8:	58024400 	.word	0x58024400
 8004dbc:	03d09000 	.word	0x03d09000
 8004dc0:	46000000 	.word	0x46000000
 8004dc4:	4c742400 	.word	0x4c742400
 8004dc8:	4a742400 	.word	0x4a742400
 8004dcc:	4af42400 	.word	0x4af42400

08004dd0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b084      	sub	sp, #16
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004dde:	4b53      	ldr	r3, [pc, #332]	@ (8004f2c <RCCEx_PLL2_Config+0x15c>)
 8004de0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004de2:	f003 0303 	and.w	r3, r3, #3
 8004de6:	2b03      	cmp	r3, #3
 8004de8:	d101      	bne.n	8004dee <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e099      	b.n	8004f22 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004dee:	4b4f      	ldr	r3, [pc, #316]	@ (8004f2c <RCCEx_PLL2_Config+0x15c>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a4e      	ldr	r2, [pc, #312]	@ (8004f2c <RCCEx_PLL2_Config+0x15c>)
 8004df4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004df8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dfa:	f7fc ff7f 	bl	8001cfc <HAL_GetTick>
 8004dfe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004e00:	e008      	b.n	8004e14 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004e02:	f7fc ff7b 	bl	8001cfc <HAL_GetTick>
 8004e06:	4602      	mov	r2, r0
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	1ad3      	subs	r3, r2, r3
 8004e0c:	2b02      	cmp	r3, #2
 8004e0e:	d901      	bls.n	8004e14 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004e10:	2303      	movs	r3, #3
 8004e12:	e086      	b.n	8004f22 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004e14:	4b45      	ldr	r3, [pc, #276]	@ (8004f2c <RCCEx_PLL2_Config+0x15c>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d1f0      	bne.n	8004e02 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004e20:	4b42      	ldr	r3, [pc, #264]	@ (8004f2c <RCCEx_PLL2_Config+0x15c>)
 8004e22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e24:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	031b      	lsls	r3, r3, #12
 8004e2e:	493f      	ldr	r1, [pc, #252]	@ (8004f2c <RCCEx_PLL2_Config+0x15c>)
 8004e30:	4313      	orrs	r3, r2
 8004e32:	628b      	str	r3, [r1, #40]	@ 0x28
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	3b01      	subs	r3, #1
 8004e3a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	3b01      	subs	r3, #1
 8004e44:	025b      	lsls	r3, r3, #9
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	431a      	orrs	r2, r3
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	68db      	ldr	r3, [r3, #12]
 8004e4e:	3b01      	subs	r3, #1
 8004e50:	041b      	lsls	r3, r3, #16
 8004e52:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004e56:	431a      	orrs	r2, r3
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	691b      	ldr	r3, [r3, #16]
 8004e5c:	3b01      	subs	r3, #1
 8004e5e:	061b      	lsls	r3, r3, #24
 8004e60:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004e64:	4931      	ldr	r1, [pc, #196]	@ (8004f2c <RCCEx_PLL2_Config+0x15c>)
 8004e66:	4313      	orrs	r3, r2
 8004e68:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004e6a:	4b30      	ldr	r3, [pc, #192]	@ (8004f2c <RCCEx_PLL2_Config+0x15c>)
 8004e6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e6e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	695b      	ldr	r3, [r3, #20]
 8004e76:	492d      	ldr	r1, [pc, #180]	@ (8004f2c <RCCEx_PLL2_Config+0x15c>)
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004e7c:	4b2b      	ldr	r3, [pc, #172]	@ (8004f2c <RCCEx_PLL2_Config+0x15c>)
 8004e7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e80:	f023 0220 	bic.w	r2, r3, #32
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	699b      	ldr	r3, [r3, #24]
 8004e88:	4928      	ldr	r1, [pc, #160]	@ (8004f2c <RCCEx_PLL2_Config+0x15c>)
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004e8e:	4b27      	ldr	r3, [pc, #156]	@ (8004f2c <RCCEx_PLL2_Config+0x15c>)
 8004e90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e92:	4a26      	ldr	r2, [pc, #152]	@ (8004f2c <RCCEx_PLL2_Config+0x15c>)
 8004e94:	f023 0310 	bic.w	r3, r3, #16
 8004e98:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004e9a:	4b24      	ldr	r3, [pc, #144]	@ (8004f2c <RCCEx_PLL2_Config+0x15c>)
 8004e9c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004e9e:	4b24      	ldr	r3, [pc, #144]	@ (8004f30 <RCCEx_PLL2_Config+0x160>)
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	69d2      	ldr	r2, [r2, #28]
 8004ea6:	00d2      	lsls	r2, r2, #3
 8004ea8:	4920      	ldr	r1, [pc, #128]	@ (8004f2c <RCCEx_PLL2_Config+0x15c>)
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004eae:	4b1f      	ldr	r3, [pc, #124]	@ (8004f2c <RCCEx_PLL2_Config+0x15c>)
 8004eb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eb2:	4a1e      	ldr	r2, [pc, #120]	@ (8004f2c <RCCEx_PLL2_Config+0x15c>)
 8004eb4:	f043 0310 	orr.w	r3, r3, #16
 8004eb8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d106      	bne.n	8004ece <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004ec0:	4b1a      	ldr	r3, [pc, #104]	@ (8004f2c <RCCEx_PLL2_Config+0x15c>)
 8004ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ec4:	4a19      	ldr	r2, [pc, #100]	@ (8004f2c <RCCEx_PLL2_Config+0x15c>)
 8004ec6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004eca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004ecc:	e00f      	b.n	8004eee <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d106      	bne.n	8004ee2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004ed4:	4b15      	ldr	r3, [pc, #84]	@ (8004f2c <RCCEx_PLL2_Config+0x15c>)
 8004ed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ed8:	4a14      	ldr	r2, [pc, #80]	@ (8004f2c <RCCEx_PLL2_Config+0x15c>)
 8004eda:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004ede:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004ee0:	e005      	b.n	8004eee <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004ee2:	4b12      	ldr	r3, [pc, #72]	@ (8004f2c <RCCEx_PLL2_Config+0x15c>)
 8004ee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ee6:	4a11      	ldr	r2, [pc, #68]	@ (8004f2c <RCCEx_PLL2_Config+0x15c>)
 8004ee8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004eec:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004eee:	4b0f      	ldr	r3, [pc, #60]	@ (8004f2c <RCCEx_PLL2_Config+0x15c>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a0e      	ldr	r2, [pc, #56]	@ (8004f2c <RCCEx_PLL2_Config+0x15c>)
 8004ef4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004ef8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004efa:	f7fc feff 	bl	8001cfc <HAL_GetTick>
 8004efe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004f00:	e008      	b.n	8004f14 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004f02:	f7fc fefb 	bl	8001cfc <HAL_GetTick>
 8004f06:	4602      	mov	r2, r0
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	1ad3      	subs	r3, r2, r3
 8004f0c:	2b02      	cmp	r3, #2
 8004f0e:	d901      	bls.n	8004f14 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004f10:	2303      	movs	r3, #3
 8004f12:	e006      	b.n	8004f22 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004f14:	4b05      	ldr	r3, [pc, #20]	@ (8004f2c <RCCEx_PLL2_Config+0x15c>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d0f0      	beq.n	8004f02 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3710      	adds	r7, #16
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}
 8004f2a:	bf00      	nop
 8004f2c:	58024400 	.word	0x58024400
 8004f30:	ffff0007 	.word	0xffff0007

08004f34 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b084      	sub	sp, #16
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004f42:	4b53      	ldr	r3, [pc, #332]	@ (8005090 <RCCEx_PLL3_Config+0x15c>)
 8004f44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f46:	f003 0303 	and.w	r3, r3, #3
 8004f4a:	2b03      	cmp	r3, #3
 8004f4c:	d101      	bne.n	8004f52 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e099      	b.n	8005086 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004f52:	4b4f      	ldr	r3, [pc, #316]	@ (8005090 <RCCEx_PLL3_Config+0x15c>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a4e      	ldr	r2, [pc, #312]	@ (8005090 <RCCEx_PLL3_Config+0x15c>)
 8004f58:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f5e:	f7fc fecd 	bl	8001cfc <HAL_GetTick>
 8004f62:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004f64:	e008      	b.n	8004f78 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004f66:	f7fc fec9 	bl	8001cfc <HAL_GetTick>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	1ad3      	subs	r3, r2, r3
 8004f70:	2b02      	cmp	r3, #2
 8004f72:	d901      	bls.n	8004f78 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004f74:	2303      	movs	r3, #3
 8004f76:	e086      	b.n	8005086 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004f78:	4b45      	ldr	r3, [pc, #276]	@ (8005090 <RCCEx_PLL3_Config+0x15c>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d1f0      	bne.n	8004f66 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004f84:	4b42      	ldr	r3, [pc, #264]	@ (8005090 <RCCEx_PLL3_Config+0x15c>)
 8004f86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f88:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	051b      	lsls	r3, r3, #20
 8004f92:	493f      	ldr	r1, [pc, #252]	@ (8005090 <RCCEx_PLL3_Config+0x15c>)
 8004f94:	4313      	orrs	r3, r2
 8004f96:	628b      	str	r3, [r1, #40]	@ 0x28
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	3b01      	subs	r3, #1
 8004f9e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	3b01      	subs	r3, #1
 8004fa8:	025b      	lsls	r3, r3, #9
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	431a      	orrs	r2, r3
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	68db      	ldr	r3, [r3, #12]
 8004fb2:	3b01      	subs	r3, #1
 8004fb4:	041b      	lsls	r3, r3, #16
 8004fb6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004fba:	431a      	orrs	r2, r3
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	691b      	ldr	r3, [r3, #16]
 8004fc0:	3b01      	subs	r3, #1
 8004fc2:	061b      	lsls	r3, r3, #24
 8004fc4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004fc8:	4931      	ldr	r1, [pc, #196]	@ (8005090 <RCCEx_PLL3_Config+0x15c>)
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004fce:	4b30      	ldr	r3, [pc, #192]	@ (8005090 <RCCEx_PLL3_Config+0x15c>)
 8004fd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fd2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	695b      	ldr	r3, [r3, #20]
 8004fda:	492d      	ldr	r1, [pc, #180]	@ (8005090 <RCCEx_PLL3_Config+0x15c>)
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004fe0:	4b2b      	ldr	r3, [pc, #172]	@ (8005090 <RCCEx_PLL3_Config+0x15c>)
 8004fe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fe4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	699b      	ldr	r3, [r3, #24]
 8004fec:	4928      	ldr	r1, [pc, #160]	@ (8005090 <RCCEx_PLL3_Config+0x15c>)
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004ff2:	4b27      	ldr	r3, [pc, #156]	@ (8005090 <RCCEx_PLL3_Config+0x15c>)
 8004ff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ff6:	4a26      	ldr	r2, [pc, #152]	@ (8005090 <RCCEx_PLL3_Config+0x15c>)
 8004ff8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ffc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004ffe:	4b24      	ldr	r3, [pc, #144]	@ (8005090 <RCCEx_PLL3_Config+0x15c>)
 8005000:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005002:	4b24      	ldr	r3, [pc, #144]	@ (8005094 <RCCEx_PLL3_Config+0x160>)
 8005004:	4013      	ands	r3, r2
 8005006:	687a      	ldr	r2, [r7, #4]
 8005008:	69d2      	ldr	r2, [r2, #28]
 800500a:	00d2      	lsls	r2, r2, #3
 800500c:	4920      	ldr	r1, [pc, #128]	@ (8005090 <RCCEx_PLL3_Config+0x15c>)
 800500e:	4313      	orrs	r3, r2
 8005010:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005012:	4b1f      	ldr	r3, [pc, #124]	@ (8005090 <RCCEx_PLL3_Config+0x15c>)
 8005014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005016:	4a1e      	ldr	r2, [pc, #120]	@ (8005090 <RCCEx_PLL3_Config+0x15c>)
 8005018:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800501c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d106      	bne.n	8005032 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005024:	4b1a      	ldr	r3, [pc, #104]	@ (8005090 <RCCEx_PLL3_Config+0x15c>)
 8005026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005028:	4a19      	ldr	r2, [pc, #100]	@ (8005090 <RCCEx_PLL3_Config+0x15c>)
 800502a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800502e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005030:	e00f      	b.n	8005052 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	2b01      	cmp	r3, #1
 8005036:	d106      	bne.n	8005046 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005038:	4b15      	ldr	r3, [pc, #84]	@ (8005090 <RCCEx_PLL3_Config+0x15c>)
 800503a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800503c:	4a14      	ldr	r2, [pc, #80]	@ (8005090 <RCCEx_PLL3_Config+0x15c>)
 800503e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005042:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005044:	e005      	b.n	8005052 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005046:	4b12      	ldr	r3, [pc, #72]	@ (8005090 <RCCEx_PLL3_Config+0x15c>)
 8005048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800504a:	4a11      	ldr	r2, [pc, #68]	@ (8005090 <RCCEx_PLL3_Config+0x15c>)
 800504c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005050:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005052:	4b0f      	ldr	r3, [pc, #60]	@ (8005090 <RCCEx_PLL3_Config+0x15c>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a0e      	ldr	r2, [pc, #56]	@ (8005090 <RCCEx_PLL3_Config+0x15c>)
 8005058:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800505c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800505e:	f7fc fe4d 	bl	8001cfc <HAL_GetTick>
 8005062:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005064:	e008      	b.n	8005078 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005066:	f7fc fe49 	bl	8001cfc <HAL_GetTick>
 800506a:	4602      	mov	r2, r0
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	1ad3      	subs	r3, r2, r3
 8005070:	2b02      	cmp	r3, #2
 8005072:	d901      	bls.n	8005078 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005074:	2303      	movs	r3, #3
 8005076:	e006      	b.n	8005086 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005078:	4b05      	ldr	r3, [pc, #20]	@ (8005090 <RCCEx_PLL3_Config+0x15c>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005080:	2b00      	cmp	r3, #0
 8005082:	d0f0      	beq.n	8005066 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005084:	7bfb      	ldrb	r3, [r7, #15]
}
 8005086:	4618      	mov	r0, r3
 8005088:	3710      	adds	r7, #16
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}
 800508e:	bf00      	nop
 8005090:	58024400 	.word	0x58024400
 8005094:	ffff0007 	.word	0xffff0007

08005098 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b082      	sub	sp, #8
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d101      	bne.n	80050aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e049      	b.n	800513e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d106      	bne.n	80050c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2200      	movs	r2, #0
 80050ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f7fc f884 	bl	80011cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2202      	movs	r2, #2
 80050c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	3304      	adds	r3, #4
 80050d4:	4619      	mov	r1, r3
 80050d6:	4610      	mov	r0, r2
 80050d8:	f000 f9de 	bl	8005498 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2201      	movs	r2, #1
 80050e0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2201      	movs	r2, #1
 80050f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2201      	movs	r2, #1
 8005100:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2201      	movs	r2, #1
 8005110:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2201      	movs	r2, #1
 8005120:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2201      	movs	r2, #1
 8005130:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2201      	movs	r2, #1
 8005138:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800513c:	2300      	movs	r3, #0
}
 800513e:	4618      	mov	r0, r3
 8005140:	3708      	adds	r7, #8
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
	...

08005148 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005148:	b480      	push	{r7}
 800514a:	b085      	sub	sp, #20
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005156:	b2db      	uxtb	r3, r3
 8005158:	2b01      	cmp	r3, #1
 800515a:	d001      	beq.n	8005160 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800515c:	2301      	movs	r3, #1
 800515e:	e054      	b.n	800520a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2202      	movs	r2, #2
 8005164:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	68da      	ldr	r2, [r3, #12]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f042 0201 	orr.w	r2, r2, #1
 8005176:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a26      	ldr	r2, [pc, #152]	@ (8005218 <HAL_TIM_Base_Start_IT+0xd0>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d022      	beq.n	80051c8 <HAL_TIM_Base_Start_IT+0x80>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800518a:	d01d      	beq.n	80051c8 <HAL_TIM_Base_Start_IT+0x80>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a22      	ldr	r2, [pc, #136]	@ (800521c <HAL_TIM_Base_Start_IT+0xd4>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d018      	beq.n	80051c8 <HAL_TIM_Base_Start_IT+0x80>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a21      	ldr	r2, [pc, #132]	@ (8005220 <HAL_TIM_Base_Start_IT+0xd8>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d013      	beq.n	80051c8 <HAL_TIM_Base_Start_IT+0x80>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a1f      	ldr	r2, [pc, #124]	@ (8005224 <HAL_TIM_Base_Start_IT+0xdc>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d00e      	beq.n	80051c8 <HAL_TIM_Base_Start_IT+0x80>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a1e      	ldr	r2, [pc, #120]	@ (8005228 <HAL_TIM_Base_Start_IT+0xe0>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d009      	beq.n	80051c8 <HAL_TIM_Base_Start_IT+0x80>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a1c      	ldr	r2, [pc, #112]	@ (800522c <HAL_TIM_Base_Start_IT+0xe4>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d004      	beq.n	80051c8 <HAL_TIM_Base_Start_IT+0x80>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a1b      	ldr	r2, [pc, #108]	@ (8005230 <HAL_TIM_Base_Start_IT+0xe8>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d115      	bne.n	80051f4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	689a      	ldr	r2, [r3, #8]
 80051ce:	4b19      	ldr	r3, [pc, #100]	@ (8005234 <HAL_TIM_Base_Start_IT+0xec>)
 80051d0:	4013      	ands	r3, r2
 80051d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2b06      	cmp	r3, #6
 80051d8:	d015      	beq.n	8005206 <HAL_TIM_Base_Start_IT+0xbe>
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051e0:	d011      	beq.n	8005206 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f042 0201 	orr.w	r2, r2, #1
 80051f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051f2:	e008      	b.n	8005206 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f042 0201 	orr.w	r2, r2, #1
 8005202:	601a      	str	r2, [r3, #0]
 8005204:	e000      	b.n	8005208 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005206:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005208:	2300      	movs	r3, #0
}
 800520a:	4618      	mov	r0, r3
 800520c:	3714      	adds	r7, #20
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr
 8005216:	bf00      	nop
 8005218:	40010000 	.word	0x40010000
 800521c:	40000400 	.word	0x40000400
 8005220:	40000800 	.word	0x40000800
 8005224:	40000c00 	.word	0x40000c00
 8005228:	40010400 	.word	0x40010400
 800522c:	40001800 	.word	0x40001800
 8005230:	40014000 	.word	0x40014000
 8005234:	00010007 	.word	0x00010007

08005238 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b084      	sub	sp, #16
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	68db      	ldr	r3, [r3, #12]
 8005246:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	691b      	ldr	r3, [r3, #16]
 800524e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	f003 0302 	and.w	r3, r3, #2
 8005256:	2b00      	cmp	r3, #0
 8005258:	d020      	beq.n	800529c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	f003 0302 	and.w	r3, r3, #2
 8005260:	2b00      	cmp	r3, #0
 8005262:	d01b      	beq.n	800529c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f06f 0202 	mvn.w	r2, #2
 800526c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2201      	movs	r2, #1
 8005272:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	699b      	ldr	r3, [r3, #24]
 800527a:	f003 0303 	and.w	r3, r3, #3
 800527e:	2b00      	cmp	r3, #0
 8005280:	d003      	beq.n	800528a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f000 f8e9 	bl	800545a <HAL_TIM_IC_CaptureCallback>
 8005288:	e005      	b.n	8005296 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f000 f8db 	bl	8005446 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f000 f8ec 	bl	800546e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2200      	movs	r2, #0
 800529a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	f003 0304 	and.w	r3, r3, #4
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d020      	beq.n	80052e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	f003 0304 	and.w	r3, r3, #4
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d01b      	beq.n	80052e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f06f 0204 	mvn.w	r2, #4
 80052b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2202      	movs	r2, #2
 80052be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	699b      	ldr	r3, [r3, #24]
 80052c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d003      	beq.n	80052d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f000 f8c3 	bl	800545a <HAL_TIM_IC_CaptureCallback>
 80052d4:	e005      	b.n	80052e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f000 f8b5 	bl	8005446 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f000 f8c6 	bl	800546e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	f003 0308 	and.w	r3, r3, #8
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d020      	beq.n	8005334 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	f003 0308 	and.w	r3, r3, #8
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d01b      	beq.n	8005334 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f06f 0208 	mvn.w	r2, #8
 8005304:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2204      	movs	r2, #4
 800530a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	69db      	ldr	r3, [r3, #28]
 8005312:	f003 0303 	and.w	r3, r3, #3
 8005316:	2b00      	cmp	r3, #0
 8005318:	d003      	beq.n	8005322 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f000 f89d 	bl	800545a <HAL_TIM_IC_CaptureCallback>
 8005320:	e005      	b.n	800532e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f000 f88f 	bl	8005446 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f000 f8a0 	bl	800546e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	f003 0310 	and.w	r3, r3, #16
 800533a:	2b00      	cmp	r3, #0
 800533c:	d020      	beq.n	8005380 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	f003 0310 	and.w	r3, r3, #16
 8005344:	2b00      	cmp	r3, #0
 8005346:	d01b      	beq.n	8005380 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f06f 0210 	mvn.w	r2, #16
 8005350:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2208      	movs	r2, #8
 8005356:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	69db      	ldr	r3, [r3, #28]
 800535e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005362:	2b00      	cmp	r3, #0
 8005364:	d003      	beq.n	800536e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f000 f877 	bl	800545a <HAL_TIM_IC_CaptureCallback>
 800536c:	e005      	b.n	800537a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f000 f869 	bl	8005446 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f000 f87a 	bl	800546e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	f003 0301 	and.w	r3, r3, #1
 8005386:	2b00      	cmp	r3, #0
 8005388:	d00c      	beq.n	80053a4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	f003 0301 	and.w	r3, r3, #1
 8005390:	2b00      	cmp	r3, #0
 8005392:	d007      	beq.n	80053a4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f06f 0201 	mvn.w	r2, #1
 800539c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f7fb fec0 	bl	8001124 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d104      	bne.n	80053b8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d00c      	beq.n	80053d2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d007      	beq.n	80053d2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80053ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f000 f99b 	bl	8005708 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d00c      	beq.n	80053f6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d007      	beq.n	80053f6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80053ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f000 f993 	bl	800571c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d00c      	beq.n	800541a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005406:	2b00      	cmp	r3, #0
 8005408:	d007      	beq.n	800541a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005412:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f000 f834 	bl	8005482 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	f003 0320 	and.w	r3, r3, #32
 8005420:	2b00      	cmp	r3, #0
 8005422:	d00c      	beq.n	800543e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f003 0320 	and.w	r3, r3, #32
 800542a:	2b00      	cmp	r3, #0
 800542c:	d007      	beq.n	800543e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f06f 0220 	mvn.w	r2, #32
 8005436:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f000 f95b 	bl	80056f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800543e:	bf00      	nop
 8005440:	3710      	adds	r7, #16
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}

08005446 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005446:	b480      	push	{r7}
 8005448:	b083      	sub	sp, #12
 800544a:	af00      	add	r7, sp, #0
 800544c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800544e:	bf00      	nop
 8005450:	370c      	adds	r7, #12
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr

0800545a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800545a:	b480      	push	{r7}
 800545c:	b083      	sub	sp, #12
 800545e:	af00      	add	r7, sp, #0
 8005460:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005462:	bf00      	nop
 8005464:	370c      	adds	r7, #12
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr

0800546e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800546e:	b480      	push	{r7}
 8005470:	b083      	sub	sp, #12
 8005472:	af00      	add	r7, sp, #0
 8005474:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005476:	bf00      	nop
 8005478:	370c      	adds	r7, #12
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr

08005482 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005482:	b480      	push	{r7}
 8005484:	b083      	sub	sp, #12
 8005486:	af00      	add	r7, sp, #0
 8005488:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800548a:	bf00      	nop
 800548c:	370c      	adds	r7, #12
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr
	...

08005498 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005498:	b480      	push	{r7}
 800549a:	b085      	sub	sp, #20
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
 80054a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	4a43      	ldr	r2, [pc, #268]	@ (80055b8 <TIM_Base_SetConfig+0x120>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d013      	beq.n	80054d8 <TIM_Base_SetConfig+0x40>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054b6:	d00f      	beq.n	80054d8 <TIM_Base_SetConfig+0x40>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	4a40      	ldr	r2, [pc, #256]	@ (80055bc <TIM_Base_SetConfig+0x124>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d00b      	beq.n	80054d8 <TIM_Base_SetConfig+0x40>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	4a3f      	ldr	r2, [pc, #252]	@ (80055c0 <TIM_Base_SetConfig+0x128>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d007      	beq.n	80054d8 <TIM_Base_SetConfig+0x40>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	4a3e      	ldr	r2, [pc, #248]	@ (80055c4 <TIM_Base_SetConfig+0x12c>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d003      	beq.n	80054d8 <TIM_Base_SetConfig+0x40>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	4a3d      	ldr	r2, [pc, #244]	@ (80055c8 <TIM_Base_SetConfig+0x130>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d108      	bne.n	80054ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	68fa      	ldr	r2, [r7, #12]
 80054e6:	4313      	orrs	r3, r2
 80054e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	4a32      	ldr	r2, [pc, #200]	@ (80055b8 <TIM_Base_SetConfig+0x120>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d01f      	beq.n	8005532 <TIM_Base_SetConfig+0x9a>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054f8:	d01b      	beq.n	8005532 <TIM_Base_SetConfig+0x9a>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	4a2f      	ldr	r2, [pc, #188]	@ (80055bc <TIM_Base_SetConfig+0x124>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d017      	beq.n	8005532 <TIM_Base_SetConfig+0x9a>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	4a2e      	ldr	r2, [pc, #184]	@ (80055c0 <TIM_Base_SetConfig+0x128>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d013      	beq.n	8005532 <TIM_Base_SetConfig+0x9a>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	4a2d      	ldr	r2, [pc, #180]	@ (80055c4 <TIM_Base_SetConfig+0x12c>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d00f      	beq.n	8005532 <TIM_Base_SetConfig+0x9a>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	4a2c      	ldr	r2, [pc, #176]	@ (80055c8 <TIM_Base_SetConfig+0x130>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d00b      	beq.n	8005532 <TIM_Base_SetConfig+0x9a>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	4a2b      	ldr	r2, [pc, #172]	@ (80055cc <TIM_Base_SetConfig+0x134>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d007      	beq.n	8005532 <TIM_Base_SetConfig+0x9a>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	4a2a      	ldr	r2, [pc, #168]	@ (80055d0 <TIM_Base_SetConfig+0x138>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d003      	beq.n	8005532 <TIM_Base_SetConfig+0x9a>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	4a29      	ldr	r2, [pc, #164]	@ (80055d4 <TIM_Base_SetConfig+0x13c>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d108      	bne.n	8005544 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005538:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	68db      	ldr	r3, [r3, #12]
 800553e:	68fa      	ldr	r2, [r7, #12]
 8005540:	4313      	orrs	r3, r2
 8005542:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	695b      	ldr	r3, [r3, #20]
 800554e:	4313      	orrs	r3, r2
 8005550:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	689a      	ldr	r2, [r3, #8]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	4a14      	ldr	r2, [pc, #80]	@ (80055b8 <TIM_Base_SetConfig+0x120>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d00f      	beq.n	800558a <TIM_Base_SetConfig+0xf2>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4a16      	ldr	r2, [pc, #88]	@ (80055c8 <TIM_Base_SetConfig+0x130>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d00b      	beq.n	800558a <TIM_Base_SetConfig+0xf2>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4a15      	ldr	r2, [pc, #84]	@ (80055cc <TIM_Base_SetConfig+0x134>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d007      	beq.n	800558a <TIM_Base_SetConfig+0xf2>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4a14      	ldr	r2, [pc, #80]	@ (80055d0 <TIM_Base_SetConfig+0x138>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d003      	beq.n	800558a <TIM_Base_SetConfig+0xf2>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4a13      	ldr	r2, [pc, #76]	@ (80055d4 <TIM_Base_SetConfig+0x13c>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d103      	bne.n	8005592 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	691a      	ldr	r2, [r3, #16]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f043 0204 	orr.w	r2, r3, #4
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2201      	movs	r2, #1
 80055a2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	68fa      	ldr	r2, [r7, #12]
 80055a8:	601a      	str	r2, [r3, #0]
}
 80055aa:	bf00      	nop
 80055ac:	3714      	adds	r7, #20
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr
 80055b6:	bf00      	nop
 80055b8:	40010000 	.word	0x40010000
 80055bc:	40000400 	.word	0x40000400
 80055c0:	40000800 	.word	0x40000800
 80055c4:	40000c00 	.word	0x40000c00
 80055c8:	40010400 	.word	0x40010400
 80055cc:	40014000 	.word	0x40014000
 80055d0:	40014400 	.word	0x40014400
 80055d4:	40014800 	.word	0x40014800

080055d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80055d8:	b480      	push	{r7}
 80055da:	b085      	sub	sp, #20
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
 80055e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d101      	bne.n	80055f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80055ec:	2302      	movs	r3, #2
 80055ee:	e06d      	b.n	80056cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2201      	movs	r2, #1
 80055f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2202      	movs	r2, #2
 80055fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a30      	ldr	r2, [pc, #192]	@ (80056d8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d004      	beq.n	8005624 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a2f      	ldr	r2, [pc, #188]	@ (80056dc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d108      	bne.n	8005636 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800562a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	68fa      	ldr	r2, [r7, #12]
 8005632:	4313      	orrs	r3, r2
 8005634:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800563c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	68fa      	ldr	r2, [r7, #12]
 8005644:	4313      	orrs	r3, r2
 8005646:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	68fa      	ldr	r2, [r7, #12]
 800564e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a20      	ldr	r2, [pc, #128]	@ (80056d8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d022      	beq.n	80056a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005662:	d01d      	beq.n	80056a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a1d      	ldr	r2, [pc, #116]	@ (80056e0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d018      	beq.n	80056a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a1c      	ldr	r2, [pc, #112]	@ (80056e4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d013      	beq.n	80056a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a1a      	ldr	r2, [pc, #104]	@ (80056e8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d00e      	beq.n	80056a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a15      	ldr	r2, [pc, #84]	@ (80056dc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d009      	beq.n	80056a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a16      	ldr	r2, [pc, #88]	@ (80056ec <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d004      	beq.n	80056a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a15      	ldr	r2, [pc, #84]	@ (80056f0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d10c      	bne.n	80056ba <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80056a6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	68ba      	ldr	r2, [r7, #8]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	68ba      	ldr	r2, [r7, #8]
 80056b8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2201      	movs	r2, #1
 80056be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80056ca:	2300      	movs	r3, #0
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3714      	adds	r7, #20
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr
 80056d8:	40010000 	.word	0x40010000
 80056dc:	40010400 	.word	0x40010400
 80056e0:	40000400 	.word	0x40000400
 80056e4:	40000800 	.word	0x40000800
 80056e8:	40000c00 	.word	0x40000c00
 80056ec:	40001800 	.word	0x40001800
 80056f0:	40014000 	.word	0x40014000

080056f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b083      	sub	sp, #12
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80056fc:	bf00      	nop
 80056fe:	370c      	adds	r7, #12
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr

08005708 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005708:	b480      	push	{r7}
 800570a:	b083      	sub	sp, #12
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005710:	bf00      	nop
 8005712:	370c      	adds	r7, #12
 8005714:	46bd      	mov	sp, r7
 8005716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571a:	4770      	bx	lr

0800571c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800571c:	b480      	push	{r7}
 800571e:	b083      	sub	sp, #12
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005724:	bf00      	nop
 8005726:	370c      	adds	r7, #12
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr

08005730 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b082      	sub	sp, #8
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d101      	bne.n	8005742 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	e042      	b.n	80057c8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005748:	2b00      	cmp	r3, #0
 800574a:	d106      	bne.n	800575a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2200      	movs	r2, #0
 8005750:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f7fb fd61 	bl	800121c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2224      	movs	r2, #36	@ 0x24
 800575e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f022 0201 	bic.w	r2, r2, #1
 8005770:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005776:	2b00      	cmp	r3, #0
 8005778:	d002      	beq.n	8005780 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f000 fe1e 	bl	80063bc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f000 f8b3 	bl	80058ec <UART_SetConfig>
 8005786:	4603      	mov	r3, r0
 8005788:	2b01      	cmp	r3, #1
 800578a:	d101      	bne.n	8005790 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	e01b      	b.n	80057c8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	685a      	ldr	r2, [r3, #4]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800579e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	689a      	ldr	r2, [r3, #8]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80057ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f042 0201 	orr.w	r2, r2, #1
 80057be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f000 fe9d 	bl	8006500 <UART_CheckIdleState>
 80057c6:	4603      	mov	r3, r0
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3708      	adds	r7, #8
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}

080057d0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b08a      	sub	sp, #40	@ 0x28
 80057d4:	af02      	add	r7, sp, #8
 80057d6:	60f8      	str	r0, [r7, #12]
 80057d8:	60b9      	str	r1, [r7, #8]
 80057da:	603b      	str	r3, [r7, #0]
 80057dc:	4613      	mov	r3, r2
 80057de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057e6:	2b20      	cmp	r3, #32
 80057e8:	d17b      	bne.n	80058e2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d002      	beq.n	80057f6 <HAL_UART_Transmit+0x26>
 80057f0:	88fb      	ldrh	r3, [r7, #6]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d101      	bne.n	80057fa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	e074      	b.n	80058e4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2200      	movs	r2, #0
 80057fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2221      	movs	r2, #33	@ 0x21
 8005806:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800580a:	f7fc fa77 	bl	8001cfc <HAL_GetTick>
 800580e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	88fa      	ldrh	r2, [r7, #6]
 8005814:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	88fa      	ldrh	r2, [r7, #6]
 800581c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005828:	d108      	bne.n	800583c <HAL_UART_Transmit+0x6c>
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	691b      	ldr	r3, [r3, #16]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d104      	bne.n	800583c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005832:	2300      	movs	r3, #0
 8005834:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	61bb      	str	r3, [r7, #24]
 800583a:	e003      	b.n	8005844 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005840:	2300      	movs	r3, #0
 8005842:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005844:	e030      	b.n	80058a8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	9300      	str	r3, [sp, #0]
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	2200      	movs	r2, #0
 800584e:	2180      	movs	r1, #128	@ 0x80
 8005850:	68f8      	ldr	r0, [r7, #12]
 8005852:	f000 feff 	bl	8006654 <UART_WaitOnFlagUntilTimeout>
 8005856:	4603      	mov	r3, r0
 8005858:	2b00      	cmp	r3, #0
 800585a:	d005      	beq.n	8005868 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2220      	movs	r2, #32
 8005860:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005864:	2303      	movs	r3, #3
 8005866:	e03d      	b.n	80058e4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005868:	69fb      	ldr	r3, [r7, #28]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d10b      	bne.n	8005886 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800586e:	69bb      	ldr	r3, [r7, #24]
 8005870:	881b      	ldrh	r3, [r3, #0]
 8005872:	461a      	mov	r2, r3
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800587c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800587e:	69bb      	ldr	r3, [r7, #24]
 8005880:	3302      	adds	r3, #2
 8005882:	61bb      	str	r3, [r7, #24]
 8005884:	e007      	b.n	8005896 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005886:	69fb      	ldr	r3, [r7, #28]
 8005888:	781a      	ldrb	r2, [r3, #0]
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005890:	69fb      	ldr	r3, [r7, #28]
 8005892:	3301      	adds	r3, #1
 8005894:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800589c:	b29b      	uxth	r3, r3
 800589e:	3b01      	subs	r3, #1
 80058a0:	b29a      	uxth	r2, r3
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d1c8      	bne.n	8005846 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	9300      	str	r3, [sp, #0]
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	2200      	movs	r2, #0
 80058bc:	2140      	movs	r1, #64	@ 0x40
 80058be:	68f8      	ldr	r0, [r7, #12]
 80058c0:	f000 fec8 	bl	8006654 <UART_WaitOnFlagUntilTimeout>
 80058c4:	4603      	mov	r3, r0
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d005      	beq.n	80058d6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2220      	movs	r2, #32
 80058ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80058d2:	2303      	movs	r3, #3
 80058d4:	e006      	b.n	80058e4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2220      	movs	r2, #32
 80058da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80058de:	2300      	movs	r3, #0
 80058e0:	e000      	b.n	80058e4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80058e2:	2302      	movs	r3, #2
  }
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3720      	adds	r7, #32
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}

080058ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058f0:	b092      	sub	sp, #72	@ 0x48
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80058f6:	2300      	movs	r3, #0
 80058f8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	689a      	ldr	r2, [r3, #8]
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	691b      	ldr	r3, [r3, #16]
 8005904:	431a      	orrs	r2, r3
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	695b      	ldr	r3, [r3, #20]
 800590a:	431a      	orrs	r2, r3
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	69db      	ldr	r3, [r3, #28]
 8005910:	4313      	orrs	r3, r2
 8005912:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	4bbe      	ldr	r3, [pc, #760]	@ (8005c14 <UART_SetConfig+0x328>)
 800591c:	4013      	ands	r3, r2
 800591e:	697a      	ldr	r2, [r7, #20]
 8005920:	6812      	ldr	r2, [r2, #0]
 8005922:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005924:	430b      	orrs	r3, r1
 8005926:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	68da      	ldr	r2, [r3, #12]
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	430a      	orrs	r2, r1
 800593c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	699b      	ldr	r3, [r3, #24]
 8005942:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4ab3      	ldr	r2, [pc, #716]	@ (8005c18 <UART_SetConfig+0x32c>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d004      	beq.n	8005958 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	6a1b      	ldr	r3, [r3, #32]
 8005952:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005954:	4313      	orrs	r3, r2
 8005956:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	689a      	ldr	r2, [r3, #8]
 800595e:	4baf      	ldr	r3, [pc, #700]	@ (8005c1c <UART_SetConfig+0x330>)
 8005960:	4013      	ands	r3, r2
 8005962:	697a      	ldr	r2, [r7, #20]
 8005964:	6812      	ldr	r2, [r2, #0]
 8005966:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005968:	430b      	orrs	r3, r1
 800596a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005972:	f023 010f 	bic.w	r1, r3, #15
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	430a      	orrs	r2, r1
 8005980:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4aa6      	ldr	r2, [pc, #664]	@ (8005c20 <UART_SetConfig+0x334>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d177      	bne.n	8005a7c <UART_SetConfig+0x190>
 800598c:	4ba5      	ldr	r3, [pc, #660]	@ (8005c24 <UART_SetConfig+0x338>)
 800598e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005990:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005994:	2b28      	cmp	r3, #40	@ 0x28
 8005996:	d86d      	bhi.n	8005a74 <UART_SetConfig+0x188>
 8005998:	a201      	add	r2, pc, #4	@ (adr r2, 80059a0 <UART_SetConfig+0xb4>)
 800599a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800599e:	bf00      	nop
 80059a0:	08005a45 	.word	0x08005a45
 80059a4:	08005a75 	.word	0x08005a75
 80059a8:	08005a75 	.word	0x08005a75
 80059ac:	08005a75 	.word	0x08005a75
 80059b0:	08005a75 	.word	0x08005a75
 80059b4:	08005a75 	.word	0x08005a75
 80059b8:	08005a75 	.word	0x08005a75
 80059bc:	08005a75 	.word	0x08005a75
 80059c0:	08005a4d 	.word	0x08005a4d
 80059c4:	08005a75 	.word	0x08005a75
 80059c8:	08005a75 	.word	0x08005a75
 80059cc:	08005a75 	.word	0x08005a75
 80059d0:	08005a75 	.word	0x08005a75
 80059d4:	08005a75 	.word	0x08005a75
 80059d8:	08005a75 	.word	0x08005a75
 80059dc:	08005a75 	.word	0x08005a75
 80059e0:	08005a55 	.word	0x08005a55
 80059e4:	08005a75 	.word	0x08005a75
 80059e8:	08005a75 	.word	0x08005a75
 80059ec:	08005a75 	.word	0x08005a75
 80059f0:	08005a75 	.word	0x08005a75
 80059f4:	08005a75 	.word	0x08005a75
 80059f8:	08005a75 	.word	0x08005a75
 80059fc:	08005a75 	.word	0x08005a75
 8005a00:	08005a5d 	.word	0x08005a5d
 8005a04:	08005a75 	.word	0x08005a75
 8005a08:	08005a75 	.word	0x08005a75
 8005a0c:	08005a75 	.word	0x08005a75
 8005a10:	08005a75 	.word	0x08005a75
 8005a14:	08005a75 	.word	0x08005a75
 8005a18:	08005a75 	.word	0x08005a75
 8005a1c:	08005a75 	.word	0x08005a75
 8005a20:	08005a65 	.word	0x08005a65
 8005a24:	08005a75 	.word	0x08005a75
 8005a28:	08005a75 	.word	0x08005a75
 8005a2c:	08005a75 	.word	0x08005a75
 8005a30:	08005a75 	.word	0x08005a75
 8005a34:	08005a75 	.word	0x08005a75
 8005a38:	08005a75 	.word	0x08005a75
 8005a3c:	08005a75 	.word	0x08005a75
 8005a40:	08005a6d 	.word	0x08005a6d
 8005a44:	2301      	movs	r3, #1
 8005a46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a4a:	e222      	b.n	8005e92 <UART_SetConfig+0x5a6>
 8005a4c:	2304      	movs	r3, #4
 8005a4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a52:	e21e      	b.n	8005e92 <UART_SetConfig+0x5a6>
 8005a54:	2308      	movs	r3, #8
 8005a56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a5a:	e21a      	b.n	8005e92 <UART_SetConfig+0x5a6>
 8005a5c:	2310      	movs	r3, #16
 8005a5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a62:	e216      	b.n	8005e92 <UART_SetConfig+0x5a6>
 8005a64:	2320      	movs	r3, #32
 8005a66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a6a:	e212      	b.n	8005e92 <UART_SetConfig+0x5a6>
 8005a6c:	2340      	movs	r3, #64	@ 0x40
 8005a6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a72:	e20e      	b.n	8005e92 <UART_SetConfig+0x5a6>
 8005a74:	2380      	movs	r3, #128	@ 0x80
 8005a76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a7a:	e20a      	b.n	8005e92 <UART_SetConfig+0x5a6>
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a69      	ldr	r2, [pc, #420]	@ (8005c28 <UART_SetConfig+0x33c>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d130      	bne.n	8005ae8 <UART_SetConfig+0x1fc>
 8005a86:	4b67      	ldr	r3, [pc, #412]	@ (8005c24 <UART_SetConfig+0x338>)
 8005a88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a8a:	f003 0307 	and.w	r3, r3, #7
 8005a8e:	2b05      	cmp	r3, #5
 8005a90:	d826      	bhi.n	8005ae0 <UART_SetConfig+0x1f4>
 8005a92:	a201      	add	r2, pc, #4	@ (adr r2, 8005a98 <UART_SetConfig+0x1ac>)
 8005a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a98:	08005ab1 	.word	0x08005ab1
 8005a9c:	08005ab9 	.word	0x08005ab9
 8005aa0:	08005ac1 	.word	0x08005ac1
 8005aa4:	08005ac9 	.word	0x08005ac9
 8005aa8:	08005ad1 	.word	0x08005ad1
 8005aac:	08005ad9 	.word	0x08005ad9
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ab6:	e1ec      	b.n	8005e92 <UART_SetConfig+0x5a6>
 8005ab8:	2304      	movs	r3, #4
 8005aba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005abe:	e1e8      	b.n	8005e92 <UART_SetConfig+0x5a6>
 8005ac0:	2308      	movs	r3, #8
 8005ac2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ac6:	e1e4      	b.n	8005e92 <UART_SetConfig+0x5a6>
 8005ac8:	2310      	movs	r3, #16
 8005aca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ace:	e1e0      	b.n	8005e92 <UART_SetConfig+0x5a6>
 8005ad0:	2320      	movs	r3, #32
 8005ad2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ad6:	e1dc      	b.n	8005e92 <UART_SetConfig+0x5a6>
 8005ad8:	2340      	movs	r3, #64	@ 0x40
 8005ada:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ade:	e1d8      	b.n	8005e92 <UART_SetConfig+0x5a6>
 8005ae0:	2380      	movs	r3, #128	@ 0x80
 8005ae2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ae6:	e1d4      	b.n	8005e92 <UART_SetConfig+0x5a6>
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a4f      	ldr	r2, [pc, #316]	@ (8005c2c <UART_SetConfig+0x340>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d130      	bne.n	8005b54 <UART_SetConfig+0x268>
 8005af2:	4b4c      	ldr	r3, [pc, #304]	@ (8005c24 <UART_SetConfig+0x338>)
 8005af4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005af6:	f003 0307 	and.w	r3, r3, #7
 8005afa:	2b05      	cmp	r3, #5
 8005afc:	d826      	bhi.n	8005b4c <UART_SetConfig+0x260>
 8005afe:	a201      	add	r2, pc, #4	@ (adr r2, 8005b04 <UART_SetConfig+0x218>)
 8005b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b04:	08005b1d 	.word	0x08005b1d
 8005b08:	08005b25 	.word	0x08005b25
 8005b0c:	08005b2d 	.word	0x08005b2d
 8005b10:	08005b35 	.word	0x08005b35
 8005b14:	08005b3d 	.word	0x08005b3d
 8005b18:	08005b45 	.word	0x08005b45
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b22:	e1b6      	b.n	8005e92 <UART_SetConfig+0x5a6>
 8005b24:	2304      	movs	r3, #4
 8005b26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b2a:	e1b2      	b.n	8005e92 <UART_SetConfig+0x5a6>
 8005b2c:	2308      	movs	r3, #8
 8005b2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b32:	e1ae      	b.n	8005e92 <UART_SetConfig+0x5a6>
 8005b34:	2310      	movs	r3, #16
 8005b36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b3a:	e1aa      	b.n	8005e92 <UART_SetConfig+0x5a6>
 8005b3c:	2320      	movs	r3, #32
 8005b3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b42:	e1a6      	b.n	8005e92 <UART_SetConfig+0x5a6>
 8005b44:	2340      	movs	r3, #64	@ 0x40
 8005b46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b4a:	e1a2      	b.n	8005e92 <UART_SetConfig+0x5a6>
 8005b4c:	2380      	movs	r3, #128	@ 0x80
 8005b4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b52:	e19e      	b.n	8005e92 <UART_SetConfig+0x5a6>
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a35      	ldr	r2, [pc, #212]	@ (8005c30 <UART_SetConfig+0x344>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d130      	bne.n	8005bc0 <UART_SetConfig+0x2d4>
 8005b5e:	4b31      	ldr	r3, [pc, #196]	@ (8005c24 <UART_SetConfig+0x338>)
 8005b60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b62:	f003 0307 	and.w	r3, r3, #7
 8005b66:	2b05      	cmp	r3, #5
 8005b68:	d826      	bhi.n	8005bb8 <UART_SetConfig+0x2cc>
 8005b6a:	a201      	add	r2, pc, #4	@ (adr r2, 8005b70 <UART_SetConfig+0x284>)
 8005b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b70:	08005b89 	.word	0x08005b89
 8005b74:	08005b91 	.word	0x08005b91
 8005b78:	08005b99 	.word	0x08005b99
 8005b7c:	08005ba1 	.word	0x08005ba1
 8005b80:	08005ba9 	.word	0x08005ba9
 8005b84:	08005bb1 	.word	0x08005bb1
 8005b88:	2300      	movs	r3, #0
 8005b8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b8e:	e180      	b.n	8005e92 <UART_SetConfig+0x5a6>
 8005b90:	2304      	movs	r3, #4
 8005b92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b96:	e17c      	b.n	8005e92 <UART_SetConfig+0x5a6>
 8005b98:	2308      	movs	r3, #8
 8005b9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b9e:	e178      	b.n	8005e92 <UART_SetConfig+0x5a6>
 8005ba0:	2310      	movs	r3, #16
 8005ba2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ba6:	e174      	b.n	8005e92 <UART_SetConfig+0x5a6>
 8005ba8:	2320      	movs	r3, #32
 8005baa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bae:	e170      	b.n	8005e92 <UART_SetConfig+0x5a6>
 8005bb0:	2340      	movs	r3, #64	@ 0x40
 8005bb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bb6:	e16c      	b.n	8005e92 <UART_SetConfig+0x5a6>
 8005bb8:	2380      	movs	r3, #128	@ 0x80
 8005bba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bbe:	e168      	b.n	8005e92 <UART_SetConfig+0x5a6>
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a1b      	ldr	r2, [pc, #108]	@ (8005c34 <UART_SetConfig+0x348>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d142      	bne.n	8005c50 <UART_SetConfig+0x364>
 8005bca:	4b16      	ldr	r3, [pc, #88]	@ (8005c24 <UART_SetConfig+0x338>)
 8005bcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bce:	f003 0307 	and.w	r3, r3, #7
 8005bd2:	2b05      	cmp	r3, #5
 8005bd4:	d838      	bhi.n	8005c48 <UART_SetConfig+0x35c>
 8005bd6:	a201      	add	r2, pc, #4	@ (adr r2, 8005bdc <UART_SetConfig+0x2f0>)
 8005bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bdc:	08005bf5 	.word	0x08005bf5
 8005be0:	08005bfd 	.word	0x08005bfd
 8005be4:	08005c05 	.word	0x08005c05
 8005be8:	08005c0d 	.word	0x08005c0d
 8005bec:	08005c39 	.word	0x08005c39
 8005bf0:	08005c41 	.word	0x08005c41
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bfa:	e14a      	b.n	8005e92 <UART_SetConfig+0x5a6>
 8005bfc:	2304      	movs	r3, #4
 8005bfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c02:	e146      	b.n	8005e92 <UART_SetConfig+0x5a6>
 8005c04:	2308      	movs	r3, #8
 8005c06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c0a:	e142      	b.n	8005e92 <UART_SetConfig+0x5a6>
 8005c0c:	2310      	movs	r3, #16
 8005c0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c12:	e13e      	b.n	8005e92 <UART_SetConfig+0x5a6>
 8005c14:	cfff69f3 	.word	0xcfff69f3
 8005c18:	58000c00 	.word	0x58000c00
 8005c1c:	11fff4ff 	.word	0x11fff4ff
 8005c20:	40011000 	.word	0x40011000
 8005c24:	58024400 	.word	0x58024400
 8005c28:	40004400 	.word	0x40004400
 8005c2c:	40004800 	.word	0x40004800
 8005c30:	40004c00 	.word	0x40004c00
 8005c34:	40005000 	.word	0x40005000
 8005c38:	2320      	movs	r3, #32
 8005c3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c3e:	e128      	b.n	8005e92 <UART_SetConfig+0x5a6>
 8005c40:	2340      	movs	r3, #64	@ 0x40
 8005c42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c46:	e124      	b.n	8005e92 <UART_SetConfig+0x5a6>
 8005c48:	2380      	movs	r3, #128	@ 0x80
 8005c4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c4e:	e120      	b.n	8005e92 <UART_SetConfig+0x5a6>
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4acb      	ldr	r2, [pc, #812]	@ (8005f84 <UART_SetConfig+0x698>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d176      	bne.n	8005d48 <UART_SetConfig+0x45c>
 8005c5a:	4bcb      	ldr	r3, [pc, #812]	@ (8005f88 <UART_SetConfig+0x69c>)
 8005c5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c5e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005c62:	2b28      	cmp	r3, #40	@ 0x28
 8005c64:	d86c      	bhi.n	8005d40 <UART_SetConfig+0x454>
 8005c66:	a201      	add	r2, pc, #4	@ (adr r2, 8005c6c <UART_SetConfig+0x380>)
 8005c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c6c:	08005d11 	.word	0x08005d11
 8005c70:	08005d41 	.word	0x08005d41
 8005c74:	08005d41 	.word	0x08005d41
 8005c78:	08005d41 	.word	0x08005d41
 8005c7c:	08005d41 	.word	0x08005d41
 8005c80:	08005d41 	.word	0x08005d41
 8005c84:	08005d41 	.word	0x08005d41
 8005c88:	08005d41 	.word	0x08005d41
 8005c8c:	08005d19 	.word	0x08005d19
 8005c90:	08005d41 	.word	0x08005d41
 8005c94:	08005d41 	.word	0x08005d41
 8005c98:	08005d41 	.word	0x08005d41
 8005c9c:	08005d41 	.word	0x08005d41
 8005ca0:	08005d41 	.word	0x08005d41
 8005ca4:	08005d41 	.word	0x08005d41
 8005ca8:	08005d41 	.word	0x08005d41
 8005cac:	08005d21 	.word	0x08005d21
 8005cb0:	08005d41 	.word	0x08005d41
 8005cb4:	08005d41 	.word	0x08005d41
 8005cb8:	08005d41 	.word	0x08005d41
 8005cbc:	08005d41 	.word	0x08005d41
 8005cc0:	08005d41 	.word	0x08005d41
 8005cc4:	08005d41 	.word	0x08005d41
 8005cc8:	08005d41 	.word	0x08005d41
 8005ccc:	08005d29 	.word	0x08005d29
 8005cd0:	08005d41 	.word	0x08005d41
 8005cd4:	08005d41 	.word	0x08005d41
 8005cd8:	08005d41 	.word	0x08005d41
 8005cdc:	08005d41 	.word	0x08005d41
 8005ce0:	08005d41 	.word	0x08005d41
 8005ce4:	08005d41 	.word	0x08005d41
 8005ce8:	08005d41 	.word	0x08005d41
 8005cec:	08005d31 	.word	0x08005d31
 8005cf0:	08005d41 	.word	0x08005d41
 8005cf4:	08005d41 	.word	0x08005d41
 8005cf8:	08005d41 	.word	0x08005d41
 8005cfc:	08005d41 	.word	0x08005d41
 8005d00:	08005d41 	.word	0x08005d41
 8005d04:	08005d41 	.word	0x08005d41
 8005d08:	08005d41 	.word	0x08005d41
 8005d0c:	08005d39 	.word	0x08005d39
 8005d10:	2301      	movs	r3, #1
 8005d12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d16:	e0bc      	b.n	8005e92 <UART_SetConfig+0x5a6>
 8005d18:	2304      	movs	r3, #4
 8005d1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d1e:	e0b8      	b.n	8005e92 <UART_SetConfig+0x5a6>
 8005d20:	2308      	movs	r3, #8
 8005d22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d26:	e0b4      	b.n	8005e92 <UART_SetConfig+0x5a6>
 8005d28:	2310      	movs	r3, #16
 8005d2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d2e:	e0b0      	b.n	8005e92 <UART_SetConfig+0x5a6>
 8005d30:	2320      	movs	r3, #32
 8005d32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d36:	e0ac      	b.n	8005e92 <UART_SetConfig+0x5a6>
 8005d38:	2340      	movs	r3, #64	@ 0x40
 8005d3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d3e:	e0a8      	b.n	8005e92 <UART_SetConfig+0x5a6>
 8005d40:	2380      	movs	r3, #128	@ 0x80
 8005d42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d46:	e0a4      	b.n	8005e92 <UART_SetConfig+0x5a6>
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a8f      	ldr	r2, [pc, #572]	@ (8005f8c <UART_SetConfig+0x6a0>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d130      	bne.n	8005db4 <UART_SetConfig+0x4c8>
 8005d52:	4b8d      	ldr	r3, [pc, #564]	@ (8005f88 <UART_SetConfig+0x69c>)
 8005d54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d56:	f003 0307 	and.w	r3, r3, #7
 8005d5a:	2b05      	cmp	r3, #5
 8005d5c:	d826      	bhi.n	8005dac <UART_SetConfig+0x4c0>
 8005d5e:	a201      	add	r2, pc, #4	@ (adr r2, 8005d64 <UART_SetConfig+0x478>)
 8005d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d64:	08005d7d 	.word	0x08005d7d
 8005d68:	08005d85 	.word	0x08005d85
 8005d6c:	08005d8d 	.word	0x08005d8d
 8005d70:	08005d95 	.word	0x08005d95
 8005d74:	08005d9d 	.word	0x08005d9d
 8005d78:	08005da5 	.word	0x08005da5
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d82:	e086      	b.n	8005e92 <UART_SetConfig+0x5a6>
 8005d84:	2304      	movs	r3, #4
 8005d86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d8a:	e082      	b.n	8005e92 <UART_SetConfig+0x5a6>
 8005d8c:	2308      	movs	r3, #8
 8005d8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d92:	e07e      	b.n	8005e92 <UART_SetConfig+0x5a6>
 8005d94:	2310      	movs	r3, #16
 8005d96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d9a:	e07a      	b.n	8005e92 <UART_SetConfig+0x5a6>
 8005d9c:	2320      	movs	r3, #32
 8005d9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005da2:	e076      	b.n	8005e92 <UART_SetConfig+0x5a6>
 8005da4:	2340      	movs	r3, #64	@ 0x40
 8005da6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005daa:	e072      	b.n	8005e92 <UART_SetConfig+0x5a6>
 8005dac:	2380      	movs	r3, #128	@ 0x80
 8005dae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005db2:	e06e      	b.n	8005e92 <UART_SetConfig+0x5a6>
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a75      	ldr	r2, [pc, #468]	@ (8005f90 <UART_SetConfig+0x6a4>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d130      	bne.n	8005e20 <UART_SetConfig+0x534>
 8005dbe:	4b72      	ldr	r3, [pc, #456]	@ (8005f88 <UART_SetConfig+0x69c>)
 8005dc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dc2:	f003 0307 	and.w	r3, r3, #7
 8005dc6:	2b05      	cmp	r3, #5
 8005dc8:	d826      	bhi.n	8005e18 <UART_SetConfig+0x52c>
 8005dca:	a201      	add	r2, pc, #4	@ (adr r2, 8005dd0 <UART_SetConfig+0x4e4>)
 8005dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dd0:	08005de9 	.word	0x08005de9
 8005dd4:	08005df1 	.word	0x08005df1
 8005dd8:	08005df9 	.word	0x08005df9
 8005ddc:	08005e01 	.word	0x08005e01
 8005de0:	08005e09 	.word	0x08005e09
 8005de4:	08005e11 	.word	0x08005e11
 8005de8:	2300      	movs	r3, #0
 8005dea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dee:	e050      	b.n	8005e92 <UART_SetConfig+0x5a6>
 8005df0:	2304      	movs	r3, #4
 8005df2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005df6:	e04c      	b.n	8005e92 <UART_SetConfig+0x5a6>
 8005df8:	2308      	movs	r3, #8
 8005dfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dfe:	e048      	b.n	8005e92 <UART_SetConfig+0x5a6>
 8005e00:	2310      	movs	r3, #16
 8005e02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e06:	e044      	b.n	8005e92 <UART_SetConfig+0x5a6>
 8005e08:	2320      	movs	r3, #32
 8005e0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e0e:	e040      	b.n	8005e92 <UART_SetConfig+0x5a6>
 8005e10:	2340      	movs	r3, #64	@ 0x40
 8005e12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e16:	e03c      	b.n	8005e92 <UART_SetConfig+0x5a6>
 8005e18:	2380      	movs	r3, #128	@ 0x80
 8005e1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e1e:	e038      	b.n	8005e92 <UART_SetConfig+0x5a6>
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a5b      	ldr	r2, [pc, #364]	@ (8005f94 <UART_SetConfig+0x6a8>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d130      	bne.n	8005e8c <UART_SetConfig+0x5a0>
 8005e2a:	4b57      	ldr	r3, [pc, #348]	@ (8005f88 <UART_SetConfig+0x69c>)
 8005e2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e2e:	f003 0307 	and.w	r3, r3, #7
 8005e32:	2b05      	cmp	r3, #5
 8005e34:	d826      	bhi.n	8005e84 <UART_SetConfig+0x598>
 8005e36:	a201      	add	r2, pc, #4	@ (adr r2, 8005e3c <UART_SetConfig+0x550>)
 8005e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e3c:	08005e55 	.word	0x08005e55
 8005e40:	08005e5d 	.word	0x08005e5d
 8005e44:	08005e65 	.word	0x08005e65
 8005e48:	08005e6d 	.word	0x08005e6d
 8005e4c:	08005e75 	.word	0x08005e75
 8005e50:	08005e7d 	.word	0x08005e7d
 8005e54:	2302      	movs	r3, #2
 8005e56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e5a:	e01a      	b.n	8005e92 <UART_SetConfig+0x5a6>
 8005e5c:	2304      	movs	r3, #4
 8005e5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e62:	e016      	b.n	8005e92 <UART_SetConfig+0x5a6>
 8005e64:	2308      	movs	r3, #8
 8005e66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e6a:	e012      	b.n	8005e92 <UART_SetConfig+0x5a6>
 8005e6c:	2310      	movs	r3, #16
 8005e6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e72:	e00e      	b.n	8005e92 <UART_SetConfig+0x5a6>
 8005e74:	2320      	movs	r3, #32
 8005e76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e7a:	e00a      	b.n	8005e92 <UART_SetConfig+0x5a6>
 8005e7c:	2340      	movs	r3, #64	@ 0x40
 8005e7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e82:	e006      	b.n	8005e92 <UART_SetConfig+0x5a6>
 8005e84:	2380      	movs	r3, #128	@ 0x80
 8005e86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e8a:	e002      	b.n	8005e92 <UART_SetConfig+0x5a6>
 8005e8c:	2380      	movs	r3, #128	@ 0x80
 8005e8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a3f      	ldr	r2, [pc, #252]	@ (8005f94 <UART_SetConfig+0x6a8>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	f040 80f8 	bne.w	800608e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005e9e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005ea2:	2b20      	cmp	r3, #32
 8005ea4:	dc46      	bgt.n	8005f34 <UART_SetConfig+0x648>
 8005ea6:	2b02      	cmp	r3, #2
 8005ea8:	f2c0 8082 	blt.w	8005fb0 <UART_SetConfig+0x6c4>
 8005eac:	3b02      	subs	r3, #2
 8005eae:	2b1e      	cmp	r3, #30
 8005eb0:	d87e      	bhi.n	8005fb0 <UART_SetConfig+0x6c4>
 8005eb2:	a201      	add	r2, pc, #4	@ (adr r2, 8005eb8 <UART_SetConfig+0x5cc>)
 8005eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eb8:	08005f3b 	.word	0x08005f3b
 8005ebc:	08005fb1 	.word	0x08005fb1
 8005ec0:	08005f43 	.word	0x08005f43
 8005ec4:	08005fb1 	.word	0x08005fb1
 8005ec8:	08005fb1 	.word	0x08005fb1
 8005ecc:	08005fb1 	.word	0x08005fb1
 8005ed0:	08005f53 	.word	0x08005f53
 8005ed4:	08005fb1 	.word	0x08005fb1
 8005ed8:	08005fb1 	.word	0x08005fb1
 8005edc:	08005fb1 	.word	0x08005fb1
 8005ee0:	08005fb1 	.word	0x08005fb1
 8005ee4:	08005fb1 	.word	0x08005fb1
 8005ee8:	08005fb1 	.word	0x08005fb1
 8005eec:	08005fb1 	.word	0x08005fb1
 8005ef0:	08005f63 	.word	0x08005f63
 8005ef4:	08005fb1 	.word	0x08005fb1
 8005ef8:	08005fb1 	.word	0x08005fb1
 8005efc:	08005fb1 	.word	0x08005fb1
 8005f00:	08005fb1 	.word	0x08005fb1
 8005f04:	08005fb1 	.word	0x08005fb1
 8005f08:	08005fb1 	.word	0x08005fb1
 8005f0c:	08005fb1 	.word	0x08005fb1
 8005f10:	08005fb1 	.word	0x08005fb1
 8005f14:	08005fb1 	.word	0x08005fb1
 8005f18:	08005fb1 	.word	0x08005fb1
 8005f1c:	08005fb1 	.word	0x08005fb1
 8005f20:	08005fb1 	.word	0x08005fb1
 8005f24:	08005fb1 	.word	0x08005fb1
 8005f28:	08005fb1 	.word	0x08005fb1
 8005f2c:	08005fb1 	.word	0x08005fb1
 8005f30:	08005fa3 	.word	0x08005fa3
 8005f34:	2b40      	cmp	r3, #64	@ 0x40
 8005f36:	d037      	beq.n	8005fa8 <UART_SetConfig+0x6bc>
 8005f38:	e03a      	b.n	8005fb0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005f3a:	f7fe fc8b 	bl	8004854 <HAL_RCCEx_GetD3PCLK1Freq>
 8005f3e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005f40:	e03c      	b.n	8005fbc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005f46:	4618      	mov	r0, r3
 8005f48:	f7fe fc9a 	bl	8004880 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005f4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f50:	e034      	b.n	8005fbc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f52:	f107 0318 	add.w	r3, r7, #24
 8005f56:	4618      	mov	r0, r3
 8005f58:	f7fe fde6 	bl	8004b28 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005f5c:	69fb      	ldr	r3, [r7, #28]
 8005f5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f60:	e02c      	b.n	8005fbc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f62:	4b09      	ldr	r3, [pc, #36]	@ (8005f88 <UART_SetConfig+0x69c>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f003 0320 	and.w	r3, r3, #32
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d016      	beq.n	8005f9c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005f6e:	4b06      	ldr	r3, [pc, #24]	@ (8005f88 <UART_SetConfig+0x69c>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	08db      	lsrs	r3, r3, #3
 8005f74:	f003 0303 	and.w	r3, r3, #3
 8005f78:	4a07      	ldr	r2, [pc, #28]	@ (8005f98 <UART_SetConfig+0x6ac>)
 8005f7a:	fa22 f303 	lsr.w	r3, r2, r3
 8005f7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005f80:	e01c      	b.n	8005fbc <UART_SetConfig+0x6d0>
 8005f82:	bf00      	nop
 8005f84:	40011400 	.word	0x40011400
 8005f88:	58024400 	.word	0x58024400
 8005f8c:	40007800 	.word	0x40007800
 8005f90:	40007c00 	.word	0x40007c00
 8005f94:	58000c00 	.word	0x58000c00
 8005f98:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005f9c:	4b9d      	ldr	r3, [pc, #628]	@ (8006214 <UART_SetConfig+0x928>)
 8005f9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005fa0:	e00c      	b.n	8005fbc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005fa2:	4b9d      	ldr	r3, [pc, #628]	@ (8006218 <UART_SetConfig+0x92c>)
 8005fa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005fa6:	e009      	b.n	8005fbc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fa8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005fac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005fae:	e005      	b.n	8005fbc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005fba:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005fbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	f000 81de 	beq.w	8006380 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fc8:	4a94      	ldr	r2, [pc, #592]	@ (800621c <UART_SetConfig+0x930>)
 8005fca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005fce:	461a      	mov	r2, r3
 8005fd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fd2:	fbb3 f3f2 	udiv	r3, r3, r2
 8005fd6:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	685a      	ldr	r2, [r3, #4]
 8005fdc:	4613      	mov	r3, r2
 8005fde:	005b      	lsls	r3, r3, #1
 8005fe0:	4413      	add	r3, r2
 8005fe2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d305      	bcc.n	8005ff4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005fee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	d903      	bls.n	8005ffc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005ffa:	e1c1      	b.n	8006380 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ffc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ffe:	2200      	movs	r2, #0
 8006000:	60bb      	str	r3, [r7, #8]
 8006002:	60fa      	str	r2, [r7, #12]
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006008:	4a84      	ldr	r2, [pc, #528]	@ (800621c <UART_SetConfig+0x930>)
 800600a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800600e:	b29b      	uxth	r3, r3
 8006010:	2200      	movs	r2, #0
 8006012:	603b      	str	r3, [r7, #0]
 8006014:	607a      	str	r2, [r7, #4]
 8006016:	e9d7 2300 	ldrd	r2, r3, [r7]
 800601a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800601e:	f7fa f9b7 	bl	8000390 <__aeabi_uldivmod>
 8006022:	4602      	mov	r2, r0
 8006024:	460b      	mov	r3, r1
 8006026:	4610      	mov	r0, r2
 8006028:	4619      	mov	r1, r3
 800602a:	f04f 0200 	mov.w	r2, #0
 800602e:	f04f 0300 	mov.w	r3, #0
 8006032:	020b      	lsls	r3, r1, #8
 8006034:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006038:	0202      	lsls	r2, r0, #8
 800603a:	6979      	ldr	r1, [r7, #20]
 800603c:	6849      	ldr	r1, [r1, #4]
 800603e:	0849      	lsrs	r1, r1, #1
 8006040:	2000      	movs	r0, #0
 8006042:	460c      	mov	r4, r1
 8006044:	4605      	mov	r5, r0
 8006046:	eb12 0804 	adds.w	r8, r2, r4
 800604a:	eb43 0905 	adc.w	r9, r3, r5
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	2200      	movs	r2, #0
 8006054:	469a      	mov	sl, r3
 8006056:	4693      	mov	fp, r2
 8006058:	4652      	mov	r2, sl
 800605a:	465b      	mov	r3, fp
 800605c:	4640      	mov	r0, r8
 800605e:	4649      	mov	r1, r9
 8006060:	f7fa f996 	bl	8000390 <__aeabi_uldivmod>
 8006064:	4602      	mov	r2, r0
 8006066:	460b      	mov	r3, r1
 8006068:	4613      	mov	r3, r2
 800606a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800606c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800606e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006072:	d308      	bcc.n	8006086 <UART_SetConfig+0x79a>
 8006074:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006076:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800607a:	d204      	bcs.n	8006086 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006082:	60da      	str	r2, [r3, #12]
 8006084:	e17c      	b.n	8006380 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8006086:	2301      	movs	r3, #1
 8006088:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800608c:	e178      	b.n	8006380 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	69db      	ldr	r3, [r3, #28]
 8006092:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006096:	f040 80c5 	bne.w	8006224 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800609a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800609e:	2b20      	cmp	r3, #32
 80060a0:	dc48      	bgt.n	8006134 <UART_SetConfig+0x848>
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	db7b      	blt.n	800619e <UART_SetConfig+0x8b2>
 80060a6:	2b20      	cmp	r3, #32
 80060a8:	d879      	bhi.n	800619e <UART_SetConfig+0x8b2>
 80060aa:	a201      	add	r2, pc, #4	@ (adr r2, 80060b0 <UART_SetConfig+0x7c4>)
 80060ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060b0:	0800613b 	.word	0x0800613b
 80060b4:	08006143 	.word	0x08006143
 80060b8:	0800619f 	.word	0x0800619f
 80060bc:	0800619f 	.word	0x0800619f
 80060c0:	0800614b 	.word	0x0800614b
 80060c4:	0800619f 	.word	0x0800619f
 80060c8:	0800619f 	.word	0x0800619f
 80060cc:	0800619f 	.word	0x0800619f
 80060d0:	0800615b 	.word	0x0800615b
 80060d4:	0800619f 	.word	0x0800619f
 80060d8:	0800619f 	.word	0x0800619f
 80060dc:	0800619f 	.word	0x0800619f
 80060e0:	0800619f 	.word	0x0800619f
 80060e4:	0800619f 	.word	0x0800619f
 80060e8:	0800619f 	.word	0x0800619f
 80060ec:	0800619f 	.word	0x0800619f
 80060f0:	0800616b 	.word	0x0800616b
 80060f4:	0800619f 	.word	0x0800619f
 80060f8:	0800619f 	.word	0x0800619f
 80060fc:	0800619f 	.word	0x0800619f
 8006100:	0800619f 	.word	0x0800619f
 8006104:	0800619f 	.word	0x0800619f
 8006108:	0800619f 	.word	0x0800619f
 800610c:	0800619f 	.word	0x0800619f
 8006110:	0800619f 	.word	0x0800619f
 8006114:	0800619f 	.word	0x0800619f
 8006118:	0800619f 	.word	0x0800619f
 800611c:	0800619f 	.word	0x0800619f
 8006120:	0800619f 	.word	0x0800619f
 8006124:	0800619f 	.word	0x0800619f
 8006128:	0800619f 	.word	0x0800619f
 800612c:	0800619f 	.word	0x0800619f
 8006130:	08006191 	.word	0x08006191
 8006134:	2b40      	cmp	r3, #64	@ 0x40
 8006136:	d02e      	beq.n	8006196 <UART_SetConfig+0x8aa>
 8006138:	e031      	b.n	800619e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800613a:	f7fd f913 	bl	8003364 <HAL_RCC_GetPCLK1Freq>
 800613e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006140:	e033      	b.n	80061aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006142:	f7fd f925 	bl	8003390 <HAL_RCC_GetPCLK2Freq>
 8006146:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006148:	e02f      	b.n	80061aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800614a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800614e:	4618      	mov	r0, r3
 8006150:	f7fe fb96 	bl	8004880 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006154:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006156:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006158:	e027      	b.n	80061aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800615a:	f107 0318 	add.w	r3, r7, #24
 800615e:	4618      	mov	r0, r3
 8006160:	f7fe fce2 	bl	8004b28 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006164:	69fb      	ldr	r3, [r7, #28]
 8006166:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006168:	e01f      	b.n	80061aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800616a:	4b2d      	ldr	r3, [pc, #180]	@ (8006220 <UART_SetConfig+0x934>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f003 0320 	and.w	r3, r3, #32
 8006172:	2b00      	cmp	r3, #0
 8006174:	d009      	beq.n	800618a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006176:	4b2a      	ldr	r3, [pc, #168]	@ (8006220 <UART_SetConfig+0x934>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	08db      	lsrs	r3, r3, #3
 800617c:	f003 0303 	and.w	r3, r3, #3
 8006180:	4a24      	ldr	r2, [pc, #144]	@ (8006214 <UART_SetConfig+0x928>)
 8006182:	fa22 f303 	lsr.w	r3, r2, r3
 8006186:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006188:	e00f      	b.n	80061aa <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800618a:	4b22      	ldr	r3, [pc, #136]	@ (8006214 <UART_SetConfig+0x928>)
 800618c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800618e:	e00c      	b.n	80061aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006190:	4b21      	ldr	r3, [pc, #132]	@ (8006218 <UART_SetConfig+0x92c>)
 8006192:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006194:	e009      	b.n	80061aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006196:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800619a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800619c:	e005      	b.n	80061aa <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800619e:	2300      	movs	r3, #0
 80061a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80061a2:	2301      	movs	r3, #1
 80061a4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80061a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80061aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	f000 80e7 	beq.w	8006380 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061b6:	4a19      	ldr	r2, [pc, #100]	@ (800621c <UART_SetConfig+0x930>)
 80061b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061bc:	461a      	mov	r2, r3
 80061be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80061c4:	005a      	lsls	r2, r3, #1
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	085b      	lsrs	r3, r3, #1
 80061cc:	441a      	add	r2, r3
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80061d6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061da:	2b0f      	cmp	r3, #15
 80061dc:	d916      	bls.n	800620c <UART_SetConfig+0x920>
 80061de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061e4:	d212      	bcs.n	800620c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80061e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	f023 030f 	bic.w	r3, r3, #15
 80061ee:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80061f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061f2:	085b      	lsrs	r3, r3, #1
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	f003 0307 	and.w	r3, r3, #7
 80061fa:	b29a      	uxth	r2, r3
 80061fc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80061fe:	4313      	orrs	r3, r2
 8006200:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006208:	60da      	str	r2, [r3, #12]
 800620a:	e0b9      	b.n	8006380 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800620c:	2301      	movs	r3, #1
 800620e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006212:	e0b5      	b.n	8006380 <UART_SetConfig+0xa94>
 8006214:	03d09000 	.word	0x03d09000
 8006218:	003d0900 	.word	0x003d0900
 800621c:	080093fc 	.word	0x080093fc
 8006220:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006224:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006228:	2b20      	cmp	r3, #32
 800622a:	dc49      	bgt.n	80062c0 <UART_SetConfig+0x9d4>
 800622c:	2b00      	cmp	r3, #0
 800622e:	db7c      	blt.n	800632a <UART_SetConfig+0xa3e>
 8006230:	2b20      	cmp	r3, #32
 8006232:	d87a      	bhi.n	800632a <UART_SetConfig+0xa3e>
 8006234:	a201      	add	r2, pc, #4	@ (adr r2, 800623c <UART_SetConfig+0x950>)
 8006236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800623a:	bf00      	nop
 800623c:	080062c7 	.word	0x080062c7
 8006240:	080062cf 	.word	0x080062cf
 8006244:	0800632b 	.word	0x0800632b
 8006248:	0800632b 	.word	0x0800632b
 800624c:	080062d7 	.word	0x080062d7
 8006250:	0800632b 	.word	0x0800632b
 8006254:	0800632b 	.word	0x0800632b
 8006258:	0800632b 	.word	0x0800632b
 800625c:	080062e7 	.word	0x080062e7
 8006260:	0800632b 	.word	0x0800632b
 8006264:	0800632b 	.word	0x0800632b
 8006268:	0800632b 	.word	0x0800632b
 800626c:	0800632b 	.word	0x0800632b
 8006270:	0800632b 	.word	0x0800632b
 8006274:	0800632b 	.word	0x0800632b
 8006278:	0800632b 	.word	0x0800632b
 800627c:	080062f7 	.word	0x080062f7
 8006280:	0800632b 	.word	0x0800632b
 8006284:	0800632b 	.word	0x0800632b
 8006288:	0800632b 	.word	0x0800632b
 800628c:	0800632b 	.word	0x0800632b
 8006290:	0800632b 	.word	0x0800632b
 8006294:	0800632b 	.word	0x0800632b
 8006298:	0800632b 	.word	0x0800632b
 800629c:	0800632b 	.word	0x0800632b
 80062a0:	0800632b 	.word	0x0800632b
 80062a4:	0800632b 	.word	0x0800632b
 80062a8:	0800632b 	.word	0x0800632b
 80062ac:	0800632b 	.word	0x0800632b
 80062b0:	0800632b 	.word	0x0800632b
 80062b4:	0800632b 	.word	0x0800632b
 80062b8:	0800632b 	.word	0x0800632b
 80062bc:	0800631d 	.word	0x0800631d
 80062c0:	2b40      	cmp	r3, #64	@ 0x40
 80062c2:	d02e      	beq.n	8006322 <UART_SetConfig+0xa36>
 80062c4:	e031      	b.n	800632a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062c6:	f7fd f84d 	bl	8003364 <HAL_RCC_GetPCLK1Freq>
 80062ca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80062cc:	e033      	b.n	8006336 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062ce:	f7fd f85f 	bl	8003390 <HAL_RCC_GetPCLK2Freq>
 80062d2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80062d4:	e02f      	b.n	8006336 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80062d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80062da:	4618      	mov	r0, r3
 80062dc:	f7fe fad0 	bl	8004880 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80062e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80062e4:	e027      	b.n	8006336 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80062e6:	f107 0318 	add.w	r3, r7, #24
 80062ea:	4618      	mov	r0, r3
 80062ec:	f7fe fc1c 	bl	8004b28 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80062f0:	69fb      	ldr	r3, [r7, #28]
 80062f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80062f4:	e01f      	b.n	8006336 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80062f6:	4b2d      	ldr	r3, [pc, #180]	@ (80063ac <UART_SetConfig+0xac0>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f003 0320 	and.w	r3, r3, #32
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d009      	beq.n	8006316 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006302:	4b2a      	ldr	r3, [pc, #168]	@ (80063ac <UART_SetConfig+0xac0>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	08db      	lsrs	r3, r3, #3
 8006308:	f003 0303 	and.w	r3, r3, #3
 800630c:	4a28      	ldr	r2, [pc, #160]	@ (80063b0 <UART_SetConfig+0xac4>)
 800630e:	fa22 f303 	lsr.w	r3, r2, r3
 8006312:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006314:	e00f      	b.n	8006336 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8006316:	4b26      	ldr	r3, [pc, #152]	@ (80063b0 <UART_SetConfig+0xac4>)
 8006318:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800631a:	e00c      	b.n	8006336 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800631c:	4b25      	ldr	r3, [pc, #148]	@ (80063b4 <UART_SetConfig+0xac8>)
 800631e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006320:	e009      	b.n	8006336 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006322:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006326:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006328:	e005      	b.n	8006336 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800632a:	2300      	movs	r3, #0
 800632c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800632e:	2301      	movs	r3, #1
 8006330:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006334:	bf00      	nop
    }

    if (pclk != 0U)
 8006336:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006338:	2b00      	cmp	r3, #0
 800633a:	d021      	beq.n	8006380 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006340:	4a1d      	ldr	r2, [pc, #116]	@ (80063b8 <UART_SetConfig+0xacc>)
 8006342:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006346:	461a      	mov	r2, r3
 8006348:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800634a:	fbb3 f2f2 	udiv	r2, r3, r2
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	085b      	lsrs	r3, r3, #1
 8006354:	441a      	add	r2, r3
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	fbb2 f3f3 	udiv	r3, r2, r3
 800635e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006360:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006362:	2b0f      	cmp	r3, #15
 8006364:	d909      	bls.n	800637a <UART_SetConfig+0xa8e>
 8006366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006368:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800636c:	d205      	bcs.n	800637a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800636e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006370:	b29a      	uxth	r2, r3
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	60da      	str	r2, [r3, #12]
 8006378:	e002      	b.n	8006380 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	2201      	movs	r2, #1
 8006384:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	2201      	movs	r2, #1
 800638c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	2200      	movs	r2, #0
 8006394:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	2200      	movs	r2, #0
 800639a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800639c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	3748      	adds	r7, #72	@ 0x48
 80063a4:	46bd      	mov	sp, r7
 80063a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80063aa:	bf00      	nop
 80063ac:	58024400 	.word	0x58024400
 80063b0:	03d09000 	.word	0x03d09000
 80063b4:	003d0900 	.word	0x003d0900
 80063b8:	080093fc 	.word	0x080093fc

080063bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80063bc:	b480      	push	{r7}
 80063be:	b083      	sub	sp, #12
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063c8:	f003 0308 	and.w	r3, r3, #8
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d00a      	beq.n	80063e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	430a      	orrs	r2, r1
 80063e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063ea:	f003 0301 	and.w	r3, r3, #1
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d00a      	beq.n	8006408 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	430a      	orrs	r2, r1
 8006406:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800640c:	f003 0302 	and.w	r3, r3, #2
 8006410:	2b00      	cmp	r3, #0
 8006412:	d00a      	beq.n	800642a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	430a      	orrs	r2, r1
 8006428:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800642e:	f003 0304 	and.w	r3, r3, #4
 8006432:	2b00      	cmp	r3, #0
 8006434:	d00a      	beq.n	800644c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	430a      	orrs	r2, r1
 800644a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006450:	f003 0310 	and.w	r3, r3, #16
 8006454:	2b00      	cmp	r3, #0
 8006456:	d00a      	beq.n	800646e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	689b      	ldr	r3, [r3, #8]
 800645e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	430a      	orrs	r2, r1
 800646c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006472:	f003 0320 	and.w	r3, r3, #32
 8006476:	2b00      	cmp	r3, #0
 8006478:	d00a      	beq.n	8006490 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	689b      	ldr	r3, [r3, #8]
 8006480:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	430a      	orrs	r2, r1
 800648e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006494:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006498:	2b00      	cmp	r3, #0
 800649a:	d01a      	beq.n	80064d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	430a      	orrs	r2, r1
 80064b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80064ba:	d10a      	bne.n	80064d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	430a      	orrs	r2, r1
 80064d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d00a      	beq.n	80064f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	430a      	orrs	r2, r1
 80064f2:	605a      	str	r2, [r3, #4]
  }
}
 80064f4:	bf00      	nop
 80064f6:	370c      	adds	r7, #12
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr

08006500 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b098      	sub	sp, #96	@ 0x60
 8006504:	af02      	add	r7, sp, #8
 8006506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2200      	movs	r2, #0
 800650c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006510:	f7fb fbf4 	bl	8001cfc <HAL_GetTick>
 8006514:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f003 0308 	and.w	r3, r3, #8
 8006520:	2b08      	cmp	r3, #8
 8006522:	d12f      	bne.n	8006584 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006524:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006528:	9300      	str	r3, [sp, #0]
 800652a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800652c:	2200      	movs	r2, #0
 800652e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f000 f88e 	bl	8006654 <UART_WaitOnFlagUntilTimeout>
 8006538:	4603      	mov	r3, r0
 800653a:	2b00      	cmp	r3, #0
 800653c:	d022      	beq.n	8006584 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006544:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006546:	e853 3f00 	ldrex	r3, [r3]
 800654a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800654c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800654e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006552:	653b      	str	r3, [r7, #80]	@ 0x50
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	461a      	mov	r2, r3
 800655a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800655c:	647b      	str	r3, [r7, #68]	@ 0x44
 800655e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006560:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006562:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006564:	e841 2300 	strex	r3, r2, [r1]
 8006568:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800656a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800656c:	2b00      	cmp	r3, #0
 800656e:	d1e6      	bne.n	800653e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2220      	movs	r2, #32
 8006574:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2200      	movs	r2, #0
 800657c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006580:	2303      	movs	r3, #3
 8006582:	e063      	b.n	800664c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f003 0304 	and.w	r3, r3, #4
 800658e:	2b04      	cmp	r3, #4
 8006590:	d149      	bne.n	8006626 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006592:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006596:	9300      	str	r3, [sp, #0]
 8006598:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800659a:	2200      	movs	r2, #0
 800659c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f000 f857 	bl	8006654 <UART_WaitOnFlagUntilTimeout>
 80065a6:	4603      	mov	r3, r0
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d03c      	beq.n	8006626 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065b4:	e853 3f00 	ldrex	r3, [r3]
 80065b8:	623b      	str	r3, [r7, #32]
   return(result);
 80065ba:	6a3b      	ldr	r3, [r7, #32]
 80065bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80065c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	461a      	mov	r2, r3
 80065c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80065cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80065d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80065d2:	e841 2300 	strex	r3, r2, [r1]
 80065d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80065d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d1e6      	bne.n	80065ac <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	3308      	adds	r3, #8
 80065e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	e853 3f00 	ldrex	r3, [r3]
 80065ec:	60fb      	str	r3, [r7, #12]
   return(result);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	f023 0301 	bic.w	r3, r3, #1
 80065f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	3308      	adds	r3, #8
 80065fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80065fe:	61fa      	str	r2, [r7, #28]
 8006600:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006602:	69b9      	ldr	r1, [r7, #24]
 8006604:	69fa      	ldr	r2, [r7, #28]
 8006606:	e841 2300 	strex	r3, r2, [r1]
 800660a:	617b      	str	r3, [r7, #20]
   return(result);
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d1e5      	bne.n	80065de <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2220      	movs	r2, #32
 8006616:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2200      	movs	r2, #0
 800661e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006622:	2303      	movs	r3, #3
 8006624:	e012      	b.n	800664c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2220      	movs	r2, #32
 800662a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2220      	movs	r2, #32
 8006632:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2200      	movs	r2, #0
 800663a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2200      	movs	r2, #0
 8006640:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2200      	movs	r2, #0
 8006646:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800664a:	2300      	movs	r3, #0
}
 800664c:	4618      	mov	r0, r3
 800664e:	3758      	adds	r7, #88	@ 0x58
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}

08006654 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b084      	sub	sp, #16
 8006658:	af00      	add	r7, sp, #0
 800665a:	60f8      	str	r0, [r7, #12]
 800665c:	60b9      	str	r1, [r7, #8]
 800665e:	603b      	str	r3, [r7, #0]
 8006660:	4613      	mov	r3, r2
 8006662:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006664:	e04f      	b.n	8006706 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006666:	69bb      	ldr	r3, [r7, #24]
 8006668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800666c:	d04b      	beq.n	8006706 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800666e:	f7fb fb45 	bl	8001cfc <HAL_GetTick>
 8006672:	4602      	mov	r2, r0
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	1ad3      	subs	r3, r2, r3
 8006678:	69ba      	ldr	r2, [r7, #24]
 800667a:	429a      	cmp	r2, r3
 800667c:	d302      	bcc.n	8006684 <UART_WaitOnFlagUntilTimeout+0x30>
 800667e:	69bb      	ldr	r3, [r7, #24]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d101      	bne.n	8006688 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006684:	2303      	movs	r3, #3
 8006686:	e04e      	b.n	8006726 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f003 0304 	and.w	r3, r3, #4
 8006692:	2b00      	cmp	r3, #0
 8006694:	d037      	beq.n	8006706 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	2b80      	cmp	r3, #128	@ 0x80
 800669a:	d034      	beq.n	8006706 <UART_WaitOnFlagUntilTimeout+0xb2>
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	2b40      	cmp	r3, #64	@ 0x40
 80066a0:	d031      	beq.n	8006706 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	69db      	ldr	r3, [r3, #28]
 80066a8:	f003 0308 	and.w	r3, r3, #8
 80066ac:	2b08      	cmp	r3, #8
 80066ae:	d110      	bne.n	80066d2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	2208      	movs	r2, #8
 80066b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80066b8:	68f8      	ldr	r0, [r7, #12]
 80066ba:	f000 f839 	bl	8006730 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2208      	movs	r2, #8
 80066c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	2200      	movs	r2, #0
 80066ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80066ce:	2301      	movs	r3, #1
 80066d0:	e029      	b.n	8006726 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	69db      	ldr	r3, [r3, #28]
 80066d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80066dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80066e0:	d111      	bne.n	8006706 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80066ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80066ec:	68f8      	ldr	r0, [r7, #12]
 80066ee:	f000 f81f 	bl	8006730 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2220      	movs	r2, #32
 80066f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2200      	movs	r2, #0
 80066fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006702:	2303      	movs	r3, #3
 8006704:	e00f      	b.n	8006726 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	69da      	ldr	r2, [r3, #28]
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	4013      	ands	r3, r2
 8006710:	68ba      	ldr	r2, [r7, #8]
 8006712:	429a      	cmp	r2, r3
 8006714:	bf0c      	ite	eq
 8006716:	2301      	moveq	r3, #1
 8006718:	2300      	movne	r3, #0
 800671a:	b2db      	uxtb	r3, r3
 800671c:	461a      	mov	r2, r3
 800671e:	79fb      	ldrb	r3, [r7, #7]
 8006720:	429a      	cmp	r2, r3
 8006722:	d0a0      	beq.n	8006666 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006724:	2300      	movs	r3, #0
}
 8006726:	4618      	mov	r0, r3
 8006728:	3710      	adds	r7, #16
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}
	...

08006730 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006730:	b480      	push	{r7}
 8006732:	b095      	sub	sp, #84	@ 0x54
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800673e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006740:	e853 3f00 	ldrex	r3, [r3]
 8006744:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006748:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800674c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	461a      	mov	r2, r3
 8006754:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006756:	643b      	str	r3, [r7, #64]	@ 0x40
 8006758:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800675a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800675c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800675e:	e841 2300 	strex	r3, r2, [r1]
 8006762:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006764:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006766:	2b00      	cmp	r3, #0
 8006768:	d1e6      	bne.n	8006738 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	3308      	adds	r3, #8
 8006770:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006772:	6a3b      	ldr	r3, [r7, #32]
 8006774:	e853 3f00 	ldrex	r3, [r3]
 8006778:	61fb      	str	r3, [r7, #28]
   return(result);
 800677a:	69fa      	ldr	r2, [r7, #28]
 800677c:	4b1e      	ldr	r3, [pc, #120]	@ (80067f8 <UART_EndRxTransfer+0xc8>)
 800677e:	4013      	ands	r3, r2
 8006780:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	3308      	adds	r3, #8
 8006788:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800678a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800678c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800678e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006790:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006792:	e841 2300 	strex	r3, r2, [r1]
 8006796:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800679a:	2b00      	cmp	r3, #0
 800679c:	d1e5      	bne.n	800676a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80067a2:	2b01      	cmp	r3, #1
 80067a4:	d118      	bne.n	80067d8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	e853 3f00 	ldrex	r3, [r3]
 80067b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	f023 0310 	bic.w	r3, r3, #16
 80067ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	461a      	mov	r2, r3
 80067c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80067c4:	61bb      	str	r3, [r7, #24]
 80067c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067c8:	6979      	ldr	r1, [r7, #20]
 80067ca:	69ba      	ldr	r2, [r7, #24]
 80067cc:	e841 2300 	strex	r3, r2, [r1]
 80067d0:	613b      	str	r3, [r7, #16]
   return(result);
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d1e6      	bne.n	80067a6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2220      	movs	r2, #32
 80067dc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2200      	movs	r2, #0
 80067e4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2200      	movs	r2, #0
 80067ea:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80067ec:	bf00      	nop
 80067ee:	3754      	adds	r7, #84	@ 0x54
 80067f0:	46bd      	mov	sp, r7
 80067f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f6:	4770      	bx	lr
 80067f8:	effffffe 	.word	0xeffffffe

080067fc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b085      	sub	sp, #20
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800680a:	2b01      	cmp	r3, #1
 800680c:	d101      	bne.n	8006812 <HAL_UARTEx_DisableFifoMode+0x16>
 800680e:	2302      	movs	r3, #2
 8006810:	e027      	b.n	8006862 <HAL_UARTEx_DisableFifoMode+0x66>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2201      	movs	r2, #1
 8006816:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2224      	movs	r2, #36	@ 0x24
 800681e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	681a      	ldr	r2, [r3, #0]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f022 0201 	bic.w	r2, r2, #1
 8006838:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006840:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2200      	movs	r2, #0
 8006846:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	68fa      	ldr	r2, [r7, #12]
 800684e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2220      	movs	r2, #32
 8006854:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2200      	movs	r2, #0
 800685c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006860:	2300      	movs	r3, #0
}
 8006862:	4618      	mov	r0, r3
 8006864:	3714      	adds	r7, #20
 8006866:	46bd      	mov	sp, r7
 8006868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686c:	4770      	bx	lr

0800686e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800686e:	b580      	push	{r7, lr}
 8006870:	b084      	sub	sp, #16
 8006872:	af00      	add	r7, sp, #0
 8006874:	6078      	str	r0, [r7, #4]
 8006876:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800687e:	2b01      	cmp	r3, #1
 8006880:	d101      	bne.n	8006886 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006882:	2302      	movs	r3, #2
 8006884:	e02d      	b.n	80068e2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2201      	movs	r2, #1
 800688a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2224      	movs	r2, #36	@ 0x24
 8006892:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	681a      	ldr	r2, [r3, #0]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f022 0201 	bic.w	r2, r2, #1
 80068ac:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	689b      	ldr	r3, [r3, #8]
 80068b4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	683a      	ldr	r2, [r7, #0]
 80068be:	430a      	orrs	r2, r1
 80068c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f000 f850 	bl	8006968 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	68fa      	ldr	r2, [r7, #12]
 80068ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2220      	movs	r2, #32
 80068d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2200      	movs	r2, #0
 80068dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80068e0:	2300      	movs	r3, #0
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3710      	adds	r7, #16
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}

080068ea <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80068ea:	b580      	push	{r7, lr}
 80068ec:	b084      	sub	sp, #16
 80068ee:	af00      	add	r7, sp, #0
 80068f0:	6078      	str	r0, [r7, #4]
 80068f2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80068fa:	2b01      	cmp	r3, #1
 80068fc:	d101      	bne.n	8006902 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80068fe:	2302      	movs	r3, #2
 8006900:	e02d      	b.n	800695e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2201      	movs	r2, #1
 8006906:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2224      	movs	r2, #36	@ 0x24
 800690e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	681a      	ldr	r2, [r3, #0]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f022 0201 	bic.w	r2, r2, #1
 8006928:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	689b      	ldr	r3, [r3, #8]
 8006930:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	683a      	ldr	r2, [r7, #0]
 800693a:	430a      	orrs	r2, r1
 800693c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f000 f812 	bl	8006968 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	68fa      	ldr	r2, [r7, #12]
 800694a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2220      	movs	r2, #32
 8006950:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2200      	movs	r2, #0
 8006958:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800695c:	2300      	movs	r3, #0
}
 800695e:	4618      	mov	r0, r3
 8006960:	3710      	adds	r7, #16
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}
	...

08006968 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006968:	b480      	push	{r7}
 800696a:	b085      	sub	sp, #20
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006974:	2b00      	cmp	r3, #0
 8006976:	d108      	bne.n	800698a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2201      	movs	r2, #1
 800697c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2201      	movs	r2, #1
 8006984:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006988:	e031      	b.n	80069ee <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800698a:	2310      	movs	r3, #16
 800698c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800698e:	2310      	movs	r3, #16
 8006990:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	689b      	ldr	r3, [r3, #8]
 8006998:	0e5b      	lsrs	r3, r3, #25
 800699a:	b2db      	uxtb	r3, r3
 800699c:	f003 0307 	and.w	r3, r3, #7
 80069a0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	689b      	ldr	r3, [r3, #8]
 80069a8:	0f5b      	lsrs	r3, r3, #29
 80069aa:	b2db      	uxtb	r3, r3
 80069ac:	f003 0307 	and.w	r3, r3, #7
 80069b0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80069b2:	7bbb      	ldrb	r3, [r7, #14]
 80069b4:	7b3a      	ldrb	r2, [r7, #12]
 80069b6:	4911      	ldr	r1, [pc, #68]	@ (80069fc <UARTEx_SetNbDataToProcess+0x94>)
 80069b8:	5c8a      	ldrb	r2, [r1, r2]
 80069ba:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80069be:	7b3a      	ldrb	r2, [r7, #12]
 80069c0:	490f      	ldr	r1, [pc, #60]	@ (8006a00 <UARTEx_SetNbDataToProcess+0x98>)
 80069c2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80069c4:	fb93 f3f2 	sdiv	r3, r3, r2
 80069c8:	b29a      	uxth	r2, r3
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80069d0:	7bfb      	ldrb	r3, [r7, #15]
 80069d2:	7b7a      	ldrb	r2, [r7, #13]
 80069d4:	4909      	ldr	r1, [pc, #36]	@ (80069fc <UARTEx_SetNbDataToProcess+0x94>)
 80069d6:	5c8a      	ldrb	r2, [r1, r2]
 80069d8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80069dc:	7b7a      	ldrb	r2, [r7, #13]
 80069de:	4908      	ldr	r1, [pc, #32]	@ (8006a00 <UARTEx_SetNbDataToProcess+0x98>)
 80069e0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80069e2:	fb93 f3f2 	sdiv	r3, r3, r2
 80069e6:	b29a      	uxth	r2, r3
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80069ee:	bf00      	nop
 80069f0:	3714      	adds	r7, #20
 80069f2:	46bd      	mov	sp, r7
 80069f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f8:	4770      	bx	lr
 80069fa:	bf00      	nop
 80069fc:	08009414 	.word	0x08009414
 8006a00:	0800941c 	.word	0x0800941c

08006a04 <__cvt>:
 8006a04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a06:	ed2d 8b02 	vpush	{d8}
 8006a0a:	eeb0 8b40 	vmov.f64	d8, d0
 8006a0e:	b085      	sub	sp, #20
 8006a10:	4617      	mov	r7, r2
 8006a12:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8006a14:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006a16:	ee18 2a90 	vmov	r2, s17
 8006a1a:	f025 0520 	bic.w	r5, r5, #32
 8006a1e:	2a00      	cmp	r2, #0
 8006a20:	bfb6      	itet	lt
 8006a22:	222d      	movlt	r2, #45	@ 0x2d
 8006a24:	2200      	movge	r2, #0
 8006a26:	eeb1 8b40 	vneglt.f64	d8, d0
 8006a2a:	2d46      	cmp	r5, #70	@ 0x46
 8006a2c:	460c      	mov	r4, r1
 8006a2e:	701a      	strb	r2, [r3, #0]
 8006a30:	d004      	beq.n	8006a3c <__cvt+0x38>
 8006a32:	2d45      	cmp	r5, #69	@ 0x45
 8006a34:	d100      	bne.n	8006a38 <__cvt+0x34>
 8006a36:	3401      	adds	r4, #1
 8006a38:	2102      	movs	r1, #2
 8006a3a:	e000      	b.n	8006a3e <__cvt+0x3a>
 8006a3c:	2103      	movs	r1, #3
 8006a3e:	ab03      	add	r3, sp, #12
 8006a40:	9301      	str	r3, [sp, #4]
 8006a42:	ab02      	add	r3, sp, #8
 8006a44:	9300      	str	r3, [sp, #0]
 8006a46:	4622      	mov	r2, r4
 8006a48:	4633      	mov	r3, r6
 8006a4a:	eeb0 0b48 	vmov.f64	d0, d8
 8006a4e:	f000 ff1f 	bl	8007890 <_dtoa_r>
 8006a52:	2d47      	cmp	r5, #71	@ 0x47
 8006a54:	d114      	bne.n	8006a80 <__cvt+0x7c>
 8006a56:	07fb      	lsls	r3, r7, #31
 8006a58:	d50a      	bpl.n	8006a70 <__cvt+0x6c>
 8006a5a:	1902      	adds	r2, r0, r4
 8006a5c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006a60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a64:	bf08      	it	eq
 8006a66:	9203      	streq	r2, [sp, #12]
 8006a68:	2130      	movs	r1, #48	@ 0x30
 8006a6a:	9b03      	ldr	r3, [sp, #12]
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d319      	bcc.n	8006aa4 <__cvt+0xa0>
 8006a70:	9b03      	ldr	r3, [sp, #12]
 8006a72:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006a74:	1a1b      	subs	r3, r3, r0
 8006a76:	6013      	str	r3, [r2, #0]
 8006a78:	b005      	add	sp, #20
 8006a7a:	ecbd 8b02 	vpop	{d8}
 8006a7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a80:	2d46      	cmp	r5, #70	@ 0x46
 8006a82:	eb00 0204 	add.w	r2, r0, r4
 8006a86:	d1e9      	bne.n	8006a5c <__cvt+0x58>
 8006a88:	7803      	ldrb	r3, [r0, #0]
 8006a8a:	2b30      	cmp	r3, #48	@ 0x30
 8006a8c:	d107      	bne.n	8006a9e <__cvt+0x9a>
 8006a8e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a96:	bf1c      	itt	ne
 8006a98:	f1c4 0401 	rsbne	r4, r4, #1
 8006a9c:	6034      	strne	r4, [r6, #0]
 8006a9e:	6833      	ldr	r3, [r6, #0]
 8006aa0:	441a      	add	r2, r3
 8006aa2:	e7db      	b.n	8006a5c <__cvt+0x58>
 8006aa4:	1c5c      	adds	r4, r3, #1
 8006aa6:	9403      	str	r4, [sp, #12]
 8006aa8:	7019      	strb	r1, [r3, #0]
 8006aaa:	e7de      	b.n	8006a6a <__cvt+0x66>

08006aac <__exponent>:
 8006aac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006aae:	2900      	cmp	r1, #0
 8006ab0:	bfba      	itte	lt
 8006ab2:	4249      	neglt	r1, r1
 8006ab4:	232d      	movlt	r3, #45	@ 0x2d
 8006ab6:	232b      	movge	r3, #43	@ 0x2b
 8006ab8:	2909      	cmp	r1, #9
 8006aba:	7002      	strb	r2, [r0, #0]
 8006abc:	7043      	strb	r3, [r0, #1]
 8006abe:	dd29      	ble.n	8006b14 <__exponent+0x68>
 8006ac0:	f10d 0307 	add.w	r3, sp, #7
 8006ac4:	461d      	mov	r5, r3
 8006ac6:	270a      	movs	r7, #10
 8006ac8:	461a      	mov	r2, r3
 8006aca:	fbb1 f6f7 	udiv	r6, r1, r7
 8006ace:	fb07 1416 	mls	r4, r7, r6, r1
 8006ad2:	3430      	adds	r4, #48	@ 0x30
 8006ad4:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006ad8:	460c      	mov	r4, r1
 8006ada:	2c63      	cmp	r4, #99	@ 0x63
 8006adc:	f103 33ff 	add.w	r3, r3, #4294967295
 8006ae0:	4631      	mov	r1, r6
 8006ae2:	dcf1      	bgt.n	8006ac8 <__exponent+0x1c>
 8006ae4:	3130      	adds	r1, #48	@ 0x30
 8006ae6:	1e94      	subs	r4, r2, #2
 8006ae8:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006aec:	1c41      	adds	r1, r0, #1
 8006aee:	4623      	mov	r3, r4
 8006af0:	42ab      	cmp	r3, r5
 8006af2:	d30a      	bcc.n	8006b0a <__exponent+0x5e>
 8006af4:	f10d 0309 	add.w	r3, sp, #9
 8006af8:	1a9b      	subs	r3, r3, r2
 8006afa:	42ac      	cmp	r4, r5
 8006afc:	bf88      	it	hi
 8006afe:	2300      	movhi	r3, #0
 8006b00:	3302      	adds	r3, #2
 8006b02:	4403      	add	r3, r0
 8006b04:	1a18      	subs	r0, r3, r0
 8006b06:	b003      	add	sp, #12
 8006b08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b0a:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006b0e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006b12:	e7ed      	b.n	8006af0 <__exponent+0x44>
 8006b14:	2330      	movs	r3, #48	@ 0x30
 8006b16:	3130      	adds	r1, #48	@ 0x30
 8006b18:	7083      	strb	r3, [r0, #2]
 8006b1a:	70c1      	strb	r1, [r0, #3]
 8006b1c:	1d03      	adds	r3, r0, #4
 8006b1e:	e7f1      	b.n	8006b04 <__exponent+0x58>

08006b20 <_printf_float>:
 8006b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b24:	b08d      	sub	sp, #52	@ 0x34
 8006b26:	460c      	mov	r4, r1
 8006b28:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006b2c:	4616      	mov	r6, r2
 8006b2e:	461f      	mov	r7, r3
 8006b30:	4605      	mov	r5, r0
 8006b32:	f000 fdad 	bl	8007690 <_localeconv_r>
 8006b36:	f8d0 b000 	ldr.w	fp, [r0]
 8006b3a:	4658      	mov	r0, fp
 8006b3c:	f7f9 fc20 	bl	8000380 <strlen>
 8006b40:	2300      	movs	r3, #0
 8006b42:	930a      	str	r3, [sp, #40]	@ 0x28
 8006b44:	f8d8 3000 	ldr.w	r3, [r8]
 8006b48:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006b4c:	6822      	ldr	r2, [r4, #0]
 8006b4e:	9005      	str	r0, [sp, #20]
 8006b50:	3307      	adds	r3, #7
 8006b52:	f023 0307 	bic.w	r3, r3, #7
 8006b56:	f103 0108 	add.w	r1, r3, #8
 8006b5a:	f8c8 1000 	str.w	r1, [r8]
 8006b5e:	ed93 0b00 	vldr	d0, [r3]
 8006b62:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8006dc0 <_printf_float+0x2a0>
 8006b66:	eeb0 7bc0 	vabs.f64	d7, d0
 8006b6a:	eeb4 7b46 	vcmp.f64	d7, d6
 8006b6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b72:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8006b76:	dd24      	ble.n	8006bc2 <_printf_float+0xa2>
 8006b78:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8006b7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b80:	d502      	bpl.n	8006b88 <_printf_float+0x68>
 8006b82:	232d      	movs	r3, #45	@ 0x2d
 8006b84:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b88:	498f      	ldr	r1, [pc, #572]	@ (8006dc8 <_printf_float+0x2a8>)
 8006b8a:	4b90      	ldr	r3, [pc, #576]	@ (8006dcc <_printf_float+0x2ac>)
 8006b8c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8006b90:	bf8c      	ite	hi
 8006b92:	4688      	movhi	r8, r1
 8006b94:	4698      	movls	r8, r3
 8006b96:	f022 0204 	bic.w	r2, r2, #4
 8006b9a:	2303      	movs	r3, #3
 8006b9c:	6123      	str	r3, [r4, #16]
 8006b9e:	6022      	str	r2, [r4, #0]
 8006ba0:	f04f 0a00 	mov.w	sl, #0
 8006ba4:	9700      	str	r7, [sp, #0]
 8006ba6:	4633      	mov	r3, r6
 8006ba8:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006baa:	4621      	mov	r1, r4
 8006bac:	4628      	mov	r0, r5
 8006bae:	f000 f9d1 	bl	8006f54 <_printf_common>
 8006bb2:	3001      	adds	r0, #1
 8006bb4:	f040 8089 	bne.w	8006cca <_printf_float+0x1aa>
 8006bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8006bbc:	b00d      	add	sp, #52	@ 0x34
 8006bbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bc2:	eeb4 0b40 	vcmp.f64	d0, d0
 8006bc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bca:	d709      	bvc.n	8006be0 <_printf_float+0xc0>
 8006bcc:	ee10 3a90 	vmov	r3, s1
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	bfbc      	itt	lt
 8006bd4:	232d      	movlt	r3, #45	@ 0x2d
 8006bd6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006bda:	497d      	ldr	r1, [pc, #500]	@ (8006dd0 <_printf_float+0x2b0>)
 8006bdc:	4b7d      	ldr	r3, [pc, #500]	@ (8006dd4 <_printf_float+0x2b4>)
 8006bde:	e7d5      	b.n	8006b8c <_printf_float+0x6c>
 8006be0:	6863      	ldr	r3, [r4, #4]
 8006be2:	1c59      	adds	r1, r3, #1
 8006be4:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8006be8:	d139      	bne.n	8006c5e <_printf_float+0x13e>
 8006bea:	2306      	movs	r3, #6
 8006bec:	6063      	str	r3, [r4, #4]
 8006bee:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	6022      	str	r2, [r4, #0]
 8006bf6:	9303      	str	r3, [sp, #12]
 8006bf8:	ab0a      	add	r3, sp, #40	@ 0x28
 8006bfa:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8006bfe:	ab09      	add	r3, sp, #36	@ 0x24
 8006c00:	9300      	str	r3, [sp, #0]
 8006c02:	6861      	ldr	r1, [r4, #4]
 8006c04:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006c08:	4628      	mov	r0, r5
 8006c0a:	f7ff fefb 	bl	8006a04 <__cvt>
 8006c0e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006c12:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006c14:	4680      	mov	r8, r0
 8006c16:	d129      	bne.n	8006c6c <_printf_float+0x14c>
 8006c18:	1cc8      	adds	r0, r1, #3
 8006c1a:	db02      	blt.n	8006c22 <_printf_float+0x102>
 8006c1c:	6863      	ldr	r3, [r4, #4]
 8006c1e:	4299      	cmp	r1, r3
 8006c20:	dd41      	ble.n	8006ca6 <_printf_float+0x186>
 8006c22:	f1a9 0902 	sub.w	r9, r9, #2
 8006c26:	fa5f f989 	uxtb.w	r9, r9
 8006c2a:	3901      	subs	r1, #1
 8006c2c:	464a      	mov	r2, r9
 8006c2e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006c32:	9109      	str	r1, [sp, #36]	@ 0x24
 8006c34:	f7ff ff3a 	bl	8006aac <__exponent>
 8006c38:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006c3a:	1813      	adds	r3, r2, r0
 8006c3c:	2a01      	cmp	r2, #1
 8006c3e:	4682      	mov	sl, r0
 8006c40:	6123      	str	r3, [r4, #16]
 8006c42:	dc02      	bgt.n	8006c4a <_printf_float+0x12a>
 8006c44:	6822      	ldr	r2, [r4, #0]
 8006c46:	07d2      	lsls	r2, r2, #31
 8006c48:	d501      	bpl.n	8006c4e <_printf_float+0x12e>
 8006c4a:	3301      	adds	r3, #1
 8006c4c:	6123      	str	r3, [r4, #16]
 8006c4e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d0a6      	beq.n	8006ba4 <_printf_float+0x84>
 8006c56:	232d      	movs	r3, #45	@ 0x2d
 8006c58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c5c:	e7a2      	b.n	8006ba4 <_printf_float+0x84>
 8006c5e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006c62:	d1c4      	bne.n	8006bee <_printf_float+0xce>
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d1c2      	bne.n	8006bee <_printf_float+0xce>
 8006c68:	2301      	movs	r3, #1
 8006c6a:	e7bf      	b.n	8006bec <_printf_float+0xcc>
 8006c6c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8006c70:	d9db      	bls.n	8006c2a <_printf_float+0x10a>
 8006c72:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8006c76:	d118      	bne.n	8006caa <_printf_float+0x18a>
 8006c78:	2900      	cmp	r1, #0
 8006c7a:	6863      	ldr	r3, [r4, #4]
 8006c7c:	dd0b      	ble.n	8006c96 <_printf_float+0x176>
 8006c7e:	6121      	str	r1, [r4, #16]
 8006c80:	b913      	cbnz	r3, 8006c88 <_printf_float+0x168>
 8006c82:	6822      	ldr	r2, [r4, #0]
 8006c84:	07d0      	lsls	r0, r2, #31
 8006c86:	d502      	bpl.n	8006c8e <_printf_float+0x16e>
 8006c88:	3301      	adds	r3, #1
 8006c8a:	440b      	add	r3, r1
 8006c8c:	6123      	str	r3, [r4, #16]
 8006c8e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006c90:	f04f 0a00 	mov.w	sl, #0
 8006c94:	e7db      	b.n	8006c4e <_printf_float+0x12e>
 8006c96:	b913      	cbnz	r3, 8006c9e <_printf_float+0x17e>
 8006c98:	6822      	ldr	r2, [r4, #0]
 8006c9a:	07d2      	lsls	r2, r2, #31
 8006c9c:	d501      	bpl.n	8006ca2 <_printf_float+0x182>
 8006c9e:	3302      	adds	r3, #2
 8006ca0:	e7f4      	b.n	8006c8c <_printf_float+0x16c>
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	e7f2      	b.n	8006c8c <_printf_float+0x16c>
 8006ca6:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8006caa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006cac:	4299      	cmp	r1, r3
 8006cae:	db05      	blt.n	8006cbc <_printf_float+0x19c>
 8006cb0:	6823      	ldr	r3, [r4, #0]
 8006cb2:	6121      	str	r1, [r4, #16]
 8006cb4:	07d8      	lsls	r0, r3, #31
 8006cb6:	d5ea      	bpl.n	8006c8e <_printf_float+0x16e>
 8006cb8:	1c4b      	adds	r3, r1, #1
 8006cba:	e7e7      	b.n	8006c8c <_printf_float+0x16c>
 8006cbc:	2900      	cmp	r1, #0
 8006cbe:	bfd4      	ite	le
 8006cc0:	f1c1 0202 	rsble	r2, r1, #2
 8006cc4:	2201      	movgt	r2, #1
 8006cc6:	4413      	add	r3, r2
 8006cc8:	e7e0      	b.n	8006c8c <_printf_float+0x16c>
 8006cca:	6823      	ldr	r3, [r4, #0]
 8006ccc:	055a      	lsls	r2, r3, #21
 8006cce:	d407      	bmi.n	8006ce0 <_printf_float+0x1c0>
 8006cd0:	6923      	ldr	r3, [r4, #16]
 8006cd2:	4642      	mov	r2, r8
 8006cd4:	4631      	mov	r1, r6
 8006cd6:	4628      	mov	r0, r5
 8006cd8:	47b8      	blx	r7
 8006cda:	3001      	adds	r0, #1
 8006cdc:	d12a      	bne.n	8006d34 <_printf_float+0x214>
 8006cde:	e76b      	b.n	8006bb8 <_printf_float+0x98>
 8006ce0:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8006ce4:	f240 80e0 	bls.w	8006ea8 <_printf_float+0x388>
 8006ce8:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8006cec:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006cf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cf4:	d133      	bne.n	8006d5e <_printf_float+0x23e>
 8006cf6:	4a38      	ldr	r2, [pc, #224]	@ (8006dd8 <_printf_float+0x2b8>)
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	4631      	mov	r1, r6
 8006cfc:	4628      	mov	r0, r5
 8006cfe:	47b8      	blx	r7
 8006d00:	3001      	adds	r0, #1
 8006d02:	f43f af59 	beq.w	8006bb8 <_printf_float+0x98>
 8006d06:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006d0a:	4543      	cmp	r3, r8
 8006d0c:	db02      	blt.n	8006d14 <_printf_float+0x1f4>
 8006d0e:	6823      	ldr	r3, [r4, #0]
 8006d10:	07d8      	lsls	r0, r3, #31
 8006d12:	d50f      	bpl.n	8006d34 <_printf_float+0x214>
 8006d14:	9b05      	ldr	r3, [sp, #20]
 8006d16:	465a      	mov	r2, fp
 8006d18:	4631      	mov	r1, r6
 8006d1a:	4628      	mov	r0, r5
 8006d1c:	47b8      	blx	r7
 8006d1e:	3001      	adds	r0, #1
 8006d20:	f43f af4a 	beq.w	8006bb8 <_printf_float+0x98>
 8006d24:	f04f 0900 	mov.w	r9, #0
 8006d28:	f108 38ff 	add.w	r8, r8, #4294967295
 8006d2c:	f104 0a1a 	add.w	sl, r4, #26
 8006d30:	45c8      	cmp	r8, r9
 8006d32:	dc09      	bgt.n	8006d48 <_printf_float+0x228>
 8006d34:	6823      	ldr	r3, [r4, #0]
 8006d36:	079b      	lsls	r3, r3, #30
 8006d38:	f100 8107 	bmi.w	8006f4a <_printf_float+0x42a>
 8006d3c:	68e0      	ldr	r0, [r4, #12]
 8006d3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006d40:	4298      	cmp	r0, r3
 8006d42:	bfb8      	it	lt
 8006d44:	4618      	movlt	r0, r3
 8006d46:	e739      	b.n	8006bbc <_printf_float+0x9c>
 8006d48:	2301      	movs	r3, #1
 8006d4a:	4652      	mov	r2, sl
 8006d4c:	4631      	mov	r1, r6
 8006d4e:	4628      	mov	r0, r5
 8006d50:	47b8      	blx	r7
 8006d52:	3001      	adds	r0, #1
 8006d54:	f43f af30 	beq.w	8006bb8 <_printf_float+0x98>
 8006d58:	f109 0901 	add.w	r9, r9, #1
 8006d5c:	e7e8      	b.n	8006d30 <_printf_float+0x210>
 8006d5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	dc3b      	bgt.n	8006ddc <_printf_float+0x2bc>
 8006d64:	4a1c      	ldr	r2, [pc, #112]	@ (8006dd8 <_printf_float+0x2b8>)
 8006d66:	2301      	movs	r3, #1
 8006d68:	4631      	mov	r1, r6
 8006d6a:	4628      	mov	r0, r5
 8006d6c:	47b8      	blx	r7
 8006d6e:	3001      	adds	r0, #1
 8006d70:	f43f af22 	beq.w	8006bb8 <_printf_float+0x98>
 8006d74:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006d78:	ea59 0303 	orrs.w	r3, r9, r3
 8006d7c:	d102      	bne.n	8006d84 <_printf_float+0x264>
 8006d7e:	6823      	ldr	r3, [r4, #0]
 8006d80:	07d9      	lsls	r1, r3, #31
 8006d82:	d5d7      	bpl.n	8006d34 <_printf_float+0x214>
 8006d84:	9b05      	ldr	r3, [sp, #20]
 8006d86:	465a      	mov	r2, fp
 8006d88:	4631      	mov	r1, r6
 8006d8a:	4628      	mov	r0, r5
 8006d8c:	47b8      	blx	r7
 8006d8e:	3001      	adds	r0, #1
 8006d90:	f43f af12 	beq.w	8006bb8 <_printf_float+0x98>
 8006d94:	f04f 0a00 	mov.w	sl, #0
 8006d98:	f104 0b1a 	add.w	fp, r4, #26
 8006d9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d9e:	425b      	negs	r3, r3
 8006da0:	4553      	cmp	r3, sl
 8006da2:	dc01      	bgt.n	8006da8 <_printf_float+0x288>
 8006da4:	464b      	mov	r3, r9
 8006da6:	e794      	b.n	8006cd2 <_printf_float+0x1b2>
 8006da8:	2301      	movs	r3, #1
 8006daa:	465a      	mov	r2, fp
 8006dac:	4631      	mov	r1, r6
 8006dae:	4628      	mov	r0, r5
 8006db0:	47b8      	blx	r7
 8006db2:	3001      	adds	r0, #1
 8006db4:	f43f af00 	beq.w	8006bb8 <_printf_float+0x98>
 8006db8:	f10a 0a01 	add.w	sl, sl, #1
 8006dbc:	e7ee      	b.n	8006d9c <_printf_float+0x27c>
 8006dbe:	bf00      	nop
 8006dc0:	ffffffff 	.word	0xffffffff
 8006dc4:	7fefffff 	.word	0x7fefffff
 8006dc8:	08009428 	.word	0x08009428
 8006dcc:	08009424 	.word	0x08009424
 8006dd0:	08009430 	.word	0x08009430
 8006dd4:	0800942c 	.word	0x0800942c
 8006dd8:	08009434 	.word	0x08009434
 8006ddc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006dde:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006de2:	4553      	cmp	r3, sl
 8006de4:	bfa8      	it	ge
 8006de6:	4653      	movge	r3, sl
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	4699      	mov	r9, r3
 8006dec:	dc37      	bgt.n	8006e5e <_printf_float+0x33e>
 8006dee:	2300      	movs	r3, #0
 8006df0:	9307      	str	r3, [sp, #28]
 8006df2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006df6:	f104 021a 	add.w	r2, r4, #26
 8006dfa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006dfc:	9907      	ldr	r1, [sp, #28]
 8006dfe:	9306      	str	r3, [sp, #24]
 8006e00:	eba3 0309 	sub.w	r3, r3, r9
 8006e04:	428b      	cmp	r3, r1
 8006e06:	dc31      	bgt.n	8006e6c <_printf_float+0x34c>
 8006e08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e0a:	459a      	cmp	sl, r3
 8006e0c:	dc3b      	bgt.n	8006e86 <_printf_float+0x366>
 8006e0e:	6823      	ldr	r3, [r4, #0]
 8006e10:	07da      	lsls	r2, r3, #31
 8006e12:	d438      	bmi.n	8006e86 <_printf_float+0x366>
 8006e14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e16:	ebaa 0903 	sub.w	r9, sl, r3
 8006e1a:	9b06      	ldr	r3, [sp, #24]
 8006e1c:	ebaa 0303 	sub.w	r3, sl, r3
 8006e20:	4599      	cmp	r9, r3
 8006e22:	bfa8      	it	ge
 8006e24:	4699      	movge	r9, r3
 8006e26:	f1b9 0f00 	cmp.w	r9, #0
 8006e2a:	dc34      	bgt.n	8006e96 <_printf_float+0x376>
 8006e2c:	f04f 0800 	mov.w	r8, #0
 8006e30:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006e34:	f104 0b1a 	add.w	fp, r4, #26
 8006e38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e3a:	ebaa 0303 	sub.w	r3, sl, r3
 8006e3e:	eba3 0309 	sub.w	r3, r3, r9
 8006e42:	4543      	cmp	r3, r8
 8006e44:	f77f af76 	ble.w	8006d34 <_printf_float+0x214>
 8006e48:	2301      	movs	r3, #1
 8006e4a:	465a      	mov	r2, fp
 8006e4c:	4631      	mov	r1, r6
 8006e4e:	4628      	mov	r0, r5
 8006e50:	47b8      	blx	r7
 8006e52:	3001      	adds	r0, #1
 8006e54:	f43f aeb0 	beq.w	8006bb8 <_printf_float+0x98>
 8006e58:	f108 0801 	add.w	r8, r8, #1
 8006e5c:	e7ec      	b.n	8006e38 <_printf_float+0x318>
 8006e5e:	4642      	mov	r2, r8
 8006e60:	4631      	mov	r1, r6
 8006e62:	4628      	mov	r0, r5
 8006e64:	47b8      	blx	r7
 8006e66:	3001      	adds	r0, #1
 8006e68:	d1c1      	bne.n	8006dee <_printf_float+0x2ce>
 8006e6a:	e6a5      	b.n	8006bb8 <_printf_float+0x98>
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	4631      	mov	r1, r6
 8006e70:	4628      	mov	r0, r5
 8006e72:	9206      	str	r2, [sp, #24]
 8006e74:	47b8      	blx	r7
 8006e76:	3001      	adds	r0, #1
 8006e78:	f43f ae9e 	beq.w	8006bb8 <_printf_float+0x98>
 8006e7c:	9b07      	ldr	r3, [sp, #28]
 8006e7e:	9a06      	ldr	r2, [sp, #24]
 8006e80:	3301      	adds	r3, #1
 8006e82:	9307      	str	r3, [sp, #28]
 8006e84:	e7b9      	b.n	8006dfa <_printf_float+0x2da>
 8006e86:	9b05      	ldr	r3, [sp, #20]
 8006e88:	465a      	mov	r2, fp
 8006e8a:	4631      	mov	r1, r6
 8006e8c:	4628      	mov	r0, r5
 8006e8e:	47b8      	blx	r7
 8006e90:	3001      	adds	r0, #1
 8006e92:	d1bf      	bne.n	8006e14 <_printf_float+0x2f4>
 8006e94:	e690      	b.n	8006bb8 <_printf_float+0x98>
 8006e96:	9a06      	ldr	r2, [sp, #24]
 8006e98:	464b      	mov	r3, r9
 8006e9a:	4442      	add	r2, r8
 8006e9c:	4631      	mov	r1, r6
 8006e9e:	4628      	mov	r0, r5
 8006ea0:	47b8      	blx	r7
 8006ea2:	3001      	adds	r0, #1
 8006ea4:	d1c2      	bne.n	8006e2c <_printf_float+0x30c>
 8006ea6:	e687      	b.n	8006bb8 <_printf_float+0x98>
 8006ea8:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8006eac:	f1b9 0f01 	cmp.w	r9, #1
 8006eb0:	dc01      	bgt.n	8006eb6 <_printf_float+0x396>
 8006eb2:	07db      	lsls	r3, r3, #31
 8006eb4:	d536      	bpl.n	8006f24 <_printf_float+0x404>
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	4642      	mov	r2, r8
 8006eba:	4631      	mov	r1, r6
 8006ebc:	4628      	mov	r0, r5
 8006ebe:	47b8      	blx	r7
 8006ec0:	3001      	adds	r0, #1
 8006ec2:	f43f ae79 	beq.w	8006bb8 <_printf_float+0x98>
 8006ec6:	9b05      	ldr	r3, [sp, #20]
 8006ec8:	465a      	mov	r2, fp
 8006eca:	4631      	mov	r1, r6
 8006ecc:	4628      	mov	r0, r5
 8006ece:	47b8      	blx	r7
 8006ed0:	3001      	adds	r0, #1
 8006ed2:	f43f ae71 	beq.w	8006bb8 <_printf_float+0x98>
 8006ed6:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8006eda:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ee2:	f109 39ff 	add.w	r9, r9, #4294967295
 8006ee6:	d018      	beq.n	8006f1a <_printf_float+0x3fa>
 8006ee8:	464b      	mov	r3, r9
 8006eea:	f108 0201 	add.w	r2, r8, #1
 8006eee:	4631      	mov	r1, r6
 8006ef0:	4628      	mov	r0, r5
 8006ef2:	47b8      	blx	r7
 8006ef4:	3001      	adds	r0, #1
 8006ef6:	d10c      	bne.n	8006f12 <_printf_float+0x3f2>
 8006ef8:	e65e      	b.n	8006bb8 <_printf_float+0x98>
 8006efa:	2301      	movs	r3, #1
 8006efc:	465a      	mov	r2, fp
 8006efe:	4631      	mov	r1, r6
 8006f00:	4628      	mov	r0, r5
 8006f02:	47b8      	blx	r7
 8006f04:	3001      	adds	r0, #1
 8006f06:	f43f ae57 	beq.w	8006bb8 <_printf_float+0x98>
 8006f0a:	f108 0801 	add.w	r8, r8, #1
 8006f0e:	45c8      	cmp	r8, r9
 8006f10:	dbf3      	blt.n	8006efa <_printf_float+0x3da>
 8006f12:	4653      	mov	r3, sl
 8006f14:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006f18:	e6dc      	b.n	8006cd4 <_printf_float+0x1b4>
 8006f1a:	f04f 0800 	mov.w	r8, #0
 8006f1e:	f104 0b1a 	add.w	fp, r4, #26
 8006f22:	e7f4      	b.n	8006f0e <_printf_float+0x3ee>
 8006f24:	2301      	movs	r3, #1
 8006f26:	4642      	mov	r2, r8
 8006f28:	e7e1      	b.n	8006eee <_printf_float+0x3ce>
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	464a      	mov	r2, r9
 8006f2e:	4631      	mov	r1, r6
 8006f30:	4628      	mov	r0, r5
 8006f32:	47b8      	blx	r7
 8006f34:	3001      	adds	r0, #1
 8006f36:	f43f ae3f 	beq.w	8006bb8 <_printf_float+0x98>
 8006f3a:	f108 0801 	add.w	r8, r8, #1
 8006f3e:	68e3      	ldr	r3, [r4, #12]
 8006f40:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006f42:	1a5b      	subs	r3, r3, r1
 8006f44:	4543      	cmp	r3, r8
 8006f46:	dcf0      	bgt.n	8006f2a <_printf_float+0x40a>
 8006f48:	e6f8      	b.n	8006d3c <_printf_float+0x21c>
 8006f4a:	f04f 0800 	mov.w	r8, #0
 8006f4e:	f104 0919 	add.w	r9, r4, #25
 8006f52:	e7f4      	b.n	8006f3e <_printf_float+0x41e>

08006f54 <_printf_common>:
 8006f54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f58:	4616      	mov	r6, r2
 8006f5a:	4698      	mov	r8, r3
 8006f5c:	688a      	ldr	r2, [r1, #8]
 8006f5e:	690b      	ldr	r3, [r1, #16]
 8006f60:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006f64:	4293      	cmp	r3, r2
 8006f66:	bfb8      	it	lt
 8006f68:	4613      	movlt	r3, r2
 8006f6a:	6033      	str	r3, [r6, #0]
 8006f6c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006f70:	4607      	mov	r7, r0
 8006f72:	460c      	mov	r4, r1
 8006f74:	b10a      	cbz	r2, 8006f7a <_printf_common+0x26>
 8006f76:	3301      	adds	r3, #1
 8006f78:	6033      	str	r3, [r6, #0]
 8006f7a:	6823      	ldr	r3, [r4, #0]
 8006f7c:	0699      	lsls	r1, r3, #26
 8006f7e:	bf42      	ittt	mi
 8006f80:	6833      	ldrmi	r3, [r6, #0]
 8006f82:	3302      	addmi	r3, #2
 8006f84:	6033      	strmi	r3, [r6, #0]
 8006f86:	6825      	ldr	r5, [r4, #0]
 8006f88:	f015 0506 	ands.w	r5, r5, #6
 8006f8c:	d106      	bne.n	8006f9c <_printf_common+0x48>
 8006f8e:	f104 0a19 	add.w	sl, r4, #25
 8006f92:	68e3      	ldr	r3, [r4, #12]
 8006f94:	6832      	ldr	r2, [r6, #0]
 8006f96:	1a9b      	subs	r3, r3, r2
 8006f98:	42ab      	cmp	r3, r5
 8006f9a:	dc26      	bgt.n	8006fea <_printf_common+0x96>
 8006f9c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006fa0:	6822      	ldr	r2, [r4, #0]
 8006fa2:	3b00      	subs	r3, #0
 8006fa4:	bf18      	it	ne
 8006fa6:	2301      	movne	r3, #1
 8006fa8:	0692      	lsls	r2, r2, #26
 8006faa:	d42b      	bmi.n	8007004 <_printf_common+0xb0>
 8006fac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006fb0:	4641      	mov	r1, r8
 8006fb2:	4638      	mov	r0, r7
 8006fb4:	47c8      	blx	r9
 8006fb6:	3001      	adds	r0, #1
 8006fb8:	d01e      	beq.n	8006ff8 <_printf_common+0xa4>
 8006fba:	6823      	ldr	r3, [r4, #0]
 8006fbc:	6922      	ldr	r2, [r4, #16]
 8006fbe:	f003 0306 	and.w	r3, r3, #6
 8006fc2:	2b04      	cmp	r3, #4
 8006fc4:	bf02      	ittt	eq
 8006fc6:	68e5      	ldreq	r5, [r4, #12]
 8006fc8:	6833      	ldreq	r3, [r6, #0]
 8006fca:	1aed      	subeq	r5, r5, r3
 8006fcc:	68a3      	ldr	r3, [r4, #8]
 8006fce:	bf0c      	ite	eq
 8006fd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006fd4:	2500      	movne	r5, #0
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	bfc4      	itt	gt
 8006fda:	1a9b      	subgt	r3, r3, r2
 8006fdc:	18ed      	addgt	r5, r5, r3
 8006fde:	2600      	movs	r6, #0
 8006fe0:	341a      	adds	r4, #26
 8006fe2:	42b5      	cmp	r5, r6
 8006fe4:	d11a      	bne.n	800701c <_printf_common+0xc8>
 8006fe6:	2000      	movs	r0, #0
 8006fe8:	e008      	b.n	8006ffc <_printf_common+0xa8>
 8006fea:	2301      	movs	r3, #1
 8006fec:	4652      	mov	r2, sl
 8006fee:	4641      	mov	r1, r8
 8006ff0:	4638      	mov	r0, r7
 8006ff2:	47c8      	blx	r9
 8006ff4:	3001      	adds	r0, #1
 8006ff6:	d103      	bne.n	8007000 <_printf_common+0xac>
 8006ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8006ffc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007000:	3501      	adds	r5, #1
 8007002:	e7c6      	b.n	8006f92 <_printf_common+0x3e>
 8007004:	18e1      	adds	r1, r4, r3
 8007006:	1c5a      	adds	r2, r3, #1
 8007008:	2030      	movs	r0, #48	@ 0x30
 800700a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800700e:	4422      	add	r2, r4
 8007010:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007014:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007018:	3302      	adds	r3, #2
 800701a:	e7c7      	b.n	8006fac <_printf_common+0x58>
 800701c:	2301      	movs	r3, #1
 800701e:	4622      	mov	r2, r4
 8007020:	4641      	mov	r1, r8
 8007022:	4638      	mov	r0, r7
 8007024:	47c8      	blx	r9
 8007026:	3001      	adds	r0, #1
 8007028:	d0e6      	beq.n	8006ff8 <_printf_common+0xa4>
 800702a:	3601      	adds	r6, #1
 800702c:	e7d9      	b.n	8006fe2 <_printf_common+0x8e>
	...

08007030 <_printf_i>:
 8007030:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007034:	7e0f      	ldrb	r7, [r1, #24]
 8007036:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007038:	2f78      	cmp	r7, #120	@ 0x78
 800703a:	4691      	mov	r9, r2
 800703c:	4680      	mov	r8, r0
 800703e:	460c      	mov	r4, r1
 8007040:	469a      	mov	sl, r3
 8007042:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007046:	d807      	bhi.n	8007058 <_printf_i+0x28>
 8007048:	2f62      	cmp	r7, #98	@ 0x62
 800704a:	d80a      	bhi.n	8007062 <_printf_i+0x32>
 800704c:	2f00      	cmp	r7, #0
 800704e:	f000 80d1 	beq.w	80071f4 <_printf_i+0x1c4>
 8007052:	2f58      	cmp	r7, #88	@ 0x58
 8007054:	f000 80b8 	beq.w	80071c8 <_printf_i+0x198>
 8007058:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800705c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007060:	e03a      	b.n	80070d8 <_printf_i+0xa8>
 8007062:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007066:	2b15      	cmp	r3, #21
 8007068:	d8f6      	bhi.n	8007058 <_printf_i+0x28>
 800706a:	a101      	add	r1, pc, #4	@ (adr r1, 8007070 <_printf_i+0x40>)
 800706c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007070:	080070c9 	.word	0x080070c9
 8007074:	080070dd 	.word	0x080070dd
 8007078:	08007059 	.word	0x08007059
 800707c:	08007059 	.word	0x08007059
 8007080:	08007059 	.word	0x08007059
 8007084:	08007059 	.word	0x08007059
 8007088:	080070dd 	.word	0x080070dd
 800708c:	08007059 	.word	0x08007059
 8007090:	08007059 	.word	0x08007059
 8007094:	08007059 	.word	0x08007059
 8007098:	08007059 	.word	0x08007059
 800709c:	080071db 	.word	0x080071db
 80070a0:	08007107 	.word	0x08007107
 80070a4:	08007195 	.word	0x08007195
 80070a8:	08007059 	.word	0x08007059
 80070ac:	08007059 	.word	0x08007059
 80070b0:	080071fd 	.word	0x080071fd
 80070b4:	08007059 	.word	0x08007059
 80070b8:	08007107 	.word	0x08007107
 80070bc:	08007059 	.word	0x08007059
 80070c0:	08007059 	.word	0x08007059
 80070c4:	0800719d 	.word	0x0800719d
 80070c8:	6833      	ldr	r3, [r6, #0]
 80070ca:	1d1a      	adds	r2, r3, #4
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	6032      	str	r2, [r6, #0]
 80070d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80070d4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80070d8:	2301      	movs	r3, #1
 80070da:	e09c      	b.n	8007216 <_printf_i+0x1e6>
 80070dc:	6833      	ldr	r3, [r6, #0]
 80070de:	6820      	ldr	r0, [r4, #0]
 80070e0:	1d19      	adds	r1, r3, #4
 80070e2:	6031      	str	r1, [r6, #0]
 80070e4:	0606      	lsls	r6, r0, #24
 80070e6:	d501      	bpl.n	80070ec <_printf_i+0xbc>
 80070e8:	681d      	ldr	r5, [r3, #0]
 80070ea:	e003      	b.n	80070f4 <_printf_i+0xc4>
 80070ec:	0645      	lsls	r5, r0, #25
 80070ee:	d5fb      	bpl.n	80070e8 <_printf_i+0xb8>
 80070f0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80070f4:	2d00      	cmp	r5, #0
 80070f6:	da03      	bge.n	8007100 <_printf_i+0xd0>
 80070f8:	232d      	movs	r3, #45	@ 0x2d
 80070fa:	426d      	negs	r5, r5
 80070fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007100:	4858      	ldr	r0, [pc, #352]	@ (8007264 <_printf_i+0x234>)
 8007102:	230a      	movs	r3, #10
 8007104:	e011      	b.n	800712a <_printf_i+0xfa>
 8007106:	6821      	ldr	r1, [r4, #0]
 8007108:	6833      	ldr	r3, [r6, #0]
 800710a:	0608      	lsls	r0, r1, #24
 800710c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007110:	d402      	bmi.n	8007118 <_printf_i+0xe8>
 8007112:	0649      	lsls	r1, r1, #25
 8007114:	bf48      	it	mi
 8007116:	b2ad      	uxthmi	r5, r5
 8007118:	2f6f      	cmp	r7, #111	@ 0x6f
 800711a:	4852      	ldr	r0, [pc, #328]	@ (8007264 <_printf_i+0x234>)
 800711c:	6033      	str	r3, [r6, #0]
 800711e:	bf14      	ite	ne
 8007120:	230a      	movne	r3, #10
 8007122:	2308      	moveq	r3, #8
 8007124:	2100      	movs	r1, #0
 8007126:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800712a:	6866      	ldr	r6, [r4, #4]
 800712c:	60a6      	str	r6, [r4, #8]
 800712e:	2e00      	cmp	r6, #0
 8007130:	db05      	blt.n	800713e <_printf_i+0x10e>
 8007132:	6821      	ldr	r1, [r4, #0]
 8007134:	432e      	orrs	r6, r5
 8007136:	f021 0104 	bic.w	r1, r1, #4
 800713a:	6021      	str	r1, [r4, #0]
 800713c:	d04b      	beq.n	80071d6 <_printf_i+0x1a6>
 800713e:	4616      	mov	r6, r2
 8007140:	fbb5 f1f3 	udiv	r1, r5, r3
 8007144:	fb03 5711 	mls	r7, r3, r1, r5
 8007148:	5dc7      	ldrb	r7, [r0, r7]
 800714a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800714e:	462f      	mov	r7, r5
 8007150:	42bb      	cmp	r3, r7
 8007152:	460d      	mov	r5, r1
 8007154:	d9f4      	bls.n	8007140 <_printf_i+0x110>
 8007156:	2b08      	cmp	r3, #8
 8007158:	d10b      	bne.n	8007172 <_printf_i+0x142>
 800715a:	6823      	ldr	r3, [r4, #0]
 800715c:	07df      	lsls	r7, r3, #31
 800715e:	d508      	bpl.n	8007172 <_printf_i+0x142>
 8007160:	6923      	ldr	r3, [r4, #16]
 8007162:	6861      	ldr	r1, [r4, #4]
 8007164:	4299      	cmp	r1, r3
 8007166:	bfde      	ittt	le
 8007168:	2330      	movle	r3, #48	@ 0x30
 800716a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800716e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007172:	1b92      	subs	r2, r2, r6
 8007174:	6122      	str	r2, [r4, #16]
 8007176:	f8cd a000 	str.w	sl, [sp]
 800717a:	464b      	mov	r3, r9
 800717c:	aa03      	add	r2, sp, #12
 800717e:	4621      	mov	r1, r4
 8007180:	4640      	mov	r0, r8
 8007182:	f7ff fee7 	bl	8006f54 <_printf_common>
 8007186:	3001      	adds	r0, #1
 8007188:	d14a      	bne.n	8007220 <_printf_i+0x1f0>
 800718a:	f04f 30ff 	mov.w	r0, #4294967295
 800718e:	b004      	add	sp, #16
 8007190:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007194:	6823      	ldr	r3, [r4, #0]
 8007196:	f043 0320 	orr.w	r3, r3, #32
 800719a:	6023      	str	r3, [r4, #0]
 800719c:	4832      	ldr	r0, [pc, #200]	@ (8007268 <_printf_i+0x238>)
 800719e:	2778      	movs	r7, #120	@ 0x78
 80071a0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80071a4:	6823      	ldr	r3, [r4, #0]
 80071a6:	6831      	ldr	r1, [r6, #0]
 80071a8:	061f      	lsls	r7, r3, #24
 80071aa:	f851 5b04 	ldr.w	r5, [r1], #4
 80071ae:	d402      	bmi.n	80071b6 <_printf_i+0x186>
 80071b0:	065f      	lsls	r7, r3, #25
 80071b2:	bf48      	it	mi
 80071b4:	b2ad      	uxthmi	r5, r5
 80071b6:	6031      	str	r1, [r6, #0]
 80071b8:	07d9      	lsls	r1, r3, #31
 80071ba:	bf44      	itt	mi
 80071bc:	f043 0320 	orrmi.w	r3, r3, #32
 80071c0:	6023      	strmi	r3, [r4, #0]
 80071c2:	b11d      	cbz	r5, 80071cc <_printf_i+0x19c>
 80071c4:	2310      	movs	r3, #16
 80071c6:	e7ad      	b.n	8007124 <_printf_i+0xf4>
 80071c8:	4826      	ldr	r0, [pc, #152]	@ (8007264 <_printf_i+0x234>)
 80071ca:	e7e9      	b.n	80071a0 <_printf_i+0x170>
 80071cc:	6823      	ldr	r3, [r4, #0]
 80071ce:	f023 0320 	bic.w	r3, r3, #32
 80071d2:	6023      	str	r3, [r4, #0]
 80071d4:	e7f6      	b.n	80071c4 <_printf_i+0x194>
 80071d6:	4616      	mov	r6, r2
 80071d8:	e7bd      	b.n	8007156 <_printf_i+0x126>
 80071da:	6833      	ldr	r3, [r6, #0]
 80071dc:	6825      	ldr	r5, [r4, #0]
 80071de:	6961      	ldr	r1, [r4, #20]
 80071e0:	1d18      	adds	r0, r3, #4
 80071e2:	6030      	str	r0, [r6, #0]
 80071e4:	062e      	lsls	r6, r5, #24
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	d501      	bpl.n	80071ee <_printf_i+0x1be>
 80071ea:	6019      	str	r1, [r3, #0]
 80071ec:	e002      	b.n	80071f4 <_printf_i+0x1c4>
 80071ee:	0668      	lsls	r0, r5, #25
 80071f0:	d5fb      	bpl.n	80071ea <_printf_i+0x1ba>
 80071f2:	8019      	strh	r1, [r3, #0]
 80071f4:	2300      	movs	r3, #0
 80071f6:	6123      	str	r3, [r4, #16]
 80071f8:	4616      	mov	r6, r2
 80071fa:	e7bc      	b.n	8007176 <_printf_i+0x146>
 80071fc:	6833      	ldr	r3, [r6, #0]
 80071fe:	1d1a      	adds	r2, r3, #4
 8007200:	6032      	str	r2, [r6, #0]
 8007202:	681e      	ldr	r6, [r3, #0]
 8007204:	6862      	ldr	r2, [r4, #4]
 8007206:	2100      	movs	r1, #0
 8007208:	4630      	mov	r0, r6
 800720a:	f7f9 f869 	bl	80002e0 <memchr>
 800720e:	b108      	cbz	r0, 8007214 <_printf_i+0x1e4>
 8007210:	1b80      	subs	r0, r0, r6
 8007212:	6060      	str	r0, [r4, #4]
 8007214:	6863      	ldr	r3, [r4, #4]
 8007216:	6123      	str	r3, [r4, #16]
 8007218:	2300      	movs	r3, #0
 800721a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800721e:	e7aa      	b.n	8007176 <_printf_i+0x146>
 8007220:	6923      	ldr	r3, [r4, #16]
 8007222:	4632      	mov	r2, r6
 8007224:	4649      	mov	r1, r9
 8007226:	4640      	mov	r0, r8
 8007228:	47d0      	blx	sl
 800722a:	3001      	adds	r0, #1
 800722c:	d0ad      	beq.n	800718a <_printf_i+0x15a>
 800722e:	6823      	ldr	r3, [r4, #0]
 8007230:	079b      	lsls	r3, r3, #30
 8007232:	d413      	bmi.n	800725c <_printf_i+0x22c>
 8007234:	68e0      	ldr	r0, [r4, #12]
 8007236:	9b03      	ldr	r3, [sp, #12]
 8007238:	4298      	cmp	r0, r3
 800723a:	bfb8      	it	lt
 800723c:	4618      	movlt	r0, r3
 800723e:	e7a6      	b.n	800718e <_printf_i+0x15e>
 8007240:	2301      	movs	r3, #1
 8007242:	4632      	mov	r2, r6
 8007244:	4649      	mov	r1, r9
 8007246:	4640      	mov	r0, r8
 8007248:	47d0      	blx	sl
 800724a:	3001      	adds	r0, #1
 800724c:	d09d      	beq.n	800718a <_printf_i+0x15a>
 800724e:	3501      	adds	r5, #1
 8007250:	68e3      	ldr	r3, [r4, #12]
 8007252:	9903      	ldr	r1, [sp, #12]
 8007254:	1a5b      	subs	r3, r3, r1
 8007256:	42ab      	cmp	r3, r5
 8007258:	dcf2      	bgt.n	8007240 <_printf_i+0x210>
 800725a:	e7eb      	b.n	8007234 <_printf_i+0x204>
 800725c:	2500      	movs	r5, #0
 800725e:	f104 0619 	add.w	r6, r4, #25
 8007262:	e7f5      	b.n	8007250 <_printf_i+0x220>
 8007264:	08009436 	.word	0x08009436
 8007268:	08009447 	.word	0x08009447

0800726c <std>:
 800726c:	2300      	movs	r3, #0
 800726e:	b510      	push	{r4, lr}
 8007270:	4604      	mov	r4, r0
 8007272:	e9c0 3300 	strd	r3, r3, [r0]
 8007276:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800727a:	6083      	str	r3, [r0, #8]
 800727c:	8181      	strh	r1, [r0, #12]
 800727e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007280:	81c2      	strh	r2, [r0, #14]
 8007282:	6183      	str	r3, [r0, #24]
 8007284:	4619      	mov	r1, r3
 8007286:	2208      	movs	r2, #8
 8007288:	305c      	adds	r0, #92	@ 0x5c
 800728a:	f000 f9f9 	bl	8007680 <memset>
 800728e:	4b0d      	ldr	r3, [pc, #52]	@ (80072c4 <std+0x58>)
 8007290:	6263      	str	r3, [r4, #36]	@ 0x24
 8007292:	4b0d      	ldr	r3, [pc, #52]	@ (80072c8 <std+0x5c>)
 8007294:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007296:	4b0d      	ldr	r3, [pc, #52]	@ (80072cc <std+0x60>)
 8007298:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800729a:	4b0d      	ldr	r3, [pc, #52]	@ (80072d0 <std+0x64>)
 800729c:	6323      	str	r3, [r4, #48]	@ 0x30
 800729e:	4b0d      	ldr	r3, [pc, #52]	@ (80072d4 <std+0x68>)
 80072a0:	6224      	str	r4, [r4, #32]
 80072a2:	429c      	cmp	r4, r3
 80072a4:	d006      	beq.n	80072b4 <std+0x48>
 80072a6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80072aa:	4294      	cmp	r4, r2
 80072ac:	d002      	beq.n	80072b4 <std+0x48>
 80072ae:	33d0      	adds	r3, #208	@ 0xd0
 80072b0:	429c      	cmp	r4, r3
 80072b2:	d105      	bne.n	80072c0 <std+0x54>
 80072b4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80072b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072bc:	f000 ba5c 	b.w	8007778 <__retarget_lock_init_recursive>
 80072c0:	bd10      	pop	{r4, pc}
 80072c2:	bf00      	nop
 80072c4:	080074d1 	.word	0x080074d1
 80072c8:	080074f3 	.word	0x080074f3
 80072cc:	0800752b 	.word	0x0800752b
 80072d0:	0800754f 	.word	0x0800754f
 80072d4:	2400043c 	.word	0x2400043c

080072d8 <stdio_exit_handler>:
 80072d8:	4a02      	ldr	r2, [pc, #8]	@ (80072e4 <stdio_exit_handler+0xc>)
 80072da:	4903      	ldr	r1, [pc, #12]	@ (80072e8 <stdio_exit_handler+0x10>)
 80072dc:	4803      	ldr	r0, [pc, #12]	@ (80072ec <stdio_exit_handler+0x14>)
 80072de:	f000 b869 	b.w	80073b4 <_fwalk_sglue>
 80072e2:	bf00      	nop
 80072e4:	24000030 	.word	0x24000030
 80072e8:	08008fcd 	.word	0x08008fcd
 80072ec:	24000040 	.word	0x24000040

080072f0 <cleanup_stdio>:
 80072f0:	6841      	ldr	r1, [r0, #4]
 80072f2:	4b0c      	ldr	r3, [pc, #48]	@ (8007324 <cleanup_stdio+0x34>)
 80072f4:	4299      	cmp	r1, r3
 80072f6:	b510      	push	{r4, lr}
 80072f8:	4604      	mov	r4, r0
 80072fa:	d001      	beq.n	8007300 <cleanup_stdio+0x10>
 80072fc:	f001 fe66 	bl	8008fcc <_fflush_r>
 8007300:	68a1      	ldr	r1, [r4, #8]
 8007302:	4b09      	ldr	r3, [pc, #36]	@ (8007328 <cleanup_stdio+0x38>)
 8007304:	4299      	cmp	r1, r3
 8007306:	d002      	beq.n	800730e <cleanup_stdio+0x1e>
 8007308:	4620      	mov	r0, r4
 800730a:	f001 fe5f 	bl	8008fcc <_fflush_r>
 800730e:	68e1      	ldr	r1, [r4, #12]
 8007310:	4b06      	ldr	r3, [pc, #24]	@ (800732c <cleanup_stdio+0x3c>)
 8007312:	4299      	cmp	r1, r3
 8007314:	d004      	beq.n	8007320 <cleanup_stdio+0x30>
 8007316:	4620      	mov	r0, r4
 8007318:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800731c:	f001 be56 	b.w	8008fcc <_fflush_r>
 8007320:	bd10      	pop	{r4, pc}
 8007322:	bf00      	nop
 8007324:	2400043c 	.word	0x2400043c
 8007328:	240004a4 	.word	0x240004a4
 800732c:	2400050c 	.word	0x2400050c

08007330 <global_stdio_init.part.0>:
 8007330:	b510      	push	{r4, lr}
 8007332:	4b0b      	ldr	r3, [pc, #44]	@ (8007360 <global_stdio_init.part.0+0x30>)
 8007334:	4c0b      	ldr	r4, [pc, #44]	@ (8007364 <global_stdio_init.part.0+0x34>)
 8007336:	4a0c      	ldr	r2, [pc, #48]	@ (8007368 <global_stdio_init.part.0+0x38>)
 8007338:	601a      	str	r2, [r3, #0]
 800733a:	4620      	mov	r0, r4
 800733c:	2200      	movs	r2, #0
 800733e:	2104      	movs	r1, #4
 8007340:	f7ff ff94 	bl	800726c <std>
 8007344:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007348:	2201      	movs	r2, #1
 800734a:	2109      	movs	r1, #9
 800734c:	f7ff ff8e 	bl	800726c <std>
 8007350:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007354:	2202      	movs	r2, #2
 8007356:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800735a:	2112      	movs	r1, #18
 800735c:	f7ff bf86 	b.w	800726c <std>
 8007360:	24000574 	.word	0x24000574
 8007364:	2400043c 	.word	0x2400043c
 8007368:	080072d9 	.word	0x080072d9

0800736c <__sfp_lock_acquire>:
 800736c:	4801      	ldr	r0, [pc, #4]	@ (8007374 <__sfp_lock_acquire+0x8>)
 800736e:	f000 ba04 	b.w	800777a <__retarget_lock_acquire_recursive>
 8007372:	bf00      	nop
 8007374:	2400057d 	.word	0x2400057d

08007378 <__sfp_lock_release>:
 8007378:	4801      	ldr	r0, [pc, #4]	@ (8007380 <__sfp_lock_release+0x8>)
 800737a:	f000 b9ff 	b.w	800777c <__retarget_lock_release_recursive>
 800737e:	bf00      	nop
 8007380:	2400057d 	.word	0x2400057d

08007384 <__sinit>:
 8007384:	b510      	push	{r4, lr}
 8007386:	4604      	mov	r4, r0
 8007388:	f7ff fff0 	bl	800736c <__sfp_lock_acquire>
 800738c:	6a23      	ldr	r3, [r4, #32]
 800738e:	b11b      	cbz	r3, 8007398 <__sinit+0x14>
 8007390:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007394:	f7ff bff0 	b.w	8007378 <__sfp_lock_release>
 8007398:	4b04      	ldr	r3, [pc, #16]	@ (80073ac <__sinit+0x28>)
 800739a:	6223      	str	r3, [r4, #32]
 800739c:	4b04      	ldr	r3, [pc, #16]	@ (80073b0 <__sinit+0x2c>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d1f5      	bne.n	8007390 <__sinit+0xc>
 80073a4:	f7ff ffc4 	bl	8007330 <global_stdio_init.part.0>
 80073a8:	e7f2      	b.n	8007390 <__sinit+0xc>
 80073aa:	bf00      	nop
 80073ac:	080072f1 	.word	0x080072f1
 80073b0:	24000574 	.word	0x24000574

080073b4 <_fwalk_sglue>:
 80073b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073b8:	4607      	mov	r7, r0
 80073ba:	4688      	mov	r8, r1
 80073bc:	4614      	mov	r4, r2
 80073be:	2600      	movs	r6, #0
 80073c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80073c4:	f1b9 0901 	subs.w	r9, r9, #1
 80073c8:	d505      	bpl.n	80073d6 <_fwalk_sglue+0x22>
 80073ca:	6824      	ldr	r4, [r4, #0]
 80073cc:	2c00      	cmp	r4, #0
 80073ce:	d1f7      	bne.n	80073c0 <_fwalk_sglue+0xc>
 80073d0:	4630      	mov	r0, r6
 80073d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073d6:	89ab      	ldrh	r3, [r5, #12]
 80073d8:	2b01      	cmp	r3, #1
 80073da:	d907      	bls.n	80073ec <_fwalk_sglue+0x38>
 80073dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80073e0:	3301      	adds	r3, #1
 80073e2:	d003      	beq.n	80073ec <_fwalk_sglue+0x38>
 80073e4:	4629      	mov	r1, r5
 80073e6:	4638      	mov	r0, r7
 80073e8:	47c0      	blx	r8
 80073ea:	4306      	orrs	r6, r0
 80073ec:	3568      	adds	r5, #104	@ 0x68
 80073ee:	e7e9      	b.n	80073c4 <_fwalk_sglue+0x10>

080073f0 <iprintf>:
 80073f0:	b40f      	push	{r0, r1, r2, r3}
 80073f2:	b507      	push	{r0, r1, r2, lr}
 80073f4:	4906      	ldr	r1, [pc, #24]	@ (8007410 <iprintf+0x20>)
 80073f6:	ab04      	add	r3, sp, #16
 80073f8:	6808      	ldr	r0, [r1, #0]
 80073fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80073fe:	6881      	ldr	r1, [r0, #8]
 8007400:	9301      	str	r3, [sp, #4]
 8007402:	f001 fc47 	bl	8008c94 <_vfiprintf_r>
 8007406:	b003      	add	sp, #12
 8007408:	f85d eb04 	ldr.w	lr, [sp], #4
 800740c:	b004      	add	sp, #16
 800740e:	4770      	bx	lr
 8007410:	2400003c 	.word	0x2400003c

08007414 <_puts_r>:
 8007414:	6a03      	ldr	r3, [r0, #32]
 8007416:	b570      	push	{r4, r5, r6, lr}
 8007418:	6884      	ldr	r4, [r0, #8]
 800741a:	4605      	mov	r5, r0
 800741c:	460e      	mov	r6, r1
 800741e:	b90b      	cbnz	r3, 8007424 <_puts_r+0x10>
 8007420:	f7ff ffb0 	bl	8007384 <__sinit>
 8007424:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007426:	07db      	lsls	r3, r3, #31
 8007428:	d405      	bmi.n	8007436 <_puts_r+0x22>
 800742a:	89a3      	ldrh	r3, [r4, #12]
 800742c:	0598      	lsls	r0, r3, #22
 800742e:	d402      	bmi.n	8007436 <_puts_r+0x22>
 8007430:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007432:	f000 f9a2 	bl	800777a <__retarget_lock_acquire_recursive>
 8007436:	89a3      	ldrh	r3, [r4, #12]
 8007438:	0719      	lsls	r1, r3, #28
 800743a:	d502      	bpl.n	8007442 <_puts_r+0x2e>
 800743c:	6923      	ldr	r3, [r4, #16]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d135      	bne.n	80074ae <_puts_r+0x9a>
 8007442:	4621      	mov	r1, r4
 8007444:	4628      	mov	r0, r5
 8007446:	f000 f8c5 	bl	80075d4 <__swsetup_r>
 800744a:	b380      	cbz	r0, 80074ae <_puts_r+0x9a>
 800744c:	f04f 35ff 	mov.w	r5, #4294967295
 8007450:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007452:	07da      	lsls	r2, r3, #31
 8007454:	d405      	bmi.n	8007462 <_puts_r+0x4e>
 8007456:	89a3      	ldrh	r3, [r4, #12]
 8007458:	059b      	lsls	r3, r3, #22
 800745a:	d402      	bmi.n	8007462 <_puts_r+0x4e>
 800745c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800745e:	f000 f98d 	bl	800777c <__retarget_lock_release_recursive>
 8007462:	4628      	mov	r0, r5
 8007464:	bd70      	pop	{r4, r5, r6, pc}
 8007466:	2b00      	cmp	r3, #0
 8007468:	da04      	bge.n	8007474 <_puts_r+0x60>
 800746a:	69a2      	ldr	r2, [r4, #24]
 800746c:	429a      	cmp	r2, r3
 800746e:	dc17      	bgt.n	80074a0 <_puts_r+0x8c>
 8007470:	290a      	cmp	r1, #10
 8007472:	d015      	beq.n	80074a0 <_puts_r+0x8c>
 8007474:	6823      	ldr	r3, [r4, #0]
 8007476:	1c5a      	adds	r2, r3, #1
 8007478:	6022      	str	r2, [r4, #0]
 800747a:	7019      	strb	r1, [r3, #0]
 800747c:	68a3      	ldr	r3, [r4, #8]
 800747e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007482:	3b01      	subs	r3, #1
 8007484:	60a3      	str	r3, [r4, #8]
 8007486:	2900      	cmp	r1, #0
 8007488:	d1ed      	bne.n	8007466 <_puts_r+0x52>
 800748a:	2b00      	cmp	r3, #0
 800748c:	da11      	bge.n	80074b2 <_puts_r+0x9e>
 800748e:	4622      	mov	r2, r4
 8007490:	210a      	movs	r1, #10
 8007492:	4628      	mov	r0, r5
 8007494:	f000 f85f 	bl	8007556 <__swbuf_r>
 8007498:	3001      	adds	r0, #1
 800749a:	d0d7      	beq.n	800744c <_puts_r+0x38>
 800749c:	250a      	movs	r5, #10
 800749e:	e7d7      	b.n	8007450 <_puts_r+0x3c>
 80074a0:	4622      	mov	r2, r4
 80074a2:	4628      	mov	r0, r5
 80074a4:	f000 f857 	bl	8007556 <__swbuf_r>
 80074a8:	3001      	adds	r0, #1
 80074aa:	d1e7      	bne.n	800747c <_puts_r+0x68>
 80074ac:	e7ce      	b.n	800744c <_puts_r+0x38>
 80074ae:	3e01      	subs	r6, #1
 80074b0:	e7e4      	b.n	800747c <_puts_r+0x68>
 80074b2:	6823      	ldr	r3, [r4, #0]
 80074b4:	1c5a      	adds	r2, r3, #1
 80074b6:	6022      	str	r2, [r4, #0]
 80074b8:	220a      	movs	r2, #10
 80074ba:	701a      	strb	r2, [r3, #0]
 80074bc:	e7ee      	b.n	800749c <_puts_r+0x88>
	...

080074c0 <puts>:
 80074c0:	4b02      	ldr	r3, [pc, #8]	@ (80074cc <puts+0xc>)
 80074c2:	4601      	mov	r1, r0
 80074c4:	6818      	ldr	r0, [r3, #0]
 80074c6:	f7ff bfa5 	b.w	8007414 <_puts_r>
 80074ca:	bf00      	nop
 80074cc:	2400003c 	.word	0x2400003c

080074d0 <__sread>:
 80074d0:	b510      	push	{r4, lr}
 80074d2:	460c      	mov	r4, r1
 80074d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074d8:	f000 f900 	bl	80076dc <_read_r>
 80074dc:	2800      	cmp	r0, #0
 80074de:	bfab      	itete	ge
 80074e0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80074e2:	89a3      	ldrhlt	r3, [r4, #12]
 80074e4:	181b      	addge	r3, r3, r0
 80074e6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80074ea:	bfac      	ite	ge
 80074ec:	6563      	strge	r3, [r4, #84]	@ 0x54
 80074ee:	81a3      	strhlt	r3, [r4, #12]
 80074f0:	bd10      	pop	{r4, pc}

080074f2 <__swrite>:
 80074f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074f6:	461f      	mov	r7, r3
 80074f8:	898b      	ldrh	r3, [r1, #12]
 80074fa:	05db      	lsls	r3, r3, #23
 80074fc:	4605      	mov	r5, r0
 80074fe:	460c      	mov	r4, r1
 8007500:	4616      	mov	r6, r2
 8007502:	d505      	bpl.n	8007510 <__swrite+0x1e>
 8007504:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007508:	2302      	movs	r3, #2
 800750a:	2200      	movs	r2, #0
 800750c:	f000 f8d4 	bl	80076b8 <_lseek_r>
 8007510:	89a3      	ldrh	r3, [r4, #12]
 8007512:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007516:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800751a:	81a3      	strh	r3, [r4, #12]
 800751c:	4632      	mov	r2, r6
 800751e:	463b      	mov	r3, r7
 8007520:	4628      	mov	r0, r5
 8007522:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007526:	f000 b8eb 	b.w	8007700 <_write_r>

0800752a <__sseek>:
 800752a:	b510      	push	{r4, lr}
 800752c:	460c      	mov	r4, r1
 800752e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007532:	f000 f8c1 	bl	80076b8 <_lseek_r>
 8007536:	1c43      	adds	r3, r0, #1
 8007538:	89a3      	ldrh	r3, [r4, #12]
 800753a:	bf15      	itete	ne
 800753c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800753e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007542:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007546:	81a3      	strheq	r3, [r4, #12]
 8007548:	bf18      	it	ne
 800754a:	81a3      	strhne	r3, [r4, #12]
 800754c:	bd10      	pop	{r4, pc}

0800754e <__sclose>:
 800754e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007552:	f000 b8a1 	b.w	8007698 <_close_r>

08007556 <__swbuf_r>:
 8007556:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007558:	460e      	mov	r6, r1
 800755a:	4614      	mov	r4, r2
 800755c:	4605      	mov	r5, r0
 800755e:	b118      	cbz	r0, 8007568 <__swbuf_r+0x12>
 8007560:	6a03      	ldr	r3, [r0, #32]
 8007562:	b90b      	cbnz	r3, 8007568 <__swbuf_r+0x12>
 8007564:	f7ff ff0e 	bl	8007384 <__sinit>
 8007568:	69a3      	ldr	r3, [r4, #24]
 800756a:	60a3      	str	r3, [r4, #8]
 800756c:	89a3      	ldrh	r3, [r4, #12]
 800756e:	071a      	lsls	r2, r3, #28
 8007570:	d501      	bpl.n	8007576 <__swbuf_r+0x20>
 8007572:	6923      	ldr	r3, [r4, #16]
 8007574:	b943      	cbnz	r3, 8007588 <__swbuf_r+0x32>
 8007576:	4621      	mov	r1, r4
 8007578:	4628      	mov	r0, r5
 800757a:	f000 f82b 	bl	80075d4 <__swsetup_r>
 800757e:	b118      	cbz	r0, 8007588 <__swbuf_r+0x32>
 8007580:	f04f 37ff 	mov.w	r7, #4294967295
 8007584:	4638      	mov	r0, r7
 8007586:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007588:	6823      	ldr	r3, [r4, #0]
 800758a:	6922      	ldr	r2, [r4, #16]
 800758c:	1a98      	subs	r0, r3, r2
 800758e:	6963      	ldr	r3, [r4, #20]
 8007590:	b2f6      	uxtb	r6, r6
 8007592:	4283      	cmp	r3, r0
 8007594:	4637      	mov	r7, r6
 8007596:	dc05      	bgt.n	80075a4 <__swbuf_r+0x4e>
 8007598:	4621      	mov	r1, r4
 800759a:	4628      	mov	r0, r5
 800759c:	f001 fd16 	bl	8008fcc <_fflush_r>
 80075a0:	2800      	cmp	r0, #0
 80075a2:	d1ed      	bne.n	8007580 <__swbuf_r+0x2a>
 80075a4:	68a3      	ldr	r3, [r4, #8]
 80075a6:	3b01      	subs	r3, #1
 80075a8:	60a3      	str	r3, [r4, #8]
 80075aa:	6823      	ldr	r3, [r4, #0]
 80075ac:	1c5a      	adds	r2, r3, #1
 80075ae:	6022      	str	r2, [r4, #0]
 80075b0:	701e      	strb	r6, [r3, #0]
 80075b2:	6962      	ldr	r2, [r4, #20]
 80075b4:	1c43      	adds	r3, r0, #1
 80075b6:	429a      	cmp	r2, r3
 80075b8:	d004      	beq.n	80075c4 <__swbuf_r+0x6e>
 80075ba:	89a3      	ldrh	r3, [r4, #12]
 80075bc:	07db      	lsls	r3, r3, #31
 80075be:	d5e1      	bpl.n	8007584 <__swbuf_r+0x2e>
 80075c0:	2e0a      	cmp	r6, #10
 80075c2:	d1df      	bne.n	8007584 <__swbuf_r+0x2e>
 80075c4:	4621      	mov	r1, r4
 80075c6:	4628      	mov	r0, r5
 80075c8:	f001 fd00 	bl	8008fcc <_fflush_r>
 80075cc:	2800      	cmp	r0, #0
 80075ce:	d0d9      	beq.n	8007584 <__swbuf_r+0x2e>
 80075d0:	e7d6      	b.n	8007580 <__swbuf_r+0x2a>
	...

080075d4 <__swsetup_r>:
 80075d4:	b538      	push	{r3, r4, r5, lr}
 80075d6:	4b29      	ldr	r3, [pc, #164]	@ (800767c <__swsetup_r+0xa8>)
 80075d8:	4605      	mov	r5, r0
 80075da:	6818      	ldr	r0, [r3, #0]
 80075dc:	460c      	mov	r4, r1
 80075de:	b118      	cbz	r0, 80075e8 <__swsetup_r+0x14>
 80075e0:	6a03      	ldr	r3, [r0, #32]
 80075e2:	b90b      	cbnz	r3, 80075e8 <__swsetup_r+0x14>
 80075e4:	f7ff fece 	bl	8007384 <__sinit>
 80075e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075ec:	0719      	lsls	r1, r3, #28
 80075ee:	d422      	bmi.n	8007636 <__swsetup_r+0x62>
 80075f0:	06da      	lsls	r2, r3, #27
 80075f2:	d407      	bmi.n	8007604 <__swsetup_r+0x30>
 80075f4:	2209      	movs	r2, #9
 80075f6:	602a      	str	r2, [r5, #0]
 80075f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80075fc:	81a3      	strh	r3, [r4, #12]
 80075fe:	f04f 30ff 	mov.w	r0, #4294967295
 8007602:	e033      	b.n	800766c <__swsetup_r+0x98>
 8007604:	0758      	lsls	r0, r3, #29
 8007606:	d512      	bpl.n	800762e <__swsetup_r+0x5a>
 8007608:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800760a:	b141      	cbz	r1, 800761e <__swsetup_r+0x4a>
 800760c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007610:	4299      	cmp	r1, r3
 8007612:	d002      	beq.n	800761a <__swsetup_r+0x46>
 8007614:	4628      	mov	r0, r5
 8007616:	f000 fe99 	bl	800834c <_free_r>
 800761a:	2300      	movs	r3, #0
 800761c:	6363      	str	r3, [r4, #52]	@ 0x34
 800761e:	89a3      	ldrh	r3, [r4, #12]
 8007620:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007624:	81a3      	strh	r3, [r4, #12]
 8007626:	2300      	movs	r3, #0
 8007628:	6063      	str	r3, [r4, #4]
 800762a:	6923      	ldr	r3, [r4, #16]
 800762c:	6023      	str	r3, [r4, #0]
 800762e:	89a3      	ldrh	r3, [r4, #12]
 8007630:	f043 0308 	orr.w	r3, r3, #8
 8007634:	81a3      	strh	r3, [r4, #12]
 8007636:	6923      	ldr	r3, [r4, #16]
 8007638:	b94b      	cbnz	r3, 800764e <__swsetup_r+0x7a>
 800763a:	89a3      	ldrh	r3, [r4, #12]
 800763c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007640:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007644:	d003      	beq.n	800764e <__swsetup_r+0x7a>
 8007646:	4621      	mov	r1, r4
 8007648:	4628      	mov	r0, r5
 800764a:	f001 fd0d 	bl	8009068 <__smakebuf_r>
 800764e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007652:	f013 0201 	ands.w	r2, r3, #1
 8007656:	d00a      	beq.n	800766e <__swsetup_r+0x9a>
 8007658:	2200      	movs	r2, #0
 800765a:	60a2      	str	r2, [r4, #8]
 800765c:	6962      	ldr	r2, [r4, #20]
 800765e:	4252      	negs	r2, r2
 8007660:	61a2      	str	r2, [r4, #24]
 8007662:	6922      	ldr	r2, [r4, #16]
 8007664:	b942      	cbnz	r2, 8007678 <__swsetup_r+0xa4>
 8007666:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800766a:	d1c5      	bne.n	80075f8 <__swsetup_r+0x24>
 800766c:	bd38      	pop	{r3, r4, r5, pc}
 800766e:	0799      	lsls	r1, r3, #30
 8007670:	bf58      	it	pl
 8007672:	6962      	ldrpl	r2, [r4, #20]
 8007674:	60a2      	str	r2, [r4, #8]
 8007676:	e7f4      	b.n	8007662 <__swsetup_r+0x8e>
 8007678:	2000      	movs	r0, #0
 800767a:	e7f7      	b.n	800766c <__swsetup_r+0x98>
 800767c:	2400003c 	.word	0x2400003c

08007680 <memset>:
 8007680:	4402      	add	r2, r0
 8007682:	4603      	mov	r3, r0
 8007684:	4293      	cmp	r3, r2
 8007686:	d100      	bne.n	800768a <memset+0xa>
 8007688:	4770      	bx	lr
 800768a:	f803 1b01 	strb.w	r1, [r3], #1
 800768e:	e7f9      	b.n	8007684 <memset+0x4>

08007690 <_localeconv_r>:
 8007690:	4800      	ldr	r0, [pc, #0]	@ (8007694 <_localeconv_r+0x4>)
 8007692:	4770      	bx	lr
 8007694:	2400017c 	.word	0x2400017c

08007698 <_close_r>:
 8007698:	b538      	push	{r3, r4, r5, lr}
 800769a:	4d06      	ldr	r5, [pc, #24]	@ (80076b4 <_close_r+0x1c>)
 800769c:	2300      	movs	r3, #0
 800769e:	4604      	mov	r4, r0
 80076a0:	4608      	mov	r0, r1
 80076a2:	602b      	str	r3, [r5, #0]
 80076a4:	f7f9 ff36 	bl	8001514 <_close>
 80076a8:	1c43      	adds	r3, r0, #1
 80076aa:	d102      	bne.n	80076b2 <_close_r+0x1a>
 80076ac:	682b      	ldr	r3, [r5, #0]
 80076ae:	b103      	cbz	r3, 80076b2 <_close_r+0x1a>
 80076b0:	6023      	str	r3, [r4, #0]
 80076b2:	bd38      	pop	{r3, r4, r5, pc}
 80076b4:	24000578 	.word	0x24000578

080076b8 <_lseek_r>:
 80076b8:	b538      	push	{r3, r4, r5, lr}
 80076ba:	4d07      	ldr	r5, [pc, #28]	@ (80076d8 <_lseek_r+0x20>)
 80076bc:	4604      	mov	r4, r0
 80076be:	4608      	mov	r0, r1
 80076c0:	4611      	mov	r1, r2
 80076c2:	2200      	movs	r2, #0
 80076c4:	602a      	str	r2, [r5, #0]
 80076c6:	461a      	mov	r2, r3
 80076c8:	f7f9 ff4b 	bl	8001562 <_lseek>
 80076cc:	1c43      	adds	r3, r0, #1
 80076ce:	d102      	bne.n	80076d6 <_lseek_r+0x1e>
 80076d0:	682b      	ldr	r3, [r5, #0]
 80076d2:	b103      	cbz	r3, 80076d6 <_lseek_r+0x1e>
 80076d4:	6023      	str	r3, [r4, #0]
 80076d6:	bd38      	pop	{r3, r4, r5, pc}
 80076d8:	24000578 	.word	0x24000578

080076dc <_read_r>:
 80076dc:	b538      	push	{r3, r4, r5, lr}
 80076de:	4d07      	ldr	r5, [pc, #28]	@ (80076fc <_read_r+0x20>)
 80076e0:	4604      	mov	r4, r0
 80076e2:	4608      	mov	r0, r1
 80076e4:	4611      	mov	r1, r2
 80076e6:	2200      	movs	r2, #0
 80076e8:	602a      	str	r2, [r5, #0]
 80076ea:	461a      	mov	r2, r3
 80076ec:	f7f9 fed9 	bl	80014a2 <_read>
 80076f0:	1c43      	adds	r3, r0, #1
 80076f2:	d102      	bne.n	80076fa <_read_r+0x1e>
 80076f4:	682b      	ldr	r3, [r5, #0]
 80076f6:	b103      	cbz	r3, 80076fa <_read_r+0x1e>
 80076f8:	6023      	str	r3, [r4, #0]
 80076fa:	bd38      	pop	{r3, r4, r5, pc}
 80076fc:	24000578 	.word	0x24000578

08007700 <_write_r>:
 8007700:	b538      	push	{r3, r4, r5, lr}
 8007702:	4d07      	ldr	r5, [pc, #28]	@ (8007720 <_write_r+0x20>)
 8007704:	4604      	mov	r4, r0
 8007706:	4608      	mov	r0, r1
 8007708:	4611      	mov	r1, r2
 800770a:	2200      	movs	r2, #0
 800770c:	602a      	str	r2, [r5, #0]
 800770e:	461a      	mov	r2, r3
 8007710:	f7f9 fee4 	bl	80014dc <_write>
 8007714:	1c43      	adds	r3, r0, #1
 8007716:	d102      	bne.n	800771e <_write_r+0x1e>
 8007718:	682b      	ldr	r3, [r5, #0]
 800771a:	b103      	cbz	r3, 800771e <_write_r+0x1e>
 800771c:	6023      	str	r3, [r4, #0]
 800771e:	bd38      	pop	{r3, r4, r5, pc}
 8007720:	24000578 	.word	0x24000578

08007724 <__errno>:
 8007724:	4b01      	ldr	r3, [pc, #4]	@ (800772c <__errno+0x8>)
 8007726:	6818      	ldr	r0, [r3, #0]
 8007728:	4770      	bx	lr
 800772a:	bf00      	nop
 800772c:	2400003c 	.word	0x2400003c

08007730 <__libc_init_array>:
 8007730:	b570      	push	{r4, r5, r6, lr}
 8007732:	4d0d      	ldr	r5, [pc, #52]	@ (8007768 <__libc_init_array+0x38>)
 8007734:	4c0d      	ldr	r4, [pc, #52]	@ (800776c <__libc_init_array+0x3c>)
 8007736:	1b64      	subs	r4, r4, r5
 8007738:	10a4      	asrs	r4, r4, #2
 800773a:	2600      	movs	r6, #0
 800773c:	42a6      	cmp	r6, r4
 800773e:	d109      	bne.n	8007754 <__libc_init_array+0x24>
 8007740:	4d0b      	ldr	r5, [pc, #44]	@ (8007770 <__libc_init_array+0x40>)
 8007742:	4c0c      	ldr	r4, [pc, #48]	@ (8007774 <__libc_init_array+0x44>)
 8007744:	f001 fdbc 	bl	80092c0 <_init>
 8007748:	1b64      	subs	r4, r4, r5
 800774a:	10a4      	asrs	r4, r4, #2
 800774c:	2600      	movs	r6, #0
 800774e:	42a6      	cmp	r6, r4
 8007750:	d105      	bne.n	800775e <__libc_init_array+0x2e>
 8007752:	bd70      	pop	{r4, r5, r6, pc}
 8007754:	f855 3b04 	ldr.w	r3, [r5], #4
 8007758:	4798      	blx	r3
 800775a:	3601      	adds	r6, #1
 800775c:	e7ee      	b.n	800773c <__libc_init_array+0xc>
 800775e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007762:	4798      	blx	r3
 8007764:	3601      	adds	r6, #1
 8007766:	e7f2      	b.n	800774e <__libc_init_array+0x1e>
 8007768:	080097a4 	.word	0x080097a4
 800776c:	080097a4 	.word	0x080097a4
 8007770:	080097a4 	.word	0x080097a4
 8007774:	080097a8 	.word	0x080097a8

08007778 <__retarget_lock_init_recursive>:
 8007778:	4770      	bx	lr

0800777a <__retarget_lock_acquire_recursive>:
 800777a:	4770      	bx	lr

0800777c <__retarget_lock_release_recursive>:
 800777c:	4770      	bx	lr

0800777e <quorem>:
 800777e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007782:	6903      	ldr	r3, [r0, #16]
 8007784:	690c      	ldr	r4, [r1, #16]
 8007786:	42a3      	cmp	r3, r4
 8007788:	4607      	mov	r7, r0
 800778a:	db7e      	blt.n	800788a <quorem+0x10c>
 800778c:	3c01      	subs	r4, #1
 800778e:	f101 0814 	add.w	r8, r1, #20
 8007792:	00a3      	lsls	r3, r4, #2
 8007794:	f100 0514 	add.w	r5, r0, #20
 8007798:	9300      	str	r3, [sp, #0]
 800779a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800779e:	9301      	str	r3, [sp, #4]
 80077a0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80077a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80077a8:	3301      	adds	r3, #1
 80077aa:	429a      	cmp	r2, r3
 80077ac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80077b0:	fbb2 f6f3 	udiv	r6, r2, r3
 80077b4:	d32e      	bcc.n	8007814 <quorem+0x96>
 80077b6:	f04f 0a00 	mov.w	sl, #0
 80077ba:	46c4      	mov	ip, r8
 80077bc:	46ae      	mov	lr, r5
 80077be:	46d3      	mov	fp, sl
 80077c0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80077c4:	b298      	uxth	r0, r3
 80077c6:	fb06 a000 	mla	r0, r6, r0, sl
 80077ca:	0c02      	lsrs	r2, r0, #16
 80077cc:	0c1b      	lsrs	r3, r3, #16
 80077ce:	fb06 2303 	mla	r3, r6, r3, r2
 80077d2:	f8de 2000 	ldr.w	r2, [lr]
 80077d6:	b280      	uxth	r0, r0
 80077d8:	b292      	uxth	r2, r2
 80077da:	1a12      	subs	r2, r2, r0
 80077dc:	445a      	add	r2, fp
 80077de:	f8de 0000 	ldr.w	r0, [lr]
 80077e2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80077e6:	b29b      	uxth	r3, r3
 80077e8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80077ec:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80077f0:	b292      	uxth	r2, r2
 80077f2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80077f6:	45e1      	cmp	r9, ip
 80077f8:	f84e 2b04 	str.w	r2, [lr], #4
 80077fc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007800:	d2de      	bcs.n	80077c0 <quorem+0x42>
 8007802:	9b00      	ldr	r3, [sp, #0]
 8007804:	58eb      	ldr	r3, [r5, r3]
 8007806:	b92b      	cbnz	r3, 8007814 <quorem+0x96>
 8007808:	9b01      	ldr	r3, [sp, #4]
 800780a:	3b04      	subs	r3, #4
 800780c:	429d      	cmp	r5, r3
 800780e:	461a      	mov	r2, r3
 8007810:	d32f      	bcc.n	8007872 <quorem+0xf4>
 8007812:	613c      	str	r4, [r7, #16]
 8007814:	4638      	mov	r0, r7
 8007816:	f001 f90b 	bl	8008a30 <__mcmp>
 800781a:	2800      	cmp	r0, #0
 800781c:	db25      	blt.n	800786a <quorem+0xec>
 800781e:	4629      	mov	r1, r5
 8007820:	2000      	movs	r0, #0
 8007822:	f858 2b04 	ldr.w	r2, [r8], #4
 8007826:	f8d1 c000 	ldr.w	ip, [r1]
 800782a:	fa1f fe82 	uxth.w	lr, r2
 800782e:	fa1f f38c 	uxth.w	r3, ip
 8007832:	eba3 030e 	sub.w	r3, r3, lr
 8007836:	4403      	add	r3, r0
 8007838:	0c12      	lsrs	r2, r2, #16
 800783a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800783e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007842:	b29b      	uxth	r3, r3
 8007844:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007848:	45c1      	cmp	r9, r8
 800784a:	f841 3b04 	str.w	r3, [r1], #4
 800784e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007852:	d2e6      	bcs.n	8007822 <quorem+0xa4>
 8007854:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007858:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800785c:	b922      	cbnz	r2, 8007868 <quorem+0xea>
 800785e:	3b04      	subs	r3, #4
 8007860:	429d      	cmp	r5, r3
 8007862:	461a      	mov	r2, r3
 8007864:	d30b      	bcc.n	800787e <quorem+0x100>
 8007866:	613c      	str	r4, [r7, #16]
 8007868:	3601      	adds	r6, #1
 800786a:	4630      	mov	r0, r6
 800786c:	b003      	add	sp, #12
 800786e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007872:	6812      	ldr	r2, [r2, #0]
 8007874:	3b04      	subs	r3, #4
 8007876:	2a00      	cmp	r2, #0
 8007878:	d1cb      	bne.n	8007812 <quorem+0x94>
 800787a:	3c01      	subs	r4, #1
 800787c:	e7c6      	b.n	800780c <quorem+0x8e>
 800787e:	6812      	ldr	r2, [r2, #0]
 8007880:	3b04      	subs	r3, #4
 8007882:	2a00      	cmp	r2, #0
 8007884:	d1ef      	bne.n	8007866 <quorem+0xe8>
 8007886:	3c01      	subs	r4, #1
 8007888:	e7ea      	b.n	8007860 <quorem+0xe2>
 800788a:	2000      	movs	r0, #0
 800788c:	e7ee      	b.n	800786c <quorem+0xee>
	...

08007890 <_dtoa_r>:
 8007890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007894:	ed2d 8b02 	vpush	{d8}
 8007898:	69c7      	ldr	r7, [r0, #28]
 800789a:	b091      	sub	sp, #68	@ 0x44
 800789c:	ed8d 0b02 	vstr	d0, [sp, #8]
 80078a0:	ec55 4b10 	vmov	r4, r5, d0
 80078a4:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 80078a6:	9107      	str	r1, [sp, #28]
 80078a8:	4681      	mov	r9, r0
 80078aa:	9209      	str	r2, [sp, #36]	@ 0x24
 80078ac:	930d      	str	r3, [sp, #52]	@ 0x34
 80078ae:	b97f      	cbnz	r7, 80078d0 <_dtoa_r+0x40>
 80078b0:	2010      	movs	r0, #16
 80078b2:	f000 fd95 	bl	80083e0 <malloc>
 80078b6:	4602      	mov	r2, r0
 80078b8:	f8c9 001c 	str.w	r0, [r9, #28]
 80078bc:	b920      	cbnz	r0, 80078c8 <_dtoa_r+0x38>
 80078be:	4ba0      	ldr	r3, [pc, #640]	@ (8007b40 <_dtoa_r+0x2b0>)
 80078c0:	21ef      	movs	r1, #239	@ 0xef
 80078c2:	48a0      	ldr	r0, [pc, #640]	@ (8007b44 <_dtoa_r+0x2b4>)
 80078c4:	f001 fc4c 	bl	8009160 <__assert_func>
 80078c8:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80078cc:	6007      	str	r7, [r0, #0]
 80078ce:	60c7      	str	r7, [r0, #12]
 80078d0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80078d4:	6819      	ldr	r1, [r3, #0]
 80078d6:	b159      	cbz	r1, 80078f0 <_dtoa_r+0x60>
 80078d8:	685a      	ldr	r2, [r3, #4]
 80078da:	604a      	str	r2, [r1, #4]
 80078dc:	2301      	movs	r3, #1
 80078de:	4093      	lsls	r3, r2
 80078e0:	608b      	str	r3, [r1, #8]
 80078e2:	4648      	mov	r0, r9
 80078e4:	f000 fe72 	bl	80085cc <_Bfree>
 80078e8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80078ec:	2200      	movs	r2, #0
 80078ee:	601a      	str	r2, [r3, #0]
 80078f0:	1e2b      	subs	r3, r5, #0
 80078f2:	bfbb      	ittet	lt
 80078f4:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80078f8:	9303      	strlt	r3, [sp, #12]
 80078fa:	2300      	movge	r3, #0
 80078fc:	2201      	movlt	r2, #1
 80078fe:	bfac      	ite	ge
 8007900:	6033      	strge	r3, [r6, #0]
 8007902:	6032      	strlt	r2, [r6, #0]
 8007904:	4b90      	ldr	r3, [pc, #576]	@ (8007b48 <_dtoa_r+0x2b8>)
 8007906:	9e03      	ldr	r6, [sp, #12]
 8007908:	43b3      	bics	r3, r6
 800790a:	d110      	bne.n	800792e <_dtoa_r+0x9e>
 800790c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800790e:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007912:	6013      	str	r3, [r2, #0]
 8007914:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8007918:	4323      	orrs	r3, r4
 800791a:	f000 84e6 	beq.w	80082ea <_dtoa_r+0xa5a>
 800791e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007920:	4f8a      	ldr	r7, [pc, #552]	@ (8007b4c <_dtoa_r+0x2bc>)
 8007922:	2b00      	cmp	r3, #0
 8007924:	f000 84e8 	beq.w	80082f8 <_dtoa_r+0xa68>
 8007928:	1cfb      	adds	r3, r7, #3
 800792a:	f000 bce3 	b.w	80082f4 <_dtoa_r+0xa64>
 800792e:	ed9d 8b02 	vldr	d8, [sp, #8]
 8007932:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800793a:	d10a      	bne.n	8007952 <_dtoa_r+0xc2>
 800793c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800793e:	2301      	movs	r3, #1
 8007940:	6013      	str	r3, [r2, #0]
 8007942:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007944:	b113      	cbz	r3, 800794c <_dtoa_r+0xbc>
 8007946:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8007948:	4b81      	ldr	r3, [pc, #516]	@ (8007b50 <_dtoa_r+0x2c0>)
 800794a:	6013      	str	r3, [r2, #0]
 800794c:	4f81      	ldr	r7, [pc, #516]	@ (8007b54 <_dtoa_r+0x2c4>)
 800794e:	f000 bcd3 	b.w	80082f8 <_dtoa_r+0xa68>
 8007952:	aa0e      	add	r2, sp, #56	@ 0x38
 8007954:	a90f      	add	r1, sp, #60	@ 0x3c
 8007956:	4648      	mov	r0, r9
 8007958:	eeb0 0b48 	vmov.f64	d0, d8
 800795c:	f001 f918 	bl	8008b90 <__d2b>
 8007960:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8007964:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007966:	9001      	str	r0, [sp, #4]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d045      	beq.n	80079f8 <_dtoa_r+0x168>
 800796c:	eeb0 7b48 	vmov.f64	d7, d8
 8007970:	ee18 1a90 	vmov	r1, s17
 8007974:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8007978:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800797c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8007980:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8007984:	2500      	movs	r5, #0
 8007986:	ee07 1a90 	vmov	s15, r1
 800798a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800798e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8007b28 <_dtoa_r+0x298>
 8007992:	ee37 7b46 	vsub.f64	d7, d7, d6
 8007996:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8007b30 <_dtoa_r+0x2a0>
 800799a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800799e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8007b38 <_dtoa_r+0x2a8>
 80079a2:	ee07 3a90 	vmov	s15, r3
 80079a6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80079aa:	eeb0 7b46 	vmov.f64	d7, d6
 80079ae:	eea4 7b05 	vfma.f64	d7, d4, d5
 80079b2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80079b6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80079ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079be:	ee16 8a90 	vmov	r8, s13
 80079c2:	d508      	bpl.n	80079d6 <_dtoa_r+0x146>
 80079c4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80079c8:	eeb4 6b47 	vcmp.f64	d6, d7
 80079cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079d0:	bf18      	it	ne
 80079d2:	f108 38ff 	addne.w	r8, r8, #4294967295
 80079d6:	f1b8 0f16 	cmp.w	r8, #22
 80079da:	d82b      	bhi.n	8007a34 <_dtoa_r+0x1a4>
 80079dc:	495e      	ldr	r1, [pc, #376]	@ (8007b58 <_dtoa_r+0x2c8>)
 80079de:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 80079e2:	ed91 7b00 	vldr	d7, [r1]
 80079e6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80079ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079ee:	d501      	bpl.n	80079f4 <_dtoa_r+0x164>
 80079f0:	f108 38ff 	add.w	r8, r8, #4294967295
 80079f4:	2100      	movs	r1, #0
 80079f6:	e01e      	b.n	8007a36 <_dtoa_r+0x1a6>
 80079f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80079fa:	4413      	add	r3, r2
 80079fc:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8007a00:	2920      	cmp	r1, #32
 8007a02:	bfc1      	itttt	gt
 8007a04:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8007a08:	408e      	lslgt	r6, r1
 8007a0a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8007a0e:	fa24 f101 	lsrgt.w	r1, r4, r1
 8007a12:	bfd6      	itet	le
 8007a14:	f1c1 0120 	rsble	r1, r1, #32
 8007a18:	4331      	orrgt	r1, r6
 8007a1a:	fa04 f101 	lslle.w	r1, r4, r1
 8007a1e:	ee07 1a90 	vmov	s15, r1
 8007a22:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8007a26:	3b01      	subs	r3, #1
 8007a28:	ee17 1a90 	vmov	r1, s15
 8007a2c:	2501      	movs	r5, #1
 8007a2e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8007a32:	e7a8      	b.n	8007986 <_dtoa_r+0xf6>
 8007a34:	2101      	movs	r1, #1
 8007a36:	1ad2      	subs	r2, r2, r3
 8007a38:	1e53      	subs	r3, r2, #1
 8007a3a:	9306      	str	r3, [sp, #24]
 8007a3c:	bf45      	ittet	mi
 8007a3e:	f1c2 0301 	rsbmi	r3, r2, #1
 8007a42:	9304      	strmi	r3, [sp, #16]
 8007a44:	2300      	movpl	r3, #0
 8007a46:	2300      	movmi	r3, #0
 8007a48:	bf4c      	ite	mi
 8007a4a:	9306      	strmi	r3, [sp, #24]
 8007a4c:	9304      	strpl	r3, [sp, #16]
 8007a4e:	f1b8 0f00 	cmp.w	r8, #0
 8007a52:	910c      	str	r1, [sp, #48]	@ 0x30
 8007a54:	db18      	blt.n	8007a88 <_dtoa_r+0x1f8>
 8007a56:	9b06      	ldr	r3, [sp, #24]
 8007a58:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8007a5c:	4443      	add	r3, r8
 8007a5e:	9306      	str	r3, [sp, #24]
 8007a60:	2300      	movs	r3, #0
 8007a62:	9a07      	ldr	r2, [sp, #28]
 8007a64:	2a09      	cmp	r2, #9
 8007a66:	d845      	bhi.n	8007af4 <_dtoa_r+0x264>
 8007a68:	2a05      	cmp	r2, #5
 8007a6a:	bfc4      	itt	gt
 8007a6c:	3a04      	subgt	r2, #4
 8007a6e:	9207      	strgt	r2, [sp, #28]
 8007a70:	9a07      	ldr	r2, [sp, #28]
 8007a72:	f1a2 0202 	sub.w	r2, r2, #2
 8007a76:	bfcc      	ite	gt
 8007a78:	2400      	movgt	r4, #0
 8007a7a:	2401      	movle	r4, #1
 8007a7c:	2a03      	cmp	r2, #3
 8007a7e:	d844      	bhi.n	8007b0a <_dtoa_r+0x27a>
 8007a80:	e8df f002 	tbb	[pc, r2]
 8007a84:	0b173634 	.word	0x0b173634
 8007a88:	9b04      	ldr	r3, [sp, #16]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	eba3 0308 	sub.w	r3, r3, r8
 8007a90:	9304      	str	r3, [sp, #16]
 8007a92:	920a      	str	r2, [sp, #40]	@ 0x28
 8007a94:	f1c8 0300 	rsb	r3, r8, #0
 8007a98:	e7e3      	b.n	8007a62 <_dtoa_r+0x1d2>
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	9208      	str	r2, [sp, #32]
 8007a9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007aa0:	eb08 0b02 	add.w	fp, r8, r2
 8007aa4:	f10b 0a01 	add.w	sl, fp, #1
 8007aa8:	4652      	mov	r2, sl
 8007aaa:	2a01      	cmp	r2, #1
 8007aac:	bfb8      	it	lt
 8007aae:	2201      	movlt	r2, #1
 8007ab0:	e006      	b.n	8007ac0 <_dtoa_r+0x230>
 8007ab2:	2201      	movs	r2, #1
 8007ab4:	9208      	str	r2, [sp, #32]
 8007ab6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007ab8:	2a00      	cmp	r2, #0
 8007aba:	dd29      	ble.n	8007b10 <_dtoa_r+0x280>
 8007abc:	4693      	mov	fp, r2
 8007abe:	4692      	mov	sl, r2
 8007ac0:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8007ac4:	2100      	movs	r1, #0
 8007ac6:	2004      	movs	r0, #4
 8007ac8:	f100 0614 	add.w	r6, r0, #20
 8007acc:	4296      	cmp	r6, r2
 8007ace:	d926      	bls.n	8007b1e <_dtoa_r+0x28e>
 8007ad0:	6079      	str	r1, [r7, #4]
 8007ad2:	4648      	mov	r0, r9
 8007ad4:	9305      	str	r3, [sp, #20]
 8007ad6:	f000 fd39 	bl	800854c <_Balloc>
 8007ada:	9b05      	ldr	r3, [sp, #20]
 8007adc:	4607      	mov	r7, r0
 8007ade:	2800      	cmp	r0, #0
 8007ae0:	d13e      	bne.n	8007b60 <_dtoa_r+0x2d0>
 8007ae2:	4b1e      	ldr	r3, [pc, #120]	@ (8007b5c <_dtoa_r+0x2cc>)
 8007ae4:	4602      	mov	r2, r0
 8007ae6:	f240 11af 	movw	r1, #431	@ 0x1af
 8007aea:	e6ea      	b.n	80078c2 <_dtoa_r+0x32>
 8007aec:	2200      	movs	r2, #0
 8007aee:	e7e1      	b.n	8007ab4 <_dtoa_r+0x224>
 8007af0:	2200      	movs	r2, #0
 8007af2:	e7d3      	b.n	8007a9c <_dtoa_r+0x20c>
 8007af4:	2401      	movs	r4, #1
 8007af6:	2200      	movs	r2, #0
 8007af8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8007afc:	f04f 3bff 	mov.w	fp, #4294967295
 8007b00:	2100      	movs	r1, #0
 8007b02:	46da      	mov	sl, fp
 8007b04:	2212      	movs	r2, #18
 8007b06:	9109      	str	r1, [sp, #36]	@ 0x24
 8007b08:	e7da      	b.n	8007ac0 <_dtoa_r+0x230>
 8007b0a:	2201      	movs	r2, #1
 8007b0c:	9208      	str	r2, [sp, #32]
 8007b0e:	e7f5      	b.n	8007afc <_dtoa_r+0x26c>
 8007b10:	f04f 0b01 	mov.w	fp, #1
 8007b14:	46da      	mov	sl, fp
 8007b16:	465a      	mov	r2, fp
 8007b18:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8007b1c:	e7d0      	b.n	8007ac0 <_dtoa_r+0x230>
 8007b1e:	3101      	adds	r1, #1
 8007b20:	0040      	lsls	r0, r0, #1
 8007b22:	e7d1      	b.n	8007ac8 <_dtoa_r+0x238>
 8007b24:	f3af 8000 	nop.w
 8007b28:	636f4361 	.word	0x636f4361
 8007b2c:	3fd287a7 	.word	0x3fd287a7
 8007b30:	8b60c8b3 	.word	0x8b60c8b3
 8007b34:	3fc68a28 	.word	0x3fc68a28
 8007b38:	509f79fb 	.word	0x509f79fb
 8007b3c:	3fd34413 	.word	0x3fd34413
 8007b40:	08009465 	.word	0x08009465
 8007b44:	0800947c 	.word	0x0800947c
 8007b48:	7ff00000 	.word	0x7ff00000
 8007b4c:	08009461 	.word	0x08009461
 8007b50:	08009435 	.word	0x08009435
 8007b54:	08009434 	.word	0x08009434
 8007b58:	080095d0 	.word	0x080095d0
 8007b5c:	080094d4 	.word	0x080094d4
 8007b60:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8007b64:	f1ba 0f0e 	cmp.w	sl, #14
 8007b68:	6010      	str	r0, [r2, #0]
 8007b6a:	d86e      	bhi.n	8007c4a <_dtoa_r+0x3ba>
 8007b6c:	2c00      	cmp	r4, #0
 8007b6e:	d06c      	beq.n	8007c4a <_dtoa_r+0x3ba>
 8007b70:	f1b8 0f00 	cmp.w	r8, #0
 8007b74:	f340 80b4 	ble.w	8007ce0 <_dtoa_r+0x450>
 8007b78:	4ac8      	ldr	r2, [pc, #800]	@ (8007e9c <_dtoa_r+0x60c>)
 8007b7a:	f008 010f 	and.w	r1, r8, #15
 8007b7e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8007b82:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8007b86:	ed92 7b00 	vldr	d7, [r2]
 8007b8a:	ea4f 1128 	mov.w	r1, r8, asr #4
 8007b8e:	f000 809b 	beq.w	8007cc8 <_dtoa_r+0x438>
 8007b92:	4ac3      	ldr	r2, [pc, #780]	@ (8007ea0 <_dtoa_r+0x610>)
 8007b94:	ed92 6b08 	vldr	d6, [r2, #32]
 8007b98:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8007b9c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8007ba0:	f001 010f 	and.w	r1, r1, #15
 8007ba4:	2203      	movs	r2, #3
 8007ba6:	48be      	ldr	r0, [pc, #760]	@ (8007ea0 <_dtoa_r+0x610>)
 8007ba8:	2900      	cmp	r1, #0
 8007baa:	f040 808f 	bne.w	8007ccc <_dtoa_r+0x43c>
 8007bae:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007bb2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8007bb6:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007bba:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007bbc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007bc0:	2900      	cmp	r1, #0
 8007bc2:	f000 80b3 	beq.w	8007d2c <_dtoa_r+0x49c>
 8007bc6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8007bca:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007bce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bd2:	f140 80ab 	bpl.w	8007d2c <_dtoa_r+0x49c>
 8007bd6:	f1ba 0f00 	cmp.w	sl, #0
 8007bda:	f000 80a7 	beq.w	8007d2c <_dtoa_r+0x49c>
 8007bde:	f1bb 0f00 	cmp.w	fp, #0
 8007be2:	dd30      	ble.n	8007c46 <_dtoa_r+0x3b6>
 8007be4:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8007be8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007bec:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007bf0:	f108 31ff 	add.w	r1, r8, #4294967295
 8007bf4:	9105      	str	r1, [sp, #20]
 8007bf6:	3201      	adds	r2, #1
 8007bf8:	465c      	mov	r4, fp
 8007bfa:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007bfe:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8007c02:	ee07 2a90 	vmov	s15, r2
 8007c06:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007c0a:	eea7 5b06 	vfma.f64	d5, d7, d6
 8007c0e:	ee15 2a90 	vmov	r2, s11
 8007c12:	ec51 0b15 	vmov	r0, r1, d5
 8007c16:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8007c1a:	2c00      	cmp	r4, #0
 8007c1c:	f040 808a 	bne.w	8007d34 <_dtoa_r+0x4a4>
 8007c20:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8007c24:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007c28:	ec41 0b17 	vmov	d7, r0, r1
 8007c2c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007c30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c34:	f300 826a 	bgt.w	800810c <_dtoa_r+0x87c>
 8007c38:	eeb1 7b47 	vneg.f64	d7, d7
 8007c3c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007c40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c44:	d423      	bmi.n	8007c8e <_dtoa_r+0x3fe>
 8007c46:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007c4a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007c4c:	2a00      	cmp	r2, #0
 8007c4e:	f2c0 8129 	blt.w	8007ea4 <_dtoa_r+0x614>
 8007c52:	f1b8 0f0e 	cmp.w	r8, #14
 8007c56:	f300 8125 	bgt.w	8007ea4 <_dtoa_r+0x614>
 8007c5a:	4b90      	ldr	r3, [pc, #576]	@ (8007e9c <_dtoa_r+0x60c>)
 8007c5c:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007c60:	ed93 6b00 	vldr	d6, [r3]
 8007c64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	f280 80c8 	bge.w	8007dfc <_dtoa_r+0x56c>
 8007c6c:	f1ba 0f00 	cmp.w	sl, #0
 8007c70:	f300 80c4 	bgt.w	8007dfc <_dtoa_r+0x56c>
 8007c74:	d10b      	bne.n	8007c8e <_dtoa_r+0x3fe>
 8007c76:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8007c7a:	ee26 6b07 	vmul.f64	d6, d6, d7
 8007c7e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007c82:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007c86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c8a:	f2c0 823c 	blt.w	8008106 <_dtoa_r+0x876>
 8007c8e:	2400      	movs	r4, #0
 8007c90:	4625      	mov	r5, r4
 8007c92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c94:	43db      	mvns	r3, r3
 8007c96:	9305      	str	r3, [sp, #20]
 8007c98:	463e      	mov	r6, r7
 8007c9a:	f04f 0800 	mov.w	r8, #0
 8007c9e:	4621      	mov	r1, r4
 8007ca0:	4648      	mov	r0, r9
 8007ca2:	f000 fc93 	bl	80085cc <_Bfree>
 8007ca6:	2d00      	cmp	r5, #0
 8007ca8:	f000 80a2 	beq.w	8007df0 <_dtoa_r+0x560>
 8007cac:	f1b8 0f00 	cmp.w	r8, #0
 8007cb0:	d005      	beq.n	8007cbe <_dtoa_r+0x42e>
 8007cb2:	45a8      	cmp	r8, r5
 8007cb4:	d003      	beq.n	8007cbe <_dtoa_r+0x42e>
 8007cb6:	4641      	mov	r1, r8
 8007cb8:	4648      	mov	r0, r9
 8007cba:	f000 fc87 	bl	80085cc <_Bfree>
 8007cbe:	4629      	mov	r1, r5
 8007cc0:	4648      	mov	r0, r9
 8007cc2:	f000 fc83 	bl	80085cc <_Bfree>
 8007cc6:	e093      	b.n	8007df0 <_dtoa_r+0x560>
 8007cc8:	2202      	movs	r2, #2
 8007cca:	e76c      	b.n	8007ba6 <_dtoa_r+0x316>
 8007ccc:	07cc      	lsls	r4, r1, #31
 8007cce:	d504      	bpl.n	8007cda <_dtoa_r+0x44a>
 8007cd0:	ed90 6b00 	vldr	d6, [r0]
 8007cd4:	3201      	adds	r2, #1
 8007cd6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007cda:	1049      	asrs	r1, r1, #1
 8007cdc:	3008      	adds	r0, #8
 8007cde:	e763      	b.n	8007ba8 <_dtoa_r+0x318>
 8007ce0:	d022      	beq.n	8007d28 <_dtoa_r+0x498>
 8007ce2:	f1c8 0100 	rsb	r1, r8, #0
 8007ce6:	4a6d      	ldr	r2, [pc, #436]	@ (8007e9c <_dtoa_r+0x60c>)
 8007ce8:	f001 000f 	and.w	r0, r1, #15
 8007cec:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8007cf0:	ed92 7b00 	vldr	d7, [r2]
 8007cf4:	ee28 7b07 	vmul.f64	d7, d8, d7
 8007cf8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007cfc:	4868      	ldr	r0, [pc, #416]	@ (8007ea0 <_dtoa_r+0x610>)
 8007cfe:	1109      	asrs	r1, r1, #4
 8007d00:	2400      	movs	r4, #0
 8007d02:	2202      	movs	r2, #2
 8007d04:	b929      	cbnz	r1, 8007d12 <_dtoa_r+0x482>
 8007d06:	2c00      	cmp	r4, #0
 8007d08:	f43f af57 	beq.w	8007bba <_dtoa_r+0x32a>
 8007d0c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007d10:	e753      	b.n	8007bba <_dtoa_r+0x32a>
 8007d12:	07ce      	lsls	r6, r1, #31
 8007d14:	d505      	bpl.n	8007d22 <_dtoa_r+0x492>
 8007d16:	ed90 6b00 	vldr	d6, [r0]
 8007d1a:	3201      	adds	r2, #1
 8007d1c:	2401      	movs	r4, #1
 8007d1e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007d22:	1049      	asrs	r1, r1, #1
 8007d24:	3008      	adds	r0, #8
 8007d26:	e7ed      	b.n	8007d04 <_dtoa_r+0x474>
 8007d28:	2202      	movs	r2, #2
 8007d2a:	e746      	b.n	8007bba <_dtoa_r+0x32a>
 8007d2c:	f8cd 8014 	str.w	r8, [sp, #20]
 8007d30:	4654      	mov	r4, sl
 8007d32:	e762      	b.n	8007bfa <_dtoa_r+0x36a>
 8007d34:	4a59      	ldr	r2, [pc, #356]	@ (8007e9c <_dtoa_r+0x60c>)
 8007d36:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8007d3a:	ed12 4b02 	vldr	d4, [r2, #-8]
 8007d3e:	9a08      	ldr	r2, [sp, #32]
 8007d40:	ec41 0b17 	vmov	d7, r0, r1
 8007d44:	443c      	add	r4, r7
 8007d46:	b34a      	cbz	r2, 8007d9c <_dtoa_r+0x50c>
 8007d48:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8007d4c:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8007d50:	463e      	mov	r6, r7
 8007d52:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8007d56:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8007d5a:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007d5e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007d62:	ee14 2a90 	vmov	r2, s9
 8007d66:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007d6a:	3230      	adds	r2, #48	@ 0x30
 8007d6c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007d70:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007d74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d78:	f806 2b01 	strb.w	r2, [r6], #1
 8007d7c:	d438      	bmi.n	8007df0 <_dtoa_r+0x560>
 8007d7e:	ee32 5b46 	vsub.f64	d5, d2, d6
 8007d82:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8007d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d8a:	d46e      	bmi.n	8007e6a <_dtoa_r+0x5da>
 8007d8c:	42a6      	cmp	r6, r4
 8007d8e:	f43f af5a 	beq.w	8007c46 <_dtoa_r+0x3b6>
 8007d92:	ee27 7b03 	vmul.f64	d7, d7, d3
 8007d96:	ee26 6b03 	vmul.f64	d6, d6, d3
 8007d9a:	e7e0      	b.n	8007d5e <_dtoa_r+0x4ce>
 8007d9c:	4621      	mov	r1, r4
 8007d9e:	463e      	mov	r6, r7
 8007da0:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007da4:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8007da8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007dac:	ee14 2a90 	vmov	r2, s9
 8007db0:	3230      	adds	r2, #48	@ 0x30
 8007db2:	f806 2b01 	strb.w	r2, [r6], #1
 8007db6:	42a6      	cmp	r6, r4
 8007db8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007dbc:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007dc0:	d119      	bne.n	8007df6 <_dtoa_r+0x566>
 8007dc2:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8007dc6:	ee37 4b05 	vadd.f64	d4, d7, d5
 8007dca:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8007dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dd2:	dc4a      	bgt.n	8007e6a <_dtoa_r+0x5da>
 8007dd4:	ee35 5b47 	vsub.f64	d5, d5, d7
 8007dd8:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8007ddc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007de0:	f57f af31 	bpl.w	8007c46 <_dtoa_r+0x3b6>
 8007de4:	460e      	mov	r6, r1
 8007de6:	3901      	subs	r1, #1
 8007de8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007dec:	2b30      	cmp	r3, #48	@ 0x30
 8007dee:	d0f9      	beq.n	8007de4 <_dtoa_r+0x554>
 8007df0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8007df4:	e027      	b.n	8007e46 <_dtoa_r+0x5b6>
 8007df6:	ee26 6b03 	vmul.f64	d6, d6, d3
 8007dfa:	e7d5      	b.n	8007da8 <_dtoa_r+0x518>
 8007dfc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007e00:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8007e04:	463e      	mov	r6, r7
 8007e06:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8007e0a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8007e0e:	ee15 3a10 	vmov	r3, s10
 8007e12:	3330      	adds	r3, #48	@ 0x30
 8007e14:	f806 3b01 	strb.w	r3, [r6], #1
 8007e18:	1bf3      	subs	r3, r6, r7
 8007e1a:	459a      	cmp	sl, r3
 8007e1c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8007e20:	eea3 7b46 	vfms.f64	d7, d3, d6
 8007e24:	d132      	bne.n	8007e8c <_dtoa_r+0x5fc>
 8007e26:	ee37 7b07 	vadd.f64	d7, d7, d7
 8007e2a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007e2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e32:	dc18      	bgt.n	8007e66 <_dtoa_r+0x5d6>
 8007e34:	eeb4 7b46 	vcmp.f64	d7, d6
 8007e38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e3c:	d103      	bne.n	8007e46 <_dtoa_r+0x5b6>
 8007e3e:	ee15 3a10 	vmov	r3, s10
 8007e42:	07db      	lsls	r3, r3, #31
 8007e44:	d40f      	bmi.n	8007e66 <_dtoa_r+0x5d6>
 8007e46:	9901      	ldr	r1, [sp, #4]
 8007e48:	4648      	mov	r0, r9
 8007e4a:	f000 fbbf 	bl	80085cc <_Bfree>
 8007e4e:	2300      	movs	r3, #0
 8007e50:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007e52:	7033      	strb	r3, [r6, #0]
 8007e54:	f108 0301 	add.w	r3, r8, #1
 8007e58:	6013      	str	r3, [r2, #0]
 8007e5a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	f000 824b 	beq.w	80082f8 <_dtoa_r+0xa68>
 8007e62:	601e      	str	r6, [r3, #0]
 8007e64:	e248      	b.n	80082f8 <_dtoa_r+0xa68>
 8007e66:	f8cd 8014 	str.w	r8, [sp, #20]
 8007e6a:	4633      	mov	r3, r6
 8007e6c:	461e      	mov	r6, r3
 8007e6e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007e72:	2a39      	cmp	r2, #57	@ 0x39
 8007e74:	d106      	bne.n	8007e84 <_dtoa_r+0x5f4>
 8007e76:	429f      	cmp	r7, r3
 8007e78:	d1f8      	bne.n	8007e6c <_dtoa_r+0x5dc>
 8007e7a:	9a05      	ldr	r2, [sp, #20]
 8007e7c:	3201      	adds	r2, #1
 8007e7e:	9205      	str	r2, [sp, #20]
 8007e80:	2230      	movs	r2, #48	@ 0x30
 8007e82:	703a      	strb	r2, [r7, #0]
 8007e84:	781a      	ldrb	r2, [r3, #0]
 8007e86:	3201      	adds	r2, #1
 8007e88:	701a      	strb	r2, [r3, #0]
 8007e8a:	e7b1      	b.n	8007df0 <_dtoa_r+0x560>
 8007e8c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007e90:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007e94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e98:	d1b5      	bne.n	8007e06 <_dtoa_r+0x576>
 8007e9a:	e7d4      	b.n	8007e46 <_dtoa_r+0x5b6>
 8007e9c:	080095d0 	.word	0x080095d0
 8007ea0:	080095a8 	.word	0x080095a8
 8007ea4:	9908      	ldr	r1, [sp, #32]
 8007ea6:	2900      	cmp	r1, #0
 8007ea8:	f000 80e9 	beq.w	800807e <_dtoa_r+0x7ee>
 8007eac:	9907      	ldr	r1, [sp, #28]
 8007eae:	2901      	cmp	r1, #1
 8007eb0:	f300 80cb 	bgt.w	800804a <_dtoa_r+0x7ba>
 8007eb4:	2d00      	cmp	r5, #0
 8007eb6:	f000 80c4 	beq.w	8008042 <_dtoa_r+0x7b2>
 8007eba:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8007ebe:	9e04      	ldr	r6, [sp, #16]
 8007ec0:	461c      	mov	r4, r3
 8007ec2:	9305      	str	r3, [sp, #20]
 8007ec4:	9b04      	ldr	r3, [sp, #16]
 8007ec6:	4413      	add	r3, r2
 8007ec8:	9304      	str	r3, [sp, #16]
 8007eca:	9b06      	ldr	r3, [sp, #24]
 8007ecc:	2101      	movs	r1, #1
 8007ece:	4413      	add	r3, r2
 8007ed0:	4648      	mov	r0, r9
 8007ed2:	9306      	str	r3, [sp, #24]
 8007ed4:	f000 fc2e 	bl	8008734 <__i2b>
 8007ed8:	9b05      	ldr	r3, [sp, #20]
 8007eda:	4605      	mov	r5, r0
 8007edc:	b166      	cbz	r6, 8007ef8 <_dtoa_r+0x668>
 8007ede:	9a06      	ldr	r2, [sp, #24]
 8007ee0:	2a00      	cmp	r2, #0
 8007ee2:	dd09      	ble.n	8007ef8 <_dtoa_r+0x668>
 8007ee4:	42b2      	cmp	r2, r6
 8007ee6:	9904      	ldr	r1, [sp, #16]
 8007ee8:	bfa8      	it	ge
 8007eea:	4632      	movge	r2, r6
 8007eec:	1a89      	subs	r1, r1, r2
 8007eee:	9104      	str	r1, [sp, #16]
 8007ef0:	9906      	ldr	r1, [sp, #24]
 8007ef2:	1ab6      	subs	r6, r6, r2
 8007ef4:	1a8a      	subs	r2, r1, r2
 8007ef6:	9206      	str	r2, [sp, #24]
 8007ef8:	b30b      	cbz	r3, 8007f3e <_dtoa_r+0x6ae>
 8007efa:	9a08      	ldr	r2, [sp, #32]
 8007efc:	2a00      	cmp	r2, #0
 8007efe:	f000 80c5 	beq.w	800808c <_dtoa_r+0x7fc>
 8007f02:	2c00      	cmp	r4, #0
 8007f04:	f000 80bf 	beq.w	8008086 <_dtoa_r+0x7f6>
 8007f08:	4629      	mov	r1, r5
 8007f0a:	4622      	mov	r2, r4
 8007f0c:	4648      	mov	r0, r9
 8007f0e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007f10:	f000 fcc8 	bl	80088a4 <__pow5mult>
 8007f14:	9a01      	ldr	r2, [sp, #4]
 8007f16:	4601      	mov	r1, r0
 8007f18:	4605      	mov	r5, r0
 8007f1a:	4648      	mov	r0, r9
 8007f1c:	f000 fc20 	bl	8008760 <__multiply>
 8007f20:	9901      	ldr	r1, [sp, #4]
 8007f22:	9005      	str	r0, [sp, #20]
 8007f24:	4648      	mov	r0, r9
 8007f26:	f000 fb51 	bl	80085cc <_Bfree>
 8007f2a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007f2c:	1b1b      	subs	r3, r3, r4
 8007f2e:	f000 80b0 	beq.w	8008092 <_dtoa_r+0x802>
 8007f32:	9905      	ldr	r1, [sp, #20]
 8007f34:	461a      	mov	r2, r3
 8007f36:	4648      	mov	r0, r9
 8007f38:	f000 fcb4 	bl	80088a4 <__pow5mult>
 8007f3c:	9001      	str	r0, [sp, #4]
 8007f3e:	2101      	movs	r1, #1
 8007f40:	4648      	mov	r0, r9
 8007f42:	f000 fbf7 	bl	8008734 <__i2b>
 8007f46:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f48:	4604      	mov	r4, r0
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	f000 81da 	beq.w	8008304 <_dtoa_r+0xa74>
 8007f50:	461a      	mov	r2, r3
 8007f52:	4601      	mov	r1, r0
 8007f54:	4648      	mov	r0, r9
 8007f56:	f000 fca5 	bl	80088a4 <__pow5mult>
 8007f5a:	9b07      	ldr	r3, [sp, #28]
 8007f5c:	2b01      	cmp	r3, #1
 8007f5e:	4604      	mov	r4, r0
 8007f60:	f300 80a0 	bgt.w	80080a4 <_dtoa_r+0x814>
 8007f64:	9b02      	ldr	r3, [sp, #8]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	f040 8096 	bne.w	8008098 <_dtoa_r+0x808>
 8007f6c:	9b03      	ldr	r3, [sp, #12]
 8007f6e:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8007f72:	2a00      	cmp	r2, #0
 8007f74:	f040 8092 	bne.w	800809c <_dtoa_r+0x80c>
 8007f78:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8007f7c:	0d12      	lsrs	r2, r2, #20
 8007f7e:	0512      	lsls	r2, r2, #20
 8007f80:	2a00      	cmp	r2, #0
 8007f82:	f000 808d 	beq.w	80080a0 <_dtoa_r+0x810>
 8007f86:	9b04      	ldr	r3, [sp, #16]
 8007f88:	3301      	adds	r3, #1
 8007f8a:	9304      	str	r3, [sp, #16]
 8007f8c:	9b06      	ldr	r3, [sp, #24]
 8007f8e:	3301      	adds	r3, #1
 8007f90:	9306      	str	r3, [sp, #24]
 8007f92:	2301      	movs	r3, #1
 8007f94:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007f96:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	f000 81b9 	beq.w	8008310 <_dtoa_r+0xa80>
 8007f9e:	6922      	ldr	r2, [r4, #16]
 8007fa0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8007fa4:	6910      	ldr	r0, [r2, #16]
 8007fa6:	f000 fb79 	bl	800869c <__hi0bits>
 8007faa:	f1c0 0020 	rsb	r0, r0, #32
 8007fae:	9b06      	ldr	r3, [sp, #24]
 8007fb0:	4418      	add	r0, r3
 8007fb2:	f010 001f 	ands.w	r0, r0, #31
 8007fb6:	f000 8081 	beq.w	80080bc <_dtoa_r+0x82c>
 8007fba:	f1c0 0220 	rsb	r2, r0, #32
 8007fbe:	2a04      	cmp	r2, #4
 8007fc0:	dd73      	ble.n	80080aa <_dtoa_r+0x81a>
 8007fc2:	9b04      	ldr	r3, [sp, #16]
 8007fc4:	f1c0 001c 	rsb	r0, r0, #28
 8007fc8:	4403      	add	r3, r0
 8007fca:	9304      	str	r3, [sp, #16]
 8007fcc:	9b06      	ldr	r3, [sp, #24]
 8007fce:	4406      	add	r6, r0
 8007fd0:	4403      	add	r3, r0
 8007fd2:	9306      	str	r3, [sp, #24]
 8007fd4:	9b04      	ldr	r3, [sp, #16]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	dd05      	ble.n	8007fe6 <_dtoa_r+0x756>
 8007fda:	9901      	ldr	r1, [sp, #4]
 8007fdc:	461a      	mov	r2, r3
 8007fde:	4648      	mov	r0, r9
 8007fe0:	f000 fcba 	bl	8008958 <__lshift>
 8007fe4:	9001      	str	r0, [sp, #4]
 8007fe6:	9b06      	ldr	r3, [sp, #24]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	dd05      	ble.n	8007ff8 <_dtoa_r+0x768>
 8007fec:	4621      	mov	r1, r4
 8007fee:	461a      	mov	r2, r3
 8007ff0:	4648      	mov	r0, r9
 8007ff2:	f000 fcb1 	bl	8008958 <__lshift>
 8007ff6:	4604      	mov	r4, r0
 8007ff8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d060      	beq.n	80080c0 <_dtoa_r+0x830>
 8007ffe:	9801      	ldr	r0, [sp, #4]
 8008000:	4621      	mov	r1, r4
 8008002:	f000 fd15 	bl	8008a30 <__mcmp>
 8008006:	2800      	cmp	r0, #0
 8008008:	da5a      	bge.n	80080c0 <_dtoa_r+0x830>
 800800a:	f108 33ff 	add.w	r3, r8, #4294967295
 800800e:	9305      	str	r3, [sp, #20]
 8008010:	9901      	ldr	r1, [sp, #4]
 8008012:	2300      	movs	r3, #0
 8008014:	220a      	movs	r2, #10
 8008016:	4648      	mov	r0, r9
 8008018:	f000 fafa 	bl	8008610 <__multadd>
 800801c:	9b08      	ldr	r3, [sp, #32]
 800801e:	9001      	str	r0, [sp, #4]
 8008020:	2b00      	cmp	r3, #0
 8008022:	f000 8177 	beq.w	8008314 <_dtoa_r+0xa84>
 8008026:	4629      	mov	r1, r5
 8008028:	2300      	movs	r3, #0
 800802a:	220a      	movs	r2, #10
 800802c:	4648      	mov	r0, r9
 800802e:	f000 faef 	bl	8008610 <__multadd>
 8008032:	f1bb 0f00 	cmp.w	fp, #0
 8008036:	4605      	mov	r5, r0
 8008038:	dc6e      	bgt.n	8008118 <_dtoa_r+0x888>
 800803a:	9b07      	ldr	r3, [sp, #28]
 800803c:	2b02      	cmp	r3, #2
 800803e:	dc48      	bgt.n	80080d2 <_dtoa_r+0x842>
 8008040:	e06a      	b.n	8008118 <_dtoa_r+0x888>
 8008042:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008044:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008048:	e739      	b.n	8007ebe <_dtoa_r+0x62e>
 800804a:	f10a 34ff 	add.w	r4, sl, #4294967295
 800804e:	42a3      	cmp	r3, r4
 8008050:	db07      	blt.n	8008062 <_dtoa_r+0x7d2>
 8008052:	f1ba 0f00 	cmp.w	sl, #0
 8008056:	eba3 0404 	sub.w	r4, r3, r4
 800805a:	db0b      	blt.n	8008074 <_dtoa_r+0x7e4>
 800805c:	9e04      	ldr	r6, [sp, #16]
 800805e:	4652      	mov	r2, sl
 8008060:	e72f      	b.n	8007ec2 <_dtoa_r+0x632>
 8008062:	1ae2      	subs	r2, r4, r3
 8008064:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008066:	9e04      	ldr	r6, [sp, #16]
 8008068:	4413      	add	r3, r2
 800806a:	930a      	str	r3, [sp, #40]	@ 0x28
 800806c:	4652      	mov	r2, sl
 800806e:	4623      	mov	r3, r4
 8008070:	2400      	movs	r4, #0
 8008072:	e726      	b.n	8007ec2 <_dtoa_r+0x632>
 8008074:	9a04      	ldr	r2, [sp, #16]
 8008076:	eba2 060a 	sub.w	r6, r2, sl
 800807a:	2200      	movs	r2, #0
 800807c:	e721      	b.n	8007ec2 <_dtoa_r+0x632>
 800807e:	9e04      	ldr	r6, [sp, #16]
 8008080:	9d08      	ldr	r5, [sp, #32]
 8008082:	461c      	mov	r4, r3
 8008084:	e72a      	b.n	8007edc <_dtoa_r+0x64c>
 8008086:	9a01      	ldr	r2, [sp, #4]
 8008088:	9205      	str	r2, [sp, #20]
 800808a:	e752      	b.n	8007f32 <_dtoa_r+0x6a2>
 800808c:	9901      	ldr	r1, [sp, #4]
 800808e:	461a      	mov	r2, r3
 8008090:	e751      	b.n	8007f36 <_dtoa_r+0x6a6>
 8008092:	9b05      	ldr	r3, [sp, #20]
 8008094:	9301      	str	r3, [sp, #4]
 8008096:	e752      	b.n	8007f3e <_dtoa_r+0x6ae>
 8008098:	2300      	movs	r3, #0
 800809a:	e77b      	b.n	8007f94 <_dtoa_r+0x704>
 800809c:	9b02      	ldr	r3, [sp, #8]
 800809e:	e779      	b.n	8007f94 <_dtoa_r+0x704>
 80080a0:	920b      	str	r2, [sp, #44]	@ 0x2c
 80080a2:	e778      	b.n	8007f96 <_dtoa_r+0x706>
 80080a4:	2300      	movs	r3, #0
 80080a6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80080a8:	e779      	b.n	8007f9e <_dtoa_r+0x70e>
 80080aa:	d093      	beq.n	8007fd4 <_dtoa_r+0x744>
 80080ac:	9b04      	ldr	r3, [sp, #16]
 80080ae:	321c      	adds	r2, #28
 80080b0:	4413      	add	r3, r2
 80080b2:	9304      	str	r3, [sp, #16]
 80080b4:	9b06      	ldr	r3, [sp, #24]
 80080b6:	4416      	add	r6, r2
 80080b8:	4413      	add	r3, r2
 80080ba:	e78a      	b.n	8007fd2 <_dtoa_r+0x742>
 80080bc:	4602      	mov	r2, r0
 80080be:	e7f5      	b.n	80080ac <_dtoa_r+0x81c>
 80080c0:	f1ba 0f00 	cmp.w	sl, #0
 80080c4:	f8cd 8014 	str.w	r8, [sp, #20]
 80080c8:	46d3      	mov	fp, sl
 80080ca:	dc21      	bgt.n	8008110 <_dtoa_r+0x880>
 80080cc:	9b07      	ldr	r3, [sp, #28]
 80080ce:	2b02      	cmp	r3, #2
 80080d0:	dd1e      	ble.n	8008110 <_dtoa_r+0x880>
 80080d2:	f1bb 0f00 	cmp.w	fp, #0
 80080d6:	f47f addc 	bne.w	8007c92 <_dtoa_r+0x402>
 80080da:	4621      	mov	r1, r4
 80080dc:	465b      	mov	r3, fp
 80080de:	2205      	movs	r2, #5
 80080e0:	4648      	mov	r0, r9
 80080e2:	f000 fa95 	bl	8008610 <__multadd>
 80080e6:	4601      	mov	r1, r0
 80080e8:	4604      	mov	r4, r0
 80080ea:	9801      	ldr	r0, [sp, #4]
 80080ec:	f000 fca0 	bl	8008a30 <__mcmp>
 80080f0:	2800      	cmp	r0, #0
 80080f2:	f77f adce 	ble.w	8007c92 <_dtoa_r+0x402>
 80080f6:	463e      	mov	r6, r7
 80080f8:	2331      	movs	r3, #49	@ 0x31
 80080fa:	f806 3b01 	strb.w	r3, [r6], #1
 80080fe:	9b05      	ldr	r3, [sp, #20]
 8008100:	3301      	adds	r3, #1
 8008102:	9305      	str	r3, [sp, #20]
 8008104:	e5c9      	b.n	8007c9a <_dtoa_r+0x40a>
 8008106:	f8cd 8014 	str.w	r8, [sp, #20]
 800810a:	4654      	mov	r4, sl
 800810c:	4625      	mov	r5, r4
 800810e:	e7f2      	b.n	80080f6 <_dtoa_r+0x866>
 8008110:	9b08      	ldr	r3, [sp, #32]
 8008112:	2b00      	cmp	r3, #0
 8008114:	f000 8102 	beq.w	800831c <_dtoa_r+0xa8c>
 8008118:	2e00      	cmp	r6, #0
 800811a:	dd05      	ble.n	8008128 <_dtoa_r+0x898>
 800811c:	4629      	mov	r1, r5
 800811e:	4632      	mov	r2, r6
 8008120:	4648      	mov	r0, r9
 8008122:	f000 fc19 	bl	8008958 <__lshift>
 8008126:	4605      	mov	r5, r0
 8008128:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800812a:	2b00      	cmp	r3, #0
 800812c:	d058      	beq.n	80081e0 <_dtoa_r+0x950>
 800812e:	6869      	ldr	r1, [r5, #4]
 8008130:	4648      	mov	r0, r9
 8008132:	f000 fa0b 	bl	800854c <_Balloc>
 8008136:	4606      	mov	r6, r0
 8008138:	b928      	cbnz	r0, 8008146 <_dtoa_r+0x8b6>
 800813a:	4b82      	ldr	r3, [pc, #520]	@ (8008344 <_dtoa_r+0xab4>)
 800813c:	4602      	mov	r2, r0
 800813e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008142:	f7ff bbbe 	b.w	80078c2 <_dtoa_r+0x32>
 8008146:	692a      	ldr	r2, [r5, #16]
 8008148:	3202      	adds	r2, #2
 800814a:	0092      	lsls	r2, r2, #2
 800814c:	f105 010c 	add.w	r1, r5, #12
 8008150:	300c      	adds	r0, #12
 8008152:	f000 fff7 	bl	8009144 <memcpy>
 8008156:	2201      	movs	r2, #1
 8008158:	4631      	mov	r1, r6
 800815a:	4648      	mov	r0, r9
 800815c:	f000 fbfc 	bl	8008958 <__lshift>
 8008160:	1c7b      	adds	r3, r7, #1
 8008162:	9304      	str	r3, [sp, #16]
 8008164:	eb07 030b 	add.w	r3, r7, fp
 8008168:	9309      	str	r3, [sp, #36]	@ 0x24
 800816a:	9b02      	ldr	r3, [sp, #8]
 800816c:	f003 0301 	and.w	r3, r3, #1
 8008170:	46a8      	mov	r8, r5
 8008172:	9308      	str	r3, [sp, #32]
 8008174:	4605      	mov	r5, r0
 8008176:	9b04      	ldr	r3, [sp, #16]
 8008178:	9801      	ldr	r0, [sp, #4]
 800817a:	4621      	mov	r1, r4
 800817c:	f103 3bff 	add.w	fp, r3, #4294967295
 8008180:	f7ff fafd 	bl	800777e <quorem>
 8008184:	4641      	mov	r1, r8
 8008186:	9002      	str	r0, [sp, #8]
 8008188:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800818c:	9801      	ldr	r0, [sp, #4]
 800818e:	f000 fc4f 	bl	8008a30 <__mcmp>
 8008192:	462a      	mov	r2, r5
 8008194:	9006      	str	r0, [sp, #24]
 8008196:	4621      	mov	r1, r4
 8008198:	4648      	mov	r0, r9
 800819a:	f000 fc65 	bl	8008a68 <__mdiff>
 800819e:	68c2      	ldr	r2, [r0, #12]
 80081a0:	4606      	mov	r6, r0
 80081a2:	b9fa      	cbnz	r2, 80081e4 <_dtoa_r+0x954>
 80081a4:	4601      	mov	r1, r0
 80081a6:	9801      	ldr	r0, [sp, #4]
 80081a8:	f000 fc42 	bl	8008a30 <__mcmp>
 80081ac:	4602      	mov	r2, r0
 80081ae:	4631      	mov	r1, r6
 80081b0:	4648      	mov	r0, r9
 80081b2:	920a      	str	r2, [sp, #40]	@ 0x28
 80081b4:	f000 fa0a 	bl	80085cc <_Bfree>
 80081b8:	9b07      	ldr	r3, [sp, #28]
 80081ba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80081bc:	9e04      	ldr	r6, [sp, #16]
 80081be:	ea42 0103 	orr.w	r1, r2, r3
 80081c2:	9b08      	ldr	r3, [sp, #32]
 80081c4:	4319      	orrs	r1, r3
 80081c6:	d10f      	bne.n	80081e8 <_dtoa_r+0x958>
 80081c8:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80081cc:	d028      	beq.n	8008220 <_dtoa_r+0x990>
 80081ce:	9b06      	ldr	r3, [sp, #24]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	dd02      	ble.n	80081da <_dtoa_r+0x94a>
 80081d4:	9b02      	ldr	r3, [sp, #8]
 80081d6:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 80081da:	f88b a000 	strb.w	sl, [fp]
 80081de:	e55e      	b.n	8007c9e <_dtoa_r+0x40e>
 80081e0:	4628      	mov	r0, r5
 80081e2:	e7bd      	b.n	8008160 <_dtoa_r+0x8d0>
 80081e4:	2201      	movs	r2, #1
 80081e6:	e7e2      	b.n	80081ae <_dtoa_r+0x91e>
 80081e8:	9b06      	ldr	r3, [sp, #24]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	db04      	blt.n	80081f8 <_dtoa_r+0x968>
 80081ee:	9907      	ldr	r1, [sp, #28]
 80081f0:	430b      	orrs	r3, r1
 80081f2:	9908      	ldr	r1, [sp, #32]
 80081f4:	430b      	orrs	r3, r1
 80081f6:	d120      	bne.n	800823a <_dtoa_r+0x9aa>
 80081f8:	2a00      	cmp	r2, #0
 80081fa:	ddee      	ble.n	80081da <_dtoa_r+0x94a>
 80081fc:	9901      	ldr	r1, [sp, #4]
 80081fe:	2201      	movs	r2, #1
 8008200:	4648      	mov	r0, r9
 8008202:	f000 fba9 	bl	8008958 <__lshift>
 8008206:	4621      	mov	r1, r4
 8008208:	9001      	str	r0, [sp, #4]
 800820a:	f000 fc11 	bl	8008a30 <__mcmp>
 800820e:	2800      	cmp	r0, #0
 8008210:	dc03      	bgt.n	800821a <_dtoa_r+0x98a>
 8008212:	d1e2      	bne.n	80081da <_dtoa_r+0x94a>
 8008214:	f01a 0f01 	tst.w	sl, #1
 8008218:	d0df      	beq.n	80081da <_dtoa_r+0x94a>
 800821a:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800821e:	d1d9      	bne.n	80081d4 <_dtoa_r+0x944>
 8008220:	2339      	movs	r3, #57	@ 0x39
 8008222:	f88b 3000 	strb.w	r3, [fp]
 8008226:	4633      	mov	r3, r6
 8008228:	461e      	mov	r6, r3
 800822a:	3b01      	subs	r3, #1
 800822c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008230:	2a39      	cmp	r2, #57	@ 0x39
 8008232:	d052      	beq.n	80082da <_dtoa_r+0xa4a>
 8008234:	3201      	adds	r2, #1
 8008236:	701a      	strb	r2, [r3, #0]
 8008238:	e531      	b.n	8007c9e <_dtoa_r+0x40e>
 800823a:	2a00      	cmp	r2, #0
 800823c:	dd07      	ble.n	800824e <_dtoa_r+0x9be>
 800823e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8008242:	d0ed      	beq.n	8008220 <_dtoa_r+0x990>
 8008244:	f10a 0301 	add.w	r3, sl, #1
 8008248:	f88b 3000 	strb.w	r3, [fp]
 800824c:	e527      	b.n	8007c9e <_dtoa_r+0x40e>
 800824e:	9b04      	ldr	r3, [sp, #16]
 8008250:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008252:	f803 ac01 	strb.w	sl, [r3, #-1]
 8008256:	4293      	cmp	r3, r2
 8008258:	d029      	beq.n	80082ae <_dtoa_r+0xa1e>
 800825a:	9901      	ldr	r1, [sp, #4]
 800825c:	2300      	movs	r3, #0
 800825e:	220a      	movs	r2, #10
 8008260:	4648      	mov	r0, r9
 8008262:	f000 f9d5 	bl	8008610 <__multadd>
 8008266:	45a8      	cmp	r8, r5
 8008268:	9001      	str	r0, [sp, #4]
 800826a:	f04f 0300 	mov.w	r3, #0
 800826e:	f04f 020a 	mov.w	r2, #10
 8008272:	4641      	mov	r1, r8
 8008274:	4648      	mov	r0, r9
 8008276:	d107      	bne.n	8008288 <_dtoa_r+0x9f8>
 8008278:	f000 f9ca 	bl	8008610 <__multadd>
 800827c:	4680      	mov	r8, r0
 800827e:	4605      	mov	r5, r0
 8008280:	9b04      	ldr	r3, [sp, #16]
 8008282:	3301      	adds	r3, #1
 8008284:	9304      	str	r3, [sp, #16]
 8008286:	e776      	b.n	8008176 <_dtoa_r+0x8e6>
 8008288:	f000 f9c2 	bl	8008610 <__multadd>
 800828c:	4629      	mov	r1, r5
 800828e:	4680      	mov	r8, r0
 8008290:	2300      	movs	r3, #0
 8008292:	220a      	movs	r2, #10
 8008294:	4648      	mov	r0, r9
 8008296:	f000 f9bb 	bl	8008610 <__multadd>
 800829a:	4605      	mov	r5, r0
 800829c:	e7f0      	b.n	8008280 <_dtoa_r+0x9f0>
 800829e:	f1bb 0f00 	cmp.w	fp, #0
 80082a2:	bfcc      	ite	gt
 80082a4:	465e      	movgt	r6, fp
 80082a6:	2601      	movle	r6, #1
 80082a8:	443e      	add	r6, r7
 80082aa:	f04f 0800 	mov.w	r8, #0
 80082ae:	9901      	ldr	r1, [sp, #4]
 80082b0:	2201      	movs	r2, #1
 80082b2:	4648      	mov	r0, r9
 80082b4:	f000 fb50 	bl	8008958 <__lshift>
 80082b8:	4621      	mov	r1, r4
 80082ba:	9001      	str	r0, [sp, #4]
 80082bc:	f000 fbb8 	bl	8008a30 <__mcmp>
 80082c0:	2800      	cmp	r0, #0
 80082c2:	dcb0      	bgt.n	8008226 <_dtoa_r+0x996>
 80082c4:	d102      	bne.n	80082cc <_dtoa_r+0xa3c>
 80082c6:	f01a 0f01 	tst.w	sl, #1
 80082ca:	d1ac      	bne.n	8008226 <_dtoa_r+0x996>
 80082cc:	4633      	mov	r3, r6
 80082ce:	461e      	mov	r6, r3
 80082d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80082d4:	2a30      	cmp	r2, #48	@ 0x30
 80082d6:	d0fa      	beq.n	80082ce <_dtoa_r+0xa3e>
 80082d8:	e4e1      	b.n	8007c9e <_dtoa_r+0x40e>
 80082da:	429f      	cmp	r7, r3
 80082dc:	d1a4      	bne.n	8008228 <_dtoa_r+0x998>
 80082de:	9b05      	ldr	r3, [sp, #20]
 80082e0:	3301      	adds	r3, #1
 80082e2:	9305      	str	r3, [sp, #20]
 80082e4:	2331      	movs	r3, #49	@ 0x31
 80082e6:	703b      	strb	r3, [r7, #0]
 80082e8:	e4d9      	b.n	8007c9e <_dtoa_r+0x40e>
 80082ea:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80082ec:	4f16      	ldr	r7, [pc, #88]	@ (8008348 <_dtoa_r+0xab8>)
 80082ee:	b11b      	cbz	r3, 80082f8 <_dtoa_r+0xa68>
 80082f0:	f107 0308 	add.w	r3, r7, #8
 80082f4:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80082f6:	6013      	str	r3, [r2, #0]
 80082f8:	4638      	mov	r0, r7
 80082fa:	b011      	add	sp, #68	@ 0x44
 80082fc:	ecbd 8b02 	vpop	{d8}
 8008300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008304:	9b07      	ldr	r3, [sp, #28]
 8008306:	2b01      	cmp	r3, #1
 8008308:	f77f ae2c 	ble.w	8007f64 <_dtoa_r+0x6d4>
 800830c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800830e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008310:	2001      	movs	r0, #1
 8008312:	e64c      	b.n	8007fae <_dtoa_r+0x71e>
 8008314:	f1bb 0f00 	cmp.w	fp, #0
 8008318:	f77f aed8 	ble.w	80080cc <_dtoa_r+0x83c>
 800831c:	463e      	mov	r6, r7
 800831e:	9801      	ldr	r0, [sp, #4]
 8008320:	4621      	mov	r1, r4
 8008322:	f7ff fa2c 	bl	800777e <quorem>
 8008326:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800832a:	f806 ab01 	strb.w	sl, [r6], #1
 800832e:	1bf2      	subs	r2, r6, r7
 8008330:	4593      	cmp	fp, r2
 8008332:	ddb4      	ble.n	800829e <_dtoa_r+0xa0e>
 8008334:	9901      	ldr	r1, [sp, #4]
 8008336:	2300      	movs	r3, #0
 8008338:	220a      	movs	r2, #10
 800833a:	4648      	mov	r0, r9
 800833c:	f000 f968 	bl	8008610 <__multadd>
 8008340:	9001      	str	r0, [sp, #4]
 8008342:	e7ec      	b.n	800831e <_dtoa_r+0xa8e>
 8008344:	080094d4 	.word	0x080094d4
 8008348:	08009458 	.word	0x08009458

0800834c <_free_r>:
 800834c:	b538      	push	{r3, r4, r5, lr}
 800834e:	4605      	mov	r5, r0
 8008350:	2900      	cmp	r1, #0
 8008352:	d041      	beq.n	80083d8 <_free_r+0x8c>
 8008354:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008358:	1f0c      	subs	r4, r1, #4
 800835a:	2b00      	cmp	r3, #0
 800835c:	bfb8      	it	lt
 800835e:	18e4      	addlt	r4, r4, r3
 8008360:	f000 f8e8 	bl	8008534 <__malloc_lock>
 8008364:	4a1d      	ldr	r2, [pc, #116]	@ (80083dc <_free_r+0x90>)
 8008366:	6813      	ldr	r3, [r2, #0]
 8008368:	b933      	cbnz	r3, 8008378 <_free_r+0x2c>
 800836a:	6063      	str	r3, [r4, #4]
 800836c:	6014      	str	r4, [r2, #0]
 800836e:	4628      	mov	r0, r5
 8008370:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008374:	f000 b8e4 	b.w	8008540 <__malloc_unlock>
 8008378:	42a3      	cmp	r3, r4
 800837a:	d908      	bls.n	800838e <_free_r+0x42>
 800837c:	6820      	ldr	r0, [r4, #0]
 800837e:	1821      	adds	r1, r4, r0
 8008380:	428b      	cmp	r3, r1
 8008382:	bf01      	itttt	eq
 8008384:	6819      	ldreq	r1, [r3, #0]
 8008386:	685b      	ldreq	r3, [r3, #4]
 8008388:	1809      	addeq	r1, r1, r0
 800838a:	6021      	streq	r1, [r4, #0]
 800838c:	e7ed      	b.n	800836a <_free_r+0x1e>
 800838e:	461a      	mov	r2, r3
 8008390:	685b      	ldr	r3, [r3, #4]
 8008392:	b10b      	cbz	r3, 8008398 <_free_r+0x4c>
 8008394:	42a3      	cmp	r3, r4
 8008396:	d9fa      	bls.n	800838e <_free_r+0x42>
 8008398:	6811      	ldr	r1, [r2, #0]
 800839a:	1850      	adds	r0, r2, r1
 800839c:	42a0      	cmp	r0, r4
 800839e:	d10b      	bne.n	80083b8 <_free_r+0x6c>
 80083a0:	6820      	ldr	r0, [r4, #0]
 80083a2:	4401      	add	r1, r0
 80083a4:	1850      	adds	r0, r2, r1
 80083a6:	4283      	cmp	r3, r0
 80083a8:	6011      	str	r1, [r2, #0]
 80083aa:	d1e0      	bne.n	800836e <_free_r+0x22>
 80083ac:	6818      	ldr	r0, [r3, #0]
 80083ae:	685b      	ldr	r3, [r3, #4]
 80083b0:	6053      	str	r3, [r2, #4]
 80083b2:	4408      	add	r0, r1
 80083b4:	6010      	str	r0, [r2, #0]
 80083b6:	e7da      	b.n	800836e <_free_r+0x22>
 80083b8:	d902      	bls.n	80083c0 <_free_r+0x74>
 80083ba:	230c      	movs	r3, #12
 80083bc:	602b      	str	r3, [r5, #0]
 80083be:	e7d6      	b.n	800836e <_free_r+0x22>
 80083c0:	6820      	ldr	r0, [r4, #0]
 80083c2:	1821      	adds	r1, r4, r0
 80083c4:	428b      	cmp	r3, r1
 80083c6:	bf04      	itt	eq
 80083c8:	6819      	ldreq	r1, [r3, #0]
 80083ca:	685b      	ldreq	r3, [r3, #4]
 80083cc:	6063      	str	r3, [r4, #4]
 80083ce:	bf04      	itt	eq
 80083d0:	1809      	addeq	r1, r1, r0
 80083d2:	6021      	streq	r1, [r4, #0]
 80083d4:	6054      	str	r4, [r2, #4]
 80083d6:	e7ca      	b.n	800836e <_free_r+0x22>
 80083d8:	bd38      	pop	{r3, r4, r5, pc}
 80083da:	bf00      	nop
 80083dc:	24000584 	.word	0x24000584

080083e0 <malloc>:
 80083e0:	4b02      	ldr	r3, [pc, #8]	@ (80083ec <malloc+0xc>)
 80083e2:	4601      	mov	r1, r0
 80083e4:	6818      	ldr	r0, [r3, #0]
 80083e6:	f000 b825 	b.w	8008434 <_malloc_r>
 80083ea:	bf00      	nop
 80083ec:	2400003c 	.word	0x2400003c

080083f0 <sbrk_aligned>:
 80083f0:	b570      	push	{r4, r5, r6, lr}
 80083f2:	4e0f      	ldr	r6, [pc, #60]	@ (8008430 <sbrk_aligned+0x40>)
 80083f4:	460c      	mov	r4, r1
 80083f6:	6831      	ldr	r1, [r6, #0]
 80083f8:	4605      	mov	r5, r0
 80083fa:	b911      	cbnz	r1, 8008402 <sbrk_aligned+0x12>
 80083fc:	f000 fe92 	bl	8009124 <_sbrk_r>
 8008400:	6030      	str	r0, [r6, #0]
 8008402:	4621      	mov	r1, r4
 8008404:	4628      	mov	r0, r5
 8008406:	f000 fe8d 	bl	8009124 <_sbrk_r>
 800840a:	1c43      	adds	r3, r0, #1
 800840c:	d103      	bne.n	8008416 <sbrk_aligned+0x26>
 800840e:	f04f 34ff 	mov.w	r4, #4294967295
 8008412:	4620      	mov	r0, r4
 8008414:	bd70      	pop	{r4, r5, r6, pc}
 8008416:	1cc4      	adds	r4, r0, #3
 8008418:	f024 0403 	bic.w	r4, r4, #3
 800841c:	42a0      	cmp	r0, r4
 800841e:	d0f8      	beq.n	8008412 <sbrk_aligned+0x22>
 8008420:	1a21      	subs	r1, r4, r0
 8008422:	4628      	mov	r0, r5
 8008424:	f000 fe7e 	bl	8009124 <_sbrk_r>
 8008428:	3001      	adds	r0, #1
 800842a:	d1f2      	bne.n	8008412 <sbrk_aligned+0x22>
 800842c:	e7ef      	b.n	800840e <sbrk_aligned+0x1e>
 800842e:	bf00      	nop
 8008430:	24000580 	.word	0x24000580

08008434 <_malloc_r>:
 8008434:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008438:	1ccd      	adds	r5, r1, #3
 800843a:	f025 0503 	bic.w	r5, r5, #3
 800843e:	3508      	adds	r5, #8
 8008440:	2d0c      	cmp	r5, #12
 8008442:	bf38      	it	cc
 8008444:	250c      	movcc	r5, #12
 8008446:	2d00      	cmp	r5, #0
 8008448:	4606      	mov	r6, r0
 800844a:	db01      	blt.n	8008450 <_malloc_r+0x1c>
 800844c:	42a9      	cmp	r1, r5
 800844e:	d904      	bls.n	800845a <_malloc_r+0x26>
 8008450:	230c      	movs	r3, #12
 8008452:	6033      	str	r3, [r6, #0]
 8008454:	2000      	movs	r0, #0
 8008456:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800845a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008530 <_malloc_r+0xfc>
 800845e:	f000 f869 	bl	8008534 <__malloc_lock>
 8008462:	f8d8 3000 	ldr.w	r3, [r8]
 8008466:	461c      	mov	r4, r3
 8008468:	bb44      	cbnz	r4, 80084bc <_malloc_r+0x88>
 800846a:	4629      	mov	r1, r5
 800846c:	4630      	mov	r0, r6
 800846e:	f7ff ffbf 	bl	80083f0 <sbrk_aligned>
 8008472:	1c43      	adds	r3, r0, #1
 8008474:	4604      	mov	r4, r0
 8008476:	d158      	bne.n	800852a <_malloc_r+0xf6>
 8008478:	f8d8 4000 	ldr.w	r4, [r8]
 800847c:	4627      	mov	r7, r4
 800847e:	2f00      	cmp	r7, #0
 8008480:	d143      	bne.n	800850a <_malloc_r+0xd6>
 8008482:	2c00      	cmp	r4, #0
 8008484:	d04b      	beq.n	800851e <_malloc_r+0xea>
 8008486:	6823      	ldr	r3, [r4, #0]
 8008488:	4639      	mov	r1, r7
 800848a:	4630      	mov	r0, r6
 800848c:	eb04 0903 	add.w	r9, r4, r3
 8008490:	f000 fe48 	bl	8009124 <_sbrk_r>
 8008494:	4581      	cmp	r9, r0
 8008496:	d142      	bne.n	800851e <_malloc_r+0xea>
 8008498:	6821      	ldr	r1, [r4, #0]
 800849a:	1a6d      	subs	r5, r5, r1
 800849c:	4629      	mov	r1, r5
 800849e:	4630      	mov	r0, r6
 80084a0:	f7ff ffa6 	bl	80083f0 <sbrk_aligned>
 80084a4:	3001      	adds	r0, #1
 80084a6:	d03a      	beq.n	800851e <_malloc_r+0xea>
 80084a8:	6823      	ldr	r3, [r4, #0]
 80084aa:	442b      	add	r3, r5
 80084ac:	6023      	str	r3, [r4, #0]
 80084ae:	f8d8 3000 	ldr.w	r3, [r8]
 80084b2:	685a      	ldr	r2, [r3, #4]
 80084b4:	bb62      	cbnz	r2, 8008510 <_malloc_r+0xdc>
 80084b6:	f8c8 7000 	str.w	r7, [r8]
 80084ba:	e00f      	b.n	80084dc <_malloc_r+0xa8>
 80084bc:	6822      	ldr	r2, [r4, #0]
 80084be:	1b52      	subs	r2, r2, r5
 80084c0:	d420      	bmi.n	8008504 <_malloc_r+0xd0>
 80084c2:	2a0b      	cmp	r2, #11
 80084c4:	d917      	bls.n	80084f6 <_malloc_r+0xc2>
 80084c6:	1961      	adds	r1, r4, r5
 80084c8:	42a3      	cmp	r3, r4
 80084ca:	6025      	str	r5, [r4, #0]
 80084cc:	bf18      	it	ne
 80084ce:	6059      	strne	r1, [r3, #4]
 80084d0:	6863      	ldr	r3, [r4, #4]
 80084d2:	bf08      	it	eq
 80084d4:	f8c8 1000 	streq.w	r1, [r8]
 80084d8:	5162      	str	r2, [r4, r5]
 80084da:	604b      	str	r3, [r1, #4]
 80084dc:	4630      	mov	r0, r6
 80084de:	f000 f82f 	bl	8008540 <__malloc_unlock>
 80084e2:	f104 000b 	add.w	r0, r4, #11
 80084e6:	1d23      	adds	r3, r4, #4
 80084e8:	f020 0007 	bic.w	r0, r0, #7
 80084ec:	1ac2      	subs	r2, r0, r3
 80084ee:	bf1c      	itt	ne
 80084f0:	1a1b      	subne	r3, r3, r0
 80084f2:	50a3      	strne	r3, [r4, r2]
 80084f4:	e7af      	b.n	8008456 <_malloc_r+0x22>
 80084f6:	6862      	ldr	r2, [r4, #4]
 80084f8:	42a3      	cmp	r3, r4
 80084fa:	bf0c      	ite	eq
 80084fc:	f8c8 2000 	streq.w	r2, [r8]
 8008500:	605a      	strne	r2, [r3, #4]
 8008502:	e7eb      	b.n	80084dc <_malloc_r+0xa8>
 8008504:	4623      	mov	r3, r4
 8008506:	6864      	ldr	r4, [r4, #4]
 8008508:	e7ae      	b.n	8008468 <_malloc_r+0x34>
 800850a:	463c      	mov	r4, r7
 800850c:	687f      	ldr	r7, [r7, #4]
 800850e:	e7b6      	b.n	800847e <_malloc_r+0x4a>
 8008510:	461a      	mov	r2, r3
 8008512:	685b      	ldr	r3, [r3, #4]
 8008514:	42a3      	cmp	r3, r4
 8008516:	d1fb      	bne.n	8008510 <_malloc_r+0xdc>
 8008518:	2300      	movs	r3, #0
 800851a:	6053      	str	r3, [r2, #4]
 800851c:	e7de      	b.n	80084dc <_malloc_r+0xa8>
 800851e:	230c      	movs	r3, #12
 8008520:	6033      	str	r3, [r6, #0]
 8008522:	4630      	mov	r0, r6
 8008524:	f000 f80c 	bl	8008540 <__malloc_unlock>
 8008528:	e794      	b.n	8008454 <_malloc_r+0x20>
 800852a:	6005      	str	r5, [r0, #0]
 800852c:	e7d6      	b.n	80084dc <_malloc_r+0xa8>
 800852e:	bf00      	nop
 8008530:	24000584 	.word	0x24000584

08008534 <__malloc_lock>:
 8008534:	4801      	ldr	r0, [pc, #4]	@ (800853c <__malloc_lock+0x8>)
 8008536:	f7ff b920 	b.w	800777a <__retarget_lock_acquire_recursive>
 800853a:	bf00      	nop
 800853c:	2400057c 	.word	0x2400057c

08008540 <__malloc_unlock>:
 8008540:	4801      	ldr	r0, [pc, #4]	@ (8008548 <__malloc_unlock+0x8>)
 8008542:	f7ff b91b 	b.w	800777c <__retarget_lock_release_recursive>
 8008546:	bf00      	nop
 8008548:	2400057c 	.word	0x2400057c

0800854c <_Balloc>:
 800854c:	b570      	push	{r4, r5, r6, lr}
 800854e:	69c6      	ldr	r6, [r0, #28]
 8008550:	4604      	mov	r4, r0
 8008552:	460d      	mov	r5, r1
 8008554:	b976      	cbnz	r6, 8008574 <_Balloc+0x28>
 8008556:	2010      	movs	r0, #16
 8008558:	f7ff ff42 	bl	80083e0 <malloc>
 800855c:	4602      	mov	r2, r0
 800855e:	61e0      	str	r0, [r4, #28]
 8008560:	b920      	cbnz	r0, 800856c <_Balloc+0x20>
 8008562:	4b18      	ldr	r3, [pc, #96]	@ (80085c4 <_Balloc+0x78>)
 8008564:	4818      	ldr	r0, [pc, #96]	@ (80085c8 <_Balloc+0x7c>)
 8008566:	216b      	movs	r1, #107	@ 0x6b
 8008568:	f000 fdfa 	bl	8009160 <__assert_func>
 800856c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008570:	6006      	str	r6, [r0, #0]
 8008572:	60c6      	str	r6, [r0, #12]
 8008574:	69e6      	ldr	r6, [r4, #28]
 8008576:	68f3      	ldr	r3, [r6, #12]
 8008578:	b183      	cbz	r3, 800859c <_Balloc+0x50>
 800857a:	69e3      	ldr	r3, [r4, #28]
 800857c:	68db      	ldr	r3, [r3, #12]
 800857e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008582:	b9b8      	cbnz	r0, 80085b4 <_Balloc+0x68>
 8008584:	2101      	movs	r1, #1
 8008586:	fa01 f605 	lsl.w	r6, r1, r5
 800858a:	1d72      	adds	r2, r6, #5
 800858c:	0092      	lsls	r2, r2, #2
 800858e:	4620      	mov	r0, r4
 8008590:	f000 fe04 	bl	800919c <_calloc_r>
 8008594:	b160      	cbz	r0, 80085b0 <_Balloc+0x64>
 8008596:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800859a:	e00e      	b.n	80085ba <_Balloc+0x6e>
 800859c:	2221      	movs	r2, #33	@ 0x21
 800859e:	2104      	movs	r1, #4
 80085a0:	4620      	mov	r0, r4
 80085a2:	f000 fdfb 	bl	800919c <_calloc_r>
 80085a6:	69e3      	ldr	r3, [r4, #28]
 80085a8:	60f0      	str	r0, [r6, #12]
 80085aa:	68db      	ldr	r3, [r3, #12]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d1e4      	bne.n	800857a <_Balloc+0x2e>
 80085b0:	2000      	movs	r0, #0
 80085b2:	bd70      	pop	{r4, r5, r6, pc}
 80085b4:	6802      	ldr	r2, [r0, #0]
 80085b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80085ba:	2300      	movs	r3, #0
 80085bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80085c0:	e7f7      	b.n	80085b2 <_Balloc+0x66>
 80085c2:	bf00      	nop
 80085c4:	08009465 	.word	0x08009465
 80085c8:	080094e5 	.word	0x080094e5

080085cc <_Bfree>:
 80085cc:	b570      	push	{r4, r5, r6, lr}
 80085ce:	69c6      	ldr	r6, [r0, #28]
 80085d0:	4605      	mov	r5, r0
 80085d2:	460c      	mov	r4, r1
 80085d4:	b976      	cbnz	r6, 80085f4 <_Bfree+0x28>
 80085d6:	2010      	movs	r0, #16
 80085d8:	f7ff ff02 	bl	80083e0 <malloc>
 80085dc:	4602      	mov	r2, r0
 80085de:	61e8      	str	r0, [r5, #28]
 80085e0:	b920      	cbnz	r0, 80085ec <_Bfree+0x20>
 80085e2:	4b09      	ldr	r3, [pc, #36]	@ (8008608 <_Bfree+0x3c>)
 80085e4:	4809      	ldr	r0, [pc, #36]	@ (800860c <_Bfree+0x40>)
 80085e6:	218f      	movs	r1, #143	@ 0x8f
 80085e8:	f000 fdba 	bl	8009160 <__assert_func>
 80085ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80085f0:	6006      	str	r6, [r0, #0]
 80085f2:	60c6      	str	r6, [r0, #12]
 80085f4:	b13c      	cbz	r4, 8008606 <_Bfree+0x3a>
 80085f6:	69eb      	ldr	r3, [r5, #28]
 80085f8:	6862      	ldr	r2, [r4, #4]
 80085fa:	68db      	ldr	r3, [r3, #12]
 80085fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008600:	6021      	str	r1, [r4, #0]
 8008602:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008606:	bd70      	pop	{r4, r5, r6, pc}
 8008608:	08009465 	.word	0x08009465
 800860c:	080094e5 	.word	0x080094e5

08008610 <__multadd>:
 8008610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008614:	690d      	ldr	r5, [r1, #16]
 8008616:	4607      	mov	r7, r0
 8008618:	460c      	mov	r4, r1
 800861a:	461e      	mov	r6, r3
 800861c:	f101 0c14 	add.w	ip, r1, #20
 8008620:	2000      	movs	r0, #0
 8008622:	f8dc 3000 	ldr.w	r3, [ip]
 8008626:	b299      	uxth	r1, r3
 8008628:	fb02 6101 	mla	r1, r2, r1, r6
 800862c:	0c1e      	lsrs	r6, r3, #16
 800862e:	0c0b      	lsrs	r3, r1, #16
 8008630:	fb02 3306 	mla	r3, r2, r6, r3
 8008634:	b289      	uxth	r1, r1
 8008636:	3001      	adds	r0, #1
 8008638:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800863c:	4285      	cmp	r5, r0
 800863e:	f84c 1b04 	str.w	r1, [ip], #4
 8008642:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008646:	dcec      	bgt.n	8008622 <__multadd+0x12>
 8008648:	b30e      	cbz	r6, 800868e <__multadd+0x7e>
 800864a:	68a3      	ldr	r3, [r4, #8]
 800864c:	42ab      	cmp	r3, r5
 800864e:	dc19      	bgt.n	8008684 <__multadd+0x74>
 8008650:	6861      	ldr	r1, [r4, #4]
 8008652:	4638      	mov	r0, r7
 8008654:	3101      	adds	r1, #1
 8008656:	f7ff ff79 	bl	800854c <_Balloc>
 800865a:	4680      	mov	r8, r0
 800865c:	b928      	cbnz	r0, 800866a <__multadd+0x5a>
 800865e:	4602      	mov	r2, r0
 8008660:	4b0c      	ldr	r3, [pc, #48]	@ (8008694 <__multadd+0x84>)
 8008662:	480d      	ldr	r0, [pc, #52]	@ (8008698 <__multadd+0x88>)
 8008664:	21ba      	movs	r1, #186	@ 0xba
 8008666:	f000 fd7b 	bl	8009160 <__assert_func>
 800866a:	6922      	ldr	r2, [r4, #16]
 800866c:	3202      	adds	r2, #2
 800866e:	f104 010c 	add.w	r1, r4, #12
 8008672:	0092      	lsls	r2, r2, #2
 8008674:	300c      	adds	r0, #12
 8008676:	f000 fd65 	bl	8009144 <memcpy>
 800867a:	4621      	mov	r1, r4
 800867c:	4638      	mov	r0, r7
 800867e:	f7ff ffa5 	bl	80085cc <_Bfree>
 8008682:	4644      	mov	r4, r8
 8008684:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008688:	3501      	adds	r5, #1
 800868a:	615e      	str	r6, [r3, #20]
 800868c:	6125      	str	r5, [r4, #16]
 800868e:	4620      	mov	r0, r4
 8008690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008694:	080094d4 	.word	0x080094d4
 8008698:	080094e5 	.word	0x080094e5

0800869c <__hi0bits>:
 800869c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80086a0:	4603      	mov	r3, r0
 80086a2:	bf36      	itet	cc
 80086a4:	0403      	lslcc	r3, r0, #16
 80086a6:	2000      	movcs	r0, #0
 80086a8:	2010      	movcc	r0, #16
 80086aa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80086ae:	bf3c      	itt	cc
 80086b0:	021b      	lslcc	r3, r3, #8
 80086b2:	3008      	addcc	r0, #8
 80086b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80086b8:	bf3c      	itt	cc
 80086ba:	011b      	lslcc	r3, r3, #4
 80086bc:	3004      	addcc	r0, #4
 80086be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086c2:	bf3c      	itt	cc
 80086c4:	009b      	lslcc	r3, r3, #2
 80086c6:	3002      	addcc	r0, #2
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	db05      	blt.n	80086d8 <__hi0bits+0x3c>
 80086cc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80086d0:	f100 0001 	add.w	r0, r0, #1
 80086d4:	bf08      	it	eq
 80086d6:	2020      	moveq	r0, #32
 80086d8:	4770      	bx	lr

080086da <__lo0bits>:
 80086da:	6803      	ldr	r3, [r0, #0]
 80086dc:	4602      	mov	r2, r0
 80086de:	f013 0007 	ands.w	r0, r3, #7
 80086e2:	d00b      	beq.n	80086fc <__lo0bits+0x22>
 80086e4:	07d9      	lsls	r1, r3, #31
 80086e6:	d421      	bmi.n	800872c <__lo0bits+0x52>
 80086e8:	0798      	lsls	r0, r3, #30
 80086ea:	bf49      	itett	mi
 80086ec:	085b      	lsrmi	r3, r3, #1
 80086ee:	089b      	lsrpl	r3, r3, #2
 80086f0:	2001      	movmi	r0, #1
 80086f2:	6013      	strmi	r3, [r2, #0]
 80086f4:	bf5c      	itt	pl
 80086f6:	6013      	strpl	r3, [r2, #0]
 80086f8:	2002      	movpl	r0, #2
 80086fa:	4770      	bx	lr
 80086fc:	b299      	uxth	r1, r3
 80086fe:	b909      	cbnz	r1, 8008704 <__lo0bits+0x2a>
 8008700:	0c1b      	lsrs	r3, r3, #16
 8008702:	2010      	movs	r0, #16
 8008704:	b2d9      	uxtb	r1, r3
 8008706:	b909      	cbnz	r1, 800870c <__lo0bits+0x32>
 8008708:	3008      	adds	r0, #8
 800870a:	0a1b      	lsrs	r3, r3, #8
 800870c:	0719      	lsls	r1, r3, #28
 800870e:	bf04      	itt	eq
 8008710:	091b      	lsreq	r3, r3, #4
 8008712:	3004      	addeq	r0, #4
 8008714:	0799      	lsls	r1, r3, #30
 8008716:	bf04      	itt	eq
 8008718:	089b      	lsreq	r3, r3, #2
 800871a:	3002      	addeq	r0, #2
 800871c:	07d9      	lsls	r1, r3, #31
 800871e:	d403      	bmi.n	8008728 <__lo0bits+0x4e>
 8008720:	085b      	lsrs	r3, r3, #1
 8008722:	f100 0001 	add.w	r0, r0, #1
 8008726:	d003      	beq.n	8008730 <__lo0bits+0x56>
 8008728:	6013      	str	r3, [r2, #0]
 800872a:	4770      	bx	lr
 800872c:	2000      	movs	r0, #0
 800872e:	4770      	bx	lr
 8008730:	2020      	movs	r0, #32
 8008732:	4770      	bx	lr

08008734 <__i2b>:
 8008734:	b510      	push	{r4, lr}
 8008736:	460c      	mov	r4, r1
 8008738:	2101      	movs	r1, #1
 800873a:	f7ff ff07 	bl	800854c <_Balloc>
 800873e:	4602      	mov	r2, r0
 8008740:	b928      	cbnz	r0, 800874e <__i2b+0x1a>
 8008742:	4b05      	ldr	r3, [pc, #20]	@ (8008758 <__i2b+0x24>)
 8008744:	4805      	ldr	r0, [pc, #20]	@ (800875c <__i2b+0x28>)
 8008746:	f240 1145 	movw	r1, #325	@ 0x145
 800874a:	f000 fd09 	bl	8009160 <__assert_func>
 800874e:	2301      	movs	r3, #1
 8008750:	6144      	str	r4, [r0, #20]
 8008752:	6103      	str	r3, [r0, #16]
 8008754:	bd10      	pop	{r4, pc}
 8008756:	bf00      	nop
 8008758:	080094d4 	.word	0x080094d4
 800875c:	080094e5 	.word	0x080094e5

08008760 <__multiply>:
 8008760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008764:	4617      	mov	r7, r2
 8008766:	690a      	ldr	r2, [r1, #16]
 8008768:	693b      	ldr	r3, [r7, #16]
 800876a:	429a      	cmp	r2, r3
 800876c:	bfa8      	it	ge
 800876e:	463b      	movge	r3, r7
 8008770:	4689      	mov	r9, r1
 8008772:	bfa4      	itt	ge
 8008774:	460f      	movge	r7, r1
 8008776:	4699      	movge	r9, r3
 8008778:	693d      	ldr	r5, [r7, #16]
 800877a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	6879      	ldr	r1, [r7, #4]
 8008782:	eb05 060a 	add.w	r6, r5, sl
 8008786:	42b3      	cmp	r3, r6
 8008788:	b085      	sub	sp, #20
 800878a:	bfb8      	it	lt
 800878c:	3101      	addlt	r1, #1
 800878e:	f7ff fedd 	bl	800854c <_Balloc>
 8008792:	b930      	cbnz	r0, 80087a2 <__multiply+0x42>
 8008794:	4602      	mov	r2, r0
 8008796:	4b41      	ldr	r3, [pc, #260]	@ (800889c <__multiply+0x13c>)
 8008798:	4841      	ldr	r0, [pc, #260]	@ (80088a0 <__multiply+0x140>)
 800879a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800879e:	f000 fcdf 	bl	8009160 <__assert_func>
 80087a2:	f100 0414 	add.w	r4, r0, #20
 80087a6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80087aa:	4623      	mov	r3, r4
 80087ac:	2200      	movs	r2, #0
 80087ae:	4573      	cmp	r3, lr
 80087b0:	d320      	bcc.n	80087f4 <__multiply+0x94>
 80087b2:	f107 0814 	add.w	r8, r7, #20
 80087b6:	f109 0114 	add.w	r1, r9, #20
 80087ba:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80087be:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80087c2:	9302      	str	r3, [sp, #8]
 80087c4:	1beb      	subs	r3, r5, r7
 80087c6:	3b15      	subs	r3, #21
 80087c8:	f023 0303 	bic.w	r3, r3, #3
 80087cc:	3304      	adds	r3, #4
 80087ce:	3715      	adds	r7, #21
 80087d0:	42bd      	cmp	r5, r7
 80087d2:	bf38      	it	cc
 80087d4:	2304      	movcc	r3, #4
 80087d6:	9301      	str	r3, [sp, #4]
 80087d8:	9b02      	ldr	r3, [sp, #8]
 80087da:	9103      	str	r1, [sp, #12]
 80087dc:	428b      	cmp	r3, r1
 80087de:	d80c      	bhi.n	80087fa <__multiply+0x9a>
 80087e0:	2e00      	cmp	r6, #0
 80087e2:	dd03      	ble.n	80087ec <__multiply+0x8c>
 80087e4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d055      	beq.n	8008898 <__multiply+0x138>
 80087ec:	6106      	str	r6, [r0, #16]
 80087ee:	b005      	add	sp, #20
 80087f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087f4:	f843 2b04 	str.w	r2, [r3], #4
 80087f8:	e7d9      	b.n	80087ae <__multiply+0x4e>
 80087fa:	f8b1 a000 	ldrh.w	sl, [r1]
 80087fe:	f1ba 0f00 	cmp.w	sl, #0
 8008802:	d01f      	beq.n	8008844 <__multiply+0xe4>
 8008804:	46c4      	mov	ip, r8
 8008806:	46a1      	mov	r9, r4
 8008808:	2700      	movs	r7, #0
 800880a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800880e:	f8d9 3000 	ldr.w	r3, [r9]
 8008812:	fa1f fb82 	uxth.w	fp, r2
 8008816:	b29b      	uxth	r3, r3
 8008818:	fb0a 330b 	mla	r3, sl, fp, r3
 800881c:	443b      	add	r3, r7
 800881e:	f8d9 7000 	ldr.w	r7, [r9]
 8008822:	0c12      	lsrs	r2, r2, #16
 8008824:	0c3f      	lsrs	r7, r7, #16
 8008826:	fb0a 7202 	mla	r2, sl, r2, r7
 800882a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800882e:	b29b      	uxth	r3, r3
 8008830:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008834:	4565      	cmp	r5, ip
 8008836:	f849 3b04 	str.w	r3, [r9], #4
 800883a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800883e:	d8e4      	bhi.n	800880a <__multiply+0xaa>
 8008840:	9b01      	ldr	r3, [sp, #4]
 8008842:	50e7      	str	r7, [r4, r3]
 8008844:	9b03      	ldr	r3, [sp, #12]
 8008846:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800884a:	3104      	adds	r1, #4
 800884c:	f1b9 0f00 	cmp.w	r9, #0
 8008850:	d020      	beq.n	8008894 <__multiply+0x134>
 8008852:	6823      	ldr	r3, [r4, #0]
 8008854:	4647      	mov	r7, r8
 8008856:	46a4      	mov	ip, r4
 8008858:	f04f 0a00 	mov.w	sl, #0
 800885c:	f8b7 b000 	ldrh.w	fp, [r7]
 8008860:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8008864:	fb09 220b 	mla	r2, r9, fp, r2
 8008868:	4452      	add	r2, sl
 800886a:	b29b      	uxth	r3, r3
 800886c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008870:	f84c 3b04 	str.w	r3, [ip], #4
 8008874:	f857 3b04 	ldr.w	r3, [r7], #4
 8008878:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800887c:	f8bc 3000 	ldrh.w	r3, [ip]
 8008880:	fb09 330a 	mla	r3, r9, sl, r3
 8008884:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8008888:	42bd      	cmp	r5, r7
 800888a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800888e:	d8e5      	bhi.n	800885c <__multiply+0xfc>
 8008890:	9a01      	ldr	r2, [sp, #4]
 8008892:	50a3      	str	r3, [r4, r2]
 8008894:	3404      	adds	r4, #4
 8008896:	e79f      	b.n	80087d8 <__multiply+0x78>
 8008898:	3e01      	subs	r6, #1
 800889a:	e7a1      	b.n	80087e0 <__multiply+0x80>
 800889c:	080094d4 	.word	0x080094d4
 80088a0:	080094e5 	.word	0x080094e5

080088a4 <__pow5mult>:
 80088a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088a8:	4615      	mov	r5, r2
 80088aa:	f012 0203 	ands.w	r2, r2, #3
 80088ae:	4607      	mov	r7, r0
 80088b0:	460e      	mov	r6, r1
 80088b2:	d007      	beq.n	80088c4 <__pow5mult+0x20>
 80088b4:	4c25      	ldr	r4, [pc, #148]	@ (800894c <__pow5mult+0xa8>)
 80088b6:	3a01      	subs	r2, #1
 80088b8:	2300      	movs	r3, #0
 80088ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80088be:	f7ff fea7 	bl	8008610 <__multadd>
 80088c2:	4606      	mov	r6, r0
 80088c4:	10ad      	asrs	r5, r5, #2
 80088c6:	d03d      	beq.n	8008944 <__pow5mult+0xa0>
 80088c8:	69fc      	ldr	r4, [r7, #28]
 80088ca:	b97c      	cbnz	r4, 80088ec <__pow5mult+0x48>
 80088cc:	2010      	movs	r0, #16
 80088ce:	f7ff fd87 	bl	80083e0 <malloc>
 80088d2:	4602      	mov	r2, r0
 80088d4:	61f8      	str	r0, [r7, #28]
 80088d6:	b928      	cbnz	r0, 80088e4 <__pow5mult+0x40>
 80088d8:	4b1d      	ldr	r3, [pc, #116]	@ (8008950 <__pow5mult+0xac>)
 80088da:	481e      	ldr	r0, [pc, #120]	@ (8008954 <__pow5mult+0xb0>)
 80088dc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80088e0:	f000 fc3e 	bl	8009160 <__assert_func>
 80088e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80088e8:	6004      	str	r4, [r0, #0]
 80088ea:	60c4      	str	r4, [r0, #12]
 80088ec:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80088f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80088f4:	b94c      	cbnz	r4, 800890a <__pow5mult+0x66>
 80088f6:	f240 2171 	movw	r1, #625	@ 0x271
 80088fa:	4638      	mov	r0, r7
 80088fc:	f7ff ff1a 	bl	8008734 <__i2b>
 8008900:	2300      	movs	r3, #0
 8008902:	f8c8 0008 	str.w	r0, [r8, #8]
 8008906:	4604      	mov	r4, r0
 8008908:	6003      	str	r3, [r0, #0]
 800890a:	f04f 0900 	mov.w	r9, #0
 800890e:	07eb      	lsls	r3, r5, #31
 8008910:	d50a      	bpl.n	8008928 <__pow5mult+0x84>
 8008912:	4631      	mov	r1, r6
 8008914:	4622      	mov	r2, r4
 8008916:	4638      	mov	r0, r7
 8008918:	f7ff ff22 	bl	8008760 <__multiply>
 800891c:	4631      	mov	r1, r6
 800891e:	4680      	mov	r8, r0
 8008920:	4638      	mov	r0, r7
 8008922:	f7ff fe53 	bl	80085cc <_Bfree>
 8008926:	4646      	mov	r6, r8
 8008928:	106d      	asrs	r5, r5, #1
 800892a:	d00b      	beq.n	8008944 <__pow5mult+0xa0>
 800892c:	6820      	ldr	r0, [r4, #0]
 800892e:	b938      	cbnz	r0, 8008940 <__pow5mult+0x9c>
 8008930:	4622      	mov	r2, r4
 8008932:	4621      	mov	r1, r4
 8008934:	4638      	mov	r0, r7
 8008936:	f7ff ff13 	bl	8008760 <__multiply>
 800893a:	6020      	str	r0, [r4, #0]
 800893c:	f8c0 9000 	str.w	r9, [r0]
 8008940:	4604      	mov	r4, r0
 8008942:	e7e4      	b.n	800890e <__pow5mult+0x6a>
 8008944:	4630      	mov	r0, r6
 8008946:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800894a:	bf00      	nop
 800894c:	08009598 	.word	0x08009598
 8008950:	08009465 	.word	0x08009465
 8008954:	080094e5 	.word	0x080094e5

08008958 <__lshift>:
 8008958:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800895c:	460c      	mov	r4, r1
 800895e:	6849      	ldr	r1, [r1, #4]
 8008960:	6923      	ldr	r3, [r4, #16]
 8008962:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008966:	68a3      	ldr	r3, [r4, #8]
 8008968:	4607      	mov	r7, r0
 800896a:	4691      	mov	r9, r2
 800896c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008970:	f108 0601 	add.w	r6, r8, #1
 8008974:	42b3      	cmp	r3, r6
 8008976:	db0b      	blt.n	8008990 <__lshift+0x38>
 8008978:	4638      	mov	r0, r7
 800897a:	f7ff fde7 	bl	800854c <_Balloc>
 800897e:	4605      	mov	r5, r0
 8008980:	b948      	cbnz	r0, 8008996 <__lshift+0x3e>
 8008982:	4602      	mov	r2, r0
 8008984:	4b28      	ldr	r3, [pc, #160]	@ (8008a28 <__lshift+0xd0>)
 8008986:	4829      	ldr	r0, [pc, #164]	@ (8008a2c <__lshift+0xd4>)
 8008988:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800898c:	f000 fbe8 	bl	8009160 <__assert_func>
 8008990:	3101      	adds	r1, #1
 8008992:	005b      	lsls	r3, r3, #1
 8008994:	e7ee      	b.n	8008974 <__lshift+0x1c>
 8008996:	2300      	movs	r3, #0
 8008998:	f100 0114 	add.w	r1, r0, #20
 800899c:	f100 0210 	add.w	r2, r0, #16
 80089a0:	4618      	mov	r0, r3
 80089a2:	4553      	cmp	r3, sl
 80089a4:	db33      	blt.n	8008a0e <__lshift+0xb6>
 80089a6:	6920      	ldr	r0, [r4, #16]
 80089a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80089ac:	f104 0314 	add.w	r3, r4, #20
 80089b0:	f019 091f 	ands.w	r9, r9, #31
 80089b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80089b8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80089bc:	d02b      	beq.n	8008a16 <__lshift+0xbe>
 80089be:	f1c9 0e20 	rsb	lr, r9, #32
 80089c2:	468a      	mov	sl, r1
 80089c4:	2200      	movs	r2, #0
 80089c6:	6818      	ldr	r0, [r3, #0]
 80089c8:	fa00 f009 	lsl.w	r0, r0, r9
 80089cc:	4310      	orrs	r0, r2
 80089ce:	f84a 0b04 	str.w	r0, [sl], #4
 80089d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80089d6:	459c      	cmp	ip, r3
 80089d8:	fa22 f20e 	lsr.w	r2, r2, lr
 80089dc:	d8f3      	bhi.n	80089c6 <__lshift+0x6e>
 80089de:	ebac 0304 	sub.w	r3, ip, r4
 80089e2:	3b15      	subs	r3, #21
 80089e4:	f023 0303 	bic.w	r3, r3, #3
 80089e8:	3304      	adds	r3, #4
 80089ea:	f104 0015 	add.w	r0, r4, #21
 80089ee:	4560      	cmp	r0, ip
 80089f0:	bf88      	it	hi
 80089f2:	2304      	movhi	r3, #4
 80089f4:	50ca      	str	r2, [r1, r3]
 80089f6:	b10a      	cbz	r2, 80089fc <__lshift+0xa4>
 80089f8:	f108 0602 	add.w	r6, r8, #2
 80089fc:	3e01      	subs	r6, #1
 80089fe:	4638      	mov	r0, r7
 8008a00:	612e      	str	r6, [r5, #16]
 8008a02:	4621      	mov	r1, r4
 8008a04:	f7ff fde2 	bl	80085cc <_Bfree>
 8008a08:	4628      	mov	r0, r5
 8008a0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a0e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008a12:	3301      	adds	r3, #1
 8008a14:	e7c5      	b.n	80089a2 <__lshift+0x4a>
 8008a16:	3904      	subs	r1, #4
 8008a18:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a1c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008a20:	459c      	cmp	ip, r3
 8008a22:	d8f9      	bhi.n	8008a18 <__lshift+0xc0>
 8008a24:	e7ea      	b.n	80089fc <__lshift+0xa4>
 8008a26:	bf00      	nop
 8008a28:	080094d4 	.word	0x080094d4
 8008a2c:	080094e5 	.word	0x080094e5

08008a30 <__mcmp>:
 8008a30:	690a      	ldr	r2, [r1, #16]
 8008a32:	4603      	mov	r3, r0
 8008a34:	6900      	ldr	r0, [r0, #16]
 8008a36:	1a80      	subs	r0, r0, r2
 8008a38:	b530      	push	{r4, r5, lr}
 8008a3a:	d10e      	bne.n	8008a5a <__mcmp+0x2a>
 8008a3c:	3314      	adds	r3, #20
 8008a3e:	3114      	adds	r1, #20
 8008a40:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008a44:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008a48:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008a4c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008a50:	4295      	cmp	r5, r2
 8008a52:	d003      	beq.n	8008a5c <__mcmp+0x2c>
 8008a54:	d205      	bcs.n	8008a62 <__mcmp+0x32>
 8008a56:	f04f 30ff 	mov.w	r0, #4294967295
 8008a5a:	bd30      	pop	{r4, r5, pc}
 8008a5c:	42a3      	cmp	r3, r4
 8008a5e:	d3f3      	bcc.n	8008a48 <__mcmp+0x18>
 8008a60:	e7fb      	b.n	8008a5a <__mcmp+0x2a>
 8008a62:	2001      	movs	r0, #1
 8008a64:	e7f9      	b.n	8008a5a <__mcmp+0x2a>
	...

08008a68 <__mdiff>:
 8008a68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a6c:	4689      	mov	r9, r1
 8008a6e:	4606      	mov	r6, r0
 8008a70:	4611      	mov	r1, r2
 8008a72:	4648      	mov	r0, r9
 8008a74:	4614      	mov	r4, r2
 8008a76:	f7ff ffdb 	bl	8008a30 <__mcmp>
 8008a7a:	1e05      	subs	r5, r0, #0
 8008a7c:	d112      	bne.n	8008aa4 <__mdiff+0x3c>
 8008a7e:	4629      	mov	r1, r5
 8008a80:	4630      	mov	r0, r6
 8008a82:	f7ff fd63 	bl	800854c <_Balloc>
 8008a86:	4602      	mov	r2, r0
 8008a88:	b928      	cbnz	r0, 8008a96 <__mdiff+0x2e>
 8008a8a:	4b3f      	ldr	r3, [pc, #252]	@ (8008b88 <__mdiff+0x120>)
 8008a8c:	f240 2137 	movw	r1, #567	@ 0x237
 8008a90:	483e      	ldr	r0, [pc, #248]	@ (8008b8c <__mdiff+0x124>)
 8008a92:	f000 fb65 	bl	8009160 <__assert_func>
 8008a96:	2301      	movs	r3, #1
 8008a98:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008a9c:	4610      	mov	r0, r2
 8008a9e:	b003      	add	sp, #12
 8008aa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aa4:	bfbc      	itt	lt
 8008aa6:	464b      	movlt	r3, r9
 8008aa8:	46a1      	movlt	r9, r4
 8008aaa:	4630      	mov	r0, r6
 8008aac:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008ab0:	bfba      	itte	lt
 8008ab2:	461c      	movlt	r4, r3
 8008ab4:	2501      	movlt	r5, #1
 8008ab6:	2500      	movge	r5, #0
 8008ab8:	f7ff fd48 	bl	800854c <_Balloc>
 8008abc:	4602      	mov	r2, r0
 8008abe:	b918      	cbnz	r0, 8008ac8 <__mdiff+0x60>
 8008ac0:	4b31      	ldr	r3, [pc, #196]	@ (8008b88 <__mdiff+0x120>)
 8008ac2:	f240 2145 	movw	r1, #581	@ 0x245
 8008ac6:	e7e3      	b.n	8008a90 <__mdiff+0x28>
 8008ac8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008acc:	6926      	ldr	r6, [r4, #16]
 8008ace:	60c5      	str	r5, [r0, #12]
 8008ad0:	f109 0310 	add.w	r3, r9, #16
 8008ad4:	f109 0514 	add.w	r5, r9, #20
 8008ad8:	f104 0e14 	add.w	lr, r4, #20
 8008adc:	f100 0b14 	add.w	fp, r0, #20
 8008ae0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008ae4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008ae8:	9301      	str	r3, [sp, #4]
 8008aea:	46d9      	mov	r9, fp
 8008aec:	f04f 0c00 	mov.w	ip, #0
 8008af0:	9b01      	ldr	r3, [sp, #4]
 8008af2:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008af6:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008afa:	9301      	str	r3, [sp, #4]
 8008afc:	fa1f f38a 	uxth.w	r3, sl
 8008b00:	4619      	mov	r1, r3
 8008b02:	b283      	uxth	r3, r0
 8008b04:	1acb      	subs	r3, r1, r3
 8008b06:	0c00      	lsrs	r0, r0, #16
 8008b08:	4463      	add	r3, ip
 8008b0a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008b0e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008b12:	b29b      	uxth	r3, r3
 8008b14:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008b18:	4576      	cmp	r6, lr
 8008b1a:	f849 3b04 	str.w	r3, [r9], #4
 8008b1e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008b22:	d8e5      	bhi.n	8008af0 <__mdiff+0x88>
 8008b24:	1b33      	subs	r3, r6, r4
 8008b26:	3b15      	subs	r3, #21
 8008b28:	f023 0303 	bic.w	r3, r3, #3
 8008b2c:	3415      	adds	r4, #21
 8008b2e:	3304      	adds	r3, #4
 8008b30:	42a6      	cmp	r6, r4
 8008b32:	bf38      	it	cc
 8008b34:	2304      	movcc	r3, #4
 8008b36:	441d      	add	r5, r3
 8008b38:	445b      	add	r3, fp
 8008b3a:	461e      	mov	r6, r3
 8008b3c:	462c      	mov	r4, r5
 8008b3e:	4544      	cmp	r4, r8
 8008b40:	d30e      	bcc.n	8008b60 <__mdiff+0xf8>
 8008b42:	f108 0103 	add.w	r1, r8, #3
 8008b46:	1b49      	subs	r1, r1, r5
 8008b48:	f021 0103 	bic.w	r1, r1, #3
 8008b4c:	3d03      	subs	r5, #3
 8008b4e:	45a8      	cmp	r8, r5
 8008b50:	bf38      	it	cc
 8008b52:	2100      	movcc	r1, #0
 8008b54:	440b      	add	r3, r1
 8008b56:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008b5a:	b191      	cbz	r1, 8008b82 <__mdiff+0x11a>
 8008b5c:	6117      	str	r7, [r2, #16]
 8008b5e:	e79d      	b.n	8008a9c <__mdiff+0x34>
 8008b60:	f854 1b04 	ldr.w	r1, [r4], #4
 8008b64:	46e6      	mov	lr, ip
 8008b66:	0c08      	lsrs	r0, r1, #16
 8008b68:	fa1c fc81 	uxtah	ip, ip, r1
 8008b6c:	4471      	add	r1, lr
 8008b6e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008b72:	b289      	uxth	r1, r1
 8008b74:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008b78:	f846 1b04 	str.w	r1, [r6], #4
 8008b7c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008b80:	e7dd      	b.n	8008b3e <__mdiff+0xd6>
 8008b82:	3f01      	subs	r7, #1
 8008b84:	e7e7      	b.n	8008b56 <__mdiff+0xee>
 8008b86:	bf00      	nop
 8008b88:	080094d4 	.word	0x080094d4
 8008b8c:	080094e5 	.word	0x080094e5

08008b90 <__d2b>:
 8008b90:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008b94:	460f      	mov	r7, r1
 8008b96:	2101      	movs	r1, #1
 8008b98:	ec59 8b10 	vmov	r8, r9, d0
 8008b9c:	4616      	mov	r6, r2
 8008b9e:	f7ff fcd5 	bl	800854c <_Balloc>
 8008ba2:	4604      	mov	r4, r0
 8008ba4:	b930      	cbnz	r0, 8008bb4 <__d2b+0x24>
 8008ba6:	4602      	mov	r2, r0
 8008ba8:	4b23      	ldr	r3, [pc, #140]	@ (8008c38 <__d2b+0xa8>)
 8008baa:	4824      	ldr	r0, [pc, #144]	@ (8008c3c <__d2b+0xac>)
 8008bac:	f240 310f 	movw	r1, #783	@ 0x30f
 8008bb0:	f000 fad6 	bl	8009160 <__assert_func>
 8008bb4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008bb8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008bbc:	b10d      	cbz	r5, 8008bc2 <__d2b+0x32>
 8008bbe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008bc2:	9301      	str	r3, [sp, #4]
 8008bc4:	f1b8 0300 	subs.w	r3, r8, #0
 8008bc8:	d023      	beq.n	8008c12 <__d2b+0x82>
 8008bca:	4668      	mov	r0, sp
 8008bcc:	9300      	str	r3, [sp, #0]
 8008bce:	f7ff fd84 	bl	80086da <__lo0bits>
 8008bd2:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008bd6:	b1d0      	cbz	r0, 8008c0e <__d2b+0x7e>
 8008bd8:	f1c0 0320 	rsb	r3, r0, #32
 8008bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8008be0:	430b      	orrs	r3, r1
 8008be2:	40c2      	lsrs	r2, r0
 8008be4:	6163      	str	r3, [r4, #20]
 8008be6:	9201      	str	r2, [sp, #4]
 8008be8:	9b01      	ldr	r3, [sp, #4]
 8008bea:	61a3      	str	r3, [r4, #24]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	bf0c      	ite	eq
 8008bf0:	2201      	moveq	r2, #1
 8008bf2:	2202      	movne	r2, #2
 8008bf4:	6122      	str	r2, [r4, #16]
 8008bf6:	b1a5      	cbz	r5, 8008c22 <__d2b+0x92>
 8008bf8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008bfc:	4405      	add	r5, r0
 8008bfe:	603d      	str	r5, [r7, #0]
 8008c00:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008c04:	6030      	str	r0, [r6, #0]
 8008c06:	4620      	mov	r0, r4
 8008c08:	b003      	add	sp, #12
 8008c0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008c0e:	6161      	str	r1, [r4, #20]
 8008c10:	e7ea      	b.n	8008be8 <__d2b+0x58>
 8008c12:	a801      	add	r0, sp, #4
 8008c14:	f7ff fd61 	bl	80086da <__lo0bits>
 8008c18:	9b01      	ldr	r3, [sp, #4]
 8008c1a:	6163      	str	r3, [r4, #20]
 8008c1c:	3020      	adds	r0, #32
 8008c1e:	2201      	movs	r2, #1
 8008c20:	e7e8      	b.n	8008bf4 <__d2b+0x64>
 8008c22:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008c26:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008c2a:	6038      	str	r0, [r7, #0]
 8008c2c:	6918      	ldr	r0, [r3, #16]
 8008c2e:	f7ff fd35 	bl	800869c <__hi0bits>
 8008c32:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008c36:	e7e5      	b.n	8008c04 <__d2b+0x74>
 8008c38:	080094d4 	.word	0x080094d4
 8008c3c:	080094e5 	.word	0x080094e5

08008c40 <__sfputc_r>:
 8008c40:	6893      	ldr	r3, [r2, #8]
 8008c42:	3b01      	subs	r3, #1
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	b410      	push	{r4}
 8008c48:	6093      	str	r3, [r2, #8]
 8008c4a:	da08      	bge.n	8008c5e <__sfputc_r+0x1e>
 8008c4c:	6994      	ldr	r4, [r2, #24]
 8008c4e:	42a3      	cmp	r3, r4
 8008c50:	db01      	blt.n	8008c56 <__sfputc_r+0x16>
 8008c52:	290a      	cmp	r1, #10
 8008c54:	d103      	bne.n	8008c5e <__sfputc_r+0x1e>
 8008c56:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c5a:	f7fe bc7c 	b.w	8007556 <__swbuf_r>
 8008c5e:	6813      	ldr	r3, [r2, #0]
 8008c60:	1c58      	adds	r0, r3, #1
 8008c62:	6010      	str	r0, [r2, #0]
 8008c64:	7019      	strb	r1, [r3, #0]
 8008c66:	4608      	mov	r0, r1
 8008c68:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c6c:	4770      	bx	lr

08008c6e <__sfputs_r>:
 8008c6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c70:	4606      	mov	r6, r0
 8008c72:	460f      	mov	r7, r1
 8008c74:	4614      	mov	r4, r2
 8008c76:	18d5      	adds	r5, r2, r3
 8008c78:	42ac      	cmp	r4, r5
 8008c7a:	d101      	bne.n	8008c80 <__sfputs_r+0x12>
 8008c7c:	2000      	movs	r0, #0
 8008c7e:	e007      	b.n	8008c90 <__sfputs_r+0x22>
 8008c80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c84:	463a      	mov	r2, r7
 8008c86:	4630      	mov	r0, r6
 8008c88:	f7ff ffda 	bl	8008c40 <__sfputc_r>
 8008c8c:	1c43      	adds	r3, r0, #1
 8008c8e:	d1f3      	bne.n	8008c78 <__sfputs_r+0xa>
 8008c90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008c94 <_vfiprintf_r>:
 8008c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c98:	460d      	mov	r5, r1
 8008c9a:	b09d      	sub	sp, #116	@ 0x74
 8008c9c:	4614      	mov	r4, r2
 8008c9e:	4698      	mov	r8, r3
 8008ca0:	4606      	mov	r6, r0
 8008ca2:	b118      	cbz	r0, 8008cac <_vfiprintf_r+0x18>
 8008ca4:	6a03      	ldr	r3, [r0, #32]
 8008ca6:	b90b      	cbnz	r3, 8008cac <_vfiprintf_r+0x18>
 8008ca8:	f7fe fb6c 	bl	8007384 <__sinit>
 8008cac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008cae:	07d9      	lsls	r1, r3, #31
 8008cb0:	d405      	bmi.n	8008cbe <_vfiprintf_r+0x2a>
 8008cb2:	89ab      	ldrh	r3, [r5, #12]
 8008cb4:	059a      	lsls	r2, r3, #22
 8008cb6:	d402      	bmi.n	8008cbe <_vfiprintf_r+0x2a>
 8008cb8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008cba:	f7fe fd5e 	bl	800777a <__retarget_lock_acquire_recursive>
 8008cbe:	89ab      	ldrh	r3, [r5, #12]
 8008cc0:	071b      	lsls	r3, r3, #28
 8008cc2:	d501      	bpl.n	8008cc8 <_vfiprintf_r+0x34>
 8008cc4:	692b      	ldr	r3, [r5, #16]
 8008cc6:	b99b      	cbnz	r3, 8008cf0 <_vfiprintf_r+0x5c>
 8008cc8:	4629      	mov	r1, r5
 8008cca:	4630      	mov	r0, r6
 8008ccc:	f7fe fc82 	bl	80075d4 <__swsetup_r>
 8008cd0:	b170      	cbz	r0, 8008cf0 <_vfiprintf_r+0x5c>
 8008cd2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008cd4:	07dc      	lsls	r4, r3, #31
 8008cd6:	d504      	bpl.n	8008ce2 <_vfiprintf_r+0x4e>
 8008cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8008cdc:	b01d      	add	sp, #116	@ 0x74
 8008cde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ce2:	89ab      	ldrh	r3, [r5, #12]
 8008ce4:	0598      	lsls	r0, r3, #22
 8008ce6:	d4f7      	bmi.n	8008cd8 <_vfiprintf_r+0x44>
 8008ce8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008cea:	f7fe fd47 	bl	800777c <__retarget_lock_release_recursive>
 8008cee:	e7f3      	b.n	8008cd8 <_vfiprintf_r+0x44>
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	9309      	str	r3, [sp, #36]	@ 0x24
 8008cf4:	2320      	movs	r3, #32
 8008cf6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008cfa:	f8cd 800c 	str.w	r8, [sp, #12]
 8008cfe:	2330      	movs	r3, #48	@ 0x30
 8008d00:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008eb0 <_vfiprintf_r+0x21c>
 8008d04:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008d08:	f04f 0901 	mov.w	r9, #1
 8008d0c:	4623      	mov	r3, r4
 8008d0e:	469a      	mov	sl, r3
 8008d10:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d14:	b10a      	cbz	r2, 8008d1a <_vfiprintf_r+0x86>
 8008d16:	2a25      	cmp	r2, #37	@ 0x25
 8008d18:	d1f9      	bne.n	8008d0e <_vfiprintf_r+0x7a>
 8008d1a:	ebba 0b04 	subs.w	fp, sl, r4
 8008d1e:	d00b      	beq.n	8008d38 <_vfiprintf_r+0xa4>
 8008d20:	465b      	mov	r3, fp
 8008d22:	4622      	mov	r2, r4
 8008d24:	4629      	mov	r1, r5
 8008d26:	4630      	mov	r0, r6
 8008d28:	f7ff ffa1 	bl	8008c6e <__sfputs_r>
 8008d2c:	3001      	adds	r0, #1
 8008d2e:	f000 80a7 	beq.w	8008e80 <_vfiprintf_r+0x1ec>
 8008d32:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008d34:	445a      	add	r2, fp
 8008d36:	9209      	str	r2, [sp, #36]	@ 0x24
 8008d38:	f89a 3000 	ldrb.w	r3, [sl]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	f000 809f 	beq.w	8008e80 <_vfiprintf_r+0x1ec>
 8008d42:	2300      	movs	r3, #0
 8008d44:	f04f 32ff 	mov.w	r2, #4294967295
 8008d48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d4c:	f10a 0a01 	add.w	sl, sl, #1
 8008d50:	9304      	str	r3, [sp, #16]
 8008d52:	9307      	str	r3, [sp, #28]
 8008d54:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008d58:	931a      	str	r3, [sp, #104]	@ 0x68
 8008d5a:	4654      	mov	r4, sl
 8008d5c:	2205      	movs	r2, #5
 8008d5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d62:	4853      	ldr	r0, [pc, #332]	@ (8008eb0 <_vfiprintf_r+0x21c>)
 8008d64:	f7f7 fabc 	bl	80002e0 <memchr>
 8008d68:	9a04      	ldr	r2, [sp, #16]
 8008d6a:	b9d8      	cbnz	r0, 8008da4 <_vfiprintf_r+0x110>
 8008d6c:	06d1      	lsls	r1, r2, #27
 8008d6e:	bf44      	itt	mi
 8008d70:	2320      	movmi	r3, #32
 8008d72:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d76:	0713      	lsls	r3, r2, #28
 8008d78:	bf44      	itt	mi
 8008d7a:	232b      	movmi	r3, #43	@ 0x2b
 8008d7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d80:	f89a 3000 	ldrb.w	r3, [sl]
 8008d84:	2b2a      	cmp	r3, #42	@ 0x2a
 8008d86:	d015      	beq.n	8008db4 <_vfiprintf_r+0x120>
 8008d88:	9a07      	ldr	r2, [sp, #28]
 8008d8a:	4654      	mov	r4, sl
 8008d8c:	2000      	movs	r0, #0
 8008d8e:	f04f 0c0a 	mov.w	ip, #10
 8008d92:	4621      	mov	r1, r4
 8008d94:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d98:	3b30      	subs	r3, #48	@ 0x30
 8008d9a:	2b09      	cmp	r3, #9
 8008d9c:	d94b      	bls.n	8008e36 <_vfiprintf_r+0x1a2>
 8008d9e:	b1b0      	cbz	r0, 8008dce <_vfiprintf_r+0x13a>
 8008da0:	9207      	str	r2, [sp, #28]
 8008da2:	e014      	b.n	8008dce <_vfiprintf_r+0x13a>
 8008da4:	eba0 0308 	sub.w	r3, r0, r8
 8008da8:	fa09 f303 	lsl.w	r3, r9, r3
 8008dac:	4313      	orrs	r3, r2
 8008dae:	9304      	str	r3, [sp, #16]
 8008db0:	46a2      	mov	sl, r4
 8008db2:	e7d2      	b.n	8008d5a <_vfiprintf_r+0xc6>
 8008db4:	9b03      	ldr	r3, [sp, #12]
 8008db6:	1d19      	adds	r1, r3, #4
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	9103      	str	r1, [sp, #12]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	bfbb      	ittet	lt
 8008dc0:	425b      	neglt	r3, r3
 8008dc2:	f042 0202 	orrlt.w	r2, r2, #2
 8008dc6:	9307      	strge	r3, [sp, #28]
 8008dc8:	9307      	strlt	r3, [sp, #28]
 8008dca:	bfb8      	it	lt
 8008dcc:	9204      	strlt	r2, [sp, #16]
 8008dce:	7823      	ldrb	r3, [r4, #0]
 8008dd0:	2b2e      	cmp	r3, #46	@ 0x2e
 8008dd2:	d10a      	bne.n	8008dea <_vfiprintf_r+0x156>
 8008dd4:	7863      	ldrb	r3, [r4, #1]
 8008dd6:	2b2a      	cmp	r3, #42	@ 0x2a
 8008dd8:	d132      	bne.n	8008e40 <_vfiprintf_r+0x1ac>
 8008dda:	9b03      	ldr	r3, [sp, #12]
 8008ddc:	1d1a      	adds	r2, r3, #4
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	9203      	str	r2, [sp, #12]
 8008de2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008de6:	3402      	adds	r4, #2
 8008de8:	9305      	str	r3, [sp, #20]
 8008dea:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008ec0 <_vfiprintf_r+0x22c>
 8008dee:	7821      	ldrb	r1, [r4, #0]
 8008df0:	2203      	movs	r2, #3
 8008df2:	4650      	mov	r0, sl
 8008df4:	f7f7 fa74 	bl	80002e0 <memchr>
 8008df8:	b138      	cbz	r0, 8008e0a <_vfiprintf_r+0x176>
 8008dfa:	9b04      	ldr	r3, [sp, #16]
 8008dfc:	eba0 000a 	sub.w	r0, r0, sl
 8008e00:	2240      	movs	r2, #64	@ 0x40
 8008e02:	4082      	lsls	r2, r0
 8008e04:	4313      	orrs	r3, r2
 8008e06:	3401      	adds	r4, #1
 8008e08:	9304      	str	r3, [sp, #16]
 8008e0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e0e:	4829      	ldr	r0, [pc, #164]	@ (8008eb4 <_vfiprintf_r+0x220>)
 8008e10:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008e14:	2206      	movs	r2, #6
 8008e16:	f7f7 fa63 	bl	80002e0 <memchr>
 8008e1a:	2800      	cmp	r0, #0
 8008e1c:	d03f      	beq.n	8008e9e <_vfiprintf_r+0x20a>
 8008e1e:	4b26      	ldr	r3, [pc, #152]	@ (8008eb8 <_vfiprintf_r+0x224>)
 8008e20:	bb1b      	cbnz	r3, 8008e6a <_vfiprintf_r+0x1d6>
 8008e22:	9b03      	ldr	r3, [sp, #12]
 8008e24:	3307      	adds	r3, #7
 8008e26:	f023 0307 	bic.w	r3, r3, #7
 8008e2a:	3308      	adds	r3, #8
 8008e2c:	9303      	str	r3, [sp, #12]
 8008e2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e30:	443b      	add	r3, r7
 8008e32:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e34:	e76a      	b.n	8008d0c <_vfiprintf_r+0x78>
 8008e36:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e3a:	460c      	mov	r4, r1
 8008e3c:	2001      	movs	r0, #1
 8008e3e:	e7a8      	b.n	8008d92 <_vfiprintf_r+0xfe>
 8008e40:	2300      	movs	r3, #0
 8008e42:	3401      	adds	r4, #1
 8008e44:	9305      	str	r3, [sp, #20]
 8008e46:	4619      	mov	r1, r3
 8008e48:	f04f 0c0a 	mov.w	ip, #10
 8008e4c:	4620      	mov	r0, r4
 8008e4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e52:	3a30      	subs	r2, #48	@ 0x30
 8008e54:	2a09      	cmp	r2, #9
 8008e56:	d903      	bls.n	8008e60 <_vfiprintf_r+0x1cc>
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d0c6      	beq.n	8008dea <_vfiprintf_r+0x156>
 8008e5c:	9105      	str	r1, [sp, #20]
 8008e5e:	e7c4      	b.n	8008dea <_vfiprintf_r+0x156>
 8008e60:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e64:	4604      	mov	r4, r0
 8008e66:	2301      	movs	r3, #1
 8008e68:	e7f0      	b.n	8008e4c <_vfiprintf_r+0x1b8>
 8008e6a:	ab03      	add	r3, sp, #12
 8008e6c:	9300      	str	r3, [sp, #0]
 8008e6e:	462a      	mov	r2, r5
 8008e70:	4b12      	ldr	r3, [pc, #72]	@ (8008ebc <_vfiprintf_r+0x228>)
 8008e72:	a904      	add	r1, sp, #16
 8008e74:	4630      	mov	r0, r6
 8008e76:	f7fd fe53 	bl	8006b20 <_printf_float>
 8008e7a:	4607      	mov	r7, r0
 8008e7c:	1c78      	adds	r0, r7, #1
 8008e7e:	d1d6      	bne.n	8008e2e <_vfiprintf_r+0x19a>
 8008e80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008e82:	07d9      	lsls	r1, r3, #31
 8008e84:	d405      	bmi.n	8008e92 <_vfiprintf_r+0x1fe>
 8008e86:	89ab      	ldrh	r3, [r5, #12]
 8008e88:	059a      	lsls	r2, r3, #22
 8008e8a:	d402      	bmi.n	8008e92 <_vfiprintf_r+0x1fe>
 8008e8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008e8e:	f7fe fc75 	bl	800777c <__retarget_lock_release_recursive>
 8008e92:	89ab      	ldrh	r3, [r5, #12]
 8008e94:	065b      	lsls	r3, r3, #25
 8008e96:	f53f af1f 	bmi.w	8008cd8 <_vfiprintf_r+0x44>
 8008e9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008e9c:	e71e      	b.n	8008cdc <_vfiprintf_r+0x48>
 8008e9e:	ab03      	add	r3, sp, #12
 8008ea0:	9300      	str	r3, [sp, #0]
 8008ea2:	462a      	mov	r2, r5
 8008ea4:	4b05      	ldr	r3, [pc, #20]	@ (8008ebc <_vfiprintf_r+0x228>)
 8008ea6:	a904      	add	r1, sp, #16
 8008ea8:	4630      	mov	r0, r6
 8008eaa:	f7fe f8c1 	bl	8007030 <_printf_i>
 8008eae:	e7e4      	b.n	8008e7a <_vfiprintf_r+0x1e6>
 8008eb0:	0800953e 	.word	0x0800953e
 8008eb4:	08009548 	.word	0x08009548
 8008eb8:	08006b21 	.word	0x08006b21
 8008ebc:	08008c6f 	.word	0x08008c6f
 8008ec0:	08009544 	.word	0x08009544

08008ec4 <__sflush_r>:
 8008ec4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ecc:	0716      	lsls	r6, r2, #28
 8008ece:	4605      	mov	r5, r0
 8008ed0:	460c      	mov	r4, r1
 8008ed2:	d454      	bmi.n	8008f7e <__sflush_r+0xba>
 8008ed4:	684b      	ldr	r3, [r1, #4]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	dc02      	bgt.n	8008ee0 <__sflush_r+0x1c>
 8008eda:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	dd48      	ble.n	8008f72 <__sflush_r+0xae>
 8008ee0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008ee2:	2e00      	cmp	r6, #0
 8008ee4:	d045      	beq.n	8008f72 <__sflush_r+0xae>
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008eec:	682f      	ldr	r7, [r5, #0]
 8008eee:	6a21      	ldr	r1, [r4, #32]
 8008ef0:	602b      	str	r3, [r5, #0]
 8008ef2:	d030      	beq.n	8008f56 <__sflush_r+0x92>
 8008ef4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008ef6:	89a3      	ldrh	r3, [r4, #12]
 8008ef8:	0759      	lsls	r1, r3, #29
 8008efa:	d505      	bpl.n	8008f08 <__sflush_r+0x44>
 8008efc:	6863      	ldr	r3, [r4, #4]
 8008efe:	1ad2      	subs	r2, r2, r3
 8008f00:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008f02:	b10b      	cbz	r3, 8008f08 <__sflush_r+0x44>
 8008f04:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008f06:	1ad2      	subs	r2, r2, r3
 8008f08:	2300      	movs	r3, #0
 8008f0a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008f0c:	6a21      	ldr	r1, [r4, #32]
 8008f0e:	4628      	mov	r0, r5
 8008f10:	47b0      	blx	r6
 8008f12:	1c43      	adds	r3, r0, #1
 8008f14:	89a3      	ldrh	r3, [r4, #12]
 8008f16:	d106      	bne.n	8008f26 <__sflush_r+0x62>
 8008f18:	6829      	ldr	r1, [r5, #0]
 8008f1a:	291d      	cmp	r1, #29
 8008f1c:	d82b      	bhi.n	8008f76 <__sflush_r+0xb2>
 8008f1e:	4a2a      	ldr	r2, [pc, #168]	@ (8008fc8 <__sflush_r+0x104>)
 8008f20:	40ca      	lsrs	r2, r1
 8008f22:	07d6      	lsls	r6, r2, #31
 8008f24:	d527      	bpl.n	8008f76 <__sflush_r+0xb2>
 8008f26:	2200      	movs	r2, #0
 8008f28:	6062      	str	r2, [r4, #4]
 8008f2a:	04d9      	lsls	r1, r3, #19
 8008f2c:	6922      	ldr	r2, [r4, #16]
 8008f2e:	6022      	str	r2, [r4, #0]
 8008f30:	d504      	bpl.n	8008f3c <__sflush_r+0x78>
 8008f32:	1c42      	adds	r2, r0, #1
 8008f34:	d101      	bne.n	8008f3a <__sflush_r+0x76>
 8008f36:	682b      	ldr	r3, [r5, #0]
 8008f38:	b903      	cbnz	r3, 8008f3c <__sflush_r+0x78>
 8008f3a:	6560      	str	r0, [r4, #84]	@ 0x54
 8008f3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008f3e:	602f      	str	r7, [r5, #0]
 8008f40:	b1b9      	cbz	r1, 8008f72 <__sflush_r+0xae>
 8008f42:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008f46:	4299      	cmp	r1, r3
 8008f48:	d002      	beq.n	8008f50 <__sflush_r+0x8c>
 8008f4a:	4628      	mov	r0, r5
 8008f4c:	f7ff f9fe 	bl	800834c <_free_r>
 8008f50:	2300      	movs	r3, #0
 8008f52:	6363      	str	r3, [r4, #52]	@ 0x34
 8008f54:	e00d      	b.n	8008f72 <__sflush_r+0xae>
 8008f56:	2301      	movs	r3, #1
 8008f58:	4628      	mov	r0, r5
 8008f5a:	47b0      	blx	r6
 8008f5c:	4602      	mov	r2, r0
 8008f5e:	1c50      	adds	r0, r2, #1
 8008f60:	d1c9      	bne.n	8008ef6 <__sflush_r+0x32>
 8008f62:	682b      	ldr	r3, [r5, #0]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d0c6      	beq.n	8008ef6 <__sflush_r+0x32>
 8008f68:	2b1d      	cmp	r3, #29
 8008f6a:	d001      	beq.n	8008f70 <__sflush_r+0xac>
 8008f6c:	2b16      	cmp	r3, #22
 8008f6e:	d11e      	bne.n	8008fae <__sflush_r+0xea>
 8008f70:	602f      	str	r7, [r5, #0]
 8008f72:	2000      	movs	r0, #0
 8008f74:	e022      	b.n	8008fbc <__sflush_r+0xf8>
 8008f76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f7a:	b21b      	sxth	r3, r3
 8008f7c:	e01b      	b.n	8008fb6 <__sflush_r+0xf2>
 8008f7e:	690f      	ldr	r7, [r1, #16]
 8008f80:	2f00      	cmp	r7, #0
 8008f82:	d0f6      	beq.n	8008f72 <__sflush_r+0xae>
 8008f84:	0793      	lsls	r3, r2, #30
 8008f86:	680e      	ldr	r6, [r1, #0]
 8008f88:	bf08      	it	eq
 8008f8a:	694b      	ldreq	r3, [r1, #20]
 8008f8c:	600f      	str	r7, [r1, #0]
 8008f8e:	bf18      	it	ne
 8008f90:	2300      	movne	r3, #0
 8008f92:	eba6 0807 	sub.w	r8, r6, r7
 8008f96:	608b      	str	r3, [r1, #8]
 8008f98:	f1b8 0f00 	cmp.w	r8, #0
 8008f9c:	dde9      	ble.n	8008f72 <__sflush_r+0xae>
 8008f9e:	6a21      	ldr	r1, [r4, #32]
 8008fa0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008fa2:	4643      	mov	r3, r8
 8008fa4:	463a      	mov	r2, r7
 8008fa6:	4628      	mov	r0, r5
 8008fa8:	47b0      	blx	r6
 8008faa:	2800      	cmp	r0, #0
 8008fac:	dc08      	bgt.n	8008fc0 <__sflush_r+0xfc>
 8008fae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008fb6:	81a3      	strh	r3, [r4, #12]
 8008fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8008fbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fc0:	4407      	add	r7, r0
 8008fc2:	eba8 0800 	sub.w	r8, r8, r0
 8008fc6:	e7e7      	b.n	8008f98 <__sflush_r+0xd4>
 8008fc8:	20400001 	.word	0x20400001

08008fcc <_fflush_r>:
 8008fcc:	b538      	push	{r3, r4, r5, lr}
 8008fce:	690b      	ldr	r3, [r1, #16]
 8008fd0:	4605      	mov	r5, r0
 8008fd2:	460c      	mov	r4, r1
 8008fd4:	b913      	cbnz	r3, 8008fdc <_fflush_r+0x10>
 8008fd6:	2500      	movs	r5, #0
 8008fd8:	4628      	mov	r0, r5
 8008fda:	bd38      	pop	{r3, r4, r5, pc}
 8008fdc:	b118      	cbz	r0, 8008fe6 <_fflush_r+0x1a>
 8008fde:	6a03      	ldr	r3, [r0, #32]
 8008fe0:	b90b      	cbnz	r3, 8008fe6 <_fflush_r+0x1a>
 8008fe2:	f7fe f9cf 	bl	8007384 <__sinit>
 8008fe6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d0f3      	beq.n	8008fd6 <_fflush_r+0xa>
 8008fee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008ff0:	07d0      	lsls	r0, r2, #31
 8008ff2:	d404      	bmi.n	8008ffe <_fflush_r+0x32>
 8008ff4:	0599      	lsls	r1, r3, #22
 8008ff6:	d402      	bmi.n	8008ffe <_fflush_r+0x32>
 8008ff8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008ffa:	f7fe fbbe 	bl	800777a <__retarget_lock_acquire_recursive>
 8008ffe:	4628      	mov	r0, r5
 8009000:	4621      	mov	r1, r4
 8009002:	f7ff ff5f 	bl	8008ec4 <__sflush_r>
 8009006:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009008:	07da      	lsls	r2, r3, #31
 800900a:	4605      	mov	r5, r0
 800900c:	d4e4      	bmi.n	8008fd8 <_fflush_r+0xc>
 800900e:	89a3      	ldrh	r3, [r4, #12]
 8009010:	059b      	lsls	r3, r3, #22
 8009012:	d4e1      	bmi.n	8008fd8 <_fflush_r+0xc>
 8009014:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009016:	f7fe fbb1 	bl	800777c <__retarget_lock_release_recursive>
 800901a:	e7dd      	b.n	8008fd8 <_fflush_r+0xc>

0800901c <__swhatbuf_r>:
 800901c:	b570      	push	{r4, r5, r6, lr}
 800901e:	460c      	mov	r4, r1
 8009020:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009024:	2900      	cmp	r1, #0
 8009026:	b096      	sub	sp, #88	@ 0x58
 8009028:	4615      	mov	r5, r2
 800902a:	461e      	mov	r6, r3
 800902c:	da0d      	bge.n	800904a <__swhatbuf_r+0x2e>
 800902e:	89a3      	ldrh	r3, [r4, #12]
 8009030:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009034:	f04f 0100 	mov.w	r1, #0
 8009038:	bf14      	ite	ne
 800903a:	2340      	movne	r3, #64	@ 0x40
 800903c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009040:	2000      	movs	r0, #0
 8009042:	6031      	str	r1, [r6, #0]
 8009044:	602b      	str	r3, [r5, #0]
 8009046:	b016      	add	sp, #88	@ 0x58
 8009048:	bd70      	pop	{r4, r5, r6, pc}
 800904a:	466a      	mov	r2, sp
 800904c:	f000 f848 	bl	80090e0 <_fstat_r>
 8009050:	2800      	cmp	r0, #0
 8009052:	dbec      	blt.n	800902e <__swhatbuf_r+0x12>
 8009054:	9901      	ldr	r1, [sp, #4]
 8009056:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800905a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800905e:	4259      	negs	r1, r3
 8009060:	4159      	adcs	r1, r3
 8009062:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009066:	e7eb      	b.n	8009040 <__swhatbuf_r+0x24>

08009068 <__smakebuf_r>:
 8009068:	898b      	ldrh	r3, [r1, #12]
 800906a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800906c:	079d      	lsls	r5, r3, #30
 800906e:	4606      	mov	r6, r0
 8009070:	460c      	mov	r4, r1
 8009072:	d507      	bpl.n	8009084 <__smakebuf_r+0x1c>
 8009074:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009078:	6023      	str	r3, [r4, #0]
 800907a:	6123      	str	r3, [r4, #16]
 800907c:	2301      	movs	r3, #1
 800907e:	6163      	str	r3, [r4, #20]
 8009080:	b003      	add	sp, #12
 8009082:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009084:	ab01      	add	r3, sp, #4
 8009086:	466a      	mov	r2, sp
 8009088:	f7ff ffc8 	bl	800901c <__swhatbuf_r>
 800908c:	9f00      	ldr	r7, [sp, #0]
 800908e:	4605      	mov	r5, r0
 8009090:	4639      	mov	r1, r7
 8009092:	4630      	mov	r0, r6
 8009094:	f7ff f9ce 	bl	8008434 <_malloc_r>
 8009098:	b948      	cbnz	r0, 80090ae <__smakebuf_r+0x46>
 800909a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800909e:	059a      	lsls	r2, r3, #22
 80090a0:	d4ee      	bmi.n	8009080 <__smakebuf_r+0x18>
 80090a2:	f023 0303 	bic.w	r3, r3, #3
 80090a6:	f043 0302 	orr.w	r3, r3, #2
 80090aa:	81a3      	strh	r3, [r4, #12]
 80090ac:	e7e2      	b.n	8009074 <__smakebuf_r+0xc>
 80090ae:	89a3      	ldrh	r3, [r4, #12]
 80090b0:	6020      	str	r0, [r4, #0]
 80090b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090b6:	81a3      	strh	r3, [r4, #12]
 80090b8:	9b01      	ldr	r3, [sp, #4]
 80090ba:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80090be:	b15b      	cbz	r3, 80090d8 <__smakebuf_r+0x70>
 80090c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80090c4:	4630      	mov	r0, r6
 80090c6:	f000 f81d 	bl	8009104 <_isatty_r>
 80090ca:	b128      	cbz	r0, 80090d8 <__smakebuf_r+0x70>
 80090cc:	89a3      	ldrh	r3, [r4, #12]
 80090ce:	f023 0303 	bic.w	r3, r3, #3
 80090d2:	f043 0301 	orr.w	r3, r3, #1
 80090d6:	81a3      	strh	r3, [r4, #12]
 80090d8:	89a3      	ldrh	r3, [r4, #12]
 80090da:	431d      	orrs	r5, r3
 80090dc:	81a5      	strh	r5, [r4, #12]
 80090de:	e7cf      	b.n	8009080 <__smakebuf_r+0x18>

080090e0 <_fstat_r>:
 80090e0:	b538      	push	{r3, r4, r5, lr}
 80090e2:	4d07      	ldr	r5, [pc, #28]	@ (8009100 <_fstat_r+0x20>)
 80090e4:	2300      	movs	r3, #0
 80090e6:	4604      	mov	r4, r0
 80090e8:	4608      	mov	r0, r1
 80090ea:	4611      	mov	r1, r2
 80090ec:	602b      	str	r3, [r5, #0]
 80090ee:	f7f8 fa1d 	bl	800152c <_fstat>
 80090f2:	1c43      	adds	r3, r0, #1
 80090f4:	d102      	bne.n	80090fc <_fstat_r+0x1c>
 80090f6:	682b      	ldr	r3, [r5, #0]
 80090f8:	b103      	cbz	r3, 80090fc <_fstat_r+0x1c>
 80090fa:	6023      	str	r3, [r4, #0]
 80090fc:	bd38      	pop	{r3, r4, r5, pc}
 80090fe:	bf00      	nop
 8009100:	24000578 	.word	0x24000578

08009104 <_isatty_r>:
 8009104:	b538      	push	{r3, r4, r5, lr}
 8009106:	4d06      	ldr	r5, [pc, #24]	@ (8009120 <_isatty_r+0x1c>)
 8009108:	2300      	movs	r3, #0
 800910a:	4604      	mov	r4, r0
 800910c:	4608      	mov	r0, r1
 800910e:	602b      	str	r3, [r5, #0]
 8009110:	f7f8 fa1c 	bl	800154c <_isatty>
 8009114:	1c43      	adds	r3, r0, #1
 8009116:	d102      	bne.n	800911e <_isatty_r+0x1a>
 8009118:	682b      	ldr	r3, [r5, #0]
 800911a:	b103      	cbz	r3, 800911e <_isatty_r+0x1a>
 800911c:	6023      	str	r3, [r4, #0]
 800911e:	bd38      	pop	{r3, r4, r5, pc}
 8009120:	24000578 	.word	0x24000578

08009124 <_sbrk_r>:
 8009124:	b538      	push	{r3, r4, r5, lr}
 8009126:	4d06      	ldr	r5, [pc, #24]	@ (8009140 <_sbrk_r+0x1c>)
 8009128:	2300      	movs	r3, #0
 800912a:	4604      	mov	r4, r0
 800912c:	4608      	mov	r0, r1
 800912e:	602b      	str	r3, [r5, #0]
 8009130:	f7f8 fa24 	bl	800157c <_sbrk>
 8009134:	1c43      	adds	r3, r0, #1
 8009136:	d102      	bne.n	800913e <_sbrk_r+0x1a>
 8009138:	682b      	ldr	r3, [r5, #0]
 800913a:	b103      	cbz	r3, 800913e <_sbrk_r+0x1a>
 800913c:	6023      	str	r3, [r4, #0]
 800913e:	bd38      	pop	{r3, r4, r5, pc}
 8009140:	24000578 	.word	0x24000578

08009144 <memcpy>:
 8009144:	440a      	add	r2, r1
 8009146:	4291      	cmp	r1, r2
 8009148:	f100 33ff 	add.w	r3, r0, #4294967295
 800914c:	d100      	bne.n	8009150 <memcpy+0xc>
 800914e:	4770      	bx	lr
 8009150:	b510      	push	{r4, lr}
 8009152:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009156:	f803 4f01 	strb.w	r4, [r3, #1]!
 800915a:	4291      	cmp	r1, r2
 800915c:	d1f9      	bne.n	8009152 <memcpy+0xe>
 800915e:	bd10      	pop	{r4, pc}

08009160 <__assert_func>:
 8009160:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009162:	4614      	mov	r4, r2
 8009164:	461a      	mov	r2, r3
 8009166:	4b09      	ldr	r3, [pc, #36]	@ (800918c <__assert_func+0x2c>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	4605      	mov	r5, r0
 800916c:	68d8      	ldr	r0, [r3, #12]
 800916e:	b14c      	cbz	r4, 8009184 <__assert_func+0x24>
 8009170:	4b07      	ldr	r3, [pc, #28]	@ (8009190 <__assert_func+0x30>)
 8009172:	9100      	str	r1, [sp, #0]
 8009174:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009178:	4906      	ldr	r1, [pc, #24]	@ (8009194 <__assert_func+0x34>)
 800917a:	462b      	mov	r3, r5
 800917c:	f000 f842 	bl	8009204 <fiprintf>
 8009180:	f000 f852 	bl	8009228 <abort>
 8009184:	4b04      	ldr	r3, [pc, #16]	@ (8009198 <__assert_func+0x38>)
 8009186:	461c      	mov	r4, r3
 8009188:	e7f3      	b.n	8009172 <__assert_func+0x12>
 800918a:	bf00      	nop
 800918c:	2400003c 	.word	0x2400003c
 8009190:	08009559 	.word	0x08009559
 8009194:	08009566 	.word	0x08009566
 8009198:	08009594 	.word	0x08009594

0800919c <_calloc_r>:
 800919c:	b570      	push	{r4, r5, r6, lr}
 800919e:	fba1 5402 	umull	r5, r4, r1, r2
 80091a2:	b934      	cbnz	r4, 80091b2 <_calloc_r+0x16>
 80091a4:	4629      	mov	r1, r5
 80091a6:	f7ff f945 	bl	8008434 <_malloc_r>
 80091aa:	4606      	mov	r6, r0
 80091ac:	b928      	cbnz	r0, 80091ba <_calloc_r+0x1e>
 80091ae:	4630      	mov	r0, r6
 80091b0:	bd70      	pop	{r4, r5, r6, pc}
 80091b2:	220c      	movs	r2, #12
 80091b4:	6002      	str	r2, [r0, #0]
 80091b6:	2600      	movs	r6, #0
 80091b8:	e7f9      	b.n	80091ae <_calloc_r+0x12>
 80091ba:	462a      	mov	r2, r5
 80091bc:	4621      	mov	r1, r4
 80091be:	f7fe fa5f 	bl	8007680 <memset>
 80091c2:	e7f4      	b.n	80091ae <_calloc_r+0x12>

080091c4 <__ascii_mbtowc>:
 80091c4:	b082      	sub	sp, #8
 80091c6:	b901      	cbnz	r1, 80091ca <__ascii_mbtowc+0x6>
 80091c8:	a901      	add	r1, sp, #4
 80091ca:	b142      	cbz	r2, 80091de <__ascii_mbtowc+0x1a>
 80091cc:	b14b      	cbz	r3, 80091e2 <__ascii_mbtowc+0x1e>
 80091ce:	7813      	ldrb	r3, [r2, #0]
 80091d0:	600b      	str	r3, [r1, #0]
 80091d2:	7812      	ldrb	r2, [r2, #0]
 80091d4:	1e10      	subs	r0, r2, #0
 80091d6:	bf18      	it	ne
 80091d8:	2001      	movne	r0, #1
 80091da:	b002      	add	sp, #8
 80091dc:	4770      	bx	lr
 80091de:	4610      	mov	r0, r2
 80091e0:	e7fb      	b.n	80091da <__ascii_mbtowc+0x16>
 80091e2:	f06f 0001 	mvn.w	r0, #1
 80091e6:	e7f8      	b.n	80091da <__ascii_mbtowc+0x16>

080091e8 <__ascii_wctomb>:
 80091e8:	4603      	mov	r3, r0
 80091ea:	4608      	mov	r0, r1
 80091ec:	b141      	cbz	r1, 8009200 <__ascii_wctomb+0x18>
 80091ee:	2aff      	cmp	r2, #255	@ 0xff
 80091f0:	d904      	bls.n	80091fc <__ascii_wctomb+0x14>
 80091f2:	228a      	movs	r2, #138	@ 0x8a
 80091f4:	601a      	str	r2, [r3, #0]
 80091f6:	f04f 30ff 	mov.w	r0, #4294967295
 80091fa:	4770      	bx	lr
 80091fc:	700a      	strb	r2, [r1, #0]
 80091fe:	2001      	movs	r0, #1
 8009200:	4770      	bx	lr
	...

08009204 <fiprintf>:
 8009204:	b40e      	push	{r1, r2, r3}
 8009206:	b503      	push	{r0, r1, lr}
 8009208:	4601      	mov	r1, r0
 800920a:	ab03      	add	r3, sp, #12
 800920c:	4805      	ldr	r0, [pc, #20]	@ (8009224 <fiprintf+0x20>)
 800920e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009212:	6800      	ldr	r0, [r0, #0]
 8009214:	9301      	str	r3, [sp, #4]
 8009216:	f7ff fd3d 	bl	8008c94 <_vfiprintf_r>
 800921a:	b002      	add	sp, #8
 800921c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009220:	b003      	add	sp, #12
 8009222:	4770      	bx	lr
 8009224:	2400003c 	.word	0x2400003c

08009228 <abort>:
 8009228:	b508      	push	{r3, lr}
 800922a:	2006      	movs	r0, #6
 800922c:	f000 f82c 	bl	8009288 <raise>
 8009230:	2001      	movs	r0, #1
 8009232:	f7f8 f92b 	bl	800148c <_exit>

08009236 <_raise_r>:
 8009236:	291f      	cmp	r1, #31
 8009238:	b538      	push	{r3, r4, r5, lr}
 800923a:	4605      	mov	r5, r0
 800923c:	460c      	mov	r4, r1
 800923e:	d904      	bls.n	800924a <_raise_r+0x14>
 8009240:	2316      	movs	r3, #22
 8009242:	6003      	str	r3, [r0, #0]
 8009244:	f04f 30ff 	mov.w	r0, #4294967295
 8009248:	bd38      	pop	{r3, r4, r5, pc}
 800924a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800924c:	b112      	cbz	r2, 8009254 <_raise_r+0x1e>
 800924e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009252:	b94b      	cbnz	r3, 8009268 <_raise_r+0x32>
 8009254:	4628      	mov	r0, r5
 8009256:	f000 f831 	bl	80092bc <_getpid_r>
 800925a:	4622      	mov	r2, r4
 800925c:	4601      	mov	r1, r0
 800925e:	4628      	mov	r0, r5
 8009260:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009264:	f000 b818 	b.w	8009298 <_kill_r>
 8009268:	2b01      	cmp	r3, #1
 800926a:	d00a      	beq.n	8009282 <_raise_r+0x4c>
 800926c:	1c59      	adds	r1, r3, #1
 800926e:	d103      	bne.n	8009278 <_raise_r+0x42>
 8009270:	2316      	movs	r3, #22
 8009272:	6003      	str	r3, [r0, #0]
 8009274:	2001      	movs	r0, #1
 8009276:	e7e7      	b.n	8009248 <_raise_r+0x12>
 8009278:	2100      	movs	r1, #0
 800927a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800927e:	4620      	mov	r0, r4
 8009280:	4798      	blx	r3
 8009282:	2000      	movs	r0, #0
 8009284:	e7e0      	b.n	8009248 <_raise_r+0x12>
	...

08009288 <raise>:
 8009288:	4b02      	ldr	r3, [pc, #8]	@ (8009294 <raise+0xc>)
 800928a:	4601      	mov	r1, r0
 800928c:	6818      	ldr	r0, [r3, #0]
 800928e:	f7ff bfd2 	b.w	8009236 <_raise_r>
 8009292:	bf00      	nop
 8009294:	2400003c 	.word	0x2400003c

08009298 <_kill_r>:
 8009298:	b538      	push	{r3, r4, r5, lr}
 800929a:	4d07      	ldr	r5, [pc, #28]	@ (80092b8 <_kill_r+0x20>)
 800929c:	2300      	movs	r3, #0
 800929e:	4604      	mov	r4, r0
 80092a0:	4608      	mov	r0, r1
 80092a2:	4611      	mov	r1, r2
 80092a4:	602b      	str	r3, [r5, #0]
 80092a6:	f7f8 f8e1 	bl	800146c <_kill>
 80092aa:	1c43      	adds	r3, r0, #1
 80092ac:	d102      	bne.n	80092b4 <_kill_r+0x1c>
 80092ae:	682b      	ldr	r3, [r5, #0]
 80092b0:	b103      	cbz	r3, 80092b4 <_kill_r+0x1c>
 80092b2:	6023      	str	r3, [r4, #0]
 80092b4:	bd38      	pop	{r3, r4, r5, pc}
 80092b6:	bf00      	nop
 80092b8:	24000578 	.word	0x24000578

080092bc <_getpid_r>:
 80092bc:	f7f8 b8ce 	b.w	800145c <_getpid>

080092c0 <_init>:
 80092c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092c2:	bf00      	nop
 80092c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092c6:	bc08      	pop	{r3}
 80092c8:	469e      	mov	lr, r3
 80092ca:	4770      	bx	lr

080092cc <_fini>:
 80092cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092ce:	bf00      	nop
 80092d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092d2:	bc08      	pop	{r3}
 80092d4:	469e      	mov	lr, r3
 80092d6:	4770      	bx	lr
